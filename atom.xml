<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zxj</title>
  
  <subtitle>Viva La Vida</subtitle>
  <link href="https://awslzhang.top/atom.xml" rel="self"/>
  
  <link href="https://awslzhang.top/"/>
  <updated>2021-01-04T14:06:37.882Z</updated>
  <id>https://awslzhang.top/</id>
  
  <author>
    <name>Xiangjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flink状态编程和容错机制</title>
    <link href="https://awslzhang.top/2021/01/02/Flink%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    <id>https://awslzhang.top/2021/01/02/Flink%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</id>
    <published>2021-01-02T10:06:02.000Z</published>
    <updated>2021-01-04T14:06:37.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flink状态管理"><a href="#Flink状态管理" class="headerlink" title="Flink状态管理"></a>Flink状态管理</h1><p>流式计算分为<strong>无状态和有状态</strong>两种情况。无状态的计算观察每个独立事件，并根据最后一个事件输出结果。例如，流处理应用程序从传感器接收温度读数，并在温度超过90度时发出警告。有状态的计算则会基于多个事件输出结果。以下是一些例子。</p><ul><li>所有类型的窗口。例如，计算过去一小时的平均温度，就是有状态的计算。</li><li>所有用于复杂事件处理的状态机。例如，若在一分钟内收到两个相差20度以上的温度读数，则发出警告，这是有状态的计算。</li><li>流与流之间的所有关联操作，以及流与静态表或动态表之间的关联操作，都是有状态的计算。</li></ul><p>下图展示了无状态流处理和有状态流处理的主要区别。无状态流处理分别接收每条数据记录(图中的黑条)，<font color="red">然后根据最新输入的数据生成输出数据(白条)</font>。有状态流处理会维护状态(根据每条输入记录进行更新)，<font color="red">并基于最新输入的记录和当前的状态值生成输出记录(灰条)。</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210103155758486.png" alt="image-20210103155758486"></p><p>上图中输入数据由黑条表示。无状态流处理每次只转换一条输入记录，并且仅根据最新的输入记录输出结果(白条)。有状态 流处理维护所有已处理记录的状态值，并根据每条新输入的记录更新状态，因此输出记录(灰条)反映的是综合考虑多个事件之后的结果。</p><p>尽管无状态的计算很重要，但是流处理对有状态的计算更感兴趣。事实上，正确地实现有状态的计算比实现无状态的计算难得多。旧的流处理系统并不支持有状态的计算，而新一代的流处理系统则将状态及其正确性视为重中之重.</p><h2 id="有状态的算子和应用程序"><a href="#有状态的算子和应用程序" class="headerlink" title="有状态的算子和应用程序"></a>有状态的算子和应用程序</h2><p>Flink内置的很多算子，数据源source，数据存储sink都是有状态的，流中的数据都是buffer records，会保存一定的元素或者元数据。例如: ProcessWindowFunction会缓存输入流的数据，ProcessFunction会保存设置的定时器信息等等。</p><p>在Flink中，<font color="red"><strong>状态始终与特定算子相关联</strong></font>。总的来说，有两种类型的状态：</p><ol><li>算子状态（operator state）</li><li>键控状态（keyed state）</li></ol><blockquote><p>即Flink的状态是由算子维护的，每个算子的状态都是本算子的，其他算子访问不到本算子的。</p><p>算子状态和键控状态的区别就是：</p><ol><li>算子状态的状态是和算子绑定的，算子的状态的访问权限是此算子处理的所有数据。一个算子一个状态。并行度增加，算子就增加，状态就增加</li><li>键控状态的状态是和key绑定的，访问权限是相应key的数据才能访问到对应key的状态。</li></ol></blockquote><hr><p>Flink的状态说白了就相当于本地变量，但是Flink提供了对它的管理：一致性、故障、高效率存储访问。所以当程序故障时，Flink的管理机制可以实现从远程读取之前保存的状态继续开始计算，而不是状态丢失重新计算。</p><h3 id="算子状态（operator-state）"><a href="#算子状态（operator-state）" class="headerlink" title="算子状态（operator state）"></a>算子状态（operator state）</h3><p>算子状态的作用范围限定为算子任务。这意味着由<strong>同一并行任务所处理的所有数据都可以访问到相同的状态</strong>，状态对于同一任务而言是共享的。算子状态不能由相同或不同算子的另一个任务访问。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210103161006283.png" alt="image-20210103161006283"></p><p>结合图来讲就是因为并行度task的多个任务，不同的任务之间的状态不能访问。而相同任务、分区中被处理的数据都可以访问本任务、分区中的状态。</p><h4 id="状态数据结构"><a href="#状态数据结构" class="headerlink" title="状态数据结构"></a>状态数据结构</h4><p>Flink为算子状态提供三种基本数据结构：</p><ol><li>列表状态（List state）：将状态表示为一组数据的列表</li><li>联合列表状态（Union list state）也将状态表示为数据的列表。它与常规列表状态的区别在于，在发生故障时，或者从保存点（savepoint）启动应用程序时如何恢复。</li><li>广播状态（Broadcast state）：如果一个算子有多项任务，而它的每项任务状态又都相同，那么这种特殊情况最适合应用广播状态。</li></ol><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>只需要实现<code>ListCheckpointed</code>接口即可，并实现快照存储和故障恢复的方法。其余就是和使用正常本地变量一致。</p><hr><p>一般来讲，Map算子进行的都是无状态的计算，这次我们通过状态变量通过map的方式来展现，通过计算元素个数，这个计算和之前的数据有联系，所以需要Flink状态变量</p><p>当然可以直接使用本地变量，算子状态的状态变量和本地变量本身几乎没什么区别，但是如果使用状态变量的话，对于程序的checkpoint保存的异常恢复有效果，所以请看例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.transform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Collections</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.<span class="type">MapFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.checkpoint.<span class="type">ListCheckpointed</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.example.flink.source.&#123;<span class="type">SensorReading</span>, <span class="type">SensorSource</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">OperatorState</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    value.map(<span class="keyword">new</span> <span class="type">MyMap</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyMap</span> <span class="keyword">extends</span> <span class="title">MapFunction</span>[<span class="type">SensorReading</span>, <span class="type">Integer</span>] <span class="keyword">with</span> <span class="title">ListCheckpointed</span>[<span class="type">Integer</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> count: <span class="type">Integer</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(t: <span class="type">SensorReading</span>): <span class="type">Integer</span> = &#123;</span><br><span class="line">      count = count + <span class="number">1</span></span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容错恢复时，找到之前存储的变量</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">restoreState</span></span>(list: util.<span class="type">List</span>[<span class="type">Integer</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">import</span> collection.<span class="type">JavaConverters</span>._</span><br><span class="line">      list.asScala.foreach(count += _)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对状态变量进行快照存储</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">snapshotState</span></span>(l: <span class="type">Long</span>, l1: <span class="type">Long</span>): util.<span class="type">List</span>[<span class="type">Integer</span>] = <span class="type">Collections</span>.singletonList(count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键控状态（keyed-state）"><a href="#键控状态（keyed-state）" class="headerlink" title="键控状态（keyed state）"></a>键控状态（keyed state）</h3><p>键控状态是根据输入数据流中<strong>定义的键（key）来维护和访问的</strong>。<strong>Flink为每个键值维护一个状态实例，并将具有相同键的所有数据，都分区到同一个算子任务中，这个任务会维护和处理这个key对应的状态。</strong>当任务处理一条数据时，它会自动将状态的访问范围限定为当前数据的key。<strong>因此，具有相同key的所有数据都会访问相同的状态</strong>。Keyed State很类似于一个分布式的key-value map数据结构，<font color="red"><strong>只能用于KeyedStream（keyBy算子处理之后）。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210103161339404.png" alt="image-20210103161339404"></p><h4 id="状态数据结构-1"><a href="#状态数据结构-1" class="headerlink" title="状态数据结构"></a>状态数据结构</h4><p>Flink的Keyed State支持以下数据类型：</p><ol><li>ValueState[T]保存单个的值，值的类型为T。</li><li>ListState[T]保存一个列表，列表里的元素的数据类型为T。基本操作如下：</li><li> MapState[K, V]保存Key-Value对。</li><li>ReducingState[T]</li><li>AggregatingState[I, O]</li></ol><h4 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h4><p>其实在Flink时间语义一文中已经使用了键控状态，即1S内温度连续上升报警示例。</p><p>在代码中这样使用：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210103163621295.png" alt="image-20210103163621295"></p><p>大家可能注意到：</p><ol><li><code>getRuntimeContext</code>方法，即如果使用键控状态的话，<strong>必须继承富函数</strong></li><li>键控状态的声明和赋值不是在一起的，这是因为如果声明和赋值在一起，那么变量初始化时就要调用<code>getRuntimeContext</code>，但是在没有运行到这里时，<code>getRuntimeContext</code>是没有值的，所以这时有两种解决办法：<ol><li>使用scala的lazy懒加载</li><li>赋值内容写在open()方法中</li></ol></li></ol><p>继上面的例子，通过键控状态实现，<strong>这时计算的是每个key的数量</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.transform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.<span class="type">RichMapFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.&#123;<span class="type">ValueState</span>, <span class="type">ValueStateDescriptor</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala.typeutils.<span class="type">Types</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.example.flink.source.&#123;<span class="type">SensorReading</span>, <span class="type">SensorSource</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">KeyedState</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>).keyBy(_.id)</span><br><span class="line">    value.map(<span class="keyword">new</span> <span class="type">MyMap</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyMap</span> <span class="keyword">extends</span> <span class="title">RichMapFunction</span>[<span class="type">SensorReading</span>, <span class="type">Integer</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">private</span> <span class="keyword">val</span> count: <span class="type">ValueState</span>[<span class="type">Integer</span>] = getRuntimeContext.getState(<span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Integer</span>](<span class="string">&quot;count&quot;</span>, <span class="type">Types</span>.of[<span class="type">Integer</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(t: <span class="type">SensorReading</span>): <span class="type">Integer</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (count.value()==<span class="literal">null</span>) count.update(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">val</span> integer: <span class="type">Integer</span> = count.value() + <span class="number">1</span></span><br><span class="line">      count.update(integer)</span><br><span class="line">      integer</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态后端"><a href="#状态后端" class="headerlink" title="状态后端"></a>状态后端</h2><p>状态的存储、访问以及维护，由一个可插入的组件决定，这个组件就 叫做状态后端（state backend）</p><p>状态后端主要负责两件事：本地的状态管理，以及将检查点 （checkpoint）状态写入远程存储</p><p>由于有效的状态访问对于处理数据的低延迟至关重要，<strong>因此每个并行 任务都会在本地维护其状态</strong>，以确保快速的状态访问</p><h3 id="选择一个状态后端"><a href="#选择一个状态后端" class="headerlink" title="选择一个状态后端"></a><strong>选择一个状态后端</strong></h3><h4 id="MemoryStateBackend"><a href="#MemoryStateBackend" class="headerlink" title="MemoryStateBackend"></a><em>MemoryStateBackend</em></h4><p>内存级的状态后端，会将键控状态作为内存中的对象进行管理，将它们存储在 TaskManager 的 内存上，而将 checkpoint 存储在 JobManager 的内存 中 </p><p>特点：快速、低延迟，但不稳定</p><h4 id="FsStateBackend"><a href="#FsStateBackend" class="headerlink" title="FsStateBackend"></a><em>FsStateBackend</em></h4><p>将 checkpoint 存到远程的持久化文件系统（FileSystem）上，而对于本地状 态，跟 MemoryStateBackend 一样，也会存在 TaskManager 的内存上</p><p> 同时拥有内存级的本地访问速度，和更好的容错保证</p><h4 id="RocksDBStateBackend"><a href="#RocksDBStateBackend" class="headerlink" title="RocksDBStateBackend"></a><em>RocksDBStateBackend</em></h4><p>将所有状态序列化后，存入本地的 RocksDB 中存储</p><p>TaskManager的状态只是进行缓存，并不真正的存在于内存</p><h3 id="如何使用-2"><a href="#如何使用-2" class="headerlink" title="如何使用"></a>如何使用</h3><p><code>env.setStateBackend(new FsStateBackend(&quot;&quot;))</code></p><p>Flink官方可以支持<em>FsStateBackend</em>、<em>MemoryStateBackend</em>，第三个也支持，不过需要导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-statebackend-rocksdb_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="状态一致性"><a href="#状态一致性" class="headerlink" title="状态一致性"></a>状态一致性</h2><p>当在分布式系统中引入状态时，自然也引入了一致性问题。只听状态一致性有点难听懂，它本质就是<font color="red"><strong>成功处理故障并恢复前后的结果的正确性级别</strong></font>。</p><p>也就是说在成功处理故障并恢复之后得到的结果，与没有发生任何故障时得到的结果相比，前者到底有多正确？举例来说，假设要对最近一小时登录的用户计数。在系统经历故障之后，计数结果是多少？如果有偏差，是有漏掉的计数（最多一次）还是重复计数（最少一次）？</p><h3 id="一致性级别"><a href="#一致性级别" class="headerlink" title="一致性级别"></a>一致性级别</h3><p>在流处理中，一致性可以分为3个级别：</p><ol><li><code>at-most-once</code>: 这其实是没有正确性保障的委婉说法——故障发生之后，计数结果可能丢失。同样的还有udp。</li><li><code>at-least-once</code>: 这表示计数结果可能大于正确值，但绝不会小于正确值。也就是说，计数程序在发生故障后可能多算，但是绝不会少算。</li><li><code>exactly-once</code>: 这指的是系统保证在发生故障后得到的计数结果与正确值一致。</li></ol><p>Flink的一个重大价值在于，<strong>它既保证了exactly-once，也具有低延迟和高吞吐的处理能力。</strong></p><h3 id="端到端的一致性🔺"><a href="#端到端的一致性🔺" class="headerlink" title="端到端的一致性🔺"></a>端到端的一致性🔺</h3><p>目前我们看到的一致性保证都是由流处理器实现的，<strong>也就是说都是在 Flink 流处理器内部保证的</strong>；而在真实应用中，流处理应用除了流处理器以外还包含了数据源（例如 Kafka）和输出到持久化系统。</p><p>即端到端一致性指的是从Source-Flink内部程序-Sink持久化系统，状态的一致性即结果的正确性贯穿了整个流处理应用的始终。</p><p>每一个组件都保证了它自己的一致性，<font color="red">整个端到端的一致性级别取决于所有组件中一致性最弱的组件</font>。具体可以划分如下：</p><ul><li>内部保证 —— <strong>依赖checkpoint</strong></li><li>source 端 —— 需要外部源<strong>可重设数据的读取位置</strong></li><li>sink 端 —— 需要保证从故障恢复时，<strong>数据不会重复写入外部系统</strong></li></ul><p>而对于sink端，又有两种具体的实现方式：</p><ol><li>幂等（Idempotent）写入。</li><li>事务性（Transactional）写入。</li></ol><h4 id="幂等写入"><a href="#幂等写入" class="headerlink" title="幂等写入"></a>幂等写入</h4><p>所谓幂等操作，是说一个操作，可以重复执行很多次，但只导致一次结果更改，也就是说，后面再重复执行就不起作用了。</p><p>但是它的结果会有一个渐变的流程，例如求最大温度：</p><p>1-&gt;2-&gt;10，此时故障从上一检查点处重新计算，2-&gt;10-&gt;12。最终的SInk数据流为1-&gt;2-&gt;10-&gt;2-&gt;10-&gt;12。虽然最终结果无误，但是流程看起来不好，如果这些数据要实时展示，则会给人误解。</p><h4 id="事务性写入🔺"><a href="#事务性写入🔺" class="headerlink" title="事务性写入🔺"></a>事务性写入🔺</h4><p>需要构建事务来写入外部系统，构建的事务对应着 checkpoint，等到 checkpoint 真正完成的时候，才把所有对应的结果写入 sink 系统中。</p><p>对于事务性写入，具体又有两种实现方式：预写日志（WAL）和两阶段提交（2PC）。DataStream API 提供了<code>GenericWriteAheadSink</code>模板类和<code>TwoPhaseCommitSinkFunction </code>接口，可以方便地实现这两种方式的事务性写入。</p><blockquote><p>预写日志（WAL）并不是真正的<code>exactly-once</code>，当批量写入Sink时，如果中途出错，从checkpoint回放数据，则会导致数据重复插入</p><p>两阶段提交（2PC）才是真正的<code>exactly-once</code>，但是它需要写入的系统支持事务，并且事务的超时时间最好和checkpoint的超时时间一致。</p><p>[两阶段提交保证ExactlyOnce](#Exactly-once 两阶段提交)</p></blockquote><p><strong>两阶段提交（2PC）</strong></p><ul><li>对于每个 checkpoint，sink 任务会启动一个事务，并将接下来所有 接收的数据添加到事务里</li><li>然后将这些数据写入外部 sink 系统，但不提交它们 —— 这时只是 “预提交”</li><li>当它收到 checkpoint 完成的通知时，它才正式提交事务，实现结果 的真正写入</li><li>这种方式真正实现了 exactly-once，它需要一个提供事务支持的外部 sink 系统。Flink 提供了 TwoPhaseCommitSinkFunction 接口</li></ul><h3 id="不同-Source-和-Sink-的一致性保证"><a href="#不同-Source-和-Sink-的一致性保证" class="headerlink" title="不同 Source 和 Sink 的一致性保证"></a>不同 Source 和 Sink 的一致性保证</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104211430912.png" alt="image-20210104211430912"></p><h3 id="Flink-Kafka-端到端状态一致性的保证"><a href="#Flink-Kafka-端到端状态一致性的保证" class="headerlink" title="Flink+Kafka 端到端状态一致性的保证"></a>Flink+Kafka 端到端状态一致性的保证</h3><ul><li>内部 —— 利用 checkpoint 机制，把状态存盘，发生故障的时候以恢 复，保证内部的状态一致性</li><li>source —— kafka consumer 作为 source，可以将偏移量保存下来， 如果后续任务出现了故障，恢复的时候可以由连接器重置偏移量，重新 消费数据，保证一致性</li><li>sink —— kafka producer 作为sink，采用两阶段提交 sink，需要实现 一个 TwoPhaseCommitSinkFunction</li></ul><h1 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h1><p>Flink具体如何保证exactly-once呢? 它使用一种被称为”检查点”（checkpoint）的特性，在出现故障时将系统重置回正确状态。</p><p>说到容错机制，就是Flink应用程序在遇到问题时的计算结果是否还正确的问题。</p><p><strong>Flink容错机制的核心就是应用状态的一致性检查点</strong>，它是通过应用状态的一致性检查点来实现故障恢复的！</p><p>有状态流应用的一致检查点，其实就是所有任务的状态，在某个时间点的一份 拷贝（一份快照）；<font color="red"><strong>这个时间点，应该是所有任务都恰好处理完一个相同的输 入数据的时候</strong>，而不是同一时刻同时存储各个算子的状态</font>。</p><blockquote><p>如果不是这样必然会导致故障时有的算子计算了数据n有的没有计算，那么故障恢复时数据n还要被重放吗，补充放之前没有计算的算子丢失了此数据，重放的话之前计算了此数据的算子重复计算了此数据。</p></blockquote><h2 id="从检查点恢复状态"><a href="#从检查点恢复状态" class="headerlink" title="从检查点恢复状态"></a>从检查点恢复状态</h2><p>在执行流应用程序期间，Flink 会定期保存状态的一致检查点</p><p>如果发生故障， Flink 将会使用最近的检查点来一致恢复应用程序的状态，并 重新启动处理流程：</p><blockquote><p>遇到故障之后，第一步就是重启应用</p></blockquote><blockquote><p>第二步是从 checkpoint 中读取状态，将状态重置</p><p>从检查点重新启动应用程序后，其内部状态与检查点完成时的状态完全相同</p></blockquote><blockquote><p>第三步：开始消费并处理检查点到发生故障之间的所有数据</p><p>这种检查点的保存和恢复机制可以为应用程序状态提供<strong>“精确一次” （exactly-once）的一致性</strong>，因为所有算子都会保存检查点并恢复其所有状 态，这样一来所有的输入流就都会被重置到检查点完成时的位置（但是需要Source的组件支持数据回放，如果是sock流的话就GG了）</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104212513441.png" alt="image-20210104212513441"></p><h2 id="检查点的实现算法🔺"><a href="#检查点的实现算法🔺" class="headerlink" title="检查点的实现算法🔺"></a>检查点的实现算法🔺</h2><p>检查点的实现算法有：</p><ol><li>暂停应用，保存状态到检查点，再重新恢复应用（Flink不是这一种）</li><li>异步，基于 Chandy-Lamport 算法的分布式快照，将检查点的保存和数据处理分离开，不暂停整个应用（Flink）</li></ol><blockquote><p>即每个算子都单独的去保存状态到状态后端，在算子在获取到检查点屏障时，直接将状态更新到状态后端，然后继续计算后面的数据，而检查点屏障也发送给后面的算子，后面的算子也和前面算子的处理逻辑一样，所以同一检查点的各个算子的状态并不是同一时刻保存到状态后端的。</p></blockquote><p><strong>Flink 检查点算法</strong></p><p>检查点分界线（Checkpoint Barrier）</p><ul><li>Flink 的检查点算法用到了一种称为<strong>分界线（barrier）</strong>的特殊数据形式（类似于WaterMark）， 用来把一条流上<strong>数据按照不同的检查点分开</strong></li><li><strong>分界线之前到来的数据导致的状态更改，都会被包含在当前分界线所属 的检查点中；而基于分界线之后的数据导致的所有更改，就会被包含在 之后的检查点中</strong></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>现在是一个有两个输入流的应用程序，用并行的两个 Source 任务来读取</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104213222043.png" alt="image-20210104213222043"></p><p>然后由JobManager协调发出给所有并行的Source任务发送一条带有新检查点 ID 的消息，通过这 种方式来启动检查点</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104213323571.png" alt="image-20210104213323571"></p><p>数据源将它们的状态写入检查点，并发出一个检查点 barrier。状态后端在状态存入检查点之后，会返回通知给 source 任务，source 任务就会 向 JobManager 确认检查点完成。</p><p>例如下图，Source1、Source2在经过Barrier后，直接将状态发送到状态后端。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104213517551.png" alt="image-20210104213517551"></p><p>但是，由于并行度，Barrier的传递也是和WaterMark类似的，<font color="red">都是广播的方式发送给下游所有算子</font>。<font color="red">下游算子接收到上游所有的Barrier后</font>才开始将当前状态发送给StateBackend。<strong>这被称为分界线对齐</strong></p><p>既然下游算子接收到上游的所有Barrier后才开始保存状态，那就必然面临着Barrier到达先后的问题，如下图<code>Sum Even</code>需要接收到蓝2与黄2才能保存状态。</p><ol><li>但是如果此时的到达顺序为蓝2，Source1的数据4，黄2；则Source1的数据4不会被加入状态而是被缓存</li><li>但是如果此时的到达顺序为蓝2，Source2的数据4，黄2；则Source2的数据4会被加入状态</li></ol><blockquote><p>对于barrier已经到达的分区，继续到达的数据会被缓存</p><p>而barrier尚未到达的分区，数据会被正常处理</p><hr><p>因为对于barrier已经到达的分区，如果继续计算加入状态的话，当检查点故障恢复时继续加入的数据会被重放，再次加入状态，就导致了这个数据被计算了2次，就不是exactly once了</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104214139282.png" alt="image-20210104214139282"></p><p>当收到所有输入分区的 barrier 时，任务就将其状态保存到状态后端的检查点中， 然后将 barrier 继续向下游转发。向下游转发检查点 barrier 后，任务继续正常的数据处理</p><p>Sink 任务向 JobManager 确认状态保存到 checkpoint 完毕</p><p>当所有任务都确认已成功将状态保存到检查点时，检查点就真正完成了</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104214755905.png" alt="image-20210104214755905"></p><h2 id="保存点"><a href="#保存点" class="headerlink" title="保存点"></a>保存点</h2><p>是Flink特有的功能，它与检查点的区别就是一个是手动触发的；一个是JobManager周期性触发的。</p><p>保存点就是自定义的镜像保存功能，将数据保存到指定地方。可以通过数据启动程序</p><p><strong>特点：</strong></p><ol><li>原则上，创建保存点使用的算法与检查点完全相同，因此保存点可以认 为就是具有一些额外元数据的检查点</li><li>Flink不会自动创建保存点，因此用户（或者外部调度程序）必须明确地 触发创建操作</li></ol><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><strong>1. 有计划的备份</strong></p><p><strong>2. Flink版本迁移</strong></p><p>Flink升级时，之前的Flink程序不可能重启，这样以前计算的数据被丢失是不被允许的，在Flink升级前设置一个保存点，然后FLink版本更新后，使用新版Flink命令开启Flink应用程序通过保存点加载数据，做到数据不丢失</p><p><strong>3. 暂停和重启应用</strong></p><p>资源不充足时，停调不重要的任务并添加保存点。待资源充足时再次开始并加载之前数据。</p><h2 id="容错机制的开启🔺"><a href="#容错机制的开启🔺" class="headerlink" title="容错机制的开启🔺"></a>容错机制的开启🔺</h2><p><strong>1. 检查点默认不开启，手动开启</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env.enableCheckpointing(<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>参数为检查点的间隔，每5000ms产生一个检查点</p><p><strong>2. 添加状态后端组件，指定检查点保存位置</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env.setStateBackend(<span class="keyword">new</span> <span class="type">FsStateBackend</span>(<span class="string">&quot;file:///。。。。&quot;</span>))</span><br></pre></td></tr></table></figure><hr><p>Checkpoint的设置：</p><ol><li><code>env.getCheckpointConfig.setCheckpointTimeout(60000)</code>：检查点超时时间</li><li><code>env.getCheckpointConfig.setMaxConcurrentCheckpoints(2)</code>：同时存在的保存点</li><li><code>env.getCheckpointConfig.setMinPauseBetweenCheckpoints(100)</code>：上一检查点结束后和下一检查点产生前的最小等待时间；<strong>如果在此等待时间内正好由于检查点时间间隔该产生下一检查点了，则下一检查点的产生时间变更为最小等待时间过去之后。</strong></li></ol><h2 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h2><p>Flink程序故障时，重启并不能解决一切问题。那么有效的重启策略就是有必要的。</p><p>设置重启策略：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env.setRestartStrategy()</span><br></pre></td></tr></table></figure><p>有下面几个策略：</p><ol><li>不重启</li><li>回滚重启：由资源管理器决定</li><li>固定延迟重启：可设置重启次数和重启间隔</li><li>失败率重启：可设置重启次数、重启间隔、指定的时间之内</li></ol><h1 id="Exactly-once-两阶段提交"><a href="#Exactly-once-两阶段提交" class="headerlink" title="Exactly-once 两阶段提交"></a>Exactly-once 两阶段提交</h1><p>JobManager 协调各个 TaskManager 进行 checkpoint 存储</p><p>checkpoint保存在 StateBackend中，默认StateBackend是内存级的，也可以改 为文件级的进行持久化保存</p><p>当 checkpoint 启动时，JobManager 会将检查点分界线（barrier）注入数据流</p><p>barrier会在算子间传递下去</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104211640764.png" alt="image-20210104211640764"></p><p>每个算子会对当前的状态做个快照，保存到状态后端</p><p>checkpoint 机制可以保证内部的状态一致性</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104211739784.png" alt="image-20210104211739784"></p><p>每个内部的 transform 任务遇到 barrier 时，都会把状态存到 checkpoint 里</p><p>sink 任务首先把数据写入外部 kafka，这些数据都属于<strong>预提交的事务</strong>；遇到 barrier 时，<strong>把状态保存到状态后端，并开启新的预提交事务</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104211815182.png" alt="image-20210104211815182"></p><p>当所有算子任务的快照完成，也就是这次的 checkpoint 完成时，JobManager 会向所有任务发通知，确认这次 checkpoint 完成</p><p>sink 任务收到确认通知，正式提交之前的事务，kafka 中未确认数据改为“已确 认”</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104211830889.png" alt="image-20210104211830889"></p><p><strong>Exactly-once 两阶段提交步骤</strong></p><ol><li>第一条数据来了之后，开启一个 kafka 的事务（transaction），正常写入 kafka 分 区日志但标记为未提交，这就是“预提交” </li><li>jobmanager 触发 checkpoint 操作，barrier 从 source 开始向下传递，遇到 barrier 的算子将状态存入状态后端，并通知 jobmanager </li><li>sink 连接器收到 barrier，保存当前状态，存入 checkpoint，通知 jobmanager， 并开启下一阶段的事务，用于提交下个检查点的数据</li><li>jobmanager 收到所有任务的通知，发出确认信息，表示 checkpoint 完成</li><li> sink 任务收到 jobmanager 的确认信息，正式提交这段时间的数据</li><li> 外部kafka关闭事务，提交的数据可以正常消费了。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Flink状态管理&quot;&gt;&lt;a href=&quot;#Flink状态管理&quot; class=&quot;headerlink&quot; title=&quot;Flink状态管理&quot;&gt;&lt;/a&gt;Flink状态管理&lt;/h1&gt;&lt;p&gt;流式计算分为&lt;strong&gt;无状态和有状态&lt;/strong&gt;两种情况。无状态的计算观</summary>
      
    
    
    
    <category term="Flink" scheme="https://awslzhang.top/categories/Flink/"/>
    
    
    <category term="Flink" scheme="https://awslzhang.top/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink的时间语义和watermark</title>
    <link href="https://awslzhang.top/2020/12/23/Flink%E6%97%B6%E9%97%B4%E8%AF%AD%E4%B9%89%E5%92%8CWaterMark/"/>
    <id>https://awslzhang.top/2020/12/23/Flink%E6%97%B6%E9%97%B4%E8%AF%AD%E4%B9%89%E5%92%8CWaterMark/</id>
    <published>2020-12-23T10:59:07.000Z</published>
    <updated>2021-01-03T06:54:32.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们将介绍时间语义，并描述流中不同的时间概念。我们将讨论流处理器在乱序事件流的情况下如何提供准确的计算结果，以及我们如何处理历史事件流，如何在流中进行时间旅行。</p><blockquote><p>时间旅行。乱序事件流，更有古老数据的事件。</p></blockquote><h2 id="不同的时间语义"><a href="#不同的时间语义" class="headerlink" title="不同的时间语义"></a>不同的时间语义</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-23_19-05-44.png" alt="Snipaste_2020-12-23_19-05-44"></p><ul><li>Event Time：事件的创建事件。（除了未开源的Google DataFlow外，Flink是唯一支持事件时间的）</li><li>Ingestion Time：数据进入Flink的时间</li><li>Processing Time：执行操作算子的<strong>本地系统时间</strong>，与机器相关</li></ul><h2 id="更加形象的事件时间"><a href="#更加形象的事件时间" class="headerlink" title="更加形象的事件时间"></a>更加形象的事件时间</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-23_19-07-29.png" alt="Snipaste_2020-12-23_19-07-29"></p><p>1977-2015是处理时间、星球大战1-星球大战7是事件时间。</p><ul><li>不同的时间语义有不同的应用场合</li><li>我们往往更关心事件时间（Event Time）</li></ul><hr><h1 id="事件时间"><a href="#事件时间" class="headerlink" title="事件时间"></a>事件时间</h1><p>事件时间是流中的事件实际发生的时间。事件时间基于流中的事件所包含的时间戳。<font color="red">通常情况下，在事件进入流处理程序前，事件数据就已经包含了时间戳</font>。下图展示了事件时间窗口将会正确的将事件分发到窗口中去。可以如实反应事情是怎么发生的。即使事件可能存在延迟。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0213.png"></p><p>事件时间使得计算结果的过程不需要依赖处理数据的速度。基于事件时间的操作是可以预测的，而计算结果也是确定的。无论流处理程序处理流数据的速度快或是慢，无论事件到达流处理程序的速度快或是慢，事件时间窗口的计算结果都是一样的。因为它采用的是事件中的时间</p><p><font color="red">如果使用事件时间，即使碰到了事件乱序到达的情况，我们也可以保证结果的正确性</font>。还有，当我们在处理可以重播的流数据时，由于时间戳的确定性，我们可以快进过去。也就是说，我们可以重播一条流，然后分析历史数据，就好像流中的事件是实时发生一样。另外，我们可以快进历史数据来使我们的应用程序追上现在的事件，然后应用程序仍然是一个实时处理程序，而且业务逻辑不需要改变。</p><h2 id="代码中设置事件时间"><a href="#代码中设置事件时间" class="headerlink" title="代码中设置事件时间"></a>代码中设置事件时间</h2><p>我们可以直接在代码中，对执行环境调用<code>setStreamTimeCharacteristic</code>方法，设置流的时间特性；具体的时间，<strong>还需要从数据中提取时间戳（timestamp）</strong>（<font color="red">必须</font>）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"><span class="comment">// 设置流的时间特征</span></span><br><span class="line">env.setStreamTimeCharacteristic(<span class="type">TimeCharacteristic</span>.<span class="type">EventTime</span>)</span><br></pre></td></tr></table></figure><p><strong>提取时间戳+设置水位线</strong></p><p><a href="#%E6%B0%B4%E4%BD%8D%E7%BA%BF%E7%9A%84%E5%BC%95%E5%85%A5">查看</a></p><h2 id="事件时间怎么解决乱序数据"><a href="#事件时间怎么解决乱序数据" class="headerlink" title="事件时间怎么解决乱序数据"></a>事件时间怎么解决乱序数据</h2><p>乱序数据会让窗口计算不准确</p><p>如图，被圆圈圈住得数据是当前事件得事件时间（发生事件得时间），而事件得顺序就是事件到达Flink得顺序。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-23_19-34-40.png" alt="Snipaste_2020-12-23_19-34-40"></p><p>假如，我们开了一个时间长度为5s得事件时间窗口。因为是事件时间窗口，当事件时间为5s得事件到达时，我们这个0-5得时间窗口就能关闭了吗，就能认为这个窗口得数据都到达了吗？</p><p>答案是不能的，如果是处理时间的窗口，那么过了5S窗口就直接关闭了，它使用机器时间。但是事件时间窗口使用的是事件的时间，这个时间他在数据里，虽然第5s的数据到了，但没人能保证5S之前的数据会不会由于网络、分布式等原因迟到，会导致乱序数据的产生，或者第5s有没有多条数据。</p><p>那么如果是事件事件窗口得话，这个窗口就永久不关闭吗，这样大量窗口在处理，会拖垮程序的。</p><p><font color="red"><strong>这时候提出了水位线的概念，来代表事件时间数据流的时间流动进度。</strong></font></p><h1 id="水位线（WaterMark）🔺"><a href="#水位线（WaterMark）🔺" class="headerlink" title="水位线（WaterMark）🔺"></a>水位线（WaterMark）🔺</h1><p>提出水位线之前，我们可以列举几个事件时间窗口得问题：</p><ul><li>怎样避免乱序数据带来计算不正确？<ul><li>Watermark 是用于处理乱序事件的，而正确的处理乱序事件，通常用Watermark 机制结合 window 来实现；</li></ul></li><li>我们应该怎样去决定何时触发事件时间窗口的计算？（怎么关闭时间窗口）</li></ul><p><strong>watermark 用来让程序自己平衡延迟和结果正确性</strong></p><p>在本小节中，我们将会看到如何使用水位线来设置事件时间窗口的行为。</p><hr><p>水位线是时间全局进度的度量标准。<strong>系统可以确信在一个时间点之后，不会有早于这个时间点发生的事件到来了。</strong>本质上，水位线提供了一个逻辑时钟，这个逻辑时钟告诉系统当前的事件时间。当一个运算符接收到含有时间T的水位线时，这个运算符会认为早于时间T的发生的事件已经全部都到达了。<strong>对于事件时间窗口和乱序事件的处理，水位线非常重要。</strong><font color="red">运算符一旦接收到水位线，运算符会认为一段时间内发生的所有事件都已经观察到，可以触发针对这段时间内所有事件的计算了。</font></p><blockquote><p><strong>系统可以确信在一个时间点之后，不会有早于这个时间点发生的事件到来了。</strong></p><p>（只是这样规定的，实际上还是有可能有早于这个时间点发生的事件到来，这时事件被称为迟到事件，默认迟到事件被丢弃。后面有单独的迟到事件的处理章节）</p></blockquote><h2 id="水位线作用"><a href="#水位线作用" class="headerlink" title="水位线作用"></a>水位线作用</h2><p>水位线提供了一种<strong>结果可信度和延时之间的妥协</strong>。激进的水位线设置可以保证低延迟，但结果的准确性不够。在这种情况下，<strong>迟到的事件有可能晚于水位线到达，我们需要编写一些代码来处理迟到事件</strong>。另一方面，<strong>如果水位线设置的过于宽松，计算的结果准确性会很高，但可能会增加流处理程序不必要的延时</strong>。</p><blockquote><p>白话讲</p><p><strong>结果可信度和延时之间的妥协</strong>：</p><p>就是说水位线时有一个最大延迟时间的概念，加入最大的事件时间到了是10S，但是最大延迟时间是5S，那么当前水位线就是5S，那么0-10S的窗口就不会关闭计算，它在等待因为某些原因还没有到的0-10S的事件。</p><p>一方面：</p><p>当最大时间时间到了15S，最大延迟时间是5S，那么当前水位线就是10S。即0-10S的窗口已经关闭开始了计算，那么之后到的0-10S的事件事件数据就是迟到事件，需要编写一些代码来处理（默认丢弃）</p><p>另一方面：</p><p>如果将水位线设置的宽松，准确性就会提高。例如放大最大延迟时间，但是可能会增加流处理程序不必要的延时</p></blockquote><p>如图，设时间窗口大小为10S，最大延迟事件为5S。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-23_21-13-13.png" alt="Snipaste_2020-12-23_21-13-13"></p><hr><p>在13S到达时，水位线为7S。</p><ul><li>这时如果没有更大的事件时间到来时，那么这个时间段内所有0-10S的数据都会进入窗口。</li><li>当15S的事件时间到达时，水位线为10S。0-10S的窗口将被计算并且关闭。</li><li>如果在15S的事件时间到达后，又来临了0-10S的事件时间。它们默认将被抛弃，除了写了专门处理的代码</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-23_21-22-39.png" alt="Snipaste_2020-12-23_21-22-39"></p><h2 id="水位线特点🔺"><a href="#水位线特点🔺" class="headerlink" title="水位线特点🔺"></a>水位线特点🔺</h2><ul><li>watermark默认每200ms插入一次，由程序员编码插入。可以使用<code>env.getConfig.setAutoWatermarkInterval(5000)</code>方法进行设置。</li><li>Watermark 是一种衡量 Event Time 进展的机制，可以设定延迟触发</li><li>watermark 必须单调递增，以确保任务的事件时间时钟在向前推进，而不是在后退</li><li>只有事件时间需要水位线，水位线只有在窗口计算时才有用，事件时间可以设置最大延迟时间</li><li><font color="red">系统认为时间戳小于水位线的事件都已经到达了</font></li><li><font color="red">事件时间窗口的闭合触发规则：水位线大于等于窗口结束时间</font></li><li><font color="red"><code>watermark  = 最大事件时间 - 最大延迟时间</code></font></li></ul><blockquote><p>通常，当水位线超过窗口结束时间时，窗口将不再接收事件，然后触发计算，计算完毕，窗口被销毁</p></blockquote><hr><blockquote><p> 通常都是在流之后立马设置水位线，因为经过分流后在设置水位线，流之间的水位线会很乱</p></blockquote><h2 id="水位线的引入"><a href="#水位线的引入" class="headerlink" title="水位线的引入"></a>水位线的引入</h2><h3 id="自带"><a href="#自带" class="headerlink" title="自带"></a>自带</h3><p><strong>对于排好序的数据，不需要延迟触发，可以只指定时间戳就行了</strong></p><p>当10S到达后，因为窗口是左闭右开，这个10S不会立马加入窗口计算，<font color="red">所以当前水位线是最大事件时间-1ms。</font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间戳必须是ms，根据自己需求写</span></span><br><span class="line">dataStream.assignAscendingTimestamps(_timestamp * <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><strong>对于乱序数据，需要来设置延迟时间，来解决问题</strong></p><p>即设置最大延迟时间</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.assignTimestampsAndWatermarks(</span><br><span class="line">       <span class="comment">// 设置最大延迟时间为5S</span></span><br><span class="line">       <span class="keyword">new</span> <span class="type">BoundedOutOfOrdernessTimestampExtractor</span>[(<span class="type">String</span>, <span class="type">Long</span>)](<span class="type">Time</span>.seconds(<span class="number">5</span>)) &#123;</span><br><span class="line">         <span class="comment">// 设置那个元素是事件自带的</span></span><br><span class="line">       <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(t: (<span class="type">String</span>, <span class="type">Long</span>)) = t._2</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>我们知道默认的水平线计算规则为<code>最大事件时间-最大延迟时间</code>，即<code>BoundedOutOfOrdernessTimestampExtractor</code>类的实现。而且是每隔200ms插入一次。</p><p>Flink提供了接口，我们可以自定义实现水平线的实现逻辑，即它的计算规则可以更改，并且它的插入也可以更改（规则性插入|不规则插入），分别对应着两个接口：</p><ol><li><code>AssignerWithPeriodicWatermarks</code>：<a href="#%E5%91%A8%E6%9C%9F%E6%80%A7%E7%9A%84%E7%94%9F%E6%88%90%E6%B0%B4%E4%BD%8D%E7%BA%BF">周期性的生成水位线</a></li><li><code>AssignerWithPunctuatedWatermarks</code>：<a href="#%E5%A6%82%E4%BD%95%E4%BA%A7%E7%94%9F%E4%B8%8D%E8%A7%84%E5%88%99%E7%9A%84%E6%B0%B4%E4%BD%8D%E7%BA%BF">产生不规则的水位线</a></li></ol><h4 id="周期性的生成水位线"><a href="#周期性的生成水位线" class="headerlink" title="周期性的生成水位线"></a>周期性的生成水位线</h4><p>周期性的生成水位线：系统会周期性的将水位线插入到流中（水位线也是一种特殊的事件!）。默认周期是200毫秒，也就是说，系统会每隔200毫秒就往流中插入一次水位线。</p><blockquote><p>这里的200毫秒是机器时间！</p></blockquote><p>可以使用<code>ExecutionConfig.setAutoWatermarkInterval()</code>方法进行设置。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">env.setStreamTimeCharacteristic(<span class="type">TimeCharacteristic</span>.<span class="type">EventTime</span>)</span><br><span class="line"><span class="comment">// 每隔5秒产生一个水位线</span></span><br><span class="line">env.getConfig.setAutoWatermarkInterval(<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>上面的例子产生水位线的逻辑：每隔5秒钟，Flink会调用AssignerWithPeriodicWatermarks中的getCurrentWatermark()方法。如果方法返回的时间戳大于之前水位线的时间戳，新的水位线会被插入到流中。这个检查保证了水位线是单调递增的。如果方法返回的时间戳小于等于之前水位线的时间戳，则不会产生新的水位线。</p><hr><p>例子，自定义一个周期性的时间戳抽取</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeriodicAssigner</span> <span class="keyword">extends</span> <span class="title">AssignerWithPeriodicWatermarks</span>[<span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> bound = <span class="number">60</span> * <span class="number">1000</span> <span class="comment">// 默认，延时为1分钟</span></span><br><span class="line">  <span class="keyword">var</span> maxTs = <span class="type">Long</span>.<span class="type">MinValue</span> + bound <span class="comment">// 观察到的最大时间戳</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getCurrentWatermark</span></span>: <span class="type">Watermark</span> &#123;</span><br><span class="line">      <span class="comment">// 设置水位线，默认规则</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">Watermark</span>(maxTs - bound)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个事件到来都会执行，更新最大事件时间戳</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(r: <span class="type">SensorReading</span>, previousTS: <span class="type">Long</span>) &#123;</span><br><span class="line">    maxTs = maxTs.max(r.timestamp)</span><br><span class="line">    r.timestamp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的逻辑就是<code>BoundedOutOfOrdernessTimestampExtractor</code>的逻辑。</p><h4 id="如何产生不规则的水位线"><a href="#如何产生不规则的水位线" class="headerlink" title="如何产生不规则的水位线"></a><a href="#%E5%A6%82%E4%BD%95%E4%BA%A7%E7%94%9F%E4%B8%8D%E8%A7%84%E5%88%99%E7%9A%84%E6%B0%B4%E4%BD%8D%E7%BA%BF">如何产生不规则的水位线</a></h4><p>有时候输入流中会包含一些用于指示系统进度的特殊元组或标记。Flink为此类情形以及可根据输入元素生成水位线的情形提供了<code>AssignerWithPunctuatedWatermarks</code>接口。该接口中的<code>checkAndGetNextWatermark()</code>方法会在针对每个事件的<code>extractTimestamp()</code>方法后立即调用。它可以决定是否生成一个新的水位线。<strong>如果该方法返回一个非空、且大于之前值的水位线，算子就会将这个新水位线发出。</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PunctuatedAssigner</span> <span class="keyword">extends</span> <span class="title">AssignerWithPunctuatedWatermarks</span>[<span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> bound = <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每来一条数据就调用一次</span></span><br><span class="line">  <span class="comment">// 紧跟`extractTimestamp`函数调用</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">checkAndGetNextWatermark</span></span>(r: <span class="type">SensorReading</span>, extractedTS: <span class="type">Long</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r.id == <span class="string">&quot;sensor_1&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 抽取的时间戳 - 最大延迟时间</span></span><br><span class="line">      <span class="keyword">new</span> <span class="type">Watermark</span>(extractedTS - bound)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不产生时间戳</span></span><br><span class="line">      <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每来一条数据就调用一次</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(r: <span class="type">SensorReading</span>, previousTS: <span class="type">Long</span>) &#123;</span><br><span class="line">    r.timestamp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大延迟时间的设置"><a href="#最大延迟时间的设置" class="headerlink" title="最大延迟时间的设置"></a>最大延迟时间的设置</h2><p>完美的水位线永远不会错：时间戳小于水位线的事件不会再出现。在特殊情况下(例如非乱序事件流)，最近一次事件的时间戳就可能是完美的水位线。启发式水位线则相反，它只估计时间，因此有可能出错，即迟到的事件(其时间戳小于水位线标记时间)晚于水位线出现。针对启发式水位线，Flink提供了处理迟到元素的机制。</p><p><strong>设定水位线通常需要用到领域知识。</strong>举例来说，如果知道事件的迟到时间不会超过5秒，就可以将水位线标记时间设为收到的最大时间戳减去5秒。另一种做法是，采用一个Flink作业监控事件流，学习事件的迟到规律，并以此构建水位线生成模型。</p><p>如果最大延迟时间设置的很大，计算出的结果会更精确，但收到计算结果的速度会很慢，同时系统会缓存大量的数据，并对系统造成比较大的压力。如果最大延迟时间设置的很小，那么收到计算结果的速度会很快，但可能收到错误的计算结果。不过Flink处理迟到数据的机制可以解决这个问题。上述问题看起来很复杂，但是恰恰符合现实世界的规律：大部分真实的事件流都是乱序的，并且通常无法了解它们的乱序程度(因为理论上不能预见未来)。水位线是唯一让我们直面乱序事件流并保证正确性的机制; 否则只能选择忽视事实，假装错误的结果是正确的。</p><blockquote><ul><li>思考题一：实时程序，要求实时性非常高，并且结果并不一定要求非常准确，那么应该怎么办？</li><li>回答：直接使用处理时间。</li><li>思考题二：如果要进行时间旅行，也就是要还原以前的数据集当时的流的状态，应该怎么办？</li><li>回答：使用事件时间。使用Hive将数据集先按照时间戳升序排列，再将最大延迟时间设置为0。</li></ul></blockquote><h2 id="水位线、事件窗口的验证🔺"><a href="#水位线、事件窗口的验证🔺" class="headerlink" title="水位线、事件窗口的验证🔺"></a>水位线、事件窗口的验证🔺</h2><p>因为是验证窗口与水位线的关系，所以我们需要一个函数能同时获取窗口的基本信息（开始结束时间）和水位线的。</p><p>这就是前面提到的<code>PrcessWindowFunction</code>，因为要获取获取窗口的基本信息。所以，增量聚合函数在这里行不通。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 水位线和窗口结束时间结束 的关系</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line">    env.setStreamTimeCharacteristic(<span class="type">TimeCharacteristic</span>.<span class="type">EventTime</span>)</span><br><span class="line"></span><br><span class="line">    env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9000</span>, &#x27;\n&#x27;)</span><br><span class="line">      .map(r =&gt; (r.split(<span class="string">&quot; &quot;</span>)(<span class="number">0</span>), r.split(<span class="string">&quot; &quot;</span>)(<span class="number">1</span>).toLong * <span class="number">1000</span>))</span><br><span class="line">      .assignTimestampsAndWatermarks(</span><br><span class="line">        <span class="comment">// 设置最大延迟时间为5S</span></span><br><span class="line">        <span class="keyword">new</span> <span class="type">BoundedOutOfOrdernessTimestampExtractor</span>[(<span class="type">String</span>, <span class="type">Long</span>)](<span class="type">Time</span>.seconds(<span class="number">5</span>)) &#123;</span><br><span class="line">          <span class="comment">// 设置那个元素是事件自带的</span></span><br><span class="line">          <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(t: (<span class="type">String</span>, <span class="type">Long</span>)) = t._2</span><br><span class="line">        &#125;)</span><br><span class="line">      .keyBy(r =&gt; r._1)</span><br><span class="line">      <span class="comment">// 开窗10S</span></span><br><span class="line">      .timeWindow(<span class="type">Time</span>.seconds(<span class="number">10</span>))</span><br><span class="line">      .process(<span class="keyword">new</span> <span class="type">MyProcess</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[(<span class="type">String</span>, <span class="type">Long</span>), <span class="type">String</span>, <span class="type">String</span>, <span class="type">TimeWindow</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements: <span class="type">Iterable</span>[(<span class="type">String</span>, <span class="type">Long</span>)], out: <span class="type">Collector</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> startTime: <span class="type">String</span> = <span class="keyword">new</span> <span class="type">Timestamp</span>(context.window.getStart).toString</span><br><span class="line">      <span class="keyword">val</span> endTime: <span class="type">String</span> = <span class="keyword">new</span> <span class="type">Timestamp</span>(context.window.getEnd).toString</span><br><span class="line">      out.collect(<span class="string">s&quot;窗口的大小为：<span class="subst">$startTime</span>-<span class="subst">$endTime</span>\t窗口内的元素为：<span class="subst">$elements</span>\t个数为：<span class="subst">$&#123;elements.size&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>输入2，5，8，9，10。发现窗口没有反应，即第一个窗口没有关闭</li><li>输入12，15。发现窗口关闭了，当输入15时，水平线为10.正好大于等于第一个窗口的结束时间，所以窗口开始计算</li><li>看到日志第一个窗口没有10S，<strong>因为窗口是左闭右开的。</strong></li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201224163855851.png" alt="image-20201224163855851"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201224160149977.png" alt="image-20201224160149977"></p><h2 id="水位线的传递"><a href="#水位线的传递" class="headerlink" title="水位线的传递"></a>水位线的传递</h2><p>每个流都有着自己的水位线，在进行流合并时，水位线是怎么传递的呢？</p><p><font color="red"><strong>一个流在一个分区中就有一个水位线</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210101195833056.png" alt="image-20210101195833056"></p><blockquote><ol><li>在map_1和map_2都有自己的水位线</li><li>在发往分区1，2时，它们各自的水位线都发送，每个分区只将最小的水位线当最此分区此操作的水位线</li></ol><p>此时，如果125是窗口结束时间，如果想要触发结束，则map_1,map_2都要大于125的水位线</p><p><strong>结论，添加watermark离Source越近越好</strong></p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0309.png"></p><hr><h1 id="底层级处理函数🔺"><a href="#底层级处理函数🔺" class="headerlink" title="底层级处理函数🔺"></a>底层级处理函数🔺</h1><p>我们之前学习的转换算子<strong>是无法访问事件的时间戳信息和水位线信息的。</strong>而这在一些应用场景下，极为重要。例如MapFunction这样的map转换算子就无法访问时间戳或者当前事件的事件时间。</p><p>基于此，DataStream API提供了一系列的<strong>Low-Level转换算子。可以访问时间戳、水位线以及注册定时事件。</strong>还可以输出特定的一些事件，例如超时事件等。Process Function用来构建事件驱动的应用以及实现自定义的业务逻辑(使用之前的window函数和转换算子无法实现)。<strong>例如，Flink-SQL就是使用Process Function实现的。</strong></p><blockquote><p>Process Function都是Rich Function</p></blockquote><p><code>Flink</code>提供了8个Process Function：</p><ul><li>ProcessFunction：处理没有经过分组和开窗的流，直接对整条流处理，每个元素触发执行一次</li><li><code>KeyedProcessFunction</code>：处理分组后没有开窗的流，每个元素触发执行一次</li><li><code>CoProcessFunction</code>：处理connect之后的流</li><li>ProcessJoinFunction：处理两条流join后的流 </li><li>BroadcastProcessFunction</li><li>KeyedBroadcastProcessFunction</li><li><code>ProcessWindowFunction</code>：处理分流和开窗口以后的流，每个窗口结束时执行一次</li><li>ProcessAllWindowFunction：处理没有分流但开了窗的流，窗口结束时执行</li></ul><p>我们这里详细介绍一下KeyedProcessFunction。</p><h2 id="KeyedProcessFunction"><a href="#KeyedProcessFunction" class="headerlink" title="KeyedProcessFunction"></a><strong><em>KeyedProcessFunction</em></strong></h2><p>KeyedProcessFunction用<strong>来操作KeyedStream</strong>。KeyedProcessFunction<strong>会处理流的每一个元素，输出为0个、1个或者多个元素</strong>。<strong>所有的Process Function都继承自RichFunction接口</strong>，所以都有open()、close()和getRuntimeContext()等方法。而KeyedProcessFunction[KEY, IN, OUT]还额外提供了两个方法:</p><ol><li><code>processElement(v: IN, ctx: Context, out: Collector[OUT])</code>, 流中的<strong>每一个元素都会调用这个方法</strong>，调用结果将会放在Collector数据类型中输出。<strong>Context可以访问元素的时间戳，元素的key，以及TimerService时间服务</strong>。**Context还可以将结果输出到别的流(side outputs)**（后面讲#<a href="#%E4%BE%A7%E8%BE%93%E5%87%BA%E6%B5%81">侧输出流</a>）。</li><li><code>onTimer(timestamp: Long, ctx: OnTimerContext, out: Collector[OUT])</code>是一个回调函数。当之前<font color="red"><strong>注册的定时器触发时调用</strong></font>。参数timestamp为定时器所设定的触发的时间戳。Collector为输出结果的集合。OnTimerContext和processElement的Context参数一样，提供了上下文的一些信息，例如firing trigger的时间信息(事件时间或者处理时间)。</li></ol><h3 id="例子：时间服务和定时器"><a href="#例子：时间服务和定时器" class="headerlink" title="例子：时间服务和定时器"></a>例子：<a href="#%E6%97%B6%E9%97%B4%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%9A%E6%97%B6%E5%99%A8">时间服务和定时器</a></h3><p>Context和OnTimerContext所持有的TimerService对象拥有以下方法:</p><ul><li><code>currentProcessingTime(): Long</code> 返回当前处理时间</li><li><code>currentWatermark(): Long</code> 返回当前水位线的时间戳</li><li><code>registerProcessingTimeTimer(timestamp: Long): Unit</code> 会注册当前key的processing time的timer。当processing time到达定时时间时，触发timer。</li><li><code>registerEventTimeTimer(timestamp: Long): Unit</code> 会注册当前key的event time timer。当水位线大于等于定时器注册的时间时，触发定时器执行回调函数。</li><li><code>deleteProcessingTimeTimer(timestamp: Long): Unit</code> 删除之前注册处理时间定时器。如果没有这个时间戳的定时器，则不执行。</li><li><code>deleteEventTimeTimer(timestamp: Long): Unit</code> 删除之前注册的事件时间定时器，如果没有此时间戳的定时器，则不执行。</li></ul><p>当定时器timer触发时，执行回调函数onTimer()。<strong>processElement()方法和onTimer()方法是同步（不是异步）方法，这样可以避免并发访问和操作状态。</strong></p><p><strong>针对每一个key和timestamp，只能注册一个定期器</strong>。也就是说，每一个key可以注册多个定时器，但在每一个时间戳只能注册一个定时器。KeyedProcessFunction默认将所有定时器的时间戳放在一个优先队列中。在Flink做检查点操作时，定时器也会被保存到状态后端中。</p><p>举个例子说明KeyedProcessFunction如何操作KeyedStream。</p><p>下面的程序展示了如何监控温度传感器的温度值，如果温度值在一秒钟之内(processing time)连续上升，报警。</p><p>原理：通过状态变量（流中保留之前流数据的计算结果，每当新的数据到到达时，更新保存的状态变量）比较当前温度和上一个温度，如果大于的话，创建一个1S后的定时器报警；如果小于的话，取消之前的报警器。这样如果1S中之内报警器没有被取消的话，证明1S内温度在不断上升！</p><p>主要程序：（为什么使用状态变量，因为防止宕机后，丢失数据（状态变量可以存在hdfs上，初始化时读取，没有再初始化），使用状态变量的话得用懒执行，因为不用懒执行的话，初始化时<code>getRuntimeContext</code>还没有）</p><blockquote><p>需要注意我没有设置并行度，如果你的程序没有输出结果的话，是因为一般电脑的核数为8|16，所以addSource的并行度为8|16，而每个addSource在每s每个id大约会生成3条数据（根据300ms计算的得出），而乘以并行度8最后为24条，这时只有24条记录连续上升才会导致报警触发，所以很难出现结果。大家们可以单独将addSource的并行度设置为1</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.&#123;<span class="type">ValueState</span>, <span class="type">ValueStateDescriptor</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala.typeutils.<span class="type">Types</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.<span class="type">KeyedProcessFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"><span class="keyword">import</span> org.example.flink.source.&#123;<span class="type">SensorReading</span>, <span class="type">SensorSource</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TemperatureMonitor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> source: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    source.keyBy(r =&gt; r.id).process(<span class="keyword">new</span> <span class="type">MykeyedFunction</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MykeyedFunction</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>[<span class="type">String</span>, <span class="type">SensorReading</span>, <span class="type">String</span>] </span>&#123;</span><br><span class="line">    <span class="comment">// 定义状态变量，使用懒执行</span></span><br><span class="line">    <span class="comment">// 懒加载；</span></span><br><span class="line">    <span class="comment">// 状态变量会在检查点操作时进行持久化，例如hdfs</span></span><br><span class="line">    <span class="comment">// 只会初始化一次，单例模式</span></span><br><span class="line">    <span class="comment">// 在当机重启程序时，首先去持久化设备寻找名为`last-temp`的状态变量，如果存在，则直接读取。不存在，则初始化。</span></span><br><span class="line">    <span class="comment">// 流中上次温度，通过对比本次温度和上次温度，来看温度的上升/下降趋势  下降的话 取消之前设置的定时报警</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> perTemperature: <span class="type">ValueState</span>[<span class="type">Double</span>] = getRuntimeContext.getState(<span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Double</span>]</span><br><span class="line">    (<span class="string">&quot;last-temperature&quot;</span>, <span class="type">Types</span>.of[<span class="type">Double</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 之前设置的报警时间，当温度下降时需要获取之前设置的报警器的时间，通过时间来删除报警器</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> time: <span class="type">ValueState</span>[<span class="type">Long</span>] = getRuntimeContext.getState(<span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Long</span>]</span><br><span class="line">    (<span class="string">&quot;time&quot;</span>, <span class="type">Types</span>.of[<span class="type">Long</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个流的元素都会执行一遍</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">processElement</span></span>(i: <span class="type">SensorReading</span>, context: <span class="type">KeyedProcessFunction</span>[<span class="type">String</span>, <span class="type">SensorReading</span>, <span class="type">String</span>]#<span class="type">Context</span>, collector: <span class="type">Collector</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// 获取上次温度</span></span><br><span class="line">      <span class="keyword">val</span> lastTemperature: <span class="type">Double</span> = perTemperature.value()</span><br><span class="line">      <span class="comment">// 更新温度的状态变量</span></span><br><span class="line">      perTemperature.update(i.temperature)</span><br><span class="line">      <span class="keyword">val</span> curTime: <span class="type">Long</span> = time.value()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果是第一条温度，则上条温度为0 || 本地温度比上次温度低   当前是初始化或降温趋势，删除定时任务</span></span><br><span class="line">      <span class="keyword">if</span> (lastTemperature == <span class="number">0.0</span> || i.temperature&lt;lastTemperature) &#123;</span><br><span class="line">        <span class="comment">// 删除报警器，并清空定时器的状态变量</span></span><br><span class="line">        context.timerService().deleteProcessingTimeTimer(curTime)</span><br><span class="line">        time.clear()</span><br><span class="line">        <span class="comment">// 如果是温度处于上升趋势||定时器是未设置  则要设置定时器</span></span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i.temperature&gt; lastTemperature  &amp;&amp; curTime==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 1S 内  如果温度没有下降趋势，即没有取消定时器，则报警</span></span><br><span class="line">        <span class="keyword">val</span> l: <span class="type">Long</span> = context.timerService().currentProcessingTime() + <span class="number">1000</span></span><br><span class="line">        context.timerService().registerProcessingTimeTimer(l)</span><br><span class="line">        time.update(l)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不要按照注释那样写，血的教训  这样写 定时事件的时间和状态变量存储的时间不同，导致无法删除应该删除的定时事件</span></span><br><span class="line"><span class="comment">//        context.timerService().registerProcessingTimeTimer(context.timerService().currentProcessingTime() + 1000)</span></span><br><span class="line"><span class="comment">//        time.update(context.timerService().currentProcessingTime() + 1000)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器触发时执行的逻辑</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onTimer</span></span>(timestamp: <span class="type">Long</span>, ctx: <span class="type">KeyedProcessFunction</span>[<span class="type">String</span>, <span class="type">SensorReading</span>, <span class="type">String</span>]#<span class="type">OnTimerContext</span>, out: <span class="type">Collector</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      out.collect(<span class="string">s&quot;温度计id为<span class="subst">$&#123;ctx.getCurrentKey&#125;</span>的实例温度在1S内连续上升！&quot;</span>)</span><br><span class="line">      <span class="comment">// 不清空的话，如果温度继续上升则无法进行下一次的报警</span></span><br><span class="line">      time.clear()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了更好的展示结果，构造数据需要减少产生量：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.source</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Calendar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.<span class="type">SourceFunction</span>.<span class="type">SourceContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.&#123;<span class="type">RichParallelSourceFunction</span>, <span class="type">SourceFunction</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.<span class="type">Random</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SensorSource</span> <span class="keyword">extends</span> <span class="title">RichParallelSourceFunction</span>[<span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> running = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(sourceContext: <span class="type">SourceContext</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> rand = <span class="keyword">new</span> <span class="type">Random</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> curFTemp = (<span class="number">1</span> to <span class="number">10</span>).map(</span><br><span class="line">      i =&gt; (<span class="string">&quot;sensor_&quot;</span> + i, rand.nextGaussian() * <span class="number">20</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (running) &#123;</span><br><span class="line">      curFTemp = curFTemp.map(</span><br><span class="line">        t =&gt; (t._1, t._2 + rand.nextGaussian() * <span class="number">0.5</span>)</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">val</span> curTime = <span class="type">Calendar</span>.getInstance.getTimeInMillis</span><br><span class="line"></span><br><span class="line">      curFTemp.foreach(t =&gt; sourceContext.collect(<span class="type">SensorReading</span>(t._1, curTime, t._2)))</span><br><span class="line"></span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">300</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel</span></span>(): <span class="type">Unit</span> = running = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>只有用了Flink的流处理才能计算到连续的数据流中的状态数据变化，而如果用Spark来实现这个功能的根本实现不了的。因为：</p><ul><li>Spark的流处理是微批，无法监控到不同微批数据中的状态，就无法进行连续1S的数据计算</li><li>如果采用批处理的话，是可以。但是数据的产生都是实时的，根本不能用批处理。写写DEMO可以，实际无用处。</li></ul></blockquote><h2 id="CoProcessFunction"><a href="#CoProcessFunction" class="headerlink" title="CoProcessFunction"></a><strong><em>CoProcessFunction</em></strong></h2><p>对于两条输入流，DataStream API提供了CoProcessFunction这样的low-level操作。CoProcessFunction提供了操作每一个输入流的方法: processElement1()和processElement2()。类似于ProcessFunction，这两种方法都通过Context对象来调用。这个Context对象可以访问事件数据，定时器时间戳，TimerService，以及side outputs。<strong>CoProcessFunction也提供了onTimer()回调函数</strong>。下面的例子展示了如何使用CoProcessFunction来合并两条流。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.transform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.&#123;<span class="type">ValueState</span>, <span class="type">ValueStateDescriptor</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala.typeutils.<span class="type">Types</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.co.<span class="type">CoProcessFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"><span class="keyword">import</span> org.example.flink.source.&#123;<span class="type">SensorReading</span>, <span class="type">SensorSource</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CoProcessFunctionTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ingest sensor stream</span></span><br><span class="line">    <span class="keyword">val</span> readings: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// filter switches enable forwarding of readings</span></span><br><span class="line">    <span class="keyword">val</span> filterSwitches: <span class="type">DataStream</span>[(<span class="type">String</span>, <span class="type">Long</span>)] = env</span><br><span class="line">      .fromCollection(<span class="type">Seq</span>(</span><br><span class="line">        (<span class="string">&quot;sensor_2&quot;</span>, <span class="number">10</span> * <span class="number">1000</span>L),</span><br><span class="line">        (<span class="string">&quot;sensor_7&quot;</span>, <span class="number">60</span> * <span class="number">1000</span>L)</span><br><span class="line">      ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> forwardedReadings = readings</span><br><span class="line">      <span class="comment">// connect readings and switches</span></span><br><span class="line">      .connect(filterSwitches)</span><br><span class="line">      <span class="comment">// key by sensor ids</span></span><br><span class="line">      .keyBy(_.id, _._1)</span><br><span class="line">      <span class="comment">// apply filtering CoProcessFunction</span></span><br><span class="line">      .process(<span class="keyword">new</span> <span class="type">ReadingFilter</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReadingFilter</span> <span class="keyword">extends</span> <span class="title">CoProcessFunction</span>[<span class="type">SensorReading</span>, (<span class="type">String</span>, <span class="type">Long</span>), <span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line">    <span class="comment">// switch to enable forwarding</span></span><br><span class="line">    <span class="comment">// 传送数据的开关</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> forwardingEnabled: <span class="type">ValueState</span>[<span class="type">Boolean</span>] = getRuntimeContext</span><br><span class="line">      .getState(</span><br><span class="line">        <span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Boolean</span>](<span class="string">&quot;filterSwitch&quot;</span>, <span class="type">Types</span>.of[<span class="type">Boolean</span>])</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hold timestamp of currently active disable timer</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> disableTimer: <span class="type">ValueState</span>[<span class="type">Long</span>] = getRuntimeContext</span><br><span class="line">      .getState(</span><br><span class="line">        <span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Long</span>](<span class="string">&quot;timer&quot;</span>, <span class="type">Types</span>.of[<span class="type">Long</span>])</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">processElement1</span></span>(reading: <span class="type">SensorReading</span>,</span><br><span class="line">                                 ctx: <span class="type">CoProcessFunction</span>[<span class="type">SensorReading</span>,</span><br><span class="line">                                   (<span class="type">String</span>, <span class="type">Long</span>), <span class="type">SensorReading</span>]#<span class="type">Context</span>,</span><br><span class="line">                                 out: <span class="type">Collector</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// check if we may forward the reading</span></span><br><span class="line">      <span class="comment">// 决定我们是否要将数据继续传下去</span></span><br><span class="line">      <span class="keyword">if</span> (forwardingEnabled.value()) &#123;</span><br><span class="line">        out.collect(reading)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">processElement2</span></span>(switch: (<span class="type">String</span>, <span class="type">Long</span>),</span><br><span class="line">                                 ctx: <span class="type">CoProcessFunction</span>[<span class="type">SensorReading</span>,</span><br><span class="line">                                   (<span class="type">String</span>, <span class="type">Long</span>), <span class="type">SensorReading</span>]#<span class="type">Context</span>,</span><br><span class="line">                                 out: <span class="type">Collector</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// enable reading forwarding</span></span><br><span class="line">      <span class="comment">// 允许继续传输数据</span></span><br><span class="line">      forwardingEnabled.update(<span class="literal">true</span>)</span><br><span class="line">      <span class="comment">// set disable forward timer</span></span><br><span class="line">      <span class="keyword">val</span> timerTimestamp = ctx.timerService().currentProcessingTime()</span><br><span class="line">      + switch._2</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> curTimerTimestamp = disableTimer.value()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (timerTimestamp &gt; curTimerTimestamp) &#123;</span><br><span class="line">        <span class="comment">// remove current timer and register new timer</span></span><br><span class="line">        ctx.timerService().deleteProcessingTimeTimer(curTimerTimestamp)</span><br><span class="line">        ctx.timerService().registerProcessingTimeTimer(timerTimestamp)</span><br><span class="line">        disableTimer.update(timerTimestamp)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onTimer</span></span>(ts: <span class="type">Long</span>,</span><br><span class="line">                         ctx: <span class="type">CoProcessFunction</span>[<span class="type">SensorReading</span>,</span><br><span class="line">                           (<span class="type">String</span>, <span class="type">Long</span>), <span class="type">SensorReading</span>]#<span class="type">OnTimerContext</span>,</span><br><span class="line">                         out: <span class="type">Collector</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// remove all state; forward switch will be false by default</span></span><br><span class="line">      forwardingEnabled.clear()</span><br><span class="line">      disableTimer.clear()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ProcessFunction"><a href="#ProcessFunction" class="headerlink" title="ProcessFunction"></a>ProcessFunction</h2><blockquote><p><code>process function</code>与<code>KeyedProcessFunction</code>区别：</p><p><code>KeyedProcessFunction</code>是对于keyby后的流计算，而<code>process function</code>是对keyby前的流计算，都是一个元素触发一次计算</p></blockquote><h1 id="侧输出流"><a href="#侧输出流" class="headerlink" title="侧输出流"></a>侧输出流</h1><p>上面我们说过水位线加上最大延迟时间可保证小幅度迟到的数据可以继续加入窗口被计算，但是如果数据迟到的离谱，这时配置最大延迟时间肯定没有用了。</p><p>如果不设置它会默认舍弃这种迟到的时间。除非我们手动代码设置来处理这些数据，有2中方式。</p><ol><li>允许迟到的数据，一定时间内。此时来的数据与之前的结果进行聚合计算</li><li>输出到侧输出流</li></ol><p>与之前聊过的lambda架构，批处理提供数据准确性。而Flink通过一个流处理就能保证数据准确性，也是依靠了下面三点：</p><blockquote><p>准确计算性的三重保证：</p><ol><li>watermark：将时间进度由慢的watermark调控</li><li>allowedLateness：时间窗口结束时间小于等于水位线后开始聚合计算，计算后又有该时间范围内的数据到达时，迟到的数据每个元素进入都会和原窗口的结果进行聚合</li><li>侧输出流：最后的数据进入侧输出流。</li></ol></blockquote><hr><p>以下举一个例子，通过三重：watermark和最大延迟时间、允许迟到时间、和侧输出流保存丢弃元素来看处理乱序和迟到数据：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.transform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.&#123;<span class="type">ValueState</span>, <span class="type">ValueStateDescriptor</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala.typeutils.<span class="type">Types</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.<span class="type">TimeCharacteristic</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.<span class="type">BoundedOutOfOrdernessTimestampExtractor</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala.function.<span class="type">ProcessWindowFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.<span class="type">TimeWindow</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">LaterDataDeal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置事件时间</span></span><br><span class="line">    env.setStreamTimeCharacteristic(<span class="type">TimeCharacteristic</span>.<span class="type">EventTime</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 端口输入数据</span></span><br><span class="line">    <span class="keyword">val</span> input: <span class="type">DataStream</span>[<span class="type">String</span>] = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>, &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据的改装</span></span><br><span class="line">    <span class="keyword">val</span> mapStream: <span class="type">DataStream</span>[(<span class="type">String</span>, <span class="type">Long</span>)] = input.map(x =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> spilt: <span class="type">Array</span>[<span class="type">String</span>] = x.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">      (spilt(<span class="number">0</span>), spilt(<span class="number">1</span>).toLong * <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置水位线和最大延迟时间</span></span><br><span class="line">    <span class="keyword">val</span> preStream: <span class="type">WindowedStream</span>[(<span class="type">String</span>, <span class="type">Long</span>), <span class="type">String</span>, windows.<span class="type">TimeWindow</span>] = mapStream.assignTimestampsAndWatermarks(<span class="keyword">new</span> <span class="type">BoundedOutOfOrdernessTimestampExtractor</span>[(<span class="type">String</span>, <span class="type">Long</span>)](<span class="type">Time</span>.seconds(<span class="number">5</span>)) &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(t: (<span class="type">String</span>, <span class="type">Long</span>)): <span class="type">Long</span> = t._2</span><br><span class="line">    &#125;)</span><br><span class="line">      <span class="comment">// 分组+开窗</span></span><br><span class="line">      .keyBy(_._1)</span><br><span class="line">      .timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>))</span><br><span class="line">      <span class="comment">// 设置允许迟到数据的时间</span></span><br><span class="line">      .allowedLateness(<span class="type">Time</span>.seconds(<span class="number">5</span>))</span><br><span class="line">      <span class="comment">// 设置迟到的数据，侧输出流</span></span><br><span class="line">      .sideOutputLateData(<span class="keyword">new</span> <span class="type">OutputTag</span>[(<span class="type">String</span>, <span class="type">Long</span>)](<span class="string">&quot;later&quot;</span>))</span><br><span class="line"></span><br><span class="line">    preStream</span><br><span class="line">      <span class="comment">// 设置处理函数，需要同时考虑到第一次处理  和  因为允许迟到数据到来时和之前处理结果合并时的计算打印不同的值</span></span><br><span class="line">      .process(<span class="keyword">new</span> <span class="type">MyCount1</span>).print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyCount1</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[(<span class="type">String</span>, <span class="type">Long</span>), <span class="type">String</span>, <span class="type">String</span>, <span class="type">TimeWindow</span>]</span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements: <span class="type">Iterable</span>[(<span class="type">String</span>, <span class="type">Long</span>)], out: <span class="type">Collector</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// 设置每个窗口单独的状态变量，用于区别是水位线过窗口结束时间时的计算（第一次）还是允许迟到数据来临时候的聚合计算（后几次），只用于打印不同的值，实际上逻辑不必分开写</span></span><br><span class="line">      <span class="keyword">val</span> flag: <span class="type">ValueState</span>[<span class="type">Boolean</span>] = context.windowState.getState(<span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Boolean</span>](<span class="string">&quot;flag&quot;</span>, <span class="type">Types</span>.of[<span class="type">Boolean</span>]))</span><br><span class="line"></span><br><span class="line">      <span class="comment">// flag默认false</span></span><br><span class="line">      <span class="comment">// false时是第一次计算，即水位线超过窗口结束时间时候</span></span><br><span class="line">      <span class="keyword">if</span> (!flag.value())&#123;</span><br><span class="line">        out.collect(<span class="string">s&quot;窗口开始第一次计算（水位线此时已经超过窗口结束时间），此时窗口内的元素的个数为<span class="subst">$&#123;elements.size&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment">// 更新状态</span></span><br><span class="line">        flag.update(<span class="literal">true</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 此时是因为允许迟到数据开始的聚合计算，此时此窗口已经计算了一个结果，但是因为允许迟到数据的时间未过，所以窗口未关闭，此时来一条数据需要计算一次</span></span><br><span class="line">        out.collect(<span class="string">s&quot;窗口整合迟到的数据开始计算...，此时窗口内的元素的个数为<span class="subst">$&#123;elements.size&#125;</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210102155853069.png" alt="image-20210102155853069"></p><p>可以看到因为水位线的关系，窗口[0,5)虽然在事件时间7到达时还没有触发计算，7之后的2还被直接纳入了窗口[0,5)，当事件时间10到达时，水位线已经到达了窗口的关闭时间，导致窗口计算，此时窗口内元素为3。</p><p>然后继续输入窗口[0,5)的数据</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210102160109858.png" alt="image-20210102160109858"></p><p>发现迟到的数据再次和[0,5)之前的结果整合计算，这是因为设置了<code>.allowedLateness(Time.seconds(5))</code>允许迟到的时间为5，在此时间区间内到达的数据会每条和之前窗口的计算结果进行整合计算。当超过这5秒时，再次到达的[0,5)窗口数据将被丢弃。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210102160331132.png" alt="image-20210102160331132"></p><p>第一个是[5,10)的窗口，当允许超时时间过去后，再次输入[0,5)窗口数据，数据被丢弃，存到了侧输出流<code>later</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们将介绍时间语义，并描述流中不同的时间概念。我们将讨论流处理器在乱序事件流的情况下如何提供准确的计算结果，以及我们如何处理历史事件流，如何</summary>
      
    
    
    
    <category term="Flink" scheme="https://awslzhang.top/categories/Flink/"/>
    
    
    <category term="Flink" scheme="https://awslzhang.top/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink Api学习</title>
    <link href="https://awslzhang.top/2020/12/17/Flink-API/"/>
    <id>https://awslzhang.top/2020/12/17/Flink-API/</id>
    <published>2020-12-17T12:36:28.000Z</published>
    <updated>2021-01-02T10:05:23.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DataStream-API"><a href="#DataStream-API" class="headerlink" title="DataStream API"></a>DataStream API</h1><p>所有的Flink程序都是由三部分组成的： Source 、Transformation 和 Sink。</p><p>Source 负责读取数据源，Transformation 利用各种算子进行处理加工，Sink 负责输出。</p><p>所以练习API，Source是必不可少的，没有数据源就没有第一步。这里使用手动造数据的方法，而Flink提供了一下方式。</p><h2 id="搭建执行环境"><a href="#搭建执行环境" class="headerlink" title="搭建执行环境"></a>搭建执行环境</h2><p>编写Flink程序的第一件事情就是搭建执行环境。执行环境决定了程序是运行在单机上还是集群上。在DataStream API中，程序的执行环境是由StreamExecutionEnvironment设置的。在我们的例子中，我们通过调用静态getExecutionEnvironment()方法来获取执行环境。这个方法根据调用方法的上下文，返回一个本地的或者远程的环境。如果这个方法是一个客户端提交到远程集群的代码调用的，那么这个方法将会返回一个远程的执行环境。否则，将返回本地执行环境。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a local stream execution environment</span></span><br><span class="line"><span class="keyword">val</span> localEnv = <span class="type">StreamExecutionEnvironment</span></span><br><span class="line">  .createLocalEnvironment()</span><br><span class="line"><span class="comment">// create a remote stream execution environment</span></span><br><span class="line"><span class="keyword">val</span> remoteEnv = <span class="type">StreamExecutionEnvironment</span></span><br><span class="line">  .createRemoteEnvironment(</span><br><span class="line">    <span class="string">&quot;host&quot;</span>, <span class="comment">// hostname of JobManager</span></span><br><span class="line">    <span class="number">1234</span>, <span class="comment">// port of JobManager process</span></span><br><span class="line">    <span class="string">&quot;path/to/jarFile.jar&quot;</span></span><br><span class="line">  ) <span class="comment">// JAR file to ship to the JobManager</span></span><br></pre></td></tr></table></figure><p>接下来，我们使用<code>env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</code>来将我们程序的时间语义设置为事件时间。执行环境提供了很多配置选项，例如：设置程序的并行度和程序是否开启容错机制。</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><ul><li>从集合中读取：fromElements、fromCollection</li><li>从文件中读取：readTextFile</li><li>从网络sock：socketTextStream</li><li>Kafka数据源 ：（额外导包）</li></ul><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka-0.10_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>0.10是Kafka版本</p></blockquote><p>使用addSource通用数据源，addSource(SourceFunction)，使用富函数SourceFunction（需要隐式转换）也可以。下面的自定义数据源就是这个原理。</p><p>既然addSource需要SourceFunction的参数难道用我们自己实现吗，不用，既然我们导了包就能直接用现成的！</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> kafkaProps = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line"> kafkaProps.setProperty(<span class="string">&quot;zookeeper.connect&quot;</span>, <span class="type">ZOOKEEPER_HOST</span>)</span><br><span class="line"> kafkaProps.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="type">KAFKA_BROKER</span>)</span><br><span class="line"> kafkaProps.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="type">TRANSACTION_GROUP</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">//topicd的名字是new，schema默认使用SimpleStringSchema()即可</span></span><br><span class="line"> <span class="keyword">val</span> transaction = env</span><br><span class="line">   .addSource(</span><br><span class="line">     <span class="keyword">new</span> <span class="type">FlinkKafkaConsumer08</span>[<span class="type">String</span>](<span class="string">&quot;new&quot;</span>, <span class="keyword">new</span> <span class="type">SimpleStringSchema</span>(), kafkaProps)</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>我们创建一个温度器，并随机它的数据：</p><p><strong>创建数据结构</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxjgg.source</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReading</span>(<span class="params">id: <span class="type">String</span>, temperature: <span class="type">Double</span>, timestamp: <span class="type">Long</span></span>)</span></span><br></pre></td></tr></table></figure><p><strong>生成数据</strong></p><p>需要集成Flink的类，因为之后要用Flink来处理这些数据</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxjgg.source</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.&#123;<span class="type">RichParallelSourceFunction</span>, <span class="type">SourceFunction</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.<span class="type">Random</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SensorSource</span> <span class="keyword">extends</span> <span class="title">RichParallelSourceFunction</span>[<span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> running: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(sourceContext: <span class="type">SourceFunction</span>.<span class="type">SourceContext</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> random = <span class="keyword">new</span> <span class="type">Random</span>()</span><br><span class="line">    <span class="keyword">val</span> result = (<span class="number">1</span> to <span class="number">10</span>).map(x =&gt; (x + <span class="string">&quot;&quot;</span>, random.nextGaussian() * <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (running) &#123;</span><br><span class="line">      result.map(x =&gt; (x._1, x._2 + random.nextGaussian() * <span class="number">0.5</span>))</span><br><span class="line">      result.foreach(x =&gt; sourceContext.collect(<span class="type">SensorReading</span>(x._1, x._2, <span class="type">System</span>.currentTimeMillis())))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel</span></span>(): <span class="type">Unit</span> = running = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试数据处理</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxjgg.source</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value:<span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    value.print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你可能已经注意到Flink程序的定义和提交执行使用的就是正常的Scala或者Java的方法。大多数情况下，这些代码都写在一个静态main方法中。在我们的例子中，我们定义了Test对象，然后将大多数的应用程序逻辑放在了main()中。</p><p>Flink流处理程序的结构如下：</p><ol><li>创建Flink程序执行环境。</li><li>从数据源读取一条或者多条流数据</li><li>使用流转换算子实现业务逻辑</li><li>将计算结果输出到一个或者多个外部设备（可选）</li><li>执行程序</li></ol><p>接下来我们详细的学习一下这些部分。</p><h2 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h2><p>Flink没有类似于spark中foreach方法，让用户进行迭代的操作。虽有对外的输出操作都要利用Sink完成。最后通过类似如下方式完成整个任务最终输出操作。</p><p><code> stream.addSink(new MySink(xxxx))</code></p><p>官方提供了一部分的框架的sink。除此以外，需要用户自定义实现sink。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210101142032322.png" alt="image-20210101142032322"></p><p>第三方：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210101142045980.png" alt="image-20210101142045980"></p><p>其他的需要自定义！！</p><h3 id="Kafka-1"><a href="#Kafka-1" class="headerlink" title="Kafka"></a>Kafka</h3><p>继上面的Kafka的Source，继续写Sink</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataStream.addSink(<span class="keyword">new</span> <span class="type">FlinkKafkaProducer011</span>[<span class="type">String</span>](<span class="string">&quot;localhost:9092&quot;</span>, <span class="string">&quot;topic&quot;</span>, <span class="keyword">new</span> <span class="type">SimpleStringSchema</span>()))</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>因为官方没有Redis的Sink，但是Bahir提供了。所以需要引入它的包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.bahir<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-redis_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义一个redis的mapper类，用于定义保存到redis时调用的命令：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRedisMapper</span> <span class="keyword">extends</span> <span class="title">RedisMapper</span>[<span class="type">SensorReading</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getCommandDescription</span></span>: <span class="type">RedisCommandDescription</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">RedisCommandDescription</span>(<span class="type">RedisCommand</span>.<span class="type">HSET</span>, <span class="string">&quot;sensor_temperature&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getValueFromData</span></span>(t: <span class="type">SensorReading</span>): <span class="type">String</span> = t.temperature.toString</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getKeyFromData</span></span>(t: <span class="type">SensorReading</span>): <span class="type">String</span> = t.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主函数中调用：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">FlinkJedisPoolConfig</span>.<span class="type">Builder</span>().setHost(<span class="string">&quot;localhost&quot;</span>).setPort(<span class="number">6379</span>).build()</span><br><span class="line">dataStream.addSink( <span class="keyword">new</span> <span class="type">RedisSink</span>[<span class="type">SensorReading</span>](conf, <span class="keyword">new</span> <span class="type">MyRedisMapper</span>))</span><br></pre></td></tr></table></figure><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-elasticsearch6_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主函数中调用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> httpHosts = <span class="keyword">new</span> util.<span class="type">ArrayList</span>[<span class="type">HttpHost</span>]()</span><br><span class="line">httpHosts.add(<span class="keyword">new</span> <span class="type">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> esSinkBuilder = <span class="keyword">new</span> <span class="type">ElasticsearchSink</span>.<span class="type">Builder</span>[<span class="type">SensorReading</span>]( httpHosts, <span class="keyword">new</span> <span class="type">ElasticsearchSinkFunction</span>[<span class="type">SensorReading</span>] &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(t: <span class="type">SensorReading</span>, runtimeContext: <span class="type">RuntimeContext</span>, requestIndexer: <span class="type">RequestIndexer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;saving data: &quot;</span> + t)</span><br><span class="line">    <span class="keyword">val</span> json = <span class="keyword">new</span> util.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">String</span>]()</span><br><span class="line">    json.put(<span class="string">&quot;data&quot;</span>, t.toString)</span><br><span class="line">    <span class="keyword">val</span> indexRequest = <span class="type">Requests</span>.indexRequest().index(<span class="string">&quot;sensor&quot;</span>).`<span class="class"><span class="keyword">type</span>`(<span class="params">&quot;readingData&quot;</span>).<span class="title">source</span>(<span class="params">json</span>)</span></span><br><span class="line"><span class="class">    <span class="title">requestIndexer</span>.<span class="title">add</span>(<span class="params">indexRequest</span>)</span></span><br><span class="line"><span class="class">    <span class="title">println</span>(<span class="params">&quot;saved successfully&quot;</span>)</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125; )</span></span><br><span class="line"><span class="class"><span class="title">dataStream</span>.<span class="title">addSink</span>(<span class="params"> esSinkBuilder.build(</span>) )</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><h3 id="JDBC-1-10没有"><a href="#JDBC-1-10没有" class="headerlink" title="JDBC(1.10没有)"></a>JDBC(1.10没有)</h3><p><strong>1.11后有，这种不够灵活，不能根据情况进行插入或者更新。</strong></p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/connectors/jdbc.html">Apache Flink 1.12 Documentation: JDBC Connector</a></p><p>This connector provides a sink that writes data to a JDBC database.</p><p>To use it, add the following dependency to your project (along with your JDBC-driver):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-jdbc_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Note that the streaming connectors are currently <strong>NOT</strong> part of the binary distribution. See how to link with them for cluster execution <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/project-configuration.html">here</a>.</p><p>Created JDBC sink provides at-least-once guarantee. Effectively exactly-once can be achieved using upsert statements or idempotent updates.</p><p>Example usage:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StreamExecutionEnvironment</span> env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment();</span><br><span class="line">env</span><br><span class="line">        .fromElements(...)</span><br><span class="line">        .addSink(<span class="type">JdbcSink</span>.sink(</span><br><span class="line">                <span class="string">&quot;insert into books (id, title, author, price, qty) values (?,?,?,?,?)&quot;</span>,</span><br><span class="line">                (ps, t) -&gt; &#123;</span><br><span class="line">                    ps.setInt(<span class="number">1</span>, t.id);</span><br><span class="line">                    ps.setString(<span class="number">2</span>, t.title);</span><br><span class="line">                    ps.setString(<span class="number">3</span>, t.author);</span><br><span class="line">                    ps.setDouble(<span class="number">4</span>, t.price);</span><br><span class="line">                    ps.setInt(<span class="number">5</span>, t.qty);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="type">JdbcConnectionOptions</span>.<span class="type">JdbcConnectionOptionsBuilder</span>()</span><br><span class="line">                        .withUrl(getDbMetadata().getUrl())</span><br><span class="line">                        .withDriverName(getDbMetadata().getDriverClass())</span><br><span class="line">                        .build()));</span><br><span class="line">env.execute();</span><br></pre></td></tr></table></figure><p>Please refer to the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/api/java/org/apache/flink/connector/jdbc/JdbcSink.html">API documentation</a> for more details.</p><h4 id="自定义-1"><a href="#自定义-1" class="headerlink" title="自定义"></a>自定义</h4><p>1.10以及以前没有官方的，需要自定义。需要使用富函数的<code>SinkFunction</code>，使用富函数的生命周期来创建和关闭JDBC的连接</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJdbcSink</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">RichSinkFunction</span>[<span class="type">SensorReading</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> conn: <span class="type">Connection</span> = _</span><br><span class="line">  <span class="keyword">var</span> insertStmt: <span class="type">PreparedStatement</span> = _</span><br><span class="line">  <span class="keyword">var</span> updateStmt: <span class="type">PreparedStatement</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="comment">// open 主要是创建连接</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">open</span></span>(parameters: <span class="type">Configuration</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">super</span>.open(parameters)</span><br><span class="line"></span><br><span class="line">    conn = <span class="type">DriverManager</span>.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">    insertStmt = conn.prepareStatement(<span class="string">&quot;INSERT INTO temperatures (sensor, temp) VALUES (?, ?)&quot;</span>)</span><br><span class="line">    updateStmt = conn.prepareStatement(<span class="string">&quot;UPDATE temperatures SET temp = ? WHERE sensor = ?&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用连接，执行sql</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">invoke</span></span>(value: <span class="type">SensorReading</span>, context: <span class="type">SinkFunction</span>.<span class="type">Context</span>[_]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    </span><br><span class="line">updateStmt.setDouble(<span class="number">1</span>, value.temperature)</span><br><span class="line">    updateStmt.setString(<span class="number">2</span>, value.id)</span><br><span class="line">    updateStmt.execute()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (updateStmt.getUpdateCount == <span class="number">0</span>) &#123;</span><br><span class="line">      insertStmt.setString(<span class="number">1</span>, value.id)</span><br><span class="line">      insertStmt.setDouble(<span class="number">2</span>, value.temperature)</span><br><span class="line">      insertStmt.execute()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">close</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    insertStmt.close()</span><br><span class="line">    updateStmt.close()</span><br><span class="line">    conn.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换算子"><a href="#转换算子" class="headerlink" title="转换算子"></a><a href="#%E8%BD%AC%E6%8D%A2%E7%AE%97%E5%AD%90">转换算子</a></h2><p>在这一小节我们将大概看一下DataStream API的基本转换算子。与时间有关的操作符（例如窗口操作符和其他特殊的转换算子）将会在后面的章节叙述。一个流的转换操作将会应用在一个或者多个流上面，这些转换操作将流转换成一个或者多个输出流。编写一个DataStream API简单来说就是将这些转换算子组合在一起来构建一个数据流图，这个数据流图就实现了我们的业务逻辑。</p><p><font color="red"><strong>大部分的流转换操作都基于用户自定义函数UDF</strong></font>。UDF函数打包了一些业务逻辑并定义了输入流的元素如何转换成输出流的元素。像<code>MapFunction</code>这样的函数，将会被定义为类，这个类实现了Flink针对特定的转换操作暴露出来的接口。虽然匿名函数很方便，但是逻辑复杂时过长的匿名函数会显得逻辑混乱。</p><p>DataStream API针对大多数数据转换操作提供了转换算子。如果你很熟悉批处理API、函数式编程语言或者SQL，那么你将会发现这些API很容易学习。我们会将DataStream API的转换算子分成四类：</p><ul><li>基本转换算子：将会作用在数据流中的每一条单独的数据上。</li><li>KeyedStream转换算子：在数据有key的情况下，对数据应用转换算子。</li><li>多流转换算子：合并多条流为一条流或者将一条流分割为多条流。</li><li>分布式转换算子：将重新组织流里面的事件。</li></ul><h3 id="基本转换算子"><a href="#基本转换算子" class="headerlink" title="基本转换算子"></a><a href="#%E5%9F%BA%E6%9C%AC%E8%BD%AC%E6%8D%A2%E7%AE%97%E5%AD%90">基本转换算子</a></h3><p><strong>基本转换算子会针对流中的每一个单独的事件做处理，也就是说每一个输入数据会产生一个输出数据。</strong>单值转换，数据的分割，数据的过滤，都是基本转换操作的典型例子。我们将解释这些算子的语义并提供示例代码。</p><h4 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a><em>MAP</em></h4><p><code>map</code>算子通过调用<code>DataStream.map()</code>来指定。<code>map</code>算子的使用将会产生一条新的数据流。它会将每一个输入的事件传送到一个用户自定义的mapper，这个mapper只返回一个输出事件，这个输出事件和输入事件的类型可能不一样。下图展示了一个map算子，这个map将每一个正方形转化成了圆形。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0501.png" alt="img"></p><p><code>MapFunction</code>的类型与输入事件和输出事件的类型相关，可以通过实现<code>MapFunction</code>接口来定义。接口包含<code>map()</code>函数，这个函数将一个输入事件恰好转换为一个输出事件。</p><p>下面的代码实现了将SensorReading中的id字段抽取出来的功能。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> readings: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = ...</span><br><span class="line"><span class="keyword">val</span> sensorIds: <span class="type">DataStream</span>[<span class="type">String</span>] = readings.map(<span class="keyword">new</span> <span class="type">IdExtractor</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdExtractor</span> <span class="keyword">extends</span> <span class="title">MapFunction</span>[<span class="type">SensorReading</span>, <span class="type">String</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(r: <span class="type">SensorReading</span>) : <span class="type">String</span> = r.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然我们更推荐匿名函数的写法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sensorIds: <span class="type">DataStream</span>[<span class="type">String</span>] = filteredReadings.map(r =&gt; r.id)</span><br></pre></td></tr></table></figure><h4 id="FILTER"><a href="#FILTER" class="headerlink" title="FILTER"></a><em>FILTER</em></h4><p><code>filter</code>转换算子通过在每个输入事件上对一个布尔条件进行求值来过滤掉一些元素，然后将剩下的元素继续发送。一个<code>true</code>的求值结果将会把输入事件保留下来并发送到输出，而如果求值结果为<code>false</code>，则输入事件会被抛弃掉。我们通过调用<code>DataStream.filter()</code>来指定流的<code>filter</code>算子，<code>filter</code>操作将产生一条新的流，其类型和输入流中的事件类型是一样的。下图展示了只产生白色方框的<code>filter</code>操作。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0502.png" alt="img"></p><p>布尔条件可以使用函数、FilterFunction接口或者匿名函数来实现。FilterFunction中的泛型是输入事件的类型。定义的<code>filter()</code>方法会作用在每一个输入元素上面，并返回一个布尔值。</p><p>下面的例子展示了如何使用filter来从传感器数据中过滤掉温度值小于25华氏温度的读数。</p><p><code>val filteredReadings = readings.filter(r =&gt; r.temperature &gt;= 25)</code></p><h4 id="FLATMAP"><a href="#FLATMAP" class="headerlink" title="FLATMAP"></a><em>FLATMAP</em></h4><p><code>flatMap</code>算子和<code>map</code>算子很类似，不同之处在于针对每一个输入事件<code>flatMap</code>可以生成0个、1个或者多个输出元素。事实上，<code>flatMap</code>转换算子是<code>filter</code>和<code>map</code>的泛化。所以<code>flatMap</code>可以实现<code>map</code>和<code>filter</code>算子的功能。下图展示了<code>flatMap</code>如何根据输入事件的颜色来做不同的处理。如果输入事件是白色方框，则直接输出。输入元素是黑框，则复制输入。灰色方框会被过滤掉。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0503.png" alt="img"></p><p>flatMap算子将会应用在每一个输入事件上面。对应的<code>FlatMapFunction</code>定义了<code>flatMap()</code>方法，这个方法返回0个、1个或者多个事件到一个<code>Collector</code>集合中，作为输出结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; T: the type of input elements</span><br><span class="line">&#x2F;&#x2F; O: the type of output elements</span><br><span class="line">FlatMapFunction[T, O]</span><br><span class="line">    &gt; flatMap(T, Collector[O]): Unit</span><br></pre></td></tr></table></figure><p>下面的例子展示了在数据分析教程中经常用到的例子，我们用<code>flatMap</code>来实现。使用<code>_</code>来切割传感器ID，比如<code>sensor_1</code>。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdSplitter</span> <span class="keyword">extends</span> <span class="title">FlatMapFunction</span>[<span class="type">String</span>, <span class="type">String</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">flatMap</span></span>(id: <span class="type">String</span>, out: <span class="type">Collector</span>[<span class="type">String</span>]) : <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> arr = id.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        arr.foreach(out.collect)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名函数写法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> splitIds = sensorIds</span><br><span class="line">  .flatMap(r =&gt; r.split(<span class="string">&quot;_&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="键控流转换算子"><a href="#键控流转换算子" class="headerlink" title="键控流转换算子"></a><a href="#%E9%94%AE%E6%8E%A7%E6%B5%81%E8%BD%AC%E6%8D%A2%E7%AE%97%E5%AD%90">键控流转换算子</a></h3><p>很多流处理程序的一个基本要求就是要能<font color="red">对数据进行分组，分组后的数据共享某一个相同的属性</font>。DataStream API提供了一个叫做<code>KeyedStream</code>的抽象，此抽象会从<strong>逻辑上对DataStream进行分区</strong>，分区后的数据拥有同样的<code>Key</code>值，分区后的流互不相关。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-19_10-47-17.png"></p><p>而Spark的分组函数不是这样，因为它是批处理。所以他不是一个事件执行一个分组，而是一批数据执行一次分组。所以它的分组之后是K,[V]的事件，即它的分组函数是物理分组。</p><hr><p>针对KeyedStream的状态转换操作可以读取数据或者写入数据到当前事件Key所对应的状态中。<strong>这表明拥有同样Key的所有事件都可以访问同样的状态</strong>，也就是说所以这些事件可以一起处理。</p><blockquote><p>也就是说分组后的每个key所在的分区都会维护一个状态，为了之后的滚动计算分区内的值，每当分区中的一个事件到来时，都会与之前保存好的状态相计算，得到最新的状态。而每个key的状态都是隔离的。</p></blockquote><blockquote><p>要小心使用状态转换操作和基于Key的聚合操作。如果Key的值越来越多，例如：Key是订单ID，我们必须及时清空Key所对应的状态，以免引起内存方面的问题。稍后我们会详细讲解。</p></blockquote><p>KeyedStream可以使用map，flatMap和filter算子来处理。接下来我们会使用keyBy算子来将DataStream转换成KeyedStream，并讲解基于key的转换操作：<strong>滚动聚合和reduce算子。</strong></p><h4 id="KEYBY"><a href="#KEYBY" class="headerlink" title="KEYBY"></a><em>KEYBY</em></h4><p>keyBy通过指定key来将DataStream转换成KeyedStream。基于不同的key，流中的事件将被分配到不同的分区中去。所有具有相同key的事件将会在接下来的操作符的同一个子任务槽中进行处理。拥有不同key的事件可以在同一个任务中处理。但是算子只能访问当前事件的key所对应的状态。</p><p>如下图所示，把输入事件的颜色作为key，黑色的事件输出到了一个分区，其他颜色输出到了另一个分区。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0504.png"></p><p><code>keyBy()</code>方法接收一个参数，这个参数指定了key或者keys，有很多不同的方法来指定key。我们将在后面讲解。下面的代码声明了<code>id</code>这个字段为SensorReading流的key。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> keyed: <span class="type">KeyedStream</span>[<span class="type">SensorReading</span>, <span class="type">String</span>] = readings.keyBy(r =&gt; r.id)</span><br></pre></td></tr></table></figure><p>匿名函数<code>r =&gt; r.id</code>抽取了传感器读数SensorReading的id值。</p><h4 id="滚动聚合🔺"><a href="#滚动聚合🔺" class="headerlink" title="滚动聚合🔺"></a><em>滚动聚合</em>🔺</h4><p><font color="red"><strong>滚动聚合算子由<code>KeyedStream</code>调用，并生成一个聚合以后的DataStream</strong></font>，例如：sum，minimum，maximum。<strong>一个滚动聚合算子会为每一个观察到的key保存一个聚合的值</strong>。<strong>针对每一个输入事件，算子将会更新保存的聚合结果</strong>，并发送一个带有更新后的值的事件到下游算子。<strong>滚动聚合不需要用户自定义函数，但需要接受一个参数，这个参数指定了在哪一个字段上面做聚合操作</strong>。DataStream API提供了以下滚动聚合方法。</p><ul><li>sum()：在输入流上对指定的字段做滚动相加操作。</li><li>min()：在输入流上对指定的字段求最小值。</li><li>max()：在输入流上对指定的字段求最大值。</li><li>minBy()：在输入流上针对指定字段求最小值，并返回包含当前观察到的最小值的事件。</li><li>maxBy()：在输入流上针对指定字段求最大值，并返回包含当前观察到的最大值的事件。</li></ul><p>滚动聚合算子无法组合起来使用，每次计算只能使用一个单独的滚动聚合算子。</p><blockquote><p>因为滚动聚合算子只能对<code>KeyedStream</code>调用，且调用后会变为<code>DataStream</code></p></blockquote><p>下面的例子根据第一个字段来对类型为<code>Tuple3</code>的流做分流操作，然后针对第二个字段做滚动求和操作。</p><p><strong>scala version</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> inputStream = env.fromElements((<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> resultStream = inputStream.keyBy(<span class="number">0</span>).sum(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在这个例子里面，输入流根据第一个字段来分流，然后在第二个字段上做计算。对于key 1，输出结果是(1,2,2),(1,7,2)。对于key 2，输出结果是(2,3,1),(2,5,1)。第一个字段是key，第二个字段是求和的数值，第三个字段未定义。</p><blockquote><p>滚动聚合操作会对每一个key都保存一个状态。因为状态从来不会被清空，所以我们在使用滚动聚合算子时只能使用在<font color="red">含有有限个key的流上面。</font></p></blockquote><h4 id="REDUCE🔺"><a href="#REDUCE🔺" class="headerlink" title="REDUCE🔺"></a><em>REDUCE</em>🔺</h4><p>reduce算子是滚动聚合的泛化实现。<strong>它将一个ReduceFunction应用到了一个KeyedStream上面去。</strong>reduce算子将会把每一个输入事件和当前已经reduce出来的值做聚合计算。<strong>reduce操作不会改变流的事件类型。输出流数据类型和输入流数据类型是一样的。</strong></p><blockquote><p>实际上reduce方法就是自定义的滚动聚合方法，与之不同的是它不会改变流类型，使用会不会将KeyedStream[T]-&gt;DataStream[T1]</p></blockquote><p>reduce函数可以通过实现接口ReduceFunction来创建一个类。ReduceFunction接口定义了<code>reduce()</code>方法，此方法接收两个输入事件，输入一个相同类型的事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; T: the element type</span><br><span class="line">ReduceFunction[T]</span><br><span class="line">    &gt; reduce(T, T): T</span><br></pre></td></tr></table></figure><p>下面的例子，流根据传感器ID分流，然后计算每个传感器的当前最大温度值。</p><p><strong>scala version</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyReduce</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    <span class="keyword">val</span> value1: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = value.keyBy(_.id).reduce(<span class="keyword">new</span> myReduce)</span><br><span class="line">    value1.print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">myReduce</span> <span class="keyword">extends</span> <span class="title">ReduceFunction</span>[<span class="type">SensorReading</span>]</span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(t: <span class="type">SensorReading</span>, t1: <span class="type">SensorReading</span>): <span class="type">SensorReading</span> = &#123;</span><br><span class="line">     <span class="keyword">if</span> (t.temperature&gt;t1.temperature) &#123;</span><br><span class="line">       t</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       t1</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>reduce作为滚动聚合的泛化实现，同样也要针对每一个key保存状态。因为状态从来不会清空，<font color="red">所以我们需要将reduce算子应用在一个有限key的流上。</font></p></blockquote><h3 id="多流转换算子"><a href="#多流转换算子" class="headerlink" title="多流转换算子"></a><a href="#%E5%A4%9A%E6%B5%81%E8%BD%AC%E6%8D%A2%E7%AE%97%E5%AD%90">多流转换算子</a></h3><p>许多应用需要摄入多个流并将流合并处理，还可能需要将一条流分割成多条流然后针对每一条流应用不同的业务逻辑。接下来，我们将讨论DataStream API中提供的能够处理多条输入流或者发送多条输出流的操作算子。</p><h4 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a><em>UNION</em></h4><p>DataStream.union()方法将两条或者多条DataStream合并成一条具有<strong>与输入流相同类型的输出DataStream</strong>。接下来的转换算子将会处理输入流中的所有元素。下图展示了union操作符如何将黑色和白色的事件流合并成一个单一输出流。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0505.png" alt="img"></p><p>事件合流的方式为FIFO方式。操作符并不会产生一个特定顺序的事件流。<strong>union操作符也不会进行去重。每一个输入事件都被发送到了下一个操作符。</strong></p><p>下面的例子展示了如何将三条类型为SensorReading的数据流合并成一条流。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> parisStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = ...</span><br><span class="line"><span class="keyword">val</span> tokyoStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = ...</span><br><span class="line"><span class="keyword">val</span> rioStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = ...</span><br><span class="line"><span class="keyword">val</span> allCities: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = parisStream</span><br><span class="line">  .union(tokyoStream, rioStream)</span><br></pre></td></tr></table></figure><h4 id="CONNECT-COMAP和COFLATMAP🔺"><a href="#CONNECT-COMAP和COFLATMAP🔺" class="headerlink" title="CONNECT, COMAP和COFLATMAP🔺"></a><em>CONNECT, COMAP和COFLATMAP</em>🔺</h4><p>联合两条流的事件是非常常见的流处理需求。例如监控一片森林然后发出高危的火警警报。报警的Application接收两条流，一条是温度传感器传回来的数据，一条是烟雾传感器传回来的数据。当两条流都超过各自的阈值时，报警。</p><p>DataStream API提供了<code>connect</code>操作来支持以上的应用场景。<code>DataStream.connect()</code>方法接收一条<code>DataStream</code>，然后返回一个<code>ConnectedStreams</code>类型的对象，这个对象表示了两条连接的流。</p><p>ConnectedStreams提供了<code>map()</code>和<code>flatMap()</code>方法，分别需要接收类型为<code>CoMapFunction</code>和<code>CoFlatMapFunction</code>的参数。</p><p>以上两个函数里面的泛型是第一条流的事件类型和第二条流的事件类型，以及输出流的事件类型。还定义了两个方法，每一个方法针对一条流来调用。<code>map1()</code>和<code>flatMap1()</code>会调用在第一条流的元素上面，<code>map2()</code>和<code>flatMap2()</code>会调用在第二条流的元素上面。flatmap的flatmap函数可以发送多个值，而map只能一个。</p><p>对两条流做连接查询通常需要这两条流基于某些条件被确定性的路由到操作符中相同的并行实例里面去。<strong>在默认情况下，connect()操作将不会对两条流的事件建立任何关系，所以两条流的事件将会随机的被发送到下游的算子实例里面去。</strong>这样的行为会产生不确定性的计算结果，显然不是我们想要的。<font color="red">为了针对ConnectedStreams进行确定性的转换操作，connect()方法可以和keyBy()或者broadcast()组合起来使用。我们首先看一下keyBy()的示例。</font></p><ul><li>使用keyBy指定key来对两条流建立关系</li></ul><p><strong>keyby</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> one = ...</span><br><span class="line"><span class="keyword">val</span> two = ...</span><br><span class="line"><span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">val</span> keyedConnect1 = one.connect(two).keyBy(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 写法2</span></span><br><span class="line"><span class="keyword">val</span> keyedConnect2 = one.keyBy(<span class="number">0</span>).connect(two.keyBy(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> one: <span class="type">DataStream</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = env.fromElements((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>,<span class="string">&quot;b&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> two: <span class="type">DataStream</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = env.fromElements((<span class="number">1</span>, <span class="string">&quot;m&quot;</span>), (<span class="number">2</span>,<span class="string">&quot;n&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> keyedConnect2: <span class="type">ConnectedStreams</span>[(<span class="type">Int</span>, <span class="type">String</span>), (<span class="type">Int</span>, <span class="type">String</span>)] = one.keyBy(<span class="number">0</span>).connect(two.keyBy(<span class="number">0</span>))</span><br><span class="line">    keyedConnect2.map(<span class="keyword">new</span> <span class="type">MyCoMap</span>).print()</span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyCoMap</span> <span class="keyword">extends</span> <span class="title">CoMapFunction</span>[(<span class="type">Int</span>, <span class="type">String</span>),(<span class="type">Int</span>, <span class="type">String</span>),<span class="type">String</span>]</span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map1</span></span>(in1: (<span class="type">Int</span>, <span class="type">String</span>)): <span class="type">String</span> = &#123;</span><br><span class="line">      in1._1+in1._2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map2</span></span>(in1: (<span class="type">Int</span>, <span class="type">String</span>)): <span class="type">String</span> = &#123;</span><br><span class="line">      in1._1+in1._2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：1a 1m 2b 2n</span></span><br></pre></td></tr></table></figure><h4 id="SideOutput"><a href="#SideOutput" class="headerlink" title="SideOutput"></a><em>SideOutput</em></h4><p>大部分的DataStream API的算子的输出是单一输出，也就是某种数据类型的流。除了split算子，可以将一条流分成多条流，这些流的数据类型也都相同。process function的side outputs功能可以产生多条流，并且这些流的数据类型可以不一样。一个side output可以定义为OutputTag[X]对象，<strong>X是输出流的数据类型</strong>。process function可以通过Context对象发射一个事件到一个或者多个side outputs。</p><blockquote><p><code>process function</code>与<code>KeyedProcessFunction</code>区别：</p><p><code>KeyedProcessFunction</code>是对于keyby后的流计算，而<code>process function</code>是对keyby前的流计算，都是一个元素触发一次计算</p></blockquote><p><strong>将数据发送到不同的侧输出流</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SideOutputStream</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> inputStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    inputStream.process(<span class="keyword">new</span> <span class="type">MySideOutputStream</span>).getSideOutput(<span class="keyword">new</span> <span class="type">OutputTag</span>[<span class="type">SensorReading</span>](<span class="string">&quot;tmp&quot;</span>))</span><br><span class="line">      .print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ProcessFunction`处理的是没有 kelBy的流</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MySideOutputStream</span> <span class="keyword">extends</span> <span class="title">ProcessFunction</span>[<span class="type">SensorReading</span>, <span class="type">SensorReading</span>]</span>&#123;</span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">private</span> <span class="keyword">val</span> tag: <span class="type">OutputTag</span>[<span class="type">SensorReading</span>] = <span class="keyword">new</span> <span class="type">OutputTag</span>[<span class="type">SensorReading</span>](<span class="string">&quot;tmp&quot;</span>)</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">processElement</span></span>(i: <span class="type">SensorReading</span>, context: <span class="type">ProcessFunction</span>[<span class="type">SensorReading</span>, <span class="type">SensorReading</span>]#<span class="type">Context</span>, collector: <span class="type">Collector</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// 满足指定条件则输入到侧输出流，所有元素都需要发送到正常流</span></span><br><span class="line">      <span class="keyword">if</span> (i.temperature&lt;<span class="number">10.0</span>) &#123;</span><br><span class="line">        context.output(tag, i)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      collector.collect(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210102142714440.png" alt="image-20210102142714440"></p><h3 id="分布式转换算子"><a href="#分布式转换算子" class="headerlink" title="分布式转换算子"></a><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E8%BD%AC%E6%8D%A2%E7%AE%97%E5%AD%90">分布式转换算子</a></h3><p>当我们使用DataStream API来编写程序时，系统将自动的选择数据分区策略，然后根据操作符的语义和设置的并行度将数据路由到正确的地方去。有些时候，我们需要在应用程序的层面控制分区策略，或者自定义分区策略。例如，如果我们知道会发生数据倾斜，那么我们想要针对数据流做负载均衡，将数据流平均发送到接下来的操作符中去。又或者，应用程序的业务逻辑可能需要一个算子所有的并行任务都需要接收同样的数据。再或者，我们需要自定义分区策略的时候。在这一小节，我们将展示DataStream的一些方法，可以使我们来控制或者自定义数据分区策略。</p><blockquote><p>keyBy()方法不同于分布式转换算子。所有的分布式转换算子将产生DataStream数据类型。而keyBy()产生的类型是KeyedStream，它拥有自己的keyed state。</p><p>分布式转换算子实际上就是shuffle将原有分区的数据发送到下一任务的不同分区。如果下一任务有多个并行，则有用，如果就一个它怎么发还是给一个并行度1的任务执行</p></blockquote><p>数据交换策略如下：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0203.png"></p><ul><li>前向策略将数据从一个任务发送到接收任务。如果两个任务都位于同一台物理计算机上（这通常由任务调度器确保），这种交换策略可以避免网络通信。</li><li>广播策略将所有数据发送到算子的所有的并行任务上面去。因为这种策略会复制数据和涉及网络通信，所以代价相当昂贵。</li><li>基于键控的策略通过Key值(键)对数据进行分区保证具有相同Key的数据将由同一任务处理。在图2-2中，输出“Extract hashtags”算子使用键来分区（hashtag），以便count算子的任务可以正确计算每个#标签的出现次数。</li><li>随机策略统一将数据分配到算子的任务中去，以便均匀地将负载分配到不同的计算任务。</li></ul><h4 id="Random"><a href="#Random" class="headerlink" title="Random"></a><em>Random</em></h4><p>随机数据交换由<code>DataStream.shuffle()</code>方法实现。shuffle方法将数据随机的分配到下游算子的并行任务中去。</p><h4 id="Round-Robin"><a href="#Round-Robin" class="headerlink" title="Round-Robin"></a><em>Round-Robin</em></h4><p><code>rebalance()</code>方法使用Round-Robin负载均衡算法将输入流平均分配到随后的并行运行的任务中去。图5-7为round-robin分布式转换算子的示意图。</p><h4 id="Rescale"><a href="#Rescale" class="headerlink" title="Rescale"></a><em>Rescale</em></h4><p><code>rescale()</code>方法使用的也是round-robin算法，但只会将数据发送到接下来的并行运行的任务中的一部分任务中。本质上，当发送者任务数量和接收者任务数量不一样时，rescale分区策略提供了一种轻量级的负载均衡策略。<font color="red">如果接收者任务的数量是发送者任务的数量的倍数时，rescale操作将会效率更高。</font></p><p><code>rebalance()</code>和<code>rescale()</code>的根本区别在于任务之间连接的机制不同。 <code>rebalance()</code>将会针对所有发送者任务和所有接收者任务之间建立通信通道，而<code>rescale()</code>仅仅针对每一个任务和下游算子的一部分子并行任务之间建立通信通道。rescale的示意图为图5-7。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0507.png" alt="5-7"></p><h4 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a><em>Broadcast</em></h4><p><code>broadcast()</code>方法将输入流的所有数据复制并发送到下游算子的所有并行任务中去。</p><h4 id="Global"><a href="#Global" class="headerlink" title="Global"></a><em>Global</em></h4><p><code>global()</code>方法将所有的输入流数据都发送到下游算子的第一个并行任务中去。这个操作需要很谨慎，因为将所有数据发送到同一个task，将会对应用程序造成很大的压力。</p><h4 id="Custom"><a href="#Custom" class="headerlink" title="Custom"></a><em>Custom</em></h4><p>当Flink提供的分区策略都不适用时，我们可以使用<code>partitionCustom()</code>方法来自定义分区策略。这个方法接收一个<code>Partitioner</code>对象，这个对象需要实现分区逻辑以及定义针对流的哪一个字段或者key来进行分区。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-19_14-38-09.png" alt="Snipaste_2020-12-19_14-38-09"></p><h2 id="设置并行度"><a href="#设置并行度" class="headerlink" title="设置并行度"></a><a href="#%E8%AE%BE%E7%BD%AE%E5%B9%B6%E8%A1%8C%E5%BA%A6">设置并行度</a></h2><p>Flink应用程序在一个像集群这样的分布式环境中并行执行。当一个数据流程序提交到作业管理器执行时，系统将会创建一个数据流图，然后准备执行需要的操作符。每一个操作符将会并行化到一个或者多个任务中去。每个算子的并行任务都会处理这个算子的输入流中的一份子集。一个算子并行任务的个数叫做算子的并行度。它决定了算子执行的并行化程度，以及这个算子能处理多少数据量。</p><p>一般设置并行度，我们不要在代码里设置全局并行度，这样硬编码不好，应当使用集群默认并行度，这样当集群扩充节点时，可以改变当前运行job的并行度，这样代码就不用重改代码实现并行度的增加。如果写死了，集群再怎么设置，并行度也不会变化。那么我们就应该对特定的算子进行并行度的计算。</p><p>在下面的例子里面，数据源的操作符将会按照环境默认的并行度来并行执行，map操作符的并行度将会是默认并行度的2倍，sink操作符的并行度为2。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StreamExecutionEnvironment</span> env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment;</span><br><span class="line">int defaultP = env.getParallelism;</span><br><span class="line">env</span><br><span class="line">  .addSource(<span class="keyword">new</span> <span class="type">CustomSource</span>)</span><br><span class="line">  .map(<span class="keyword">new</span> <span class="type">MyMapper</span>)</span><br><span class="line">  .setParallelism(defaultP * <span class="number">2</span>)</span><br><span class="line">  .print()</span><br><span class="line">  .setParallelism(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>当我们通过客户端将应用程序的并行度设置为16并提交执行时，source操作符的并行度为16，mapper并行度为32，sink并行度为2。如果我们在本地环境运行应用程序的话，例如在IDE中运行，机器是8核，那么source任务将会并行执行在8个任务上面，mapper运行在16个任务上面，sink运行在2个任务上面。</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a><a href="#%E7%B1%BB%E5%9E%8B">类型</a></h2><p>Flink程序所处理的流中的事件一般是对象类型。操作符接收对象输出对象。所以Flink的内部机制需要能够处理事件的类型。在网络中传输数据，或者将数据写入到状态后端、检查点和保存点中，都需要我们对数据进行序列化和反序列化。为了高效的进行此类操作，Flink需要流中事件类型的详细信息。Flink使用了<code>Type Information</code>的概念来表达数据类型，这样就能针对不同的数据类型产生特定的序列化器，反序列化器和比较操作符。</p><p>Flink也能够通过分析输入数据和输出数据来自动获取数据的类型信息以及序列化器和反序列化器。尽管如此，在一些特定的情况下，例如匿名函数或者使用泛型的情况下，我们需要明确的提供数据的类型信息，来提高我们程序的性能。</p><h3 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a><a href="#%E6%94%AF%E6%8C%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">支持的数据类型</a></h3><p>Flink支持Java和Scala提供的所有普通数据类型。最常用的数据类型可以做以下分类：</p><ul><li>Primitives（原始数据类型）</li><li>Java和Scala的Tuples（元组）</li><li>Scala的样例类</li><li>POJO类型</li><li>一些特殊的类型</li></ul><p>接下来让我们一探究竟。</p><p><em>Primitives</em></p><p>Java和Scala提供的所有原始数据类型都支持，例如<code>Int</code>(Java的<code>Integer</code>)，String，Double等等。下面举一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream[Long] numbers = env.fromElements(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>);</span><br><span class="line">numbers.map(n -&gt; n + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><em>Tuples</em></p><p>元组是一种组合数据类型，由固定数量的元素组成。</p><p>Flink为Java的Tuple提供了高效的实现。Flink实现的Java Tuple最多可以有25个元素，根据元素数量的不同，Tuple都被实现成了不同的类：Tuple1，Tuple2，一直到Tuple25。Tuple类是强类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; persons = env</span><br><span class="line">  .fromElements(</span><br><span class="line">    Tuple2.of(<span class="string">&quot;Adam&quot;</span>, <span class="number">17</span>),</span><br><span class="line">    Tuple2.of(<span class="string">&quot;Sarah&quot;</span>, <span class="number">23</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">persons.filter(p -&gt; p.f1 &gt; <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>Tuple的元素可以通过它们的public属性访问——f0，f1，f2等等。或者使用<code>getField(int pos)</code>方法来访问，元素下标从0开始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2</span><br><span class="line"></span><br><span class="line">Tuple2&lt;String, Integer&gt; personTuple = Tuple2.of(<span class="string">&quot;Alex&quot;</span>, <span class="number">42</span>);</span><br><span class="line">Integer age = personTuple.getField(<span class="number">1</span>); <span class="comment">// age = 42</span></span><br></pre></td></tr></table></figure><p>不同于Scala的Tuple，Java的Tuple是可变数据结构，所以Tuple中的元素可以重新进行赋值。重复利用Java的Tuple可以减轻垃圾收集的压力。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">personTuple.f1 = <span class="number">42</span>; <span class="comment">// set the 2nd field to 42</span></span><br><span class="line">personTuple.setField(<span class="number">43</span>, <span class="number">1</span>); <span class="comment">// set the 2nd field to 43</span></span><br></pre></td></tr></table></figure><p><em>POJO</em></p><p>POJO类的定义：</p><ul><li>公有类</li><li>无参数的公有构造器</li><li>所有的字段都是公有的，可以通过getters和setters访问。</li><li>所有字段的数据类型都必须是Flink支持的数据类型。</li></ul><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DataStream&lt;Person&gt; persons = env.fromElements(</span><br><span class="line">  <span class="keyword">new</span> Person(<span class="string">&quot;Alex&quot;</span>, <span class="number">42</span>),</span><br><span class="line">  <span class="keyword">new</span> Person(<span class="string">&quot;Wendy&quot;</span>, <span class="number">23</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><em>其他数据类型</em></p><ul><li>Array, ArrayList, HashMap, Enum</li><li>Hadoop Writable types</li></ul><h2 id="定义Key以及引用字段🔺"><a href="#定义Key以及引用字段🔺" class="headerlink" title="定义Key以及引用字段🔺"></a><a href="#%E5%AE%9A%E4%B9%89key%E4%BB%A5%E5%8F%8A%E5%BC%95%E7%94%A8%E5%AD%97%E6%AE%B5">定义Key以及引用字段</a>🔺</h2><p>在Flink中，我们必须明确指定输入流中的元素中的哪一个字段是key。</p><h3 id="使用字段位置进行keyBy"><a href="#使用字段位置进行keyBy" class="headerlink" title="使用字段位置进行keyBy"></a><a href="#%E4%BD%BF%E7%94%A8%E5%AD%97%E6%AE%B5%E4%BD%8D%E7%BD%AE%E8%BF%9B%E8%A1%8Ckeyby">使用字段位置进行keyBy</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple3&lt;Int, String, Long&gt;&gt; input = ...</span><br><span class="line">KeyedStream&lt;Tuple3&lt;Int, String, Long&gt;, String&gt; keyed = input.keyBy(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>如果我们想要用元组的第2个字段和第3个字段做keyBy，可以看下面的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input.keyBy(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="使用字段表达式来进行keyBy"><a href="#使用字段表达式来进行keyBy" class="headerlink" title="使用字段表达式来进行keyBy"></a><a href="#%E4%BD%BF%E7%94%A8%E5%AD%97%E6%AE%B5%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8Ckeyby">使用字段表达式来进行keyBy</a></h3><p>对于样例类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; sensorStream = ...</span><br><span class="line">sensorStream.keyBy(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>对于元组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple3&lt;Integer, String, Long&gt;&gt; javaInput = ...</span><br><span class="line">javaInput.keyBy(<span class="string">&quot;f2&quot;</span>) <span class="comment">// key Java tuple by 3rd field</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-19_14-46-16.png"></p><h3 id="Key选择器"><a href="#Key选择器" class="headerlink" title="Key选择器"></a><a href="#key%E9%80%89%E6%8B%A9%E5%99%A8">Key选择器</a></h3><p>方法类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KeySelector[IN, KEY]</span><br><span class="line">  &gt; getKey(IN): KEY</span><br></pre></td></tr></table></figure><p><strong>scala version</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sensorData = ...</span><br><span class="line"><span class="keyword">val</span> byId = sensorData.keyBy(r =&gt; r.id)</span><br></pre></td></tr></table></figure><p><strong>java version</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; sensorData = ...</span><br><span class="line">KeyedStream&lt;SensorReading, String&gt; byId = sensorData.keyBy(r -&gt; r.id);</span><br></pre></td></tr></table></figure><h2 id="实现UDF函数，更细粒度的控制流"><a href="#实现UDF函数，更细粒度的控制流" class="headerlink" title="实现UDF函数，更细粒度的控制流"></a><a href="#%E5%AE%9E%E7%8E%B0udf%E5%87%BD%E6%95%B0%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E6%8E%A7%E5%88%B6%E6%B5%81">实现UDF函数，更细粒度的控制流</a></h2><p>其上上面的例子已经有使用UDF自定义函数处理逻辑了。</p><h3 id="函数类"><a href="#函数类" class="headerlink" title="函数类"></a><a href="#%E5%87%BD%E6%95%B0%E7%B1%BB">函数类</a></h3><p>Flink暴露了所有udf函数的接口(实现方式为接口或者抽象类)。例如MapFunction, FilterFunction, ProcessFunction等等。</p><p>例子实现了FilterFunction接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterFilter</span> <span class="keyword">extends</span> <span class="title">FilterFunction</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">filter</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.contains(<span class="string">&quot;flink&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(<span class="keyword">new</span> FlinkFilter);</span><br></pre></td></tr></table></figure><p>还可以将函数实现成匿名类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(</span><br><span class="line">  <span class="keyword">new</span> RichFilterFunction&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">filter</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value.contains(<span class="string">&quot;flink&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们filter的字符串”flink”还可以当作参数传进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; tweets = ...</span><br><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(<span class="keyword">new</span> KeywordFilter(<span class="string">&quot;flink&quot;</span>));</span><br><span class="line"></span><br><span class="line">class KeywordFilter(keyWord: String) extends FilterFunction&lt;String&gt; &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">filter</span><span class="params">(String value)</span> </span>= &#123;</span><br><span class="line">    <span class="keyword">return</span> value.contains(keyWord);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a><a href="#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">匿名函数</a></h3><p><strong>匿名函数可以实现一些简单的逻辑，但无法实现一些高级功能，例如访问状态等等。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; tweets = ...</span><br><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(r -&gt; r.contains(<span class="string">&quot;flink&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="富函数🔺"><a href="#富函数🔺" class="headerlink" title="富函数🔺"></a><a href="#%E5%AF%8C%E5%87%BD%E6%95%B0">富函数</a>🔺</h3><p>其实上面的数据源就是用了富函数，它可以定义更多的操作。</p><p>我们经常会有这样的需求<strong>：在函数处理数据之前，需要做一些初始化的工作；或者需要在处理数据时可以获得函数执行上下文的一些信息；以及在处理完数据时做一些清理工作。</strong>而DataStream API就提供了这样的机制。</p><p>DataStream API提供的所有转换操作函数，都拥有它们的“富”版本，并且我们在使用常规函数或者匿名函数的地方来使用富函数。例如下面就是富函数的一些例子，可以看出，<strong>只需要在常规函数的前面加上<code>Rich</code>前缀就是富函数了。</strong></p><ul><li>RichMapFunction</li><li>RichFlatMapFunction</li><li>RichFilterFunction</li><li>…</li></ul><p>当我们使用富函数时，我们可以实现两个额外的方法：</p><ul><li>open()方法是rich function的初始化方法，当一个算子例如map或者filter被调用之前open()会被调用。open()函数通常用来做一些只需要做一次即可的初始化工作。</li><li>close()方法是生命周期中的最后一个调用的方法，通常用来做一些清理工作。</li></ul><p>另外，getRuntimeContext()方法提供了函数的RuntimeContext的一些信息，例如函数执行的并行度，当前子任务的索引，当前子任务的名字。同时还它还包含了访问<strong>分区状态</strong>的方法。下面看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFlatMap</span> <span class="keyword">extends</span> <span class="title">RichFlatMapFunction</span>&lt;<span class="title">Integer</span>, <span class="title">Tuple2</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> subTaskIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> subTaskIndex = getRuntimeContext.getIndexOfThisSubtask;</span><br><span class="line">    <span class="comment">// 做一些初始化工作</span></span><br><span class="line">    <span class="comment">// 例如建立一个和HDFS的连接</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(Integer in, Collector&lt;Tuple2&lt;Integer, Integer&gt;&gt; out)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in % <span class="number">2</span> == subTaskIndex) &#123;</span><br><span class="line">      out.collect((subTaskIndex, in));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 清理工作，断开和HDFS的连接。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Window-API"><a href="#Window-API" class="headerlink" title="Window API"></a>Window API</h1><p>一般真实的流都是无界的，怎样处理无界的数据？</p><p>将无界流转换为有界流开始计算，因为无界流是无限制的，不会有结果。</p><p>可以把无限的数据流进行切分，得到有限的数据集进行处理 —— 也就是得到有界流；窗口（window）就是将无限流切割为有限流的一种方式，它会将流数据分发到有限大小的桶（bucket）中进行分析</p><h2 id="window-类型"><a href="#window-类型" class="headerlink" title="window 类型"></a>window 类型</h2><ol><li>时间窗口（Time Window）：主要写的时间窗口，计数窗口类似。<ul><li><a href="#%E6%97%B6%E9%97%B4%E6%BB%9A%E5%8A%A8%E7%AA%97%E5%8F%A3">滚动时间窗口</a>：<strong>Tumbling Windows</strong></li><li><a href="#%E6%97%B6%E9%97%B4%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3">滑动时间窗口</a>：<strong>Sliding Windows</strong></li><li><a href="#%E4%BC%9A%E8%AF%9D%E7%AA%97%E5%8F%A3">会话窗口</a>：<strong>Session Windows</strong></li></ul></li><li>计数窗口（Count Window）<ul><li>滚动计数窗口</li><li>滑动计数窗口</li></ul></li></ol><h3 id="时间窗口"><a href="#时间窗口" class="headerlink" title="时间窗口"></a>时间窗口</h3><p><font color="red">时间窗口又分为：事件时间、触发时间。默认的是触发时间窗口</font></p><h4 id="时间滚动窗口"><a href="#时间滚动窗口" class="headerlink" title="时间滚动窗口"></a>时间滚动窗口</h4><p><strong>Tumbling Windows</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201220215345926.png" alt="image-20201220215345926"></p><ol><li>时间对齐，窗口长度固定，没有重叠</li><li>滚动窗口是特殊的滑动窗口（滑动间隔=窗口长度）</li><li>左闭右开</li></ol><p>滚动窗口计算某一秒所在的窗口的起始时间，offset=0，ts=1…n(s)：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201220144118892.png" alt="image-20201220144118892"></p><h4 id="时间滑动窗口"><a href="#时间滑动窗口" class="headerlink" title="时间滑动窗口"></a>时间滑动窗口</h4><p><strong>Sliding Windows</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201220220206360.png" alt="image-20201220220206360"></p><ol><li>滑动窗口是固定窗口的更广义的一种形式，滑动窗口由固定的窗口长度和滑动间隔组成</li><li>窗口长度固定，可以有重叠</li></ol><blockquote><p>注意：</p><p>因为滑动窗口在滑动间隔&lt;窗口长度时，不同的窗口会有重复的数据，为了前面的窗口的消失不影响后面窗口的数据，Flink会将数据复制分别给使用到此数据的不同窗口。</p><p><font color="red">所以，如果滑动间隔过小，会导致Flink复制过多的数据，造成效率严重降低。</font></p><p>例如：</p><p>窗口长度100min，窗口哦间隔1min；这样每过一分钟，就会复制此窗口的后99条数据给下一个窗口。</p></blockquote><h4 id="会话窗口"><a href="#会话窗口" class="headerlink" title="会话窗口"></a>会话窗口</h4><p><strong>Session Windows</strong>，只有时间窗口才有会话窗口</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201220221007431.png" alt="image-20201220221007431"></p><ol><li>由一系列事件组合一个指定时间长度的 timeout 间隙组成，也就是一段时间没有接收到新数据就会生成新的窗口</li><li>特点：时间无对齐</li></ol><blockquote><p> 指定时间长度timeout内无数据，新数据来临后会直接产生新的窗口。它可用来统计行为模式</p><p> 即：新来的事件和上一事件的时间间隔大于timeout的话，上一窗口直接关闭，新来的事件在新的窗口，是它的第一个事件。</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201221150605732.png" alt="image-20201221150605732"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201221150626503.png" alt="image-20201221150626503"></p><h2 id="Window-API-1"><a href="#Window-API-1" class="headerlink" title="Window API"></a>Window API</h2><p><strong><font color="red">一般数据先分流后开窗。</font>分流后不同key可能不在一个slot中也可能不在一个taskmanager中，这样，每个key的窗口互不干涉，加大并行。</strong></p><h3 id="create-window"><a href="#create-window" class="headerlink" title="create window"></a>create window</h3><p><strong><em>window</em></strong></p><p>最底层的开窗口的方法：<code>window()</code>。用 <code>.window() </code>来定义一个窗口，然后基于这个 window 去做一些聚合或者其它处理操作。注意 window () 方法必须在 keyBy 之后才能用。</p><blockquote><p>window()与windowall()</p><p>windowall()是应用在DataStream上的，将所有数据放在一个窗口中</p><p>window()是应用在DataStream和<strong>KeydStream</strong>上的。</p></blockquote><p>而<code>window</code>方法构造时间、计数窗口是需要一个窗口分配器（<strong>window assigner</strong>）的。WindowAssigner 负责将每条输入的数据分发到正确的 window 中，Flink 提供了通用的 <strong>WindowAssigner</strong>：</p><ul><li>滚动窗口（tumbling window）</li><li>滑动窗口（sliding window）</li><li>会话窗口（session window）</li><li>全局窗口（global window），都在一个窗口中</li></ul><hr><p><strong><em>timewindow</em>,<em>countwindow</em>🔺</strong></p><p>window方法创建还需要<strong>window assigner</strong>，比较麻烦。Flink 提供了更加简单的<code> .timeWindow</code> 和<code>.countWindow</code> 方法，用于定义时间窗口和计数窗口。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    .keyBy(<span class="number">0</span>).timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>L))</span><br><span class="line">    .reduce((r1, _)=&gt;r1).print()</span><br></pre></td></tr></table></figure><p><img src="E:\Projects\sync\md\flink\Snipaste_2020-12-19_12-00-52.png" alt="image-20201220102331672"></p><blockquote><p>Flink的窗口函数和Spark的有所不同，即开窗口的类型是SensorReading而不是SensorReading[]，因为它实际上是批处理，即来一条数据给一条数据打上窗口的标签。而不是赞一个窗口的数据再处理，Flink也能这样做即使用全窗口函数<code>ProcessWindowFunction</code>。</p></blockquote><p><strong>创建不同类型的窗口</strong>：</p><ol><li><strong>滚动时间窗口（tumbling time window）</strong>：<code>.timeWindow(Time.seconds(5L))</code></li><li><strong>滑动时间窗口（sliding time window）</strong>：<code>.timeWindow(Time.seconds(5L), Time.seconds(1L))</code></li><li><strong>会话窗口（session window）</strong>：<code>.window(EventTimeSessionWindows.withGrap(Time.minutes(10)))</code></li><li><strong>滚动计数窗口（tumbling count window）</strong>：<code>.countWindow(Time.seconds(5L))</code></li><li><strong>滑动计数窗口（sliding count window）</strong>：<code>.countWindow(Time.seconds(5L), Time.seconds(1L))</code></li></ol><h3 id="window-function🔺"><a href="#window-function🔺" class="headerlink" title="window function🔺"></a>window function🔺</h3><p>window function 定义了要对窗口中收集的数据做的计算操作，可以分为两类：</p><ul><li>增量聚合函数：每条数据到来就进行计算,只保存一个简单的状态(累加器)，窗口闭合即计算完成<ul><li>ReduceFuntion</li><li>AggregateFunction<ul><li>merge只会在事件时间的窗口中用到</li></ul></li></ul></li><li>全窗口函数：先把窗口所有数据收集起来,等到计算的时候会遍历所有数据.类似于Spark的微批处理，区别是时间区域（ProcessWindowFunction，一个富函数）</li></ul><h3 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h3><ul><li>.trigger() —— 触发器：定义 window 什么时候关闭，触发计算并输出结果</li><li>.evictor() —— 移除器：定义移除某些数据的逻辑</li><li>.allowedLateness() —— 允许处理迟到的数据</li><li>.sideOutputLateData() —— 将迟到的数据放入侧输出流</li><li>.getSideOutput() —— 获取侧输出流</li></ul><h2 id="增量聚合与全量聚合"><a href="#增量聚合与全量聚合" class="headerlink" title="增量聚合与全量聚合"></a>增量聚合与全量聚合</h2><h3 id="增量聚合"><a href="#增量聚合" class="headerlink" title="增量聚合"></a>增量聚合</h3><h4 id="ReduceFunction"><a href="#ReduceFunction" class="headerlink" title="ReduceFunction"></a><em>ReduceFunction</em></h4><p>比较抽象，实现简单，实现的功能较少，不可以改变流的数据类型。</p><h4 id="AggregateFunction"><a href="#AggregateFunction" class="headerlink" title="AggregateFunction"></a><em>AggregateFunction</em></h4><p>比reduce实现较麻烦，但是可以改变流中的数据类型，较灵活。</p><blockquote><p>它的优点：每个窗口只用保存一个状态即可。正是因为它的优点给它带来了一些缺点：因为保存的数据少，无法计算一些场景：例如计算窗口数据的中位数，或者计算窗口数据中出现频率最高的值。</p><p>这时使用ReduceFunction和AggregateFunction就无法实现了。<font color="red">。这个时候就需要ProcessWindowFunction了。</font></p></blockquote><p>先来看接口定义<em>AggregateFunction</em>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public interface <span class="type">AggregateFunction</span>&lt;<span class="type">IN</span>, <span class="type">ACC</span>, <span class="type">OUT</span>&gt;</span><br><span class="line">  <span class="keyword">extends</span> <span class="type">Function</span>, <span class="type">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a new accumulator to start a new aggregate</span></span><br><span class="line">  <span class="type">ACC</span> createAccumulator();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add an input element to the accumulator and return the accumulator</span></span><br><span class="line">  <span class="type">ACC</span> add(<span class="type">IN</span> value, <span class="type">ACC</span> accumulator);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// compute the result from the accumulator and return it.</span></span><br><span class="line">  <span class="type">OUT</span> getResult(<span class="type">ACC</span> accumulator);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// merge two accumulators and return the result.</span></span><br><span class="line">  <span class="type">ACC</span> merge(<span class="type">ACC</span> a, <span class="type">ACC</span> b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IN是输入元素的类型，ACC是累加器的类型，OUT是输出元素的类型。</p><p>例如：求平均温度。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TumblingWindow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">      .keyBy(<span class="number">0</span>).timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>L))</span><br><span class="line">      <span class="comment">// 例如计算平均温度</span></span><br><span class="line">      .aggregate(<span class="keyword">new</span> <span class="type">MyAggregate</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 【流输入、累加器、流输出】</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyAggregate</span> <span class="keyword">extends</span> <span class="title">AggregateFunction</span>[<span class="type">SensorReading</span>, (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>), (<span class="type">String</span>, <span class="type">Double</span>)] </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createAccumulator</span></span>(): (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 累加逻辑</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(in: <span class="type">SensorReading</span>, acc: (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>)): (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (in.id, acc._2 + <span class="number">1</span>, acc._3 + in.temperature)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 流合并，只有事件时间（默认为触发时间窗口）窗口才会用到</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(acc: (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>), acc1: (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>)): (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (acc._1, acc._2 + acc1._2, acc._3 + acc1._3)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getResult</span></span>(acc: (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>)): (<span class="type">String</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (acc._1, acc._3 / acc._2)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全量聚合"><a href="#全量聚合" class="headerlink" title="全量聚合"></a>全量聚合</h3><h4 id="ProcessWindowFunction"><a href="#ProcessWindowFunction" class="headerlink" title="ProcessWindowFunction"></a><em>ProcessWindowFunction</em></h4><p>一些业务场景，我们需要收集窗口内所有的数据进行计算，例如计算窗口数据的中位数，或者计算窗口数据中出现频率最高的值。这样的需求，使用ReduceFunction和AggregateFunction就无法实现了。这个时候就需要ProcessWindowFunction了。</p><blockquote><p>但是，此方法虽然能获取到的信息比较多，例如：窗口信息和窗口内所有数据的集合。但是正式因为存的东西过多，将会非常占用空间。所以 有一种将ReduceFunction/AggregateFunctionProcessWindowFunction结合起来使用的方式，吸取两边的优点。<font color="red">增量聚合负责聚合，全窗口函数负责包装窗口信息</font></p></blockquote><p>先来看接口定义</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessWindowFunction&lt;IN</span>, <span class="title">OUT</span>, <span class="title">KEY</span>, <span class="title">W</span> <span class="keyword">extends</span> <span class="title">Window&gt;</span></span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">AbstractRichFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Evaluates the window</span></span><br><span class="line">  void process(<span class="type">KEY</span> key, <span class="type">Context</span> ctx, <span class="type">Iterable</span>&lt;<span class="type">IN</span>&gt; vals, <span class="type">Collector</span>&lt;<span class="type">OUT</span>&gt; out)</span><br><span class="line">    <span class="keyword">throws</span> <span class="type">Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Deletes any custom per-window state when the window is purged</span></span><br><span class="line">  public void clear(<span class="type">Context</span> ctx) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The context holding window metadata</span></span><br><span class="line">  public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> <span class="title">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Returns the metadata of the window</span></span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">W</span> window();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the current processing time</span></span><br><span class="line">    public <span class="keyword">abstract</span> long currentProcessingTime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the current event-time watermark</span></span><br><span class="line">    public <span class="keyword">abstract</span> long currentWatermark();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// State accessor for per-window state</span></span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">KeyedStateStore</span> windowState();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// State accessor for per-key global state</span></span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">KeyedStateStore</span> globalState();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Emits a record to the side output identified by the OutputTag.</span></span><br><span class="line">    public <span class="keyword">abstract</span> &lt;<span class="type">X</span>&gt; void output(<span class="type">OutputTag</span>&lt;<span class="type">X</span>&gt; outputTag, <span class="type">X</span> value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>process()方法接受的参数为：window的key，Iterable迭代器包含窗口的所有元素，Collector用于输出结果流。Context参数和别的process方法一样。而ProcessWindowFunction的Context对象还可以访问window的元数据(窗口开始和结束时间)，当前处理时间和水位线，per-window state和per-key global state，side outputs。</p><ul><li>per-window state: 用于保存一些信息，这些信息可以被process()访问，只要process所处理的元素属于这个窗口。</li><li>per-key global state: 同一个key，也就是在一条KeyedStream上，不同的window可以访问per-key global state保存的值。</li></ul><p>例子：计算5s滚动窗口中平均值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyProcessWindowFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> source: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    source.keyBy(r=&gt;r.id).timeWindow(<span class="type">Time</span>.seconds(<span class="number">3</span>L)).process(<span class="keyword">new</span> test1).print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输入，输出，key，窗口类型</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">test1</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[<span class="type">SensorReading</span>, (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Long</span>, <span class="type">Long</span>), <span class="type">String</span>, <span class="type">TimeWindow</span>] </span>&#123;</span><br><span class="line">    <span class="comment">// 窗口最后的处理逻辑， elements是窗口中的所有事件</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements: <span class="type">Iterable</span>[<span class="type">SensorReading</span>], out: <span class="type">Collector</span>[(<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Long</span>, <span class="type">Long</span>)]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">var</span> sum: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line">      <span class="keyword">val</span> size: <span class="type">Int</span> = elements.size</span><br><span class="line">      elements.foreach(x=&gt;&#123;</span><br><span class="line">        sum+=x.temperature</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      out.collect((key, sum / size, context.window.getStart, context.window.getEnd))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意的地方</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201221174330638.png" alt="image-20201221174330638"></p><h3 id="增量、全量联合使用🔺"><a href="#增量、全量联合使用🔺" class="headerlink" title="增量、全量联合使用🔺"></a>增量、全量联合使用🔺</h3><p>如果计算中位数或者出现最高频率的数据，则必须用全量聚合。但是，如果计算平均数之类的为了效率，直接使用增量聚合，然是如果还想获取到窗口的基础信息，则还需要全量聚合的封装，但是此时全量聚合不再计算，二十封装一次数据。</p><ol><li>增量聚合直接计算出结果</li><li>然后全量聚合根据增量聚合的结果，调整输入和输出并附加窗口信息</li><li>调用时通过<code>aggregate(增量, 全量)</code></li><li><font color="red">重要的一点，经过<code>aggregate</code>增量聚合之后，全量聚合的elements集合只有一条数据</font></li></ol><hr><p>例子：计算5s滚动窗口中的最低和最高的温度。输出的元素包含了(流的Key, 最低温度, 最高温度, 窗口结束时间)。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.transform.window</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.<span class="type">AggregateFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala.function.<span class="type">ProcessWindowFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.<span class="type">TimeWindow</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"><span class="keyword">import</span> org.example.flink.source.&#123;<span class="type">SensorReading</span>, <span class="type">SensorSource</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">AggregateAndProcessWindow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">out</span>(<span class="params">id: <span class="type">String</span>, max: <span class="type">Double</span>, min: <span class="type">Double</span>,var startTime: <span class="type">Long</span>,var endTime: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  <span class="title">def</span> <span class="title">main</span>(<span class="params">args: <span class="type">Array</span>[<span class="type">String</span>]</span>)</span>: <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">      .keyBy(r=&gt;r.id).timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>L))</span><br><span class="line">      <span class="comment">// 例如计算平均温度</span></span><br><span class="line">      .aggregate(<span class="keyword">new</span> myAggFunction ,<span class="keyword">new</span> <span class="type">MyProcessWindowFunction</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">myAggFunction</span> <span class="keyword">extends</span> <span class="title">AggregateFunction</span>[<span class="type">SensorReading</span>, (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>), out]</span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createAccumulator</span></span>(): (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (<span class="string">&quot;&quot;</span>, <span class="type">Double</span>.<span class="type">MinValue</span>, <span class="type">Double</span>.<span class="type">MaxValue</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(in: <span class="type">SensorReading</span>, acc: (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>)): (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (in.id, in.temperature.max(acc._2), in.temperature.min(acc._3))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(acc: (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>), acc1: (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>)): (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (acc._1, acc._2.max(acc1._2), acc1._3.min(acc._3))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getResult</span></span>(acc: (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>)): out = &#123;</span><br><span class="line">      out(acc._1, acc._2, acc._3, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输入，输出，key，窗口类型</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyProcessWindowFunction</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[out, out, <span class="type">String</span>, <span class="type">TimeWindow</span>] </span>&#123;</span><br><span class="line">    <span class="comment">// 因为是增量聚合的下游，所以一个窗口之会有一条数据，即聚合好的最大最小值，这里只要附加窗口信息即可，iterable只有一条数据，也不会占用过多从存储空间</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements: <span class="type">Iterable</span>[out], out: <span class="type">Collector</span>[out]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> head: out = elements.head</span><br><span class="line">      head.startTime = context.window.getStart</span><br><span class="line">      head.endTime = context.window.getEnd</span><br><span class="line">      out.collect(head)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样就可以通过增量聚合减少存储的同时使用全量聚合的窗口信息。</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201221175646429.png" alt="image-20201221175646429"></p><h2 id="其他可选API"><a href="#其他可选API" class="headerlink" title="其他可选API"></a>其他可选API</h2><ul><li>trigger() —— 触发器：定义 window 什么时候关闭，触发计算并输出结果</li><li>evitor() —— 移除器：定义移除某些数据的逻辑</li><li>allowedLateness() —— 允许处理迟到的数据(没必要，窗口到达结束时间时立马计算不关闭，允许迟到的数据每个元素进入都会和原窗口的结果进行聚合)</li><li>sideOutputLateData() —— 将迟到的数据放入侧输出流（当设置的最大迟到时间之后还来了之前的数据，需要放入侧输出流），乱序、迟到数据处理</li><li>getSideOutput() —— 获取侧输出流</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>聚合的两种计算场景：</p><ol><li>keydStream</li><li>window</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210101172351300.png" alt="image-20210101172351300"></p><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><p>转载下的文章都是通过互联网上复制下来的，这样做的目的是为了能够方便查看和更好的阅读，仅此而已，谢谢各位作者~~</p><p><a href="https://github.com/confucianzuoyuan/flink-tutorial">https://github.com/confucianzuoyuan/flink-tutorial</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DataStream-API&quot;&gt;&lt;a href=&quot;#DataStream-API&quot; class=&quot;headerlink&quot; title=&quot;DataStream API&quot;&gt;&lt;/a&gt;DataStream API&lt;/h1&gt;&lt;p&gt;所有的Flink程序都是由三部分组成的： S</summary>
      
    
    
    
    <category term="Flink" scheme="https://awslzhang.top/categories/Flink/"/>
    
    
    <category term="Flink" scheme="https://awslzhang.top/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>ready!</title>
    <link href="https://awslzhang.top/2020/12/17/ready/"/>
    <id>https://awslzhang.top/2020/12/17/ready/</id>
    <published>2020-12-16T16:02:06.000Z</published>
    <updated>2021-01-01T05:50:00.029Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好, 这里需要密码.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a1367f49e5ec24a8bf3ec0bdf6a63b65b995d6f9980147404c3137e2a06ee749">2ef123d636f2f21a7a6ecf818bf73b0168cc121ba75be9c227f6b4e8abc8413603bac797fa8aba46a44799f8da9c09b9d6964423f549ebb8738c6a9f7571f3b07f436d66846c8fb526343feafe0563584630c3d18a490b1635b405c2305064bb470554f2840230840c6b449d15044d616f863e1b370c8d3116827054df0d45d5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="interview" scheme="https://awslzhang.top/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Flink学习笔记</title>
    <link href="https://awslzhang.top/2020/12/16/Flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://awslzhang.top/2020/12/16/Flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-16T12:29:56.000Z</published>
    <updated>2021-01-01T05:49:59.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h1><h2 id="Flink是什么"><a href="#Flink是什么" class="headerlink" title="Flink是什么"></a>Flink是什么</h2><p>Apache Flink 是一个<strong>框架</strong>和<strong>分布式处理引擎</strong>，用于对<strong>无界和有界数据流</strong>进行<strong>状态</strong>计算。</p><p>我们知道，hdfs、mapreduce、hbase分别是对应google的三篇论文提出的技术，而Flink也是基于Google的dataflow model提出的技术。</p><blockquote><p>有状态：对输入进行计算时，要和之前的计算结果发生关系。</p><p>无状态：<strong>幂等性，每次输入，输出都一致</strong>。</p><p>结果准确性：exactly-once，只处理一次</p></blockquote><h2 id="为什么使用Flink"><a href="#为什么使用Flink" class="headerlink" title="为什么使用Flink"></a>为什么使用Flink</h2><ul><li>流批数据相同计算逻辑</li><li>低延迟，相对于Spark Streaming的微批有更小的延迟</li><li>结果的准确性和良好的容错性</li></ul><h3 id="数据处理架构的演变"><a href="#数据处理架构的演变" class="headerlink" title="数据处理架构的演变"></a>数据处理架构的演变</h3><h4 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h4><p>所有的存储和计算都交由一个DBMS来处理，然后通过各个系统来展示。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_20-47-35.png" alt="Snipaste_2020-12-16_20-47-35"></p><p>特点：</p><ul><li>实时性很好</li></ul><p>问题：</p><ul><li>能够同时处理的请求有限，当数据量大，请求多时就无法处理了</li></ul><h4 id="分析处理"><a href="#分析处理" class="headerlink" title="分析处理"></a>分析处理</h4><p>将数据从业务数据库复制到数仓，再进行分析和查询</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_20-50-09.png" alt="Snipaste_2020-12-16_20-50-09"></p><p>特点：</p><ul><li>不用在联表查询，不怕高并发</li></ul><p>问题：</p><ul><li>实时性做不到</li></ul><h3 id="流处理架构"><a href="#流处理架构" class="headerlink" title="流处理架构"></a>流处理架构</h3><p>上面的事务处理和分析处理都有各自的优点，但是没有同时满足低延迟和数据正确。</p><p>所以出现了流处理结构，通过将数据存在数据库中变为存在于流处理的内容中（有状态），定时持久化到本地，内存不够的话使用集群，就能同时满足低延时和高吞吐。</p><p>但是这样有个缺点，因为使用集群处理，无法保证各个节点事件的有序性，这样就会对最终结果造成偏差。</p><p>这时，lambda架构通过两套处理系统，分别对低延迟和数据准确性做出了保障。</p><h4 id="Lambda架构"><a href="#Lambda架构" class="headerlink" title="Lambda架构"></a>Lambda架构</h4><p>lambda架构：事件流既要进行流处理（低延迟）还要进行批处理（保证准确性），用两套系统保证低延迟和结果准确。twitter提出</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_20-59-21.png" alt="Snipaste_2020-12-16_20-59-21"></p><blockquote><p>为什么这里的批处理结果不准确？</p><p><strong>时间正确处理/语义化窗口</strong>（按照事件触发时间计算，不是按照事件到达时间计算），只有FLink能做到</p><p>缺点：</p><p>流处理负责低延迟，数据不准确；批处理负责数据准确。<strong>但几乎处理逻辑大致相同，却写两遍。</strong>不好</p></blockquote><blockquote><p><strong>时间正确处理/语义化窗口</strong></p><p>（按照事件触发时间计算，不是按照事件到达时间计算）</p><p>例如，由于网络延迟，一个日志本来是昨天产生的，结果今天才到达服务器。</p><p>这时，sparkstream会认为它是今天的数据，它只能按照处理时间计算。而flink认为它是昨天的数据，它按照事件时间计算。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201216114055114.png" alt="image-20201216114055114"></p><p><strong>上图查看结果</strong>，在ss中事件放在了一个一分钟的窗口中，而事件事件并不在一分钟之内，所以得知ss是计算处理时间。而Flink放在了2个窗口中，所以它不是计算处理时间，而是计算事件本身的时间。</p></blockquote><p><font color="red"><strong>所以，Flink出现了，能同时处理批流数据的计算框架。</strong></font></p><h2 id="Flink特点"><a href="#Flink特点" class="headerlink" title="Flink特点"></a>Flink特点</h2><ul><li>事件驱动（事件到达，立马计算）（SS不是事件驱动，因为它是微批，攒够一个批的事件才计算）</li><li>时间正确处理/语义化窗口</li><li>exacly-once</li><li>毫秒延迟</li><li>高可用</li><li>与众多常用存储系统的连接</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_21-07-39.png" alt="Snipaste_2020-12-16_21-07-39"></p><h2 id="vs-Spark-Streaming"><a href="#vs-Spark-Streaming" class="headerlink" title="vs Spark Streaming"></a>vs Spark Streaming</h2><ul><li>流(stream)和微批(micro-batching)</li><li>数据模型，RDD与DataFlow</li><li>运行时架构<ul><li>–spark 是批计算，将 DAG 划分为不同的 stage，一个完成后才可以计算下一个</li><li>–flink 是标准的流执行模式，一个事件在一个节点处理完后可以直接发往下一个节点进行处理</li></ul></li><li>shuffle区别🔺<ul><li>Spark是批处理，在shuffle时要等此stage的数据全部计算完毕才可以进行shuffle洗牌，开始下一个stage</li><li>而flink是流处理，每次处理就一张牌，它的shuffle也就不是洗牌了，而是发牌给下一个子任务，<strong>也不需要等待其他事件的到达。</strong>flink也有个api叫shuffle，它是随机发牌给下一个子任务，而rebalance是轮询发牌给下一个子任务的分区。</li></ul></li></ul><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="在IDEA中编写Flink程序"><a href="#在IDEA中编写Flink程序" class="headerlink" title="在IDEA中编写Flink程序"></a>在IDEA中编写Flink程序</h2><p>本项目使用的Flink版本为最新版本，也就是1.11.0。现在提供maven项目的配置文件。</p><ol><li>使用Intellij IDEA创建一个Maven新项目</li><li>勾选<code>Create from archetype</code>，然后点击<code>Add Archetype</code>按钮</li><li><code>GroupId</code>中输入<code>org.apache.flink</code>，<code>ArtifactId</code>中输入<code>flink-quickstart-scala</code>，<code>Version</code>中输入<code>1.11.0</code>，然后点击<code>OK</code></li><li>点击向右箭头，出现下拉列表，选中<code>flink-quickstart-scala:1.11.0</code>，点击<code>Next</code></li><li><code>Name</code>中输入<code>FlinkTutorial</code>，<code>GroupId</code>中输入<code>com.atguigu</code>，<code>ArtifactId</code>中输入<code>FlinkTutorial</code>，点击<code>Next</code></li><li>最好使用IDEA默认的Maven工具：Bundled（Maven 3），点击<code>Finish</code>，等待一会儿，项目就创建好了</li></ol><p>编写<code>WordCount.scala</code>程序</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line">    <span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">object</span> <span class="title">StreamingJob</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">/** Main program method */</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) : <span class="type">Unit</span> = &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// get the execution environment</span></span><br><span class="line">        <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span></span><br><span class="line">          .getExecutionEnvironment</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// get input data by connecting to the socket</span></span><br><span class="line">        <span class="keyword">val</span> text: <span class="type">DataStream</span>[<span class="type">String</span>] = env</span><br><span class="line">          .socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>, &#x27;\n&#x27;)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// parse the data, group it, window it, and aggregate the counts</span></span><br><span class="line">        <span class="keyword">val</span> windowCounts = text</span><br><span class="line">          .flatMap &#123; w =&gt; w.split(<span class="string">&quot;\\s&quot;</span>) &#125;</span><br><span class="line">          .map &#123; w =&gt; <span class="type">WordWithCount</span>(w, <span class="number">1</span>) &#125;</span><br><span class="line">          .keyBy(<span class="string">&quot;word&quot;</span>)</span><br><span class="line">          .timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>))</span><br><span class="line">          .sum(<span class="string">&quot;count&quot;</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// print the results with a single thread, rather than in parallel</span></span><br><span class="line">        windowCounts</span><br><span class="line">          .print()</span><br><span class="line">          .setParallelism(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">        env.execute(<span class="string">&quot;Socket Window WordCount&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">/** Data type for words with count */</span></span><br><span class="line">      <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">WordWithCount</span>(<span class="params">word: <span class="type">String</span>, count: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class">    &#125;</span></span><br></pre></td></tr></table></figure><p>打开一个终端（Terminal），运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nc -lk 9999</span><br></pre></td></tr></table></figure><p>接下来使用<code>IDEA</code>运行就可以了。</p><h2 id="下载Flink运行时环境，提交Jar包的运行方式"><a href="#下载Flink运行时环境，提交Jar包的运行方式" class="headerlink" title="下载Flink运行时环境，提交Jar包的运行方式"></a>下载Flink运行时环境，提交Jar包的运行方式</h2><p>下载链接：<a href="http://mirror.bit.edu.cn/apache/flink/flink-1.11.0/flink-1.11.0-bin-scala_2.11.tgz">http://mirror.bit.edu.cn/apache/flink/flink-1.11.0/flink-1.11.0-bin-scala_2.11.tgz</a></p><p>然后解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar xvfz flink-1.11.0-bin-scala_2.11.tgz</span><br></pre></td></tr></table></figure><p>启动Flink集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> flink-1.11.0</span><br><span class="line">$ ./bin/start-cluster.sh</span><br></pre></td></tr></table></figure><p>可以打开Flink WebUI查看集群状态：<a href="http://localhost:8081/">http://localhost:8081</a></p><p>在<code>IDEA</code>中使用<code>maven package</code>打包。</p><p>提交打包好的<code>JAR</code>包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> flink-1.11.0</span><br><span class="line">$ ./bin/flink run 打包好的JAR包的绝对路径</span><br></pre></td></tr></table></figure><p>停止Flink集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/stop-cluster.sh</span><br></pre></td></tr></table></figure><p>查看标准输出日志的位置，在<code>log</code>文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> flink-1.11.0/<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="程序与数据流"><a href="#程序与数据流" class="headerlink" title="程序与数据流"></a>程序与数据流</h2><ul><li>所有的Flink程序都是由三部分组成的： Source 、Transformation 和 Sink。</li><li>Source 负责读取数据源，Transformation 利用各种算子进行处理加工，Sink 负责输出</li><li>在运行时，Flink上运行的程序会被映射成“逻辑数据流”（dataflows），它包含了这三部分</li><li>每一个dataflow以一个或多个sources开始以一个或多个sinks结束。dataflow类似于任意的有向无环图（DAG）</li><li>在大部分情况下，程序中的转换运算（transformations）跟dataflow中的算子（operator）是一一对应的关系</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-32-45.png" alt="Snipaste_2020-12-16_23-32-45"></p><h1 id="Flink运行架构🔺"><a href="#Flink运行架构🔺" class="headerlink" title="Flink运行架构🔺"></a>Flink运行架构🔺</h1><h2 id="Flink运行时组件"><a href="#Flink运行时组件" class="headerlink" title="Flink运行时组件"></a>Flink运行时组件</h2><p>Flink运行时架构主要包括四个不同的组件，它们会在运行流处理应用程序时协同工作：作业管理器（JobManager）、资源管理器（ResourceManager）、任务管理器（TaskManager），以及分发器（Dispatcher）。因为Flink是用Java和Scala实现的，所以所有组件都会运行在Java虚拟机（JVMs）上。</p><h3 id="作业管理器（JobManager）"><a href="#作业管理器（JobManager）" class="headerlink" title="作业管理器（JobManager）"></a>作业管理器（JobManager）</h3><p>类似于Spark的Driver进程，一个Job就对应这一个JobManager。</p><ul><li>控制一个应用程序执行的主进程，也就是说，每个应用程序都会被一个不同的JobManager 所控制执行。</li><li>JobManager 会先接收到要执行的应用程序，这个应用程序会包括：作业图（JobGraph）、逻辑数据流图（logical dataflow graph）和打包了所有的类、库和其它资源的JAR包。</li><li>JobManager 会把JobGraph转换成一个物理层面的数据流图，这个图被叫做“执行图”（ExecutionGraph），包含了所有可以并发执行的任务。</li><li>JobManager 会向资源管理器（ResourceManager）请求执行任务必要的资源，也就是任务管理器（TaskManager）上的<strong>插槽（slot）</strong>。一旦它获取到了足够的资源，就会将执行图分发到真正运行它们的TaskManager上。而在运行过程中，JobManager会负责所有需要中央协调的操作，<strong>比如说检查点（checkpoints）的协调。</strong></li></ul><h4 id="执行图（ExecutionGraph）🔺"><a href="#执行图（ExecutionGraph）🔺" class="headerlink" title="执行图（ExecutionGraph）🔺"></a>执行图（ExecutionGraph）🔺</h4><p>Flink 中的执行图可以分成四层：StreamGraph -&gt; JobGraph -&gt; ExecutionGraph -&gt; 物理执行图</p><ol><li>StreamGraph：是根据用户通过 Stream API 编写的代码生成的最初的图。用来表示程序的拓扑结构。</li><li>JobGraph：StreamGraph经过优化后生成了 JobGraph，提交给 JobManager 的数据结构。主要的优化为，<strong>将多个符合条件的节点 chain 在一起作为一个节点</strong>，避免在不同的slot而进行网络IO。</li><li>ExecutionGraph：JobManager 根据 JobGraph 生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。</li><li>物理执行图：JobManager 根据 ExecutionGraph 对 Job 进行调度后，在各个TaskManager 上部署 Task 后形成的“图”，并不是一个具体的数据结构。</li></ol><p><strong>流程图实例</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/sdkkfkasd.png" alt="sdkkfkasd"></p><ul><li>StreamGraph-&gt;JobGraph时，最后两个合并了，是因为它们之间没有shuffle并且相同并行度，所以串为一个节点，避免它们不在一个slot中可能导致的网络传输</li><li>JobGraph-&gt;ExecutionGraph，这是由Job Manager完成的，它展示了并行的任务<ul><li><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-17_20-19-52.png" alt="Snipaste_2020-12-17_20-19-52"></li></ul></li></ul><p>所以最后各个子任务在TaskManger上的分布可能是：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-46-12.png" alt="Snipaste_2020-12-16_23-46-12"></p><blockquote><p>扁平的长方形指的是slot</p></blockquote><h4 id="任务链（Operator-Chains）🔺"><a href="#任务链（Operator-Chains）🔺" class="headerlink" title="任务链（Operator Chains）🔺"></a>任务链（Operator Chains）🔺</h4><p>Graph节点合并规则-Operator Chains</p><ul><li>Flink 采用了一种称为任务链的优化技术，<font color="red"><strong>可以在特定条件下减少本地通信的开销</strong></font>。为了满足任务链的要求<strong>，必须将两个或多个算子设为相同的并行度，并通过本地转发（local forward）的方式进行连接</strong></li><li><strong>相同并行度</strong>的 <strong>one-to-one</strong>(维护分区内数据有序) 操作，Flink 这样相连的算子链接在一起形成一个 task，原来的算子成为里面的 subtask</li><li>并行度相同、并且是 one-to-one 操作，两个条件缺一不可</li></ul><hr><blockquote><p>在代码编译过程中会将streamGarph变为JobGraph，其中会将多个符合条件的节点 chain 在一起作为一个节点，为什么？</p><p>因为把它们放在一个节点它们最终会在一个slot中运行，这时它们之间数据传递会走本地方式连接，如果不放在一起，则有可能会出现它们节点在不同的slot中执行，必然造成线程间数据连接或者不同的job manager中的slot间网络数据连接。效率低下。</p></blockquote><p>所以，各个子任务的并行度最好一致，因为在相同slot中执行使用本地线程传输会比可能的网络传输有效率。举一个反面教材：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-17_20-25-35.png" alt="Snipaste_2020-12-17_20-25-35"></p><p>由图得知，除了CE剩下的都是并行度4。并且C和D之间是shuffle，而D和E之间不是shuffle。</p><p>这个图唯一能优化的地方就是E的并行度，如果把它的并行度设为4，则D-E之后走slot本地传输，而不会跨slot传输；至于C，因为c-d是shuffle，所以C的并行度在这里不重要。</p><p><font color="red">但是最好各个子任务的并行度最好一致。</font></p><h5 id="任务链禁用"><a href="#任务链禁用" class="headerlink" title="任务链禁用"></a>任务链禁用</h5><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-17_22-14-42.png" alt="Snipaste_2020-12-17_22-14-42"></p><p>根据默认规则上图的key和sink是要合并的，但是我就是不像让它合并，可以参考的方法有：</p><ol><li>在key后手动重分区(rebalance|shuffle)</li><li>单独为key操作设置<code>disableChaining</code>，这样key前后都不会参与合并</li><li>抛开此图来讲，key和前后都是合并状态，如果想让key和前面断开和后边合并，可以单独为key设置<code>.startNewChain</code></li><li>如果直接为此图禁用合并Chain，则直接在环境处<code>.disableChaining</code></li></ol><h3 id="任务管理器（TaskManager）"><a href="#任务管理器（TaskManager）" class="headerlink" title="任务管理器（TaskManager）"></a>任务管理器（TaskManager）</h3><p>类似于Spark的Executor进程。</p><ul><li>Flink中的工作进程。通常在Flink中会有多个TaskManager运行，每一个TaskManager都包含了一定数量的插槽（slots）。插槽的数量限制了TaskManager能够执行的任务数量。</li><li>启动之后，TaskManager会向资源管理器注册它的插槽；收到资源管理器的指令后，TaskManager就会将一个或者多个插槽提供给JobManager调用。JobManager就可以向插槽分配任务（tasks）来执行了。</li><li>在执行过程中，一个TaskManager可以跟其它运行同一应用程序的TaskManager交换数据。</li></ul><blockquote><p>TaskManager是进程；slot是线程；</p></blockquote><h4 id="TaskManager-和-Slots🔺"><a href="#TaskManager-和-Slots🔺" class="headerlink" title="TaskManager 和 Slots🔺"></a>TaskManager 和 Slots🔺</h4><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-07-10.png" alt="Snipaste_2020-12-16_23-07-10"></p><ul><li>Flink 中每一个 TaskManager 都是一个JVM进程，它可能会在独立的线程上执行一个或多个子任务</li><li>为了控制一个 TaskManager 能接收多少个 task， TaskManager 通过 task slot 来进行控制（一个 TaskManager 至少有一个 slot）</li><li>Task Slot 是静态的概念，是指 TaskManager 具有的并发执行能力 </li></ul><blockquote><p><font color="red"><strong>共享slot</strong></font></p><p>默认情况下，Flink 允许子任务共享 slot，子任务即同一Job的不同操作。 这样的结果是，一个 slot 可以保存作业的整个管道。(当此Job设置全局并行度为1时,即<code>env.setParallelism(1)</code>)</p><p>此图就是一个slot保存了整个作业的处理逻辑：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-19-17.png" alt="Snipaste_2020-12-16_23-19-17"></p><p>如果想不用共享solt，可以为不同的子任务设置不同的共享组(slotSharingGroup)。</p><p>如果禁用了共享slot之后，则并行度和slot使用的计算方式已经不是下面的计算方式。首先按照分组计算各个子任务的最大并行度，<strong>然后不同组之间的最大相加。</strong></p></blockquote><h4 id="并行度测试🔺"><a href="#并行度测试🔺" class="headerlink" title="并行度测试🔺"></a>并行度测试🔺</h4><p>代码中可以通过<code>env.setParallelism(1)</code>设置Job默认并行度，<strong>但是每个子任务都有自己的并行度</strong>，所以，<font color="red"><strong>一个Stream最后的并行度（即最后需要的slot）要综合各个算子，一般(没有设置不同的共享组)可以认为就是其所有算子中最大的并行度。</strong></font>（因为共享slot的存在，使得同一任务的不同子任务可以共享slot，所以只需要其所有算子中最大的并行度。）</p><blockquote><p>一个特定算子的 子任务（subtask）的个数被称之为其并行度（parallelism）</p></blockquote><p>如果设置了不同的共享组(slotSharingGroup)，则计算方法不是上面的计算方法，而是每个组内都要使用上面的计算方法，并且不同的组相加<strong>（因为共享组之间的任务不能共享slot，比如2组的任务不能到1组的slot执行）</strong>。最后的数就是此Job最终会消耗的slot数目。</p><p><strong>例如以下代码：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> text: <span class="type">DataStream</span>[<span class="type">String</span>] = env</span><br><span class="line">  .socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>, &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse the data, group it, window it, and aggregate the counts</span></span><br><span class="line"><span class="keyword">val</span> windowCounts = text</span><br><span class="line">  .flatMap &#123; w =&gt; w.split(<span class="string">&quot;\\s&quot;</span>) &#125;.slotSharingGroup(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">  .map &#123; w =&gt; <span class="type">WordWithCount</span>(w, <span class="number">1</span>) &#125;</span><br><span class="line">  .keyBy(<span class="string">&quot;word&quot;</span>)</span><br><span class="line">  .sum(<span class="string">&quot;count&quot;</span>).setParallelism(<span class="number">2</span>).slotSharingGroup(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// print the results with a single thread, rather than in parallel</span></span><br><span class="line">windowCounts</span><br><span class="line">  .print()</span><br><span class="line">  .setParallelism(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>最终消耗4个slot，计算明细如下：</p><ul><li>defalut组：最大并行1</li><li>1组：最大并行1</li><li>2组：最大并行2</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-17_22-28-59.png" alt="Snipaste_2020-12-17_22-28-59"></p><p><strong>举例说明</strong></p><p>现有3个TaskManager，每个TaskManager有3个slot。</p><p><strong>1. Parallelism=1</strong></p><p>所有的子任务都在一个slot中。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-27-06.png" alt="Snipaste_2020-12-16_23-27-06"></p><p><strong>2. Parallelism=9</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-27-42.png" alt="Snipaste_2020-12-16_23-27-42"></p><p><strong>3. 总体为9，但是单独为Sink设置为1</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-28-43.png" alt="Snipaste_2020-12-16_23-28-43"></p><hr><h3 id="资源管理器（ResourceManager）"><a href="#资源管理器（ResourceManager）" class="headerlink" title="资源管理器（ResourceManager）"></a>资源管理器（ResourceManager）</h3><ul><li>主要负责管理任务管理器（TaskManager）的插槽（slot），TaskManger 插槽是Flink中定义的处理资源单元。</li><li>Flink为不同的环境和资源管理工具提供了不同资源管理器，比如YARN、Mesos、K8s，以及standalone部署。</li><li>当JobManager申请插槽资源时，ResourceManager会将有空闲插槽的TaskManager分配给JobManager。如果ResourceManager没有足够的插槽来满足JobManager的请求，它还可以向资源提供平台发起会话，以提供启动TaskManager进程的容器。</li></ul><h3 id="分发器（Dispatcher）"><a href="#分发器（Dispatcher）" class="headerlink" title="分发器（Dispatcher）"></a>分发器（Dispatcher）</h3><ul><li><p>可以跨作业运行，它为应用提交提供了REST接口。</p></li><li><p>当一个应用被提交执行时，分发器就会启动并将应用移交给一个JobManager。</p></li><li><p>Dispatcher也会启动一个Web UI，用来方便地展示和监控作业执行的信息。</p></li><li><p>Dispatcher在架构中可能并不是必需的，这取决于应用提交运行的方式。</p></li></ul><p>在UI提交任务时的入口。</p><h2 id="任务提交流程"><a href="#任务提交流程" class="headerlink" title="任务提交流程"></a>任务提交流程</h2><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_22-58-39.png" alt="Snipaste_2020-12-16_22-58-39"></p><h3 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-00-28.png" alt="Snipaste_2020-12-16_23-00-28"></p><h2 id="任务调度原理"><a href="#任务调度原理" class="headerlink" title="任务调度原理"></a>任务调度原理</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-01-44.png" alt="Snipaste_2020-12-16_23-01-44"></p><p>keyby之后为什么没有分组[]，是逻辑分组，因为它是流处理来一个处理一个，所以只对事件进行打标标明是哪个组，然后只处理一条事件。与Spark不同，Spark是批处理，所以分组后会是key,[event]的数据</p><p>滚动聚合后会变为DataStream；滚动聚合会存放一个状态，每当数据滚动（数据流增加时）会和状态（一个key一个状态）进行计算，得出下一个状态。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Flink&quot;&gt;&lt;a href=&quot;#Flink&quot; class=&quot;headerlink&quot; title=&quot;Flink&quot;&gt;&lt;/a&gt;Flink&lt;/h1&gt;&lt;h2 id=&quot;Flink是什么&quot;&gt;&lt;a href=&quot;#Flink是什么&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Flink" scheme="https://awslzhang.top/categories/Flink/"/>
    
    
    <category term="Flink" scheme="https://awslzhang.top/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>k8s集群监控、高可用以及部署自建Java项目</title>
    <link href="https://awslzhang.top/2020/12/06/k8s%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%E3%80%81%E9%AB%98%E5%8F%AF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%BB%BAJava%E9%A1%B9%E7%9B%AE/"/>
    <id>https://awslzhang.top/2020/12/06/k8s%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%E3%80%81%E9%AB%98%E5%8F%AF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%BB%BAJava%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-12-06T01:26:41.000Z</published>
    <updated>2021-01-01T05:50:00.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s集群监控"><a href="#k8s集群监控" class="headerlink" title="k8s集群监控"></a>k8s集群监控</h1><p>既然是监控k8s的集群，那么我们需要实时获取k8s集群的哪些信息呢？即我们的监控指标是什么？</p><p>想想k8s的集群中所有的概念，即我们需要监控：</p><ul><li>节点资源利用率</li><li>节点数</li><li>运行的Pod数目</li><li>各个容器的状态、资源</li><li>运行的程序等。</li></ul><p>确定好监控的指标后，就要开始决定使用的监控平台是什么，在众多的监控平台中选择了<code>prometheus</code>和<code>Grafana</code>来监控和展示内容。</p><p><code>prometheus</code>是一个<strong>开源的、以HTTP协议周期性抓取被监控组件状态的集监控、报警、数据库为一身的组件</strong>。</p><p><code>Grafana</code>是一个<strong>开源的数据分析和数据可视化工具，提供ui界面支持多种数据库源的数据。</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_09-48-11.png" alt="Snipaste_2020-12-06_09-48-11"></p><h2 id="搭建监控平台"><a href="#搭建监控平台" class="headerlink" title="搭建监控平台"></a>搭建监控平台</h2><h3 id="prometheus"><a href="#prometheus" class="headerlink" title="prometheus"></a><code>prometheus</code></h3><p><strong>0. 创建收集守护进程</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-exporter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">node-exporter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">node-exporter</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">node-exporter</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">prom/node-exporter</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">node-exporter</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9100</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">node-exporter</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-exporter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9100</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">31672</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">node-exporter</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f xxx.yaml</span><br></pre></td></tr></table></figure><p><strong>1. 权限配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes/proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">nonResourceURLs:</span> [<span class="string">&quot;/metrics&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_10-19-18.png" alt="Snipaste_2020-12-06_10-19-18"></p><p><strong>2.配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">prometheus.yml:</span> <span class="string">|</span></span><br><span class="line">    <span class="attr">global:</span></span><br><span class="line">      <span class="attr">scrape_interval:</span>     <span class="string">15s</span></span><br><span class="line">      <span class="attr">evaluation_interval:</span> <span class="string">15s</span></span><br><span class="line">    <span class="attr">scrape_configs:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-apiservers&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">tls_config:</span></span><br><span class="line">        <span class="attr">ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line">      <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_namespace</span>, <span class="string">__meta_kubernetes_service_name</span>, <span class="string">__meta_kubernetes_endpoint_port_name</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">default;kubernetes;https</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-nodes&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">node</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">tls_config:</span></span><br><span class="line">        <span class="attr">ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line">      <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_node_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">kubernetes.default.svc:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_node_name</span>]</span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">/api/v1/nodes/$&#123;1&#125;/proxy/metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-cadvisor&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">node</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">tls_config:</span></span><br><span class="line">        <span class="attr">ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line">      <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_node_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">kubernetes.default.svc:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_node_name</span>]</span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">/api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-service-endpoints&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_annotation_prometheus_io_scrape</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_annotation_prometheus_io_scheme</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__scheme__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(https?)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_annotation_prometheus_io_path</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>, <span class="string">__meta_kubernetes_service_annotation_prometheus_io_port</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">$1:$2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_service_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_namespace</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_name</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-services&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">service</span></span><br><span class="line">      <span class="attr">metrics_path:</span> <span class="string">/probe</span></span><br><span class="line">      <span class="attr">params:</span></span><br><span class="line">        <span class="attr">module:</span> [<span class="string">http_2xx</span>]</span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_annotation_prometheus_io_probe</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__param_target</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">blackbox-exporter.example.com:9115</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__param_target</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">instance</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_service_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_namespace</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_name</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-ingresses&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">ingress</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_ingress_annotation_prometheus_io_probe</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_ingress_scheme</span>,<span class="string">__address__</span>,<span class="string">__meta_kubernetes_ingress_path</span>]</span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+);(.+);(.+)</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;://$&#123;2&#125;$&#123;3&#125;</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__param_target</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">blackbox-exporter.example.com:9115</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__param_target</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">instance</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_ingress_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_namespace</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_ingress_name</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-pods&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">pod</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_pod_annotation_prometheus_io_scrape</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_pod_annotation_prometheus_io_path</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>, <span class="string">__meta_kubernetes_pod_annotation_prometheus_io_port</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">$1:$2</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_pod_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_namespace</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_pod_name</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_pod_name</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_10-20-28.png" alt="Snipaste_2020-12-06_10-20-28"></p><p><strong>3. deployment创建</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">prometheus-deployment</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">prom/prometheus:v2.0.0</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;/bin/prometheus&quot;</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;--storage.tsdb.path=/prometheus&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;--storage.tsdb.retention=24h&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9090</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/prometheus&quot;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/etc/prometheus&quot;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">2500Mi</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">prometheus</span>    </span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus-config</span>   </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_10-21-44.png" alt="Snipaste_2020-12-06_10-21-44"></p><p><strong>4. svc创建</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9090</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30003</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_10-22-46.png" alt="Snipaste_2020-12-06_10-22-46"></p><h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a><code>Grafana</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">grafana-core</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">      <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">        <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">grafana/grafana:4.2.0</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">grafana-core</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        </span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">         </span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">         </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_AUTH_BASIC_ENABLED</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_AUTH_ANONYMOUS_ENABLED</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">         </span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/login</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">         </span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grafana-persistent-storage</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grafana-persistent-storage</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">grafana</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">core</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_10-30-38.png" alt="Snipaste_2020-12-06_10-30-38"></p><hr><p>检验</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-03-38.png" alt="Snipaste_2020-12-06_11-03-38"></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>根据<code>kubectl get svc -n kube-system    </code>得到访问地址，访问之后，输入账号密码，都是admin</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-05-46.png" alt="Snipaste_2020-12-06_11-05-46"></p><p><strong>1. 配置数据源prometheus</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-33-54.png" alt="Snipaste_2020-12-06_11-33-54"></p><p>请注意，URL的ip请采用prometheus的svc的IP。</p><p><strong>2. 设置数据模板</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-36-19.png" alt="Snipaste_2020-12-06_11-36-19"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-50-06.png" alt="Snipaste_2020-12-06_11-50-06"></p><p>这里两种选择，你可以直接在上面的输入框内输入<code>315</code>，又或者在下面的JSON内输入JSON。</p><p>因为输入315他会请求一个网址来获取JSON，但是可能需要科学上网才能拉取到JSON。所以这里我手动输入JSON也可以。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;__inputs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DS_PROMETHEUS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Prometheus&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;datasource&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;pluginId&quot;</span>: <span class="string">&quot;prometheus&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;pluginName&quot;</span>: <span class="string">&quot;Prometheus&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;__requires&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;panel&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Graph&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;panel&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Singlestat&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;grafana&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;grafana&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Grafana&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;3.1.1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;datasource&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;prometheus&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Prometheus&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.3.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Kubernetes cluster monitoring (via Prometheus)&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Monitors Kubernetes cluster using Prometheus. Shows overall cluster CPU / Memory / Filesystem usage as well as individual pod, containers, systemd services statistics. Uses cAdvisor metrics only.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;kubernetes&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;dark&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;timezone&quot;</span>: <span class="string">&quot;browser&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;hideControls&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;sharedCrosshair&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;rows&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLine&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">32</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_receive_bytes_total&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m]))&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;Received&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m]))&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;Sent&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Network I/O pressure&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;transparent&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;Bps&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;Bps&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Network I/O pressure&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;percent&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;180px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) / sum (machine_memory_bytes&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) * 100&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;65, 90&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Cluster memory usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;transparent&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;80%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;percent&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;180px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) / sum (machine_cpu_cores&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) * 100&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;65, 90&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Cluster CPU usage (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;80%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;percent&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;180px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">7</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_fs_usage_bytes&#123;device=~\&quot;^/dev/[sv]d[a-z][1-9]$\&quot;,id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) / sum (container_fs_limit_bytes&#123;device=~\&quot;^/dev/[sv]d[a-z][1-9]$\&quot;,id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) * 100&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;65, 90&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Cluster filesystem usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;80%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;20%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;20%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Used&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">10</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (machine_memory_bytes&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Total&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">11</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot; cores&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;30%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m]))&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Used&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot; cores&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;30%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (machine_cpu_cores&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Total&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">13</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_fs_usage_bytes&#123;device=~\&quot;^/dev/[sv]d[a-z][1-9]$\&quot;,id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Used&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">14</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_fs_limit_bytes&#123;device=~\&quot;^/dev/[sv]d[a-z][1-9]$\&quot;,id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Total&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;showTitle&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Total usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">17</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; pod_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods CPU usage (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;transparent&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;cores&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;showTitle&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods CPU usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">23</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;systemd_service_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (systemd_service_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; systemd_service_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;System services CPU usage (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;cores&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;System services CPU usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">24</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;hideEmpty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;hideZero&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,container_name!=\&quot;POD\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (container_name, pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;pod: &#123;&#123; pod_name &#125;&#125; | &#123;&#123; container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;image!=\&quot;\&quot;,name!~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, name, image)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;docker: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; image &#125;&#125; (&#123;&#123; name &#125;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;rkt_container_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, rkt_container_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;rkt: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; rkt_container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers CPU usage (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;cores&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers CPU usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;500px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;id!=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (id)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; id &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes CPU usage (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;cores&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;repeat&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;showTitle&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes CPU usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; pod_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods memory usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods memory usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">26</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;systemd_service_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (systemd_service_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; systemd_service_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;System services memory usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;System services memory usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">27</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,container_name!=\&quot;POD\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (container_name, pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;pod: &#123;&#123; pod_name &#125;&#125; | &#123;&#123; container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;image!=\&quot;\&quot;,name!~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (kubernetes_io_hostname, name, image)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;docker: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; image &#125;&#125; (&#123;&#123; name &#125;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;rkt_container_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (kubernetes_io_hostname, rkt_container_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;rkt: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; rkt_container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers memory usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers memory usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;500px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">28</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;id!=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (id)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; id &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes memory usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes memory usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_receive_bytes_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;-&gt; &#123;&#123; pod_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&lt;- &#123;&#123; pod_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods network I/O (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;Bps&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods network I/O&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_receive_bytes_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (container_name, pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;-&gt; pod: &#123;&#123; pod_name &#125;&#125; | &#123;&#123; container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (container_name, pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&lt;- pod: &#123;&#123; pod_name &#125;&#125; | &#123;&#123; container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;D&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_receive_bytes_total&#123;image!=\&quot;\&quot;,name!~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, name, image)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;-&gt; docker: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; image &#125;&#125; (&#123;&#123; name &#125;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;image!=\&quot;\&quot;,name!~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, name, image)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&lt;- docker: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; image &#125;&#125; (&#123;&#123; name &#125;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_transmit_bytes_total&#123;rkt_container_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, rkt_container_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;-&gt; rkt: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; rkt_container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;E&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;rkt_container_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, rkt_container_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&lt;- rkt: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; rkt_container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;F&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers network I/O (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;Bps&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers network I/O&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;500px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">29</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_receive_bytes_total&#123;id!=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (id)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;-&gt; &#123;&#123; id &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;id!=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (id)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&lt;- &#123;&#123; id &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes network I/O (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;Bps&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes network I/O&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;time&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;now-5m&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;now&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;timepicker&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;refresh_intervals&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;5s&quot;</span>,</span><br><span class="line">      <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30s&quot;</span>,</span><br><span class="line">      <span class="string">&quot;1m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;5m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;15m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;1h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;2h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;1d&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;time_options&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;5m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;15m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;1h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;6h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;12h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;24h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;2d&quot;</span>,</span><br><span class="line">      <span class="string">&quot;7d&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30d&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;templating&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;allValue&quot;</span>: <span class="string">&quot;.*&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;current&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hide&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;includeAll&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Node&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;options&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;label_values(kubernetes_io_hostname)&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;refresh&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;query&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;refresh&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;schemaVersion&quot;</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="number">13</span>,</span><br><span class="line">  <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;gnetId&quot;</span>: <span class="number">315</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-50-15.png" alt="Snipaste_2020-12-06_11-50-15"></p><p>load之后还需要选择之间新增的数据源prometheus。导入模板完成。</p><blockquote><p>注意</p><p>如果最后数据统计不出来，请注意本机、Grafana、Prometheus的时区是不是一致的，要是一样的时间才可以。</p></blockquote><h1 id="搭建高可用的集群"><a href="#搭建高可用的集群" class="headerlink" title="搭建高可用的集群"></a>搭建高可用的集群</h1><p>之前1个master、2个worker的集群有一个很大的问题，这种只有1个master的集群的通用问题即单点故障，当我们的master由于某种原因宕机之后，整个集群就会停止工作了，没有人来指挥了。</p><p>要想解决这中问题，通常方案是启用多个master，然后就没有单点故障问题了，至于怎么使用多个master不同的集群有不同的逻辑，例如：</p><ul><li>Hadoop集群是active master和standby master，active master宕机之后被检测到standby master就切换为active master</li><li>k8s集群是多个master都安装了HAProxy插件，worker通过虚拟IP连接到一台master时，master的HAProxy使用负载均衡将任务随机(可设置规则)发送给任一master</li></ul><blockquote><p>k8s中的虚拟IP是通过keepalived实现的，keepalived将一虚拟IP同时绑定到所有master。但是同一时刻只有一台master存在这个虚拟IP，只有这台master宕机之后，虚拟IP才会飘向其他设置了keepalived的master节点。</p></blockquote><p><strong>k8s高可用集群调用展示：</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201209111646898.png" alt="image-20201209111646898"></p><p><strong>k8s高可用集群各角色任务展示：</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201209112543393.png" alt="image-20201209112543393"></p><p><strong>挂掉拥有vip的master，vip(是指定的一个固定IP)会自动飘向其它master，keepalived实现，此时node会自动连接vip，但此时拥有vip的节点已经是其他master：</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201209112909081.png" alt="image-20201209112909081"></p><p>若挂掉没有VIP的节点，则HAProxy不会将请求负载到此节点上，对集群功能没有影响。</p><blockquote><p>集群内实现功能的各个组件：</p><ol><li>负载均衡-&gt;HAProxy</li><li>虚拟IP-&gt;keepalived</li></ol></blockquote><h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p><ul><li>一台或多台机器，操作系统 CentOS7.x-86_x64</li><li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li><li>可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点</li><li>禁止swap分区</li></ul><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><table><thead><tr><th>角色</th><th>IP</th><th>keepalived</th><th>kubeadm init</th><th>docker</th></tr></thead><tbody><tr><td>master1</td><td>192.168.44.155</td><td>√</td><td>√</td><td>√</td></tr><tr><td>master2</td><td>192.168.44.156</td><td>√</td><td>加入</td><td>√</td></tr><tr><td>node1</td><td>192.168.44.157</td><td></td><td>加入</td><td>√</td></tr><tr><td>VIP（虚拟ip）</td><td>192.168.44.158</td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭selinux</span></span><br><span class="line">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config  # 永久</span><br><span class="line">setenforce 0  # 临时</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭swap</span></span><br><span class="line">swapoff -a  # 临时</span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab    # 永久</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据规划设置主机名</span></span><br><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在master添加hosts</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">192.168.44.158    master.k8s.io   k8s-vip</span><br><span class="line">192.168.44.155    master01.k8s.io master1</span><br><span class="line">192.168.44.156    master02.k8s.io master2</span><br><span class="line">192.168.44.157    node01.k8s.io   node1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将桥接的IPv4流量传递到iptables的链</span></span><br><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system  # 生效</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 时间同步</span></span><br><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></table></figure><blockquote><p>Linux hosts</p><p>一般情况下hosts文件的每行尾一个主机，每行由三部分组成，每个部分由空格隔开。</p><ol><li>网络IP地址</li><li>主机名或域名</li><li>主机名别名</li></ol></blockquote><h2 id="所有master节点部署keepalived"><a href="#所有master节点部署keepalived" class="headerlink" title="所有master节点部署keepalived"></a>所有master节点部署keepalived</h2><h3 id="安装相关包和keepalived"><a href="#安装相关包和keepalived" class="headerlink" title="安装相关包和keepalived"></a>安装相关包和keepalived</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y conntrack-tools libseccomp libtool-ltdl</span><br><span class="line"></span><br><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure><h3 id="配置master节点"><a href="#配置master节点" class="headerlink" title="配置master节点"></a>配置master节点</h3><p>master1节点配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF </span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id k8s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">    script &quot;killall -0 haproxy&quot;</span><br><span class="line">    interval 3</span><br><span class="line">    weight -2</span><br><span class="line">    fall 10</span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER </span><br><span class="line">    interface ens33 </span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 250</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass ceb1b3ec013d66163d6ab</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.44.158</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_haproxy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>master2节点配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF </span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id k8s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">    script &quot;killall -0 haproxy&quot;</span><br><span class="line">    interval 3</span><br><span class="line">    weight -2</span><br><span class="line">    fall 10</span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP </span><br><span class="line">    interface ens33 </span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 200</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass ceb1b3ec013d66163d6ab</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.44.158</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_haproxy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201209114249444.png" alt="image-20201209114249444"></p><p><strong>通过对比上面的命令，来说明一下配置文件的注意点</strong></p><ol><li>master2的state是backup，master1是master。所以一开始虚拟IP<code>192.168.44.158</code>会在master1上</li><li>两者的interface都要写自己节点的网卡名，一般是ens33</li><li>输入自定义的虚拟IP，要和你自己节点的IP一个网段</li></ol><h3 id="启动和检查"><a href="#启动和检查" class="headerlink" title="启动和检查"></a>启动和检查</h3><p>在两台master节点都执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动keepalived</span></span><br><span class="line">$ systemctl start keepalived.service</span><br><span class="line">设置开机启动</span><br><span class="line">$ systemctl <span class="built_in">enable</span> keepalived.service</span><br><span class="line"><span class="comment"># 查看启动状态</span></span><br><span class="line">$ systemctl status keepalived.service</span><br></pre></td></tr></table></figure><p>启动后查看master1的网卡信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a s ens33</span><br></pre></td></tr></table></figure><h2 id="部署haproxy"><a href="#部署haproxy" class="headerlink" title="部署haproxy"></a>部署haproxy</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y haproxy</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>两台master节点的配置均相同，配置中声明了后端代理的两个master节点服务器，指定了haproxy运行的端口为16443等，因此16443端口为集群的入口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/haproxy/haproxy.cfg &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># Global settings</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string">global</span></span><br><span class="line"><span class="string">    # to have these messages end up in /var/log/haproxy.log you will</span></span><br><span class="line"><span class="string">    # need to:</span></span><br><span class="line"><span class="string">    # 1) configure syslog to accept network log events.  This is done</span></span><br><span class="line"><span class="string">    #    by adding the &#x27;-r&#x27; option to the SYSLOGD_OPTIONS in</span></span><br><span class="line"><span class="string">    #    /etc/sysconfig/syslog</span></span><br><span class="line"><span class="string">    # 2) configure local2 events to go to the /var/log/haproxy.log</span></span><br><span class="line"><span class="string">    #   file. A line like the following can be added to</span></span><br><span class="line"><span class="string">    #   /etc/sysconfig/syslog</span></span><br><span class="line"><span class="string">    #</span></span><br><span class="line"><span class="string">    #    local2.*                       /var/log/haproxy.log</span></span><br><span class="line"><span class="string">    #</span></span><br><span class="line"><span class="string">    log         127.0.0.1 local2</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    chroot      /var/lib/haproxy</span></span><br><span class="line"><span class="string">    pidfile     /var/run/haproxy.pid</span></span><br><span class="line"><span class="string">    maxconn     4000</span></span><br><span class="line"><span class="string">    user        haproxy</span></span><br><span class="line"><span class="string">    group       haproxy</span></span><br><span class="line"><span class="string">    daemon </span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">    # turn on stats unix socket</span></span><br><span class="line"><span class="string">    stats socket /var/lib/haproxy/stats</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will</span></span><br><span class="line"><span class="string"># use if not designated in their block</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------  </span></span><br><span class="line"><span class="string">defaults</span></span><br><span class="line"><span class="string">    mode                    http</span></span><br><span class="line"><span class="string">    log                     global</span></span><br><span class="line"><span class="string">    option                  httplog</span></span><br><span class="line"><span class="string">    option                  dontlognull</span></span><br><span class="line"><span class="string">    option http-server-close</span></span><br><span class="line"><span class="string">    option forwardfor       except 127.0.0.0/8</span></span><br><span class="line"><span class="string">    option                  redispatch</span></span><br><span class="line"><span class="string">    retries                 3</span></span><br><span class="line"><span class="string">    timeout http-request    10s</span></span><br><span class="line"><span class="string">    timeout queue           1m</span></span><br><span class="line"><span class="string">    timeout connect         10s</span></span><br><span class="line"><span class="string">    timeout client          1m</span></span><br><span class="line"><span class="string">    timeout server          1m</span></span><br><span class="line"><span class="string">    timeout http-keep-alive 10s</span></span><br><span class="line"><span class="string">    timeout check           10s</span></span><br><span class="line"><span class="string">    maxconn                 3000</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># kubernetes apiserver frontend which proxys to the backends</span></span><br><span class="line"><span class="string">#--------------------------------------------------------------------- </span></span><br><span class="line"><span class="string">frontend kubernetes-apiserver</span></span><br><span class="line"><span class="string">    mode                 tcp</span></span><br><span class="line"><span class="string">    bind                 *:16443</span></span><br><span class="line"><span class="string">    option               tcplog</span></span><br><span class="line"><span class="string">    default_backend      kubernetes-apiserver    </span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># round robin balancing between the various backends</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string">backend kubernetes-apiserver</span></span><br><span class="line"><span class="string">    mode        tcp</span></span><br><span class="line"><span class="string">    balance     roundrobin</span></span><br><span class="line"><span class="string">    server      master01.k8s.io   192.168.44.155:6443 check</span></span><br><span class="line"><span class="string">    server      master02.k8s.io   192.168.44.156:6443 check</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># collection haproxy statistics message</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string">listen stats</span></span><br><span class="line"><span class="string">    bind                 *:1080</span></span><br><span class="line"><span class="string">    stats auth           admin:awesomePassword</span></span><br><span class="line"><span class="string">    stats refresh        5s</span></span><br><span class="line"><span class="string">    stats realm          HAProxy\ Statistics</span></span><br><span class="line"><span class="string">    stats uri            /admin?stats</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>注意修改文件中的主机名和IP就行</p><h3 id="启动和检查-1"><a href="#启动和检查-1" class="headerlink" title="启动和检查"></a>启动和检查</h3><p>两台master都启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> haproxy</span><br><span class="line"><span class="comment"># 开启haproxy</span></span><br><span class="line">$ systemctl start haproxy</span><br><span class="line"><span class="comment"># 查看启动状态</span></span><br><span class="line">$ systemctl status haproxy</span><br></pre></td></tr></table></figure><p>检查端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntup|grep haproxy</span><br></pre></td></tr></table></figure><h2 id="所有节点安装Docker-kubeadm-kubelet"><a href="#所有节点安装Docker-kubeadm-kubelet" class="headerlink" title="所有节点安装Docker/kubeadm/kubelet"></a>所有节点安装Docker/kubeadm/kubelet</h2><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">$ yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line">$ docker --version</span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="添加阿里云YUM软件源"><a href="#添加阿里云YUM软件源" class="headerlink" title="添加阿里云YUM软件源"></a>添加阿里云YUM软件源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="安装kubeadm，kubelet和kubectl"><a href="#安装kubeadm，kubelet和kubectl" class="headerlink" title="安装kubeadm，kubelet和kubectl"></a>安装kubeadm，kubelet和kubectl</h3><p>由于版本更新频繁，这里指定版本号部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y kubelet-1.16.3 kubeadm-1.16.3 kubectl-1.16.3</span><br><span class="line">$ systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h2 id="部署Kubernetes-Master"><a href="#部署Kubernetes-Master" class="headerlink" title="部署Kubernetes Master"></a>部署Kubernetes Master</h2><h3 id="创建kubeadm配置文件"><a href="#创建kubeadm配置文件" class="headerlink" title="创建kubeadm配置文件"></a>创建kubeadm配置文件</h3><p><strong>在具有vip的master上操作，这里为master1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /usr/<span class="built_in">local</span>/kubernetes/manifests -p</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/kubernetes/manifests/</span><br><span class="line"></span><br><span class="line">$ vi kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line">apiServer:</span><br><span class="line">  certSANs:</span><br><span class="line">    - master1</span><br><span class="line">    - master2</span><br><span class="line">    - master.k8s.io</span><br><span class="line">    - 192.168.44.158</span><br><span class="line">    - 192.168.44.155</span><br><span class="line">    - 192.168.44.156</span><br><span class="line">    - 127.0.0.1</span><br><span class="line">  extraArgs:</span><br><span class="line">    authorization-mode: Node,RBAC</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta1</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controlPlaneEndpoint: <span class="string">&quot;master.k8s.io:16443&quot;</span></span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns: </span><br><span class="line">  <span class="built_in">type</span>: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:    </span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.16.3</span><br><span class="line">networking: </span><br><span class="line">  dnsDomain: cluster.local  </span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  serviceSubnet: 10.1.0.0/16</span><br><span class="line">scheduler: &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201209142119717.png" alt="image-20201209142119717"></p><p>这里需要填master1，master2，虚拟IP的主机名和IP</p><h3 id="在master1节点执行"><a href="#在master1节点执行" class="headerlink" title="在master1节点执行"></a>在master1节点执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm init --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure><p>按照提示配置环境变量，使用kubectl工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ kubectl get nodes</span><br><span class="line">$ kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><p><strong>按照提示保存以下内容，一会要使用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join master.k8s.io:16443 --token jv5z7n.3y1zi95p952y9p65 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:403bca185c2f3a4791685013499e7ce58f9848e2213e27194b75a2e3293d8812 \</span><br><span class="line">    --control-plane </span><br></pre></td></tr></table></figure><p>查看集群状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cs</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><h2 id="master2节点加入集群"><a href="#master2节点加入集群" class="headerlink" title="master2节点加入集群"></a>master2节点加入集群</h2><h3 id="复制密钥及相关文件"><a href="#复制密钥及相关文件" class="headerlink" title="复制密钥及相关文件"></a>复制密钥及相关文件</h3><p>从master1复制密钥及相关文件到master2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh root@192.168.44.156 mkdir -p /etc/kubernetes/pki/etcd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># scp /etc/kubernetes/admin.conf root@192.168.44.156:/etc/kubernetes</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># scp /etc/kubernetes/pki/&#123;ca.*,sa.*,front-proxy-ca.*&#125; root@192.168.44.156:/etc/kubernetes/pki</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># scp /etc/kubernetes/pki/etcd/ca.* root@192.168.44.156:/etc/kubernetes/pki/etcd</span></span><br></pre></td></tr></table></figure><h3 id="master2加入集群"><a href="#master2加入集群" class="headerlink" title="master2加入集群"></a>master2加入集群</h3><p>执行在master1上init后输出的join命令,需要带上参数<code>--control-plane</code>表示把master控制节点加入集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join master.k8s.io:16443 --token ckf7bs.30576l0okocepg8b     --discovery-token-ca-cert-hash sha256:19afac8b11182f61073e254fb57b9f19ab4d798b70501036fc69ebef46094aba --control-plane</span><br></pre></td></tr></table></figure><p>检查状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line">kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure><p><strong>按照后续提示，执行相关内容</strong></p><h2 id="加入Kubernetes-Node"><a href="#加入Kubernetes-Node" class="headerlink" title="加入Kubernetes Node"></a>加入Kubernetes Node</h2><p>在node1上执行</p><p>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join master.k8s.io:16443 --token ckf7bs.30576l0okocepg8b     --discovery-token-ca-cert-hash sha256:19afac8b11182f61073e254fb57b9f19ab4d798b70501036fc69ebef46094aba</span><br></pre></td></tr></table></figure><p>检查状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line">kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure><h2 id="安装集群网络"><a href="#安装集群网络" class="headerlink" title="安装集群网络"></a>安装集群网络</h2><p>从官方地址获取到flannel的yaml，在master1上执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir flannel</span><br><span class="line"><span class="built_in">cd</span> flannel</span><br><span class="line">wget -c https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>安装flannel网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml </span><br></pre></td></tr></table></figure><p>检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><h2 id="测试kubernetes集群"><a href="#测试kubernetes集群" class="headerlink" title="测试kubernetes集群"></a>测试kubernetes集群</h2><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment nginx --image=nginx</span><br><span class="line">$ kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://NodeIP:Port">http://NodeIP:Port</a>  </p><h1 id="k8s集群部署Java项目"><a href="#k8s集群部署Java项目" class="headerlink" title="k8s集群部署Java项目"></a>k8s集群部署Java项目</h1><p>我们知道k8s集群是以Pod为基本单位的，而Pod是多个容器的组合。所以如果向部署项目到k8s集群需要首先就昂项目源代码集成为容器镜像。然后在k8s上部署容器服务。</p><h2 id="容器交付流程"><a href="#容器交付流程" class="headerlink" title="容器交付流程"></a>容器交付流程</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201210111801547.png" alt="image-20201210111801547"></p><h2 id="k8s部署项目流程"><a href="#k8s部署项目流程" class="headerlink" title="k8s部署项目流程"></a>k8s部署项目流程</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201210111902550.png" alt="image-20201210111902550"></p><h3 id="编写项目"><a href="#编写项目" class="headerlink" title="编写项目"></a>编写项目</h3><p>创建一个springboot项目</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_20-49-49.png" alt="Snipaste_2020-12-09_20-49-49"></p><p><strong>编写Dockerfile</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_20-55-52.png"></p><h3 id="创建第三方仓库"><a href="#创建第三方仓库" class="headerlink" title="创建第三方仓库"></a>创建第三方仓库</h3><p>推送数据到第三方仓库，这里选择阿里云。也可以自己搭建docker仓库</p><p><a href="https://cn.aliyun.com/product/containerservice">https://cn.aliyun.com/product/containerservice</a></p><p><strong>1. 创建命名空间</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_20-59-46.png"></p><p><strong>2. 创建仓库</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-01-01.png"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-01-09.png"></p><h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a><strong>推送镜像</strong></h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-01-50.png"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-12-11.png"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-12-27.png"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-18-17.png"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-19-00.png" alt="Snipaste_2020-12-09_21-19-00"></p><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-10_22-10-42.png" alt="Snipaste_2020-12-10_22-10-42"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-10_22-08-07.png" alt="Snipaste_2020-12-10_22-08-07"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;k8s集群监控&quot;&gt;&lt;a href=&quot;#k8s集群监控&quot; class=&quot;headerlink&quot; title=&quot;k8s集群监控&quot;&gt;&lt;/a&gt;k8s集群监控&lt;/h1&gt;&lt;p&gt;既然是监控k8s的集群，那么我们需要实时获取k8s集群的哪些信息呢？即我们的监控指标是什么？&lt;/p&gt;</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://awslzhang.top/categories/Kubernetes/"/>
    
    
    <category term="Docker" scheme="https://awslzhang.top/tags/Docker/"/>
    
    <category term="Kubernetes" scheme="https://awslzhang.top/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Https</title>
    <link href="https://awslzhang.top/2020/11/21/%E6%B5%85%E8%B0%88Https/"/>
    <id>https://awslzhang.top/2020/11/21/%E6%B5%85%E8%B0%88Https/</id>
    <published>2020-11-21T01:10:13.000Z</published>
    <updated>2021-01-01T05:50:00.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><p>HyperText Transfer Protocol，超文本传输协议，是互联网上使用最广泛的一种协议，所有WWW文件必须遵循的标准。HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全。</p><p>使用TCP端口为：80</p><h2 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h2><p>Hyper Text Transfer Protocol over Secure Socket Layer，安全的超文本传输协议，网景公式设计了SSL(Secure Sockets Layer)协议用于对Http协议传输的数据进行加密，保证会话过程中的安全性。</p><p>使用TCP端口默认为443</p><hr><p>HTTPS 协议栈与 HTTP 的唯一区别在于多了一个安全层（Security Layer）—— TLS/SSL，SSL 是最早的安全层协议，TLS 由 SSL 发展而来，所以下面我们统称 TLS。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/v2-29fee3e54e584905453e69c3df133e05_720w.jpg" alt="img"></p><p>原来HTTPS就是在HTTP协议的基础上加入了TLS协议。目的是保证我们的数据在网络上传输的安全性。</p><p><strong>什么是TLS？</strong></p><blockquote><p>TLS是传输层加密协议，前身是SSL协议。由网景公司于1995年发布。后改名为TLS。常用的 TLS 协议版本有：TLS1.2, TLS1.1, TLS1.0 和 SSL3.0。其中 SSL3.0 由于 POODLE 攻击已经被证明不安全。TLS1.0 也存在部分安全漏洞，比如 RC4 和 BEAST 攻击。</p></blockquote><h1 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h1><p>TLS 握手的作用之一是身份认证（authentication），被验证的一方需要提供一个身份证明，在 HTTPS 的世界里，这个身份证明就是 「TLS 证书」，或者称为 「HTTPS 证书」。</p><p>例如，我们在访问xxxx时，浏览器会得到一个 TLS 证书，这个数字证书用于证明我们正在访问的网站和证书的持有者是匹配的，否则因为身份认证无法通过，连接也就无法建立。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121091912788.png" alt="image-20201121091912788"></p><p>上例可以看出，浏览器得到的是一个证书的链表，这个链表叫证书链（Certificate Chain），我们后面会分析它的作用。</p><h2 id="证书链"><a href="#证书链" class="headerlink" title="证书链"></a>证书链</h2><p>上图的层级结构就是证书链。</p><p>当获得证书链之后，我们就可以很轻松的往上回溯到被 UA 信任的证书，虽然 UA 内置的可能是中间证书（Intermediate Certificate），但是如果一个 End-Entity 证书即使回溯到跟证书（Root Certificate）也没有在 UA 的受信列表中找到，那么这个站点就会被标记为不安全。</p><p>最上层的都是跟证书，这些证书需要存在于浏览器的受信列表中，否则链接不安全。</p><h2 id="HTTPS请求过程"><a href="#HTTPS请求过程" class="headerlink" title="HTTPS请求过程"></a>HTTPS请求过程</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1704743ced98df13"></p><h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>请查看中间人攻击原理：<a href="https://juejin.cn/post/6844904065227292685#heading-11">https://juejin.cn/post/6844904065227292685#heading-11</a></p><blockquote><p>以上总结攻击的条件：</p><ol><li>首先攻击者需要截取到你的请求，现在除了在本机使用fiddler/wireshark，我想不到其他的方式</li><li>如果采用fiddler/wireshark需要手动信任他们的证书</li><li>如果第三方能在网络中截取你的请求，我想不到方法，可能也有</li></ol></blockquote><h2 id="防范中间人攻击"><a href="#防范中间人攻击" class="headerlink" title="防范中间人攻击"></a>防范中间人攻击</h2><p>可查看：<a href="https://www.zhihu.com/question/65464646">https://www.zhihu.com/question/65464646</a></p><p>HTTPS是保护用户和服务器之间的通讯不被第三方窃取或者篡改。这个第三方攻击者才是中间人。对于用户对客户端逻辑的逆向和篡改，HTTPS是不能起到防护作用的。<strong>所以用户通过抓取请求的软件通过使自己电脑信任(手动导入DH的参数)抓取请求软件的证书还是可以解密https的</strong></p><blockquote><p>HTTPS会被抓包，HTTPS 只防止用户在不知情的情况下通信被监听，如果用户主动授信，是可以构建“中间人”网络，代理软件可以对传输内容进行解密。</p></blockquote><h1 id="使用Https访问项目"><a href="#使用Https访问项目" class="headerlink" title="使用Https访问项目"></a>使用Https访问项目</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>项目采用spring boot</p><ul><li>Java</li><li>maven</li><li>部署服务的vps一台，为了模拟真实，采用的公网IP，并将域名添加它的A记录。</li><li>证书，颁发给域名。</li></ul><p>证书申请：<a href="https://blog.walterlv.com/post/apply-for-free-ssl-certificates-using-freessl.html">https://blog.walterlv.com/post/apply-for-free-ssl-certificates-using-freessl.html</a></p><p>在创建好证书之后导出证书：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121122116308.png" alt="image-20201121122116308"></p><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p><strong>1.初始化springboot项目</strong></p><p>略</p><p><strong>2.配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问地址 重要 不加的话不能远程访问</span></span><br><span class="line"><span class="meta">server.address</span>=<span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment">#https加密端口号 443</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">443</span></span><br><span class="line"><span class="comment">#SSL证书路径 一定要加上classpath:</span></span><br><span class="line"><span class="meta">server.ssl.key-store</span>=<span class="string">classpath:t-av2ray-top-tomcat-1121122148.jks</span></span><br><span class="line"><span class="comment">#SSL证书密码</span></span><br><span class="line"><span class="meta">server.ssl.key-store-password</span>=<span class="string">1214</span></span><br><span class="line"><span class="comment">#证书类型</span></span><br><span class="line"><span class="meta">server.ssl.key-store-type</span>=<span class="string">JKS</span></span><br><span class="line"><span class="comment">#证书别名</span></span><br><span class="line"><span class="comment">#server.ssl.key-alias=alias</span></span><br></pre></td></tr></table></figure><p>项目启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http重定向到https</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TomcatServletWebServerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory tomcat = <span class="keyword">new</span> TomcatServletWebServerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint constraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                constraint.setUserConstraint(<span class="string">&quot;CONFIDENTIAL&quot;</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                constraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(constraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connector <span class="title">httpConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">        connector.setScheme(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">        <span class="comment">//Connector监听的http的端口号</span></span><br><span class="line">        connector.setPort(<span class="number">8080</span>);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//监听到http的端口号后转向到的https的端口号</span></span><br><span class="line">        connector.setRedirectPort(<span class="number">443</span>);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置80端口跳转至443端口，强制使用https。</p><p><strong>3.打包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package -DskipTests</span><br></pre></td></tr></table></figure><p><strong>4. 上传至服务器</strong></p><p><strong>4.1 服务器安装Java</strong></p><p>略</p><p><strong>4.2项目运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx</span><br></pre></td></tr></table></figure><p><a href="https://t.av2ray.top/hello%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE">https://t.av2ray.top/hello，可以访问</a></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121162646185.png" alt="image-20201121162646185"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121162701151.png" alt="image-20201121162701151"></p><hr><p>当我们直接使用ip访问时：</p><p><strong><a href="http://ip:443/hello">http://ip:443/hello</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bad Request</span><br><span class="line">This combination of host and port requires TLS.</span><br></pre></td></tr></table></figure><blockquote><p>这是因为项目配置了TLS访问，所以这时不能使用http</p></blockquote><p><strong><a href="https://ip/hello">https://ip:443/hello</a></strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121162909986.png" alt="image-20201121162909986"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121162925128.png" alt="image-20201121162925128"></p><blockquote><p>这时因为我们通过ip访问项目时，证书不对。我们使用的是颁发给域名xxx的证书，所以只能使用此域名访问时才是安全的。</p><p>不安全时浏览器会提示，仍可以访问，但是显示不安全。</p></blockquote><blockquote><p>https项目总结</p><p>因为项目中配置了TSL，所以只有你访问时携带了证书，且携带的证书正好和项目中配置的证书匹配访问才是安全的，否则访问都不安全。 </p><p>那如何才能携带证书访问呢，看你项目中的证书是怎么生成额，例如上述项目中的证书是由域名t.av2ray.top生成的，所以只有当使用此域名访问服务时才会携带正确的证书，如果直接使用IP地址访问也不是安全的。因为证书是颁发给t.av2ray.top的。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;Http&quot;&gt;&lt;a href=&quot;#Http&quot; class=&quot;headerlink&quot; title=&quot;Http&quot;&gt;&lt;/a&gt;Http&lt;/h</summary>
      
    
    
    
    <category term="协议" scheme="https://awslzhang.top/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="Https" scheme="https://awslzhang.top/tags/Https/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes核心技术</title>
    <link href="https://awslzhang.top/2020/11/17/Kubernetes%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>https://awslzhang.top/2020/11/17/Kubernetes%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</id>
    <published>2020-11-17T13:31:09.000Z</published>
    <updated>2021-01-01T05:49:59.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="核心技术Pod"><a href="#核心技术Pod" class="headerlink" title="核心技术Pod"></a>核心技术Pod</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Pod 是 k8s 系统中可以创建和管理的最小单元，是资源对象模型中由用户创建或部署的最小资源对象模型，也是在 k8s 上运行容器化应用的资源对象，其他的资源对象都是用来支 撑或者扩展 Pod 对象功能的，比如控制器对象是用来管控 Pod 对象的，Service 或者 Ingress 资源对象是用来暴露 Pod 引用对象的，PersistentVolume 资源对象是用来为 Pod 提供存储等等，<font color="red">k8s 不会直接处理容器，而是 Pod，Pod 是由一个或多个 container 组成</font>，Pod 是 Kubernetes 的最重要概念，<font color="red">每一个 Pod 都有一个特殊的被称为”根容器“的 Pause容器。</font>Pause 容器对应的镜 像属于 Kubernetes 平台的一部分，除了 Pause 容器，每个 Pod 还包含一个或多个紧密相关的用户业务容器。</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201119143357674.png" alt="image-20201119143357674"></p><p><strong>为什么Pod是最小资源而不是容器？</strong></p><p><code>docker run</code>产生一个容器(进程)，一般容器中只能由一个应用，如果应用过多，无法通过容器来管理应用。当我们Pod里面要运行多个应用时是通过容器和应用一对一的运行应用的，所以Pod中能运行多个应用即Pod中能运行多个容器。</p><blockquote><p>一个 Pod 可以有多个容器，彼此间共享网络和存储资源，每个 Pod 中有一个 Pause 容器保存所有的容器状态， 通过管理 pause 容器，达到管理 pod 中所有容器的效果。</p></blockquote><h2 id="Pod特性"><a href="#Pod特性" class="headerlink" title="Pod特性"></a>Pod特性</h2><ul><li>共享网络</li><li>共享存储</li><li>生命周期短暂</li><li>平坦的网络</li></ul><h3 id="共享网络"><a href="#共享网络" class="headerlink" title="共享网络"></a>共享网络</h3><p>我们知道Docker容器之间是互相隔离的(网络、文件系统…)，它是由Docker使用了Linux Namespace(中的cgroup)来实现的。而K8s中的Pod使它内部包含的所有容器共享网络，是因为它使里面的所有容器都处于了一个Namespace中的。</p><blockquote><p> <strong>Pod的共享网络包含什么？/啥意思？</strong></p><ul><li>在一个 Pod 里的多个容器共享 Pod 的 IP：多个容器的Ip相同</li><li>以一个 Pod 内的多个容器之间可以通过 localhost 来进行通信：不同的容器可通过localhost交流</li><li>不同容器要注意不要有端口冲突即可：内所有容器端口公用，不可冲突</li><li>不同的 Pod 有不同的 IP,不同 Pod 通信要基于Pod Ip；不可通过IPC通信</li></ul></blockquote><p><strong>Docker容器的隔离</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20191121111452351.png"></p><p><strong>Pod怎么实现网络共享的</strong></p><p>通过<code>Pause</code>容器。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201119151230610.png" alt="image-20201119151230610"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20191121111837155.png"></p><p>只有一个eth0网卡只出现在了”pause容器”里面，nginx和php-fpm复用了”pause容器”的network namespace，简单理解就是使用了”pause容器”的eth0网卡与外部进行通信。</p><h3 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h3><p>一个 Pod 里的多个容器可以共享存储卷，这个存储卷会被定义为 Pod 的一部分，并且可以挂载到该 Pod 里的所有容器的文件系统上。</p><h4 id="存储卷实现共享存储"><a href="#存储卷实现共享存储" class="headerlink" title="存储卷实现共享存储"></a>存储卷实现共享存储</h4><p>大多数和数据存储相关的应用和有状态应用都是需要持久存储数据的。容器本身有生命周期，<font color="red">为了使得容器将来终结后我们可以把它删除，甚至是编排到其他节点上运行，意味着数据不能放在容器自己的名称空间中。</font></p><blockquote><p>在k8s中，<font color="red">Pod是运行在某个节点上的</font>，只要不出故障，就一直会运行在这个节点上，<strong>节点故障了才会调度到其他节点，只要节点不故障，是不会走的，无非就是重启重启而已。</strong></p><p>这里就有两个问题了，一旦这个Pod故障了被删除，或者节点故障了，此时有可能编排到其他节点上了，<strong>为了突破Pod生命周期受限这种现状，我们需要把数据放在Pod自有文件系统之外的地方。</strong></p></blockquote><p>我们此前在单独使用docker时，使用存储卷，相当于<font color="red">把容器中的某一目录与宿主机上某一目录关联起来</font>，随后容器内该目录存储的数据都存到了宿主机上了。当我们删了容器，在重建容器，只要这个存储卷不受影响，那么数据是没有问题的，在一定程度上拥有了持久功能。</p><p>但是这个问题在k8s上不能这么来操作，<strong>k8s是一个集群</strong>，由调度器负责调度，<font color="red">Pod被删掉了可能会被调度到其他节点</font>，所以这种在节点级帮忙提供存储卷的方式来持久存储数据的逻辑在k8s上，只能说只有一定程度上的持久性，不是真正意义上的持久性。<font color="red"><strong>应该使用脱离节点而存在的存储设备。</strong></font></p><p>为此，k8s提供了能应付各种不同类型的存储卷让我们来使用，没有持久、半持久、或真正意义上的持久功能。对于Pod来说，Pod内的多个容器可共享访问同一组存储卷，因为对k8s来讲，存储卷不属于容器，而属于Pod。在容器中挂载存储卷，如果Pod中两个容器都挂载了某个存储卷，就相当于两个容器共享数据了。Pod底层有个基础容器，不启动，靠一个独特的镜像来创建的，叫pause。<strong>所有的Pod，其网络名称空间、存储卷之类的都是分配给这个Pod的</strong>，Pod中运行的主容器是共享这个镜像的网络名称空间的，容器挂载存储卷其实是挂载这个容器的存储卷的。所以叫基础架构容器。</p><p>在Pod上使用存储卷，实际上也就是这个pause容器有了存储卷，而这个容器有存储卷，只不过是这个容器和宿主机目录建立了关联关系。而宿主机目录如果是节点本地的，那么它就随着宿主机而终结了，因此宿主机这个目录为了真正实现持久性，它应该也不是宿主机本地的，<strong>而是宿主机挂载的外部存储设备上的存储卷。</strong>当然如果这个宿主机的目录没挂载，那就是节点本地的了。只要节点不宕机，数据就是持久的。但是跨节点存储，只能使用脱离节点本地的网络设备。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/143.png"></p><blockquote><p>总之：</p><p>跨节点存储：Pod内容器➡Pause容器➡宿主机（非本地）挂载的外部设备</p><p>本地节点存储：Pod内容器➡Pause容器➡宿主机（本地），这样Pod重启或者迁移时节点换掉，则数据丢失！</p></blockquote><h4 id="Kubernetes存储卷分类"><a href="#Kubernetes存储卷分类" class="headerlink" title="Kubernetes存储卷分类"></a>Kubernetes存储卷分类</h4><p>上面说到k8s提供了能应付各种不同类型的存储卷让我们来使用：没有持久、半持久、或真正意义上的持久功能。</p><h5 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h5><p>给Pod分配一个存储卷，存储卷只存在Pod节点本地，<strong>当Pod被删除，节点上存储卷也会一并被删除</strong>。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201119161057269.png" alt="image-20201119161057269"></p><blockquote><p>这个不是为了持久而设计。只是用来做临时目录使用的。</p></blockquote><h5 id="hostPath"><a href="#hostPath" class="headerlink" title="hostPath"></a>hostPath</h5><p>主机路径。直接在宿主机找一个目录，与容器建立关联关系。也不具有真正意义上的持久性。如果需要真正以上的持久性，则需要连接网络连接存储。大概分3类：</p><ol><li>SAN(存储区域网络，比如iSCSI、FC协议)、NAS(网络附加存储，比如nfs协议、cifs协议以及http协议)</li><li>分布式存储：或是文件系统级别、或者块设备。<br>文件系统级别：glusterfs、cephfs<br>块级别：rbd</li><li>云存储：亚马逊的EBS(弹性块存储)、Azure Disk。</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201119161514977.png" alt="image-20201119161514977"></p><h5 id="pvc"><a href="#pvc" class="headerlink" title="pvc"></a>pvc</h5><p><strong>持久存储卷申请，简称pvc</strong>。从某种意义上来讲，它不是一个存储卷。以rbd为例，当你定义使用rbd类型的存储时，你需要定义很多相关的参数，这需要你对这个存储很熟悉。这会阻断一大部分用户来用k8s。怎么转换成傻瓜的形式来使用？pvc就是干这个事情的。<br>当需要创建一个存储卷时，你只需要告诉我，“我要来个存储卷”，所以叫存储卷创建申请。你不要管它底层存储系统是什么，你只需要说“我就需要这么多”就行。指定告诉它比如说需要个5g的存储空间，而不用管它那个存储到底放在哪个系统上。<strong>这叫存储及服务。</strong></p><p>让Pod创建和底层存储解耦。关键是和pvc建立关联关系，而pvc关键是和pv建立关联关系，而pv关键是和存储系统建立关联关系。解释如下：假如一个Pod创建调度到某个节点上，我们在Pod上定义一个pvc，它是一种存储卷类型，pvc要关联到当前这个Pod所在名称空间真正存在的pvc资源，这个pvc只是个申请，申请要与pv建立关联关系，pv是真正存储系统之上的一段存储空间，pv与后端存储建立关联关系。但是这个pvc与哪个pv建立关联关系时，怎么可能有个pv放在那等你来用呢？要做到这一步，用户在创建申请之前，先提需求，然后后端存储工程师或者k8s管理员把这些pv创建好。但是如果是公有云呢？有很多租户在上面跑着，压根不知道他们什么时候要创建pv。因此如果要做到按需创建，我们pv也不建了，我们把所有的存储空间抽象出来，抽象为一个抽象层，叫<strong>存储类</strong>。当用户创建pvc需要用到pv时，它能够向存储类申请说，“你帮我创建出来”，存储类会帮它生成刚好符合用户请求大小的pv来，并让二者建立关联关系。<strong>像这种pv由用户的请求触发而动态生成，我们称为pv的动态供给。而这里需要依赖一个前提：要定义好存储类。</strong><br><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/144.png" alt="img"><br>什么叫存储类？存储按照其综合服务质量可以分为好几个级别，有的又慢又笨，称为Bronze存储，有的速度算中间，我们对性能没有太高要求，称为Silver存储，而有些特别快，ssd之类组成的，称为Gold存储。<br><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/145.png" alt="img"><br>如果我们自己是一个对于存储系统非常了解的人，创建Pod时可直接使用存储空间，如果你不是特别了解，或者我们将来有很多用户、终端用户对于存储技术知之不多的话，那么这个时候我们就应该尽可能地给他们做成动态供给的方式，让他们使用pvc来使用。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>存储卷只是在Pod上定义的，容器中要想使用还得挂载和绑定。第一在Pod中要定义<code>volume</code>，这个volume要指明关联到哪个存储设备上去的，第二要在容器中使用<code>volumeMounts</code>，然后你才能使用。</p><h5 id="emptyDir-1"><a href="#emptyDir-1" class="headerlink" title="emptyDir"></a>emptyDir</h5><p>emptyDir不需要依赖任何外部设备。</p><p>查看定义emptyDir的相关字段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain pod.spec.volumes.emptyDir</span><br><span class="line">$ kubectl explain pod.spec.containers.volumeMounts</span><br></pre></td></tr></table></figure><p>在这个练习中，你会创建一个包含两个容器的 Pod。两个容器共享一个卷用于他们之间的通信。 Pod 的配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">two-containers</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">debian-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">debian</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/pod-data</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>]</span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the debian container &gt; /pod-data/index.html&quot;</span>]</span><br></pre></td></tr></table></figure><p>在配置文件中，你可以看到 Pod 有一个共享卷，名为 <code>shared-data</code>。</p><p>配置文件中的第一个容器运行了一个 nginx 服务器。共享卷的挂载路径是 <code>/usr/share/nginx/html</code>。 第二个容器是基于 debian 镜像的，有一个 <code>/pod-data</code> 的挂载路径。第二个容器运行了下面的命令然后终止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello from the debian container &gt; /pod-data/index.html</span><br></pre></td></tr></table></figure><p>注意，第二个容器在 nginx 服务器的根目录下写了 <code>index.html</code> 文件。</p><p>创建一个包含两个容器的 Pod：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f https://k8s.io/examples/pods/two-container-pod.yaml</span><br></pre></td></tr></table></figure><p>查看 Pod 和容器的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod two-containers --output=yaml</span><br></pre></td></tr></table></figure><p>这是输出的一部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">two-containers</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">containerStatuses:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">containerID:</span> <span class="string">docker://c1d8abd1</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">debian</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="attr">lastState:</span></span><br><span class="line">      <span class="attr">terminated:</span></span><br><span class="line">        <span class="string">...</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">debian-container</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">containerID:</span> <span class="string">docker://96c1ff2c5bb</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="attr">state:</span></span><br><span class="line">      <span class="attr">running:</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p>你可以看到 debian 容器已经被终止了，而 nginx 服务器依然在运行。</p><p>进入 nginx 容器的 shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it two-containers -c nginx-container -- /bin/bash</span><br></pre></td></tr></table></figure><p>在 shell 中，确认 nginx 还在运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@two-containers:/<span class="comment"># ps aux</span></span><br></pre></td></tr></table></figure><p>输出类似于这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER       PID  ...  STAT START   TIME COMMAND</span><br><span class="line">root         1  ...  Ss   21:12   0:00 nginx: master process nginx -g daemon off;</span><br></pre></td></tr></table></figure><p>回忆一下，debian 容器在 nginx 的根目录下创建了 <code>index.html</code> 文件。 使用 <code>curl</code> 向 nginx 服务器发送一个 GET 请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@two-containers:/<span class="comment"># apt-get update</span></span><br><span class="line">root@two-containers:/<span class="comment"># apt-get install curl</span></span><br><span class="line">root@two-containers:/<span class="comment"># curl localhost</span></span><br></pre></td></tr></table></figure><p>输出表示 nginx 提供了 debian 容器写的页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello from the debian container</span><br></pre></td></tr></table></figure><h5 id="nfs共享网络存储"><a href="#nfs共享网络存储" class="headerlink" title="nfs共享网络存储"></a>nfs共享网络存储</h5><p>这种是真正意义上的持久功能，我们<font color="red">需要一台单独的机器作为网络存储nfs的服务端</font>，然后在启动的Pod里手动指定Volume挂载到nfs的服务端，所以<font color="red">也需要k8s的集群的各个节点要安装nfs的客户端</font></p><p><strong>1. 服务端安装nfs</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br></pre></td></tr></table></figure><p>设置挂载路径（挂载路径需要存在）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/exports</span><br><span class="line">/data/nfs *(rw,no_root_squash)</span><br></pre></td></tr></table></figure><p>启动nfs服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nfs</span><br><span class="line">systemctl start nfs</span><br><span class="line">ps -ef|grep nfs</span><br></pre></td></tr></table></figure><p><strong>2. k8s集群节点安装nfs客户端</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br></pre></td></tr></table></figure><p><strong>3.  使用nfs作为pv进行持久化存储</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-dep1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">          <span class="comment"># 要更改为你自己nfs服务端的地址和目录</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.58</span><span class="number">.138</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/nfs</span></span><br></pre></td></tr></table></figure><p><code>kubectl apply -f xxx.yaml </code></p><p>我们在服务端的路径中添加一个文件index.html，然后在进入Pod容器查看是否存在此文件。</p><p>nfs服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/nfs/</span><br><span class="line">vim index.html</span><br><span class="line">hello my nfs</span><br></pre></td></tr></table></figure><p>进入容器</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_17-40-30.png" alt="Snipaste_2020-12-05_17-40-30"></p><p>可以发现我们进入了容器，发现数据已经绑定了过去，证明我们成功了</p><blockquote><p>缺点</p><p>这样我们在Pod的配置文件中声明nfs的地址和目录这样有点不太安全，接下来我们通过pv和pvc的方式来实现持久化，当然最后数据还是存放在我们的nfs服务端</p></blockquote><h5 id="pv和pvc方式"><a href="#pv和pvc方式" class="headerlink" title="pv和pvc方式"></a>pv和pvc方式</h5><p><a href="#pvc">上面说过</a>，pvc不是一个存储文件的地方，他是一个提需求的地方；pv是一个存储资源的抽象，它提供了存储资源的接口。</p><p>例如上面的nfs服务端就是存储的资源，我们需要对这个nfs服务端存储资源创建pv与其绑定，这样我们只需要指定pv来绑定数据，不需要手动指定存储资源的细节。而pvc是与pv绑定的，在使用k8s时，用户根本不考虑要把数据存储在哪个pv，他们只会提出存储多大的内容和匹配的模式，他们提的要求就可以看为是pvc。他们的关系为：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_17-48-55.png" alt="Snipaste_2020-12-05_17-48-55"></p><p>一般在真实使用中，pv的创建和pv底层的存储资源的创建都是由专门的存储工程师来做的，我们在创建服务的持久化的工程中只需要指定pvc（需求）即可。</p><p>我这里为了实现整个流程，有创建存储资源抽象pv的过程</p><p><strong>1. 创建pv</strong></p><p>此过程是已经在<a href="#nfs%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C%E5%AD%98%E5%82%A8">上一步骤</a>创建好了nfs服务端的后续。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/k8s/nfs</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.58</span><span class="number">.138</span></span><br></pre></td></tr></table></figure><p><code>kubectl apply -f pv.yaml</code></p><p><strong>2. 创建pvc并使用</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-dep1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">my-pvc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><p><code>kubectl apply -f pvc.yaml</code></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201205175846703.png" alt="image-20201205175846703"></p><blockquote><p>可以根据配置文件看到pvc的创建只需要指定大小、规则。没有与pv有关的地方。k8s会根据你的需求自动与pv绑定。</p></blockquote><p>手动进入容器，查看之前在nfs服务端添加的文件index.html是否存在</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_18-01-51.png" alt="Snipaste_2020-12-05_18-01-51"></p><p>pvc模式成功，访问一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8smaster ~]<span class="comment"># kubectl expose deploy nginx-dep1 --type=NodePort --port=80 --target-port=80</span></span><br><span class="line">service/nginx-dep1 exposed</span><br><span class="line">[root@k8smaster ~]<span class="comment"># kubectl get svc</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1     &lt;none&gt;        443/TCP        18d</span><br><span class="line">nginx-dep1   NodePort    10.108.56.3   &lt;none&gt;        80:30437/TCP   5s</span><br><span class="line">[root@k8smaster ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_18-04-12.png" alt="Snipaste_2020-12-05_18-04-12"></p><h3 id="生命周期短暂"><a href="#生命周期短暂" class="headerlink" title="生命周期短暂"></a>生命周期短暂</h3><p>Pod 属于生命周期比较短暂的组件，比如，当 Pod 所在节点发生故障，那么该节点上的 Pod会被调度到其他节点，但需要注意的是，被重新调度的 Pod 是一个全新的 Pod,跟之前的Pod 没有半毛钱关系。</p><h3 id="平坦的网络"><a href="#平坦的网络" class="headerlink" title="平坦的网络"></a><strong>平坦的网络</strong></h3><p>K8s 集群中的所有 Pod 都在同一个共享网络地址空间中，也就是说每个 Pod 都可以通过其 他 Pod 的 IP 地址来实现访问。 </p><h2 id="Pod的一些设置"><a href="#Pod的一些设置" class="headerlink" title="Pod的一些设置"></a>Pod的一些设置</h2><h3 id="镜像拉取策略"><a href="#镜像拉取策略" class="headerlink" title="镜像拉取策略"></a>镜像拉取策略</h3><ul><li><code>ifNotPresent</code>：默认值，镜像在宿主机上不存在时才拉取</li><li><code>Always</code>：每次创建都会重新拉取</li><li><code>Never</code>：从不拉取。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain pod.spec.containers.imagePullPolicy</span><br></pre></td></tr></table></figure><h3 id="生命周期和重启策略"><a href="#生命周期和重启策略" class="headerlink" title="生命周期和重启策略"></a>生命周期和重启策略</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><table><thead><tr><th>状态值</th><th>说明</th></tr></thead><tbody><tr><td>Pending</td><td>API Server已经创建了该Pod,但Pod中的一个或多个容器的镜像还没有创建,包括镜像下载过程</td></tr><tr><td>Running</td><td>Pod内所有容器已创建,且至少一个容器处于运行状态、正在启动状态或正在重启状态</td></tr><tr><td>Completed</td><td>Pod内所有容器均成功执行退出,且不会再重启</td></tr><tr><td>Failed</td><td>Pod内所有容器均已退出,但至少一个容器退出失败</td></tr><tr><td>Unknown</td><td>由于某种原因无法获取Pod状态,例如网络通信不畅</td></tr></tbody></table><h4 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h4><p>Pod 的重启策略包括 Always、OnFailure 和 Never，默认值是 Always</p><table><thead><tr><th>重启策略</th><th>说明</th></tr></thead><tbody><tr><td>Always</td><td>当容器失效时,由 kubelet自动重启该容器</td></tr><tr><td>OnFailure</td><td>当容器终止运行且退出码不为0时,由 kubele自动重启该容器</td></tr><tr><td>Never</td><td>不论容器运行状态如何, kubelet都不会重启该容器</td></tr></tbody></table><h3 id="资源限制配置"><a href="#资源限制配置" class="headerlink" title="资源限制配置"></a>资源限制配置</h3><p>每个 Pod 都可以对其能使用的服务器上的计算资源设置限额，Kubernetes 中可以设置限额的计算资源有 CPU 与 Memory 两种，其中CPU 的资源单位为 CPU 数量,是一个绝对值而非相对值。Memory 配额也是一个绝对值，它的单 位是<strong>内存字节数</strong>。 </p><p>Kubernetes 里，一个计算资源进行配额限定需要设定以下两个参数： Requests 该资源最小申请数量，系统必须满足要求 Limits 该资源最大允许使用的量，不能突破，当容器试图使用超过这个量的资源时，<strong>可能会被 Kubernetes Kill 并重启</strong> 。</p><p><strong>举例</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">env:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br></pre></td></tr></table></figure><p><strong>上述代码表明 MySQL 容器申请最少 0.25 个 CPU 以及 64MiB 内存，在运行过程中容器所能使用的资源配额为 0.5 个 CPU 以及 128MiB 内存</strong></p><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><p>Kubelet使用liveness probe（存活探针）来确定何时重启容器。例如，当应用程序处于运行状态但无法做进一步操作，liveness探针将捕获到deadlock，重启处于该状态下的容器，使应用程序在存在bug的情况下依然能够继续运行下去（谁的程序还没几个bug呢）。</p><p>Kubelet使用readiness probe（就绪探针）来确定容器是否已经就绪可以接受流量。只有当Pod中的容器都处于就绪状态时kubelet才会认定该Pod处于就绪状态。该信号的作用是控制哪些Pod应该作为service的后端。如果Pod处于非就绪状态，那么它们将会被从service的load balancer中移除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain pod.spec.containers.livenessProbe</span><br><span class="line">$ kubectl explain pod.spec.containers.readinessProbe</span><br></pre></td></tr></table></figure><h2 id="Pod创建流程"><a href="#Pod创建流程" class="headerlink" title="Pod创建流程"></a>Pod创建流程</h2><p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNkb9ibEAnRZekRbN1Kic7aicNynPBNqlCrnJeb8PqzpbO5FwtGaxo78RbfRdYRzlTE8Mjt4j6PiafVAlA/640"></p><p><strong>master端</strong></p><ol><li>用户发出命令到ApiServer，将新建pod的信息存入etcd</li><li>Scheduler观察到Api Server发出了新建Pod的指令，从Etcd那得到了要创建的Pod具体信息，它根据调度规则选中了一台节点来运行Pod，并将此信息写入etcd</li></ol><p><strong>Node端</strong></p><ol><li>被选中的节点中的kubelet观察到Scheduler绑定Pod到本机的事件，开始操控Docker运行容器，运行成功后告知api server，并修改etcd中的状态</li></ol><h2 id="Pod调度策略"><a href="#Pod调度策略" class="headerlink" title="Pod调度策略"></a>Pod调度策略</h2><h3 id="Pod资源限制"><a href="#Pod资源限制" class="headerlink" title="Pod资源限制"></a>Pod资源限制</h3><p>前面说到在Pod创建的配置中有资源配置，调度器根据此Pod所需要的资源来配置相应节点来运行此Pod，那肯定是配置足够的节点才能运行此Pod。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201120153131728.png" alt="image-20201120153131728"></p><h3 id="节点选择器-nodeSelector"><a href="#节点选择器-nodeSelector" class="headerlink" title="节点选择器(nodeSelector)"></a>节点选择器(nodeSelector)</h3><p>通过对Node节点打上不同的标签<code>Label</code>来把Pod调度到指定标签的Node。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201120154555674.png" alt="image-20201120154555674"></p><blockquote><p>对节点创建标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ kubectl label node xxx env_role=dev</span><br></pre></td></tr></table></figure><p>查看节点的标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ kubectl node xxx --show-label</span><br></pre></td></tr></table></figure><p>给 namespace 中的所有 pod 添加 label</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ kubectl label pods --all status=unhealthy</span><br></pre></td></tr></table></figure><p>删除名为“bar”的label 。（使用“ - ”减号相连）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;kubectl label pods xxx bar-</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cuda-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cuda-test</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">&quot;k8s.gcr.io/cuda-vector-add:v0.1&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">nvidia.com/gpu:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">env_role:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201120155613803.png" alt="image-20201120155613803"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201120160233595.png" alt="image-20201120160233595"></p><h3 id="亲和性调度-nodeAffinity"><a href="#亲和性调度-nodeAffinity" class="headerlink" title="亲和性调度(nodeAffinity)"></a>亲和性调度(nodeAffinity)</h3><p>和节点选择性原理一致，但功能更强大，可以对标签进行不同的操作符计算。</p><p><code>nodeAffinity</code>就是节点亲和性，相对应的是<code>Anti-Affinity</code>，就是反亲和性，这种方法比上面的<code>nodeSelector</code>更加灵活，它可以进行一些简单的逻辑组合了，不只是简单的相等匹配。 调度可以分成软策略和硬策略两种方式，软策略就是如果你没有满足调度要求的节点的话，POD 就会忽略这条规则，继续完成调度过程，说白了就是<strong>满足条件最好了，没有的话也无所谓了</strong>的策略；而硬策略就比较强硬了，如果没有满足条件的节点的话，就不断重试直到满足条件为止，简单说就是<strong>你必须满足我的要求，不然我就不干</strong>的策略。 <code>nodeAffinity</code>就有两上面两种策略：<code>preferredDuringSchedulingIgnoredDuringExecution</code>和<code>requiredDuringSchedulingIgnoredDuringExecution</code>，前面的就是软策略，后面的就是硬策略。</p><p>如下例子：（<strong>test-node-affinity.yaml</strong>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">node-affinity-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">NotIn</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.140</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.161</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">preference:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">source</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">qikqiak</span></span><br></pre></td></tr></table></figure><p>上面这个 POD 首先是要求 POD 不能运行在140和161两个节点上，如果有个节点满足<code>source=qikqiak</code>的话就优先调度到这个节点上，同样的我们可以使用<code>descirbe</code>命令查看具体的调度情况是否满足我们的要求。这里的匹配逻辑是 label 的值在某个列表中，现在<code>Kubernetes</code>提供的操作符有下面的几种：</p><ul><li>In：label 的值在某个列表中</li><li>NotIn：label 的值不在某个列表中</li><li>Gt：label 的值大于某个值</li><li>Lt：label 的值小于某个值</li><li>Exists：某个 label 存在</li><li>DoesNotExist：某个 label 不存在</li></ul><blockquote><p>注意：</p><p>如果<code>nodeSelectorTerms</code>下面有多个选项的话，满足任何一个条件就可以了；如果<code>matchExpressions</code>有多个选项的话，则必须同时满足这些条件才能正常调度 POD。</p></blockquote><h3 id="podAffinity"><a href="#podAffinity" class="headerlink" title="podAffinity"></a>podAffinity</h3><p>上面两种方式都是让 <strong>POD 去选择节点的</strong>，有的时候我们也希望能够根据 POD 之间的关系进行调度，<code>Kubernetes</code>在1.4版本引入的<code>podAffinity</code>概念就可以实现我们这个需求。</p><p>和<code>nodeAffinity</code>类似，<code>podAffinity</code>也有<code>requiredDuringSchedulingIgnoredDuringExecution</code>和 <code>preferredDuringSchedulingIgnoredDuringExecution</code>两种调度策略，唯一不同的是如果要使用互斥性，我们需要使用<code>podAntiAffinity</code>字段。 如下例子，我们希望<code>with-pod-affinity</code>和<code>busybox-pod</code>能够就近部署，而不希望和<code>node-affinity-pod</code>部署在同一个拓扑域下面：（<strong>test-pod-affinity.yaml</strong>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-pod-affinity</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pod-affinity-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-pod-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">podAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">busybox-pod</span></span><br><span class="line">        <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">    <span class="attr">podAntiAffinity:</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">podAffinityTerm:</span></span><br><span class="line">          <span class="attr">labelSelector:</span></span><br><span class="line">            <span class="attr">matchExpressions:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">              <span class="attr">values:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">node-affinity-pod</span></span><br><span class="line">          <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br></pre></td></tr></table></figure><p>上面这个例子中的 POD 需要调度到某个指定的主机上，至少有一个节点上运行了这样的 POD：这个 POD 有一个<code>app=busybox-pod</code>的 label。<code>podAntiAffinity</code>则是希望最好不要调度到这样的节点：这个节点上运行了某个 POD，而这个 POD 有<code>app=node-affinity-pod</code>的 label。</p><blockquote><p><font color="red">注意，这里匹配的是Pod的标签  不是主机的标签</font></p></blockquote><p>亲和性/反亲和性调度策略比较如下：</p><table><thead><tr><th align="left">调度策略</th><th align="left">匹配标签</th><th align="left">操作符</th><th align="left">拓扑域支持</th><th align="left">调度目标</th></tr></thead><tbody><tr><td align="left">nodeAffinity</td><td align="left"><strong>主机</strong></td><td align="left">In, NotIn, Exists, DoesNotExist, Gt, Lt</td><td align="left">否</td><td align="left">指定主机</td></tr><tr><td align="left">podAffinity</td><td align="left"><strong>POD</strong></td><td align="left">In, NotIn, Exists, DoesNotExist</td><td align="left">是</td><td align="left">POD与指定POD同一拓扑域</td></tr><tr><td align="left">podAnitAffinity</td><td align="left"><strong>POD</strong></td><td align="left">In, NotIn, Exists, DoesNotExist</td><td align="left">是</td><td align="left">POD与指定POD不在同一拓扑域</td></tr></tbody></table><h3 id="污点（Taints）与容忍（tolerations）"><a href="#污点（Taints）与容忍（tolerations）" class="headerlink" title="污点（Taints）与容忍（tolerations）"></a>污点（Taints）与容忍（tolerations）</h3><p>对于<code>nodeAffinity</code>无论是硬策略还是软策略方式，都是调度 POD 到预期节点上，<strong>而<code>Taints</code>恰好与之相反，如果一个节点标记为 Taints ，除非 POD 也被标识为可以容忍污点节点，否则该 Taints 节点不会被调度pod。</strong></p><p>污点taints是定义在节点上的键值型属性数据，用于让节点拒绝将 Pod 调度运行于其上， 除非 Pod 有接纳节点污点的容忍度容忍度 tolerations 是定义在 Pod 上的键值属性数据， 用于配置可容忍的污点，且调度器将 Pod 调度至其能容忍该节点污点的节点上或没有污点的节点上。</p><p><strong>污点是节点的属性，而容忍污点是Pod的属性。</strong></p><p>比如用户希望把 Master 节点保留给 Kubernetes 系统组件使用，或者把一组具有特殊资源预留给某些 POD，则污点就很有用了，POD 不会再被调度到 taint 标记过的节点。</p><h4 id="定义污点和容忍度"><a href="#定义污点和容忍度" class="headerlink" title="定义污点和容忍度"></a>定义污点和容忍度</h4><p>污点定义于<code>nodes.spec.taints</code>容忍度定义于<code>pods.spec.tolerations</code> </p><p><strong>语法： key=value:effect</strong></p><h4 id="effect定义排斥等级"><a href="#effect定义排斥等级" class="headerlink" title="effect定义排斥等级"></a>effect定义排斥等级</h4><p>effect 共有三个可选项，可按实际需求进行设置：</p><ol><li><code>NoSchedule</code>：不能容忍，但仅影响调度过程，已调度上去的 pod 不受影响，仅对新增加的pod 生效。 </li><li><code>PreferNoSchedule</code>：柔性约束，节点现存 Pod不受影响，如果实在是没有符合的节点，也 可以调度上来</li><li><code>NoExecute</code>：该选项意味着一旦 Taint 生效，如该节点内正在运行的 POD 没有对应 Tolerate(容忍污点) 设置，会直接被逐出。</li></ol><h4 id="Pod定义容忍度"><a href="#Pod定义容忍度" class="headerlink" title="Pod定义容忍度"></a>Pod定义容忍度</h4><blockquote><ul><li><p>等值比较容忍度与污点在 key、value、effect 三者完全匹配 </p></li><li><p>存在性判断 key、effect 完全匹配，value 使用空值 </p></li></ul><p><font color="red">一个节点可配置多个污点，一个 Pod 也可有多个容忍度</font></p></blockquote><p>如果仍然希望某个 POD 调度到 taint 节点上，则必须在 Spec 中做出<code>Toleration</code>定义，才能调度到该节点，举例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tolerations:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;your key&quot;</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">&quot;Equal&quot;</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;your value&quot;</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">&quot;NoSchedule&quot;</span></span><br></pre></td></tr></table></figure><h4 id="节点管理污点"><a href="#节点管理污点" class="headerlink" title="节点管理污点"></a>节点管理污点</h4><blockquote><p><strong>同一个键值数据，effect 不同，也属于不同的污点</strong></p><p>假如节点node2有：</p><ul><li>w1=v1:NoSchedule</li><li>s2=v2:NoSchedule</li><li>w1=v1:NoExecute</li></ul><p>则节点有三个污点。</p></blockquote><p>给节点添加污点：</p><p><code>kubectl taint node &lt;node-name&gt; &lt;key&gt;=&lt;value&gt;:&lt;effect&gt; </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 举例 k,v随便起</span></span><br><span class="line">$ kubectl taint node kube-node1 node-type=production:NoShedule</span><br></pre></td></tr></table></figure><p>查看节点污点:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes &lt;nodename&gt; -o go-template=&#123;&#123;.spec.taints&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不建议，只能输出一行，展示不全</span></span><br><span class="line">$ kubectl describe nodes &lt;nodename&gt; | grep Taint</span><br></pre></td></tr></table></figure><p>删除节点污点：</p><p><strong>语法：</strong><code>kubectl taint node &lt;node-name&gt;&lt;key&gt;[:&lt;effect&gt;]-</code></p><p>删除 key 为 node-type，effect 为 NoSchedule 的污点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl taint node kube-node1 node-type:NoSchedule-</span><br></pre></td></tr></table></figure><p>删除 key 为 node-type 的所有污点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl taint node kube-node1 node-type-</span><br></pre></td></tr></table></figure><p>删除所有污点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl patch nodes &lt;node-name&gt; -p <span class="string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;taints&quot;:[]&#125;&#125;&#x27;</span> </span><br></pre></td></tr></table></figure><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>污点用于：</p><ol><li>专用节点</li><li>配置特别硬件的节点</li><li>基于Taint驱逐Pod</li></ol><h2 id="Pod查看常用命令🔺"><a href="#Pod查看常用命令🔺" class="headerlink" title="Pod查看常用命令🔺"></a>Pod查看常用命令🔺</h2><p>查看Pod分配的节点和IP</p><p><code>kubectl get pods -o wide</code></p><h2 id="有状态与无状态Pod🔺"><a href="#有状态与无状态Pod🔺" class="headerlink" title="有状态与无状态Pod🔺"></a>有状态与无状态Pod🔺</h2><p><strong>无状态应用（Stateless Application）</strong>是指应用不会在会话中保存下次会话所需要的客户端数据。每一个会话都像首次执行一样，不会依赖之前的数据进行响应。<strong>有状态的应用（Stateful Application）</strong>是指应用会在会话中保存客户端的数据，并在客户端下一次的请求中来使用那些数据。</p><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>是指该服务运行的实例不会在本地存储需要持久化的数据，并且多个实例对于同一个请求响应的结果是完全一致的。</p><p>多个实例可以共享相同的持久化数据。例如：nginx实例，tomcat实例等</p><p>相关的k8s资源有：ReplicaSet、ReplicationController、Deployment等，由于是无状态服务，所以这些控制器创建的pod序号都是随机值。并且在缩容的时候并不会明确缩容某一个pod，而是随机的，因为所有实例得到的返回值都是一样，所以缩容任何一个pod都可以。</p><blockquote><p>总结</p><ol><li>Pod都一样，对于同一个请求响应的结果是完全一致的。</li><li>Pod之间没有启动顺序</li><li>Pod不用考虑在哪个节点上启动</li><li>随意扩容和伸缩</li></ol></blockquote><h3 id="有状态"><a href="#有状态" class="headerlink" title="有状态"></a>有状态</h3><p>上面无状态的总结都需要考虑到。有状态的Pod很需要数据卷，Pod之间是不同的每个Pod不同的Ip里面存储的资源也不尽相同，也有启动顺序的需要，例如Mysql主从Pod，肯定先主后从启动。</p><p>当Pod分配Node执行时，如果Node上没有之前的数据卷，则不行，要在之前的Node上运行Pod又或者有共享存储卷。</p><p>StatefulSet 缩容任何时候只会操作 一个 pod 实例，所以有状态应用的缩容不会很迅速。举例来说， 一个分布式存储应用若同时下线多个节点 ，则可能导致其数据丢失 。 比如说一个数据项副本数设置为 2 的数据存储应用， 若 同时有两个节点下线，一份数据记录就会丢失，如果它正好保存在这两个节点上 。 若缩容是线性的 ，则分布式存储应用就有时间把丢失的副本复制到其他节点 ，保证数据不会丢失。</p><h1 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h1><h2 id="Label-概述"><a href="#Label-概述" class="headerlink" title="Label 概述"></a><strong>Label 概述</strong></h2><p>Label 是 Kubernetes 系统中另一个核心概念。一个 Label 是一个 key=value 的键值对，其中 key 与 value 由用户自己指 定。Label 可以附加到各种资源对象上，如 Node、Pod、Service、RC，一个资源对象可以定义任意数量的 Label， 同一个 Label 也可以被添加到任意数量的资源对象上，Label 通常在资源对象定义时确定，也可以在对象创建后动态添加或删除。 </p><p>Label 的最常见的用法是使用 metadata.labels 字段，来为对象添加 Label，通过spec.selector 来引用对象 。</p><p>Label 附加到 Kubernetes 集群中各种资源对象上，目的就是对这些资源对象进行分组管理，而分组管理的核心就是 Label Selector。Label 与 Label Selector 都是不能单独定义，必须附加在一些资源对象的定义文件上，一般附加 在 RC 和 Service 的资源定义文件中。</p><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>Controller是在集群上管理和运行容器的对象。</p><p><strong>1.Pod与Controller的关系</strong></p><p>Pod是通过Controller<strong>实现应用的运维，比如伸缩、滚动升级等等</strong>。</p><p>Pod和 Controller之间通过label标签和selector选择器建立关系</p><blockquote><p>控制器有：</p><ol><li><strong>Replication Controller</strong></li><li><strong>Replica Set</strong></li><li><strong>Deployment</strong></li><li><strong>Horizontal Pod Autoscaler</strong></li></ol></blockquote><blockquote><p><strong>注意</strong></p><p><strong>Replication Controller</strong>、<strong>Replica Set</strong>、<strong>Deployment</strong>都是无状态的Pod的控制器。</p><p>statefulSet是有状态的Pod的控制器。</p></blockquote><h2 id="无状态Pod控制器"><a href="#无状态Pod控制器" class="headerlink" title="无状态Pod控制器"></a>无状态Pod控制器</h2><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Deployment是一种常用的Controller。</p><p>Deployment 是 Kubenetes v1.2 引入的新概念，引入的目的是为了更好的解决 Pod 的编排问题，Deployment 内部使用了 Replica Set 来实现。</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h4><ul><li>部署无状态应用(web、微服务)</li><li>管理Pod和ReplicaSet(Pod副本)</li><li>部署、滚动升级等功能</li></ul><h4 id="Deployment部署应用"><a href="#Deployment部署应用" class="headerlink" title="Deployment部署应用"></a>Deployment部署应用</h4><p><strong>1.使用yaml文件部署，首先导出yaml模板</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment web --image=nginx --dry-run=client -o yaml &gt; web.yaml</span><br></pre></td></tr></table></figure><p>上面说到Pod和 Controller之间通过label标签和selector选择器建立关系，下图证明了：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201123165244192.png" alt="image-20201123165244192"></p><p><strong>2.使用yaml文件部署</strong></p><p><strong>创建的是pod</strong>，通过web.yaml的内容得知，详细请看下图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f web.yaml</span><br></pre></td></tr></table></figure><p><strong>3.对外发布(暴露对外端口)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose deployment web --port 80 --<span class="built_in">type</span>=NodePort --target-port=80 --name=web1 -o yaml &gt; web1.yaml</span><br></pre></td></tr></table></figure><blockquote><p>将资源暴露为<font color="red"><strong>新的Kubernetes Service。</strong></font></p><p>指定<code>deployment</code>、<code>service</code>、<code>replica set</code>、<code>replication controller</code>或<code>pod</code>，并使用该资源的选择器作为指定端口上新服务的选择器。<strong>deployment 或 replica set只有当其选择器可转换为service支持的选择器时，即当选择器仅包含matchLabels组件时才会作为暴露新的Service。</strong></p><ul><li>–port：资源的端口（这里是deployment的端口）</li><li>–target-port：容器的端口</li><li>–type：Type for this service: ClusterIP, NodePort, or LoadBalancer. Default is ‘ClusterIP’.(该服务的类型：ClusterIP，NodePort或LoadBalancer。默认值为“ ClusterIP”)</li></ul><p>因为我们是暴露端口，所以type选择NodePort</p></blockquote><p><strong>4.重新应用yaml文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f web1.yaml</span><br></pre></td></tr></table></figure><p><strong>创建的是service</strong>，因为<code>web.yaml</code>与<code>web1.yaml</code>的区别内容为：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201124114353266.png" alt="image-20201124114353266"></p><blockquote><p>由此图得知：</p><ul><li>create时创建的是手动选择的<code>deployment</code>；而expose时，是创建了<code>Service</code></li><li><code>deployment</code>和<code>Service</code>都是通过Pod上的标签i以及通过标签选择器来寻找Pod</li><li><code>Service</code>有IP可以通过其访问到Pod，直接通过Pod访问内容不稳定。</li></ul></blockquote><hr><p><strong>上述的步骤较多。其实，最后你准备一个完整的yaml，就可以直接部署了。</strong></p><h5 id="升级回滚"><a href="#升级回滚" class="headerlink" title="升级回滚"></a>升级回滚</h5><p><strong>升级</strong></p><p>对已有deployment的资源进行以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubactl <span class="built_in">set</span> image deployment xxx nginx=nginx:xxx</span><br></pre></td></tr></table></figure><blockquote><p><strong>升级过程</strong></p><ol><li>下载最新镜像</li><li>运行容器</li><li>当最新容器运行好了后直接替换旧的容器</li></ol></blockquote><p>查看应用是否升级成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rollout status deployment xxx</span><br></pre></td></tr></table></figure><p><strong>回滚</strong></p><p>当镜像更新到最新版本后，发现了其他问题，需要回滚到之前的版本，这种场景很常见。</p><blockquote><p>查看deployment历史版本</p><p><code>kubectl rollout history deployment xxx</code></p><p>回滚到上一个版本</p><p><code>kubectl rollout undo deployment xxx</code></p><p>回滚到指定版本</p><p><code>kubectl rollout undo deployment xxx --to-revision=xx</code></p></blockquote><h5 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h5><p>当发现测服务热门，当前资源不够用时，可以扩展服务的个数：</p><p><code>kubectl scale deployment xxx --replicas=x</code></p><h3 id="Replication-Controller"><a href="#Replication-Controller" class="headerlink" title="Replication Controller"></a>Replication Controller</h3><p>Replication Controller(RC)是 Kubernetes 系统中核心概念之一，当我们定义了一个 RC并提交到 Kubernetes 集群中以后，Master 节点上的 Controller Manager 组件就得到通知，定期检查系统中存活的 Pod,并确保目标 Pod 实例的数量刚好等于 RC 的预期值，如果有过多或过少的 Pod 运行，系统就会停掉或创建一些 Pod.此外我们也可以通过修改 RC 的副本数量，来实现 Pod 的动态缩放功能。</p><p><code>kubectl scale rc nginx --replicas=5 </code></p><p>由于 Replication Controller 与 Kubernetes 代码中的模块 Replication Controller 同名，<strong>所以在 Kubernetes v1.2 时， 它就升级成了另外一个新的概念 Replica Sets,官方解释为下一代的 RC</strong>，它与 RC 区别是:Replica Sets 支援基于集合的 Label selector,而 RC 只支持基于等式的 Label Selector。我们很少单独使用 Replica Set,它主要被 Deployment 这个更高层面的资源对象所使用，从而形成一整套 Pod 创建、删除、更新的编排机制。最好不要越过 RC 直接创建 Pod， 因为 Replication Controller 会通过 RC 管理 Pod 副本，实现自动创建、补足、替换、删除 Pod 副本，这样就能提高应用的容灾能力，减少由于节点 崩溃等意外状况造成的损失。即使应用程序只有一个 Pod 副本，也强烈建议使用 RC 来 定义 Pod。</p><h3 id="Replica-Set"><a href="#Replica-Set" class="headerlink" title="Replica Set"></a>Replica Set</h3><p>ReplicaSet 跟 ReplicationController 没有本质的不同，只是名字不一样，<strong>并且ReplicaSet 支持集合式的 selector（ReplicationController 仅支持等式）</strong>。 <font color="red"><strong>Kubernetes 官方强烈建议避免直接使用 ReplicaSet</strong></font>，而应该通过 Deployment 来创建 RS 和Pod。由于 ReplicaSet 是 ReplicationController 的代替物，因此用法基本相同，唯一的区别在于 ReplicaSet 支持集合式的 selector</p><hr><h2 id="有状态的Pod的控制器"><a href="#有状态的Pod的控制器" class="headerlink" title="有状态的Pod的控制器"></a>有状态的Pod的控制器</h2><p>有状态的Pod的控制器为：<code>StatefulSet</code></p><p>Kubernetes在1.9版本中正式发布的StatefulSet控制器能支持：</p><ul><li><strong>Pod会被顺序部署和顺序终结</strong>：StatefulSet中的各个 Pod会被顺序地创建出来，每个Pod都有一个唯一的ID，在创建后续 Pod 之前，首先要等前面的 Pod 运行成功并进入到就绪状态。删除会销毁StatefulSet 中的每个 Pod，并且按照创建顺序的反序来执行，只有在成功终结后面一个之后，才会继续下一个删除操作。</li><li><strong>Pod具有唯一网络名称</strong>：Pod具有唯一的名称，而且在重启后会保持不变。通过Headless服务，基于主机名，每个 Pod 都有独立的网络地址，这个网域由一个Headless 服务所控制。这样每个Pod会保持稳定的唯一的域名，使得集群就不会将重新创建出的Pod作为新成员。</li><li><strong>Pod能有稳定的持久存储</strong>：StatefulSet中的每个Pod可以有其自己独立的PersistentVolumeClaim对象。即使Pod被重新调度到其它节点上以后，原有的持久磁盘也会被挂载到该Pod。</li><li><strong>Pod能被通过Headless服务访问到</strong>：客户端可以通过服务的域名连接到任意Pod。</li></ul><p><strong>唯一ID规则？？</strong></p><p>通过statefulSet，由于是有状态的服务，所以每个pod都有特定的名称和网络标识。比如pod名是由statefulSet名+有序的数字组成（0、1、2..）</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-02_20-15-50.png" alt="Snipaste_2020-12-02_20-15-50"></p><p>还可以通过域名对Pod形成1对1的关联关系，上面说了Pod名（主机名称）规则，下面唯一标识的规则为：</p><p><code>主机名.service名称.名称空间.svc.local</code></p><h2 id="一次性任务"><a href="#一次性任务" class="headerlink" title="一次性任务"></a>一次性任务</h2><p>Job 其实就是根据定义起一个或多个 pod 来执行任务，pod 执行完退出后，这个 Job 就完成了。所以 Job 又称为 Batch Job ，即计算业务或离线业务。</p><h3 id="Job使用方法"><a href="#Job使用方法" class="headerlink" title="Job使用方法"></a>Job使用方法</h3><p>Job 的 YAML 定义与 Deployment 十分相似。与 Deployment 不同的是，Job 不需要定义 <code>spec.selector</code> 来指定需要控制的 pod，看个例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">date</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">perl</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;perl&quot;</span>, <span class="string">&quot;-Mbignum=bpi&quot;</span>, <span class="string">&quot;-wle&quot;</span>, <span class="string">&quot;print bpi(2000)&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p>这个例子中我们计算了Pi的值。</p><p><strong>1. 启动Job</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f job.yaml</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203192035404.png" alt="image-20201203192035404"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203192057237.png" alt="image-20201203192057237"></p><p><strong>2. 查看结果</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203192136897.png" alt="image-20201203192136897"></p><p>pod 在执行完毕后，状态会变成 <code>Completed</code></p><blockquote><h3 id="pod-重启策略"><a href="#pod-重启策略" class="headerlink" title="pod 重启策略"></a>pod 重启策略</h3><p>在 Job 中，pod 的重启策略 restartPolicy 不允许被设置成 Always，只允许被设置为 Never 或 OnFailure。这是因为 Job 的 pod 执行完毕后直接退出，如果 restartPolicy=Always，pod 将不断执行计算作业，这可不是我们期望的。</p><p>Job 可以设置 pod 的最长运行时间 spec.activeDeadlineSeconds，一旦超过了这个时间，这个 Job 的所有 pod 都会被终止。</p><p>那么，如果 pod 的计算作业失败了，在不同的重启策略下会怎么办？</p><h4 id="restartPolicy-Never"><a href="#restartPolicy-Never" class="headerlink" title="restartPolicy=Never"></a>restartPolicy=Never</h4><p>如果设置了 restartPolicy=Never，那么 Job Controller 会不断的尝试创建一个新的 pod 出来，默认尝试 6 次。当然这个值可以设置，即 Job 对象的 spec.backoffLimit 字段。</p><p>需要注意的是，重新创建 Pod 的间隔是呈指数增加的。</p><h4 id="restartPolicy-OnFailure"><a href="#restartPolicy-OnFailure" class="headerlink" title="restartPolicy=OnFailure"></a>restartPolicy=OnFailure</h4><p>如果设置了 restartPolicy=Never，那么 Job Controller 会不断的重启这个 pod。</p></blockquote><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>你可以利用 CronJobs 执行基于时间调度的任务。这些自动化任务和 Linux 或者 Unix 系统的 Cron 任务类似。</p><p>CronJobs 在创建周期性以及重复性的任务时很有帮助，例如执行备份操作或者发送邮件。CronJobs 也可以在特定时间调度单个任务，例如你想调度低活跃周期的任务。</p><h3 id="CronJob使用方法"><a href="#CronJob使用方法" class="headerlink" title="CronJob使用方法"></a>CronJob使用方法</h3><p>CronJob 需要一个配置文件。 本例中 CronJob 的<code>.spec</code> 配置文件每分钟打印出当前时间和一个问好信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">            <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">date;</span> <span class="string">echo</span> <span class="string">Hello</span> <span class="string">from</span> <span class="string">the</span> <span class="string">Kubernetes</span> <span class="string">cluster</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></table></figure><p>想要运行示例的 CronJob，可以下载示例文件并执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create -f ./cronjob.yaml</span></span><br></pre></td></tr></table></figure><p><code>cronjob.batch/hello created</code></p><p>创建好 CronJob 后，使用下面的命令来获取其状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get cronjob hello</span></span><br></pre></td></tr></table></figure><p>输出类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">hello   *&#x2F;1 * * * *   False     0        50s             75s</span><br></pre></td></tr></table></figure><p>就像你从命令返回结果看到的那样，CronJob 还没有调度或执行任何任务。大约需要一分钟任务才能创建好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get jobs --watch</span><br><span class="line">NAME               COMPLETIONS   DURATION   AGE</span><br><span class="line">hello-4111706356   0/1                      0s</span><br><span class="line">hello-4111706356   0/1           0s         0s</span><br><span class="line">hello-4111706356   1/1           5s         5s</span><br></pre></td></tr></table></figure><p>现在你已经看到了一个运行中的任务被 “hello” CronJob 调度。 你可以停止监视这个任务，然后再次查看 CronJob 就能看到它调度任务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get cronjob hello</span></span><br></pre></td></tr></table></figure><p>输出类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">hello   *&#x2F;1 * * * *   False     0        50s             75s</span><br></pre></td></tr></table></figure><p>你应该能看到 “hello” CronJob 在 <code>LAST-SCHEDULE</code> 声明的时间点成功的调度了一次任务。 有 0 个活跃的任务意味着任务执行完毕或者执行失败。</p><p>现在，找到最后一次调度任务创建的 Pod 并查看一个 Pod 的标准输出。请注意任务名称和 Pod 名称是不同的。</p><blockquote><p><strong>说明：</strong> Job 名称和 Pod 名称不同。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在你的系统上将 <span class="string">&quot;hello-4111706356&quot;</span> 替换为 Job 名称</span></span><br><span class="line">pods=$(kubectl get pods --selector=job-name=hello-4111706356 --output=jsonpath=&#123;.items..metadata.name&#125;)</span><br></pre></td></tr></table></figure><p>查看 Pod 日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs $pods</span><br><span class="line">Fri Feb 22 11:02:09 UTC 2019</span><br><span class="line">Hello from the Kubernetes cluster</span><br></pre></td></tr></table></figure><p>当你不再需要 CronJob 时，可以用 <code>kubectl delete cronjob</code> 删掉它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete cronjob hello</span><br></pre></td></tr></table></figure><p>删除 CronJob 会清除它创建的所有任务和 Pod，并阻止它创建额外的任务。</p><h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p>Service 是 Kubernetes 最核心概念，通过创建 Service，<strong>可以为一组具有相同功能的容器应用提供一个统一的入口地址</strong>，并且将请求负载分发到后端的各个容器应用上。 </p><p>类似于微服务的服务注册与发现中心。</p><blockquote><p>存在意义：</p><ul><li>因为Pod的IP不断变化，Service关联Pod，防止Pod失去联系</li><li>定义一组Pod的访问规则（负载均衡）</li></ul></blockquote><p>todo kubeget get svc的图片</p><h2 id="Service与Pod关系"><a href="#Service与Pod关系" class="headerlink" title="Service与Pod关系"></a>Service与Pod关系</h2><p>上面说到Service防止与Pod失联，所以Service要与Pod建立联系，他们是用过标签和标签选择器来建立联系的。</p><p>然后说到Service定于一组访问Pod的规则，那么我们为什么不直接通过ip访问pod呢？</p><p>我们可以通过 kubectl get pods -l app=mywebapp -o yaml | grep podIP 来获取Pod 的 IP 地址和端口号来访问 Tomcat 服务，但是直接通过 Pod 的 IP 地址和端口访问应用服务是不可靠的，因为当 Pod 所在的 Node 发生故障时， Pod 将被 kubernetes 重新调度到 另一台 Node，Pod 的地址会发生改变。我们可以通过配置文件来定义 Service，再 通过kubectl create 来创建，这样可以通过 Service 地址来访问后端的 Pod.。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201124113505202.png" alt="image-20201124113505202"></p><h2 id="Service的种类"><a href="#Service的种类" class="headerlink" title="Service的种类"></a>Service的种类</h2><p><a href="#Deployment%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8">上面暴露端口时</a>有个<code>--type=xxx</code>，这里有三个选项，这其实就是Service的种类，所以<code>expose</code>操作时就是创建不同的<code>Service</code>。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-02_19-53-26.png" alt="Snipaste_2020-12-02_19-53-26"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h3><p>默认值，一般在集群内部访问时使用。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-02_19-58-04.png" alt="Snipaste_2020-12-02_19-58-04"></p><h3 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h3><p>一般用于将集群内部的Pod暴露给外网访问时采用这种模式，它可以暴露Pod内的指定端口，然后可以通过集群内任何一台机器的IP加上随机暴露的端口进行访问Pod。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-02_19-58-39.png" alt="Snipaste_2020-12-02_19-58-39"></p><p>通过查看service：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-02_19-59-38.png" alt="Snipaste_2020-12-02_19-59-38"></p><p>发现，ClusterIP的只有一个端口，只能内部访问，而NodePort有端口的映射，所以他能通过集群节点的Ip和端口访问到Pod里指定的端口。</p><h3 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h3><p>也是一般用于外网访问Pod，一般与公有云一同使用，做到负载均衡的效果。</p><h1 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h1><h2 id="Sercet"><a href="#Sercet" class="headerlink" title="Sercet"></a>Sercet</h2><p>Sercet：有密码的意思，它是将密码等敏感数据存储在etcd中。上面说过etcd是k8s的存储中心。</p><p><strong>它的作用就是将加密的数据存储在etcd中，让Pod容器以变量/Volume的方式进行访问。</strong></p><h3 id="创建Sercet"><a href="#创建Sercet" class="headerlink" title="创建Sercet"></a>创建Sercet</h3><p><strong>将 secret 数据转换为 base-64 形式</strong></p><p>假设用户想要有两条 Secret 数据：用户名 <code>my-app</code> 和密码 <code>39528$vdg7Jb</code>。 首先使用 <a href="https://www.base64encode.org/">Base64 编码</a> 将用户名和密码转化为 base-64 形式。 下面是一个使用常用的 base64 程序的示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -n &#x27;my-app&#x27; | base64</span><br><span class="line">echo -n &#x27;39528$vdg7Jb&#x27; | base64</span><br></pre></td></tr></table></figure><p>结果显示 base-64 形式的用户名为 <code>bXktYXBw</code>， base-64 形式的密码为 <code>Mzk1MjgkdmRnN0pi</code>。</p><blockquote><p><strong>注意：</strong> 使用你的操作系统所能信任的本地工具以降低使用外部工具的风险。</p></blockquote><p><strong>创建 Secret</strong></p><p>这里是一个配置文件，可以用来创建存有用户名和密码的 Secret:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-secret</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">bXktYXBw</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">Mzk1MjgkdmRnN0pi</span></span><br></pre></td></tr></table></figure><ol><li><p>创建 Secret：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f https://k8s.io/examples/pods/inject/secret.yaml</span></span><br></pre></td></tr></table></figure></li><li><p>查看 Secret 相关信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get secret test-secret</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME          TYPE      DATA      AGE</span><br><span class="line">test-secret   Opaque    2         1m</span><br></pre></td></tr></table></figure></li><li><p>查看 Secret 相关的更多详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl describe secret test-secret</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Name:       test-secret</span><br><span class="line">Namespace:  default</span><br><span class="line">Labels:     &lt;none&gt;</span><br><span class="line">Annotations:    &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Type:   Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">password:   13 bytes</span><br><span class="line">username:   7  bytes</span><br></pre></td></tr></table></figure></li></ol><h3 id="注入到容器"><a href="#注入到容器" class="headerlink" title="注入到容器"></a>注入到容器</h3><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>使用 <code>envFrom</code> 来将 Secret 中的所有数据定义为环境变量。 Secret 中的键名成为容器中的环境变量名：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">envfrom-secret</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envars-test-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">envFrom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">secretRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">test-secret</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203195838491.png" alt="image-20201203195838491"></p><p>创建 Pod：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f https://k8s.io/examples/pods/inject/pod-secret-envFrom.yaml</span><br></pre></td></tr></table></figure><p>在 Shell 中，显示环境变量 <code>username</code> 和 <code>password</code> 的内容：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203200120573.png" alt="image-20201203200120573"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -i -t envfrom-secret -- /bin/sh -c <span class="string">&#x27;echo &quot;username: $username\npassword: $password\n&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: my-app</span><br><span class="line">password: 39528$vdg7Jb</span><br></pre></td></tr></table></figure><h4 id="Volume形式"><a href="#Volume形式" class="headerlink" title="Volume形式"></a>Volume形式</h4><p>这里是一个可以用来创建 pod 的配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret-test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="comment"># name must match the volume name below</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/secret-volume</span></span><br><span class="line">  <span class="comment"># The secret data is exposed to Containers in the Pod through a Volume.</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">      <span class="attr">secret:</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">test-secret</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203200422422.png" alt="image-20201203200422422"></p><ol><li><p>创建 Pod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f secret-pod.yaml</span><br></pre></td></tr></table></figure></li><li><p>确认 Pod 正在运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod secret-test-pod</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME              READY     STATUS    RESTARTS   AGE</span><br><span class="line">secret-test-pod   1/1       Running   0          42m</span><br></pre></td></tr></table></figure></li><li><p>获取一个 shell 进入 Pod 中运行的容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec -it secret-test-pod -- /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>Secret 数据通过挂载在 <code>/etc/secret-volume</code> 目录下的卷暴露在容器中。</p><p>在 shell 中，列举 <code>/etc/secret-volume</code> 目录下的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/secret-volume</span><br></pre></td></tr></table></figure><p>输出包含两个文件，每个对应一个 Secret 数据条目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password username</span><br></pre></td></tr></table></figure></li><li><p>在 Shell 中，显示 <code>username</code> 和 <code>password</code> 文件的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在容器中 Shell 运行下面命令</span></span><br><span class="line">echo &quot;$(cat /etc/secret-volume/username)&quot;</span><br><span class="line">echo &quot;$(cat /etc/secret-volume/password)&quot;</span><br></pre></td></tr></table></figure><p>输出为用户名和密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line"><span class="meta">39528$</span><span class="bash">vdg7Jb</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><p><strong>和Sercet的作用差不多，将配置的数据存储在etcd中，让Pod容器以变量/Volume的方式进行访问。</strong></p><p>ConfigMap 允许你将配置文件与镜像文件分离，以使容器化的应用程序具有可移植性。 本页提供了一系列使用示例，这些示例演示了如何创建 ConfigMap 以及配置 Pod 使用存储在 ConfigMap 中的数据。</p><h3 id="创建ConfigMap"><a href="#创建ConfigMap" class="headerlink" title="创建ConfigMap"></a>创建ConfigMap</h3><p>你可以使用 <code>kubectl create configmap</code> 或者在 <code>kustomization.yaml</code> 中的 ConfigMap 生成器 来创建 ConfigMap。注意，<code>kubectl</code> 从 1.14 版本开始支持 <code>kustomization.yaml</code>。</p><h4 id="基于文件创建"><a href="#基于文件创建" class="headerlink" title="基于文件创建"></a>基于文件创建</h4><p>你可以使用 <code>kubectl create configmap</code> 基于单个文件或多个文件创建 ConfigMap。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties</span><br></pre></td></tr></table></figure><p>将产生以下 ConfigMap:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe configmaps game-config-2</span><br></pre></td></tr></table></figure><p>输出类似以下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Name:         game-config-2</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">game.properties:</span><br><span class="line">----</span><br><span class="line">enemies&#x3D;aliens</span><br><span class="line">lives&#x3D;3</span><br><span class="line">enemies.cheat&#x3D;true</span><br><span class="line">enemies.cheat.level&#x3D;noGoodRotten</span><br><span class="line">secret.code.passphrase&#x3D;UUDDLRLRBABAS</span><br><span class="line">secret.code.allowed&#x3D;true</span><br><span class="line">secret.code.lives&#x3D;30</span><br></pre></td></tr></table></figure><hr><p>在使用 <code>--from-file</code> 参数时，你可以定义在 ConfigMap 的 <code>data</code> 部分出现键名， 而不是按默认行为使用文件名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create configmap game-config-3 --from-file=&lt;my-key-name&gt;=&lt;path-to-file&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;my-key-name&gt;</code> 是你要在 ConfigMap 中使用的键名，<code>&lt;path-to-file&gt;</code> 是你想要键表示数据源文件的位置。</p><p>例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create configmap game-config-3 --from-file=game-special-key=configure-pod-container/configmap/game.properties</span><br></pre></td></tr></table></figure><p>将产生以下 ConfigMap:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get configmaps game-config-3 -o yaml</span><br></pre></td></tr></table></figure><p>输出类似以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="number">2016-02-18T18:54:22Z</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">game-config-3</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;530&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/default/configmaps/game-config-3</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">05f8da22-d671-11e5-8cd0-68f728db1985</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">game-special-key:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">enemies=aliens</span></span><br><span class="line">    <span class="string">lives=3</span></span><br><span class="line">    <span class="string">enemies.cheat=true</span></span><br><span class="line">    <span class="string">enemies.cheat.level=noGoodRotten</span></span><br><span class="line">    <span class="string">secret.code.passphrase=UUDDLRLRBABAS</span></span><br><span class="line">    <span class="string">secret.code.allowed=true</span></span><br><span class="line">    <span class="string">secret.code.lives=30</span></span><br></pre></td></tr></table></figure><h4 id="基于生成器创建-ConfigMap"><a href="#基于生成器创建-ConfigMap" class="headerlink" title="基于生成器创建 ConfigMap"></a>基于生成器创建 ConfigMap</h4><p>自 1.14 开始，<code>kubectl</code> 开始支持 <code>kustomization.yaml</code>。 你还可以基于生成器创建 ConfigMap，然后将其应用于 API 服务器上创建对象。 生成器应在目录内的 <code>kustomization.yaml</code> 中指定</p><p>例如，要从 <code>configure-pod-container/configmap/kubectl/game.properties</code> 文件生成一个 ConfigMap：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建包含 ConfigMapGenerator 的 kustomization.yaml 文件</span></span><br><span class="line">cat &lt;&lt;EOF &gt;./kustomization.yaml</span><br><span class="line">configMapGenerator:</span><br><span class="line">- name: game-config-4</span><br><span class="line">  files:</span><br><span class="line">  - configure-pod-container/configmap/kubectl/game.properties</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>使用 kustomization 目录创建 ConfigMap 对象：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -k .</span><br><span class="line">configmap/game-config-4-m9dm2f92bt created</span><br></pre></td></tr></table></figure><p>你可以检查 ConfigMap 是这样创建的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">kubectl get configmap</span><br><span class="line">NAME                       DATA   AGE</span><br><span class="line">game-config-4-m9dm2f92bt   1      37s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe configmaps/game-config-4-m9dm2f92bt</span><br><span class="line">Name:         game-config-4-m9dm2f92bt</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                &#123;&quot;apiVersion&quot;:&quot;v1&quot;,&quot;data&quot;:&#123;&quot;game.properties&quot;:&quot;enemies=aliens\nlives=3\nenemies.cheat=true\nenemies.cheat.level=noGoodRotten\nsecret.code.p...</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">game.properties:</span><br><span class="line">----</span><br><span class="line">enemies=aliens</span><br><span class="line">lives=3</span><br><span class="line">enemies.cheat=true</span><br><span class="line">enemies.cheat.level=noGoodRotten</span><br><span class="line">secret.code.passphrase=UUDDLRLRBABAS</span><br><span class="line">secret.code.allowed=true</span><br><span class="line">secret.code.lives=30</span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><p>请注意，生成的 ConfigMap 名称具有通过对内容进行散列而附加的后缀， 这样可以确保每次修改内容时都会生成新的 ConfigMap。</p><hr><p>在 ConfigMap 生成器，你可以定义一个非文件名的键名。 例如，从 <code>configure-pod-container/configmap/game.properties</code> 文件生成 ConfigMap， 但使用 <code>game-special-key</code> 作为键名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建包含 ConfigMapGenerator 的 kustomization.yaml 文件</span></span><br><span class="line">cat &lt;&lt;EOF &gt;./kustomization.yaml</span><br><span class="line">configMapGenerator:</span><br><span class="line">- name: game-config-5</span><br><span class="line">  files:</span><br><span class="line">  - game-special-key=configure-pod-container/configmap/kubectl/game.properties</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>使用 Kustomization 目录创建 ConfigMap 对象。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -k .</span><br><span class="line">configmap/game-config-5-m67dt67794 created</span><br></pre></td></tr></table></figure><hr><blockquote><p>如基于文件创建 <a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-pod-configmap/#create-configmaps-from-files">ConfigMap</a> 中所述，当你使用 <code>--from-file</code> 创建 ConfigMap 时，（默认）文件名成为存储在 ConfigMap 的 <code>data</code> 部分中的键， 文件内容成为键对应的值。</p><p>所以这种创建方式，只有一个k-v。使用下述yaml创建的话一个ConfigMao多个KV</p></blockquote><h3 id="注入到容器-1"><a href="#注入到容器-1" class="headerlink" title="注入到容器"></a>注入到容器</h3><h4 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h4><ul><li><p>创建一个包含多个键值对的 ConfigMap。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">SPECIAL_LEVEL:</span> <span class="string">very</span></span><br><span class="line">  <span class="attr">SPECIAL_TYPE:</span> <span class="string">charm</span></span><br></pre></td></tr></table></figure><p>创建 ConfigMap:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://kubernetes.io/examples/configmap/configmap-multikeys.yaml</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>envFrom</code> 将所有 ConfigMap 的数据定义为容器环境变量，ConfigMap 中的键成为 Pod 中的环境变量名称。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dapi-test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/busybox</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;env&quot;</span> ]</span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p>创建 Pod:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://kubernetes.io/examples/pods/pod-configmap-envFrom.yaml</span><br></pre></td></tr></table></figure><p>现在，Pod 的输出包含环境变量 <code>SPECIAL_LEVEL=very</code> 和 <code>SPECIAL_TYPE=charm</code>。</p></li></ul><h4 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h4><p>如基于文件创建 ConfigMap 中所述，当你使用 –from-file 创建 ConfigMap 时，文件名成为存储在 ConfigMap 的 data 部分中的键， 文件内容成为键对应的值。</p><p>本节中的示例引用了一个名为 special-config 的 ConfigMap，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">SPECIAL_LEVEL:</span> <span class="string">very</span></span><br><span class="line">  <span class="attr">SPECIAL_TYPE:</span> <span class="string">charm</span></span><br></pre></td></tr></table></figure><p>创建 ConfigMap:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://kubernetes.io/examples/configmap/configmap-multikeys.yaml</span><br></pre></td></tr></table></figure><p>在 Pod 规约的 <code>volumes</code> 部分下添加 ConfigMap 名称。 这会将 ConfigMap 数据添加到指定为 <code>volumeMounts.mountPath</code> 的目录（在本例中为 <code>/etc/config</code>）。 <code>command</code> 部分引用存储在 ConfigMap 中的 <code>special.level</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dapi-test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/busybox</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;ls /etc/config/&quot;</span> ]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="comment"># Provide the name of the ConfigMap containing the files you want</span></span><br><span class="line">        <span class="comment"># to add to the container</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p><img src="E:%5CProjects%5Csync%5Cmd%5Ck8s%5Cimage-20201204100337839.png" alt="image-20201204100337839"></p><p>创建 Pod:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://kubernetes.io/examples/pods/pod-configmap-volume.yaml</span><br></pre></td></tr></table></figure><p>Pod 运行时，命令 <code>ls /etc/config/</code> 产生下面的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SPECIAL_LEVEL</span><br><span class="line">SPECIAL_TYPE</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 如果在 <code>/etc/config/</code> 目录中有一些文件，它们将被删除。</p></blockquote><blockquote><p><strong>说明：</strong> 文本数据会使用 UTF-8 字符编码的形式展现为文件。如果使用其他字符编码， 可以使用 <code>binaryData</code>。</p></blockquote><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><h2 id="Ingress的功能"><a href="#Ingress的功能" class="headerlink" title="Ingress的功能"></a>Ingress的功能</h2><p>之前创建的Nginx Deployment资源为了能让外部访问，采用<code>kubectl expose</code>操作创建了一个type=NodePort的Service，然后可以通过以下方式来访问到内部的Nginx资源：</p><ul><li>Service IP:PORT</li><li>集群内任一节点IP:Port</li></ul><p>那这样有点不方便，如果我们想访问一个应用要先查看他开放的端口，通过IP端口形式访问，但在实际的使用当中是希望通过不同域名访问到不同的服务，域名应该指向的IP是同一个。Ingress就实现了这个</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204142357121.png" alt="image-20201204142357121"></p><blockquote><p>大家可能想Ingress实现的内容不就和Nginx一致吗。其实官方提供的Ingress原理就是Nginx，做了步封装。</p></blockquote><p>通过上图得知，Ingress对访问的域名进行了规则的转发，转发至对象的ServiceIP和端口，而Servcie是一组Pod的访问规则，这样就可以根据不同的域名访问到不同的服务了。</p><h2 id="Ingress的使用"><a href="#Ingress的使用" class="headerlink" title="Ingress的使用"></a>Ingress的使用</h2><p>Ingress不是k8s集群自带的功能，需要选择Ingress的控制器安装，我们选择官方维护nginx控制器，实现部署</p><blockquote><p>步骤：</p><ol><li>部署ingress Controller</li><li>创建ingress规则</li></ol></blockquote><p><strong>1. 创建底层被访问应用，并暴露</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create deployment web --image=nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl expose deployment web --port=80 --target-port=80 --<span class="built_in">type</span>=NodePort</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204143724336.png" alt="image-20201204143724336"></p><blockquote><p>可以看到我们通过Serivce的10.106.99.78:80转发到集群任一几点的ip:32402就能访问到deployment资源</p></blockquote><p><strong>2. 部署Ingress Controller</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-configuration</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tcp-services</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">udp-services</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;extensions&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;networking.k8s.io&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;extensions&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;networking.k8s.io&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">resourceNames:</span></span><br><span class="line">      <span class="comment"># Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;</span></span><br><span class="line">      <span class="comment"># Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;</span></span><br><span class="line">      <span class="comment"># This has to be adapted if you change either parameter</span></span><br><span class="line">      <span class="comment"># when launching the nginx-ingress-controller.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ingress-controller-leader-nginx&quot;</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role-nisa-binding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole-nisa-binding</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">prometheus.io/port:</span> <span class="string">&quot;10254&quot;</span></span><br><span class="line">        <span class="attr">prometheus.io/scrape:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># wait up to five minutes for the drain of connections</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">300</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">lizhenliang/nginx-ingress-controller:0.30.0</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--configmap=$(POD_NAMESPACE)/nginx-configuration</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--udp-services-configmap=$(POD_NAMESPACE)/udp-services</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--publish-service=$(POD_NAMESPACE)/ingress-nginx</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--annotations-prefix=nginx.ingress.kubernetes.io</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">drop:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">              <span class="attr">add:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">            <span class="comment"># www-data -&gt; 101</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">101</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">lifecycle:</span></span><br><span class="line">            <span class="attr">preStop:</span></span><br><span class="line">              <span class="attr">exec:</span></span><br><span class="line">                <span class="attr">command:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="string">/wait-shutdown</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">LimitRange</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">min:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">90Mi</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Container</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204145037259.png" alt="image-20201204145037259"></p><p><strong>3. 创建ingress规则</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># http</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">example.ingredemo.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">web</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># https</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tls-example-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sslexample.ctnrs.com</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">secret-tls</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">sslexample.ctnrs.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span> <span class="string">web</span></span><br><span class="line">            <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204145348232.png" alt="image-20201204145348232"></p><p><strong>4. 添加本地域名解析</strong></p><p>因为Ingress-Controller运行在master中，所以将要使用的域名解析到master的IP。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204145635739.png" alt="image-20201204145635739"></p><p><strong>5. 访问</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204145720268.png" alt="image-20201204145720268"></p><h1 id="核心技术Helm"><a href="#核心技术Helm" class="headerlink" title="核心技术Helm"></a>核心技术Helm</h1><h2 id="Helm的引入"><a href="#Helm的引入" class="headerlink" title="Helm的引入"></a>Helm的引入</h2><p>之前我们创建服务时，需要手动编写单个服务的Deployment、Service、Ingress的配置文件，<strong>并多次通过<code>kubectl apply</code>启动。</strong>这样单个服务没问题，但是如果部署微服务时，一个项目有很多服务，每个服务都需要手动启动多个资源才可以开启，这样很麻烦，所以Helm诞生了。</p><p>K8S 上的应用对象，都是由特定的资源描述组成，包括 deployment、service 等。都保存各自文件中或者集中写到一个配置文件。然后 kubectl apply –f 部署。如果应用只由一个或几个这样的服务组成，上面部署方式足够了。而对于一个复杂的应用，会有很多类似上面的资源描述文件，例如微服务架构应用，组成应用的服务可能多达十个，几十个。如果有更新或回滚应用的需求，可能要修改和维护所涉及的大量资源文件，而这种组织和管理应用的方式就显得力不从心了。且由于缺少对发布过的应用版本管理和控制，使Kubernetes 上的应用维护和更新等面临诸多的挑战，主要面临以下问题：</p><ol><li>如何将这些服务作为一个整体管理 </li><li>这些资源文件如何高效复用</li><li>不支持应用级别的版本管理</li></ol><h2 id="Helm介绍"><a href="#Helm介绍" class="headerlink" title="Helm介绍"></a>Helm介绍</h2><p>Helm 是一个 Kubernetes 的包管理工具，就像 Linux 下的包管理器，如 yum/apt 等，可以 很方便的将之前打包好的 yaml 文件部署到 kubernetes 上。 </p><p><strong>Helm 有 3 个重要概念：</strong> </p><ol><li>helm：一个命令行客户端工具，主要用于 Kubernetes 应用 chart 的创建、打包、发 布和管理。 </li><li>Chart：应用描述，一系列用于描述 k8s 资源相关文件(yaml配置文件)的集合。</li><li>Release：基于 Chart 的部署实体，一个 chart 被 Helm 运行后将会生成对应的一个 release；将在 k8s 中创建出真实运行的资源对象。即每运行一次服务，就会有一个Release</li></ol><p><strong>Helm可以解决的问题</strong></p><ol><li>可以把一个服务的所以配置文件yaml统一管理，通过Chart。</li><li>实现yaml高校复用，通过传递参数动态渲染模板做到。</li><li>使用helm应用界别的版本管理。</li></ol><blockquote><p> 总结来说通过Helm来管理服务，虽然配置文件也是一个也没有减少，但是通过它来管理服务，升级，启动会极大的方便</p></blockquote><h2 id="Helm-v3-变化"><a href="#Helm-v3-变化" class="headerlink" title="Helm v3 变化"></a>Helm v3 变化</h2><p>2019 年 11 月 13 日， Helm 团队发布 Helm v3 的第一个稳定版本。 该版本主要变化如下： </p><ol><li>最明显的变化是 Tiller 的删除<img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_13-15-22.png" alt="Snipaste_2020-12-05_13-15-22"></li><li>Release 名称可以在不同命名空间重用</li><li>支持将 Chart 推送至 Docker 镜像仓库中</li><li>使用 JSONSchema 验证 chart values</li></ol><h2 id="Helm客户端"><a href="#Helm客户端" class="headerlink" title="Helm客户端"></a>Helm客户端</h2><h3 id="安装和配置源"><a href="#安装和配置源" class="headerlink" title="安装和配置源"></a>安装和配置源</h3><p>因为它类似于apt、yum，所以也需要配置源，然后就可以从网上下载配置好的各个APP的Chart的配置文件，直接配置网上的应用。但是多数来说还是会自定义Chart配置，来部署自己的应用，不是公共的应用。</p><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://get.helm.sh/helm-v3.4.1-linux-amd64.tar.gz</span><br><span class="line">$ tar -zxvf helm-v3.4.1-linux-amd64.tar.gz</span><br><span class="line">$ cp linux-amd64/helm /usr/bin/</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">$ helm</span><br></pre></td></tr></table></figure><p><strong>配置国内 chart 仓库</strong></p><ul><li>微软仓库（<a href="http://mirror.azure.cn/kubernetes/charts/%EF%BC%89%E8%BF%99%E4%B8%AA%E4%BB%93%E5%BA%93%E6%8E%A8%E8%8D%90%EF%BC%8C%E5%9F%BA%E6%9C%AC">http://mirror.azure.cn/kubernetes/charts/）这个仓库推荐，基本</a> 上官网有的 chart 这里都有。 </li><li> 阿里云仓库（<a href="https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts">https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</a> ）</li><li>官方仓库（<a href="https://hub.kubeapps.com/charts/incubator%EF%BC%89%E5%AE%98%E6%96%B9">https://hub.kubeapps.com/charts/incubator）官方</a> chart 仓库，国 内有点不好使。</li></ul><p>添加存储库：<code>helm repo add 随便起Name url</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm repo add stable http://mirror.azure.cn/kubernetes/charts </span><br><span class="line">helm repo add aliyun https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts </span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure><p>查看配置的存储库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo list</span><br></pre></td></tr></table></figure><p>删除存储库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo remove aliyun</span><br></pre></td></tr></table></figure><h2 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h2><h3 id="Chart创建"><a href="#Chart创建" class="headerlink" title="Chart创建"></a>Chart创建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm create mychart</span><br><span class="line">ls mycharts/</span><br></pre></td></tr></table></figure><ul><li>Chart.yaml是当前Chart属性配置信息</li><li>templates是存放服务配置文件的文件夹</li><li>values.yaml是定义全局变量的文件</li></ul><h3 id="yaml高效复用"><a href="#yaml高效复用" class="headerlink" title="yaml高效复用"></a>yaml高效复用</h3><p>创建服务yaml通过value.yaml里的参数动态绑定模板，这样较少Yaml编写时间。因为服务资源yaml模板大体信息一致，只需要改部门参数内容即可。</p><p>下面开始定义全局变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mychart</span><br><span class="line">vim values.yaml</span><br><span class="line">replicas: 1</span><br><span class="line">image: nginx</span><br><span class="line">tag: 1.16</span><br><span class="line">label: nginx</span><br><span class="line">port: 80</span><br></pre></td></tr></table></figure><p>然后在templates文件夹中的对应的配置文件中通过变量引入：<code>&#123;&#123; .Values.xxx&#125;&#125;</code>。注意 点与大括号之间的空格。然后我们一般在name的值采用<code>&#123;&#123; .Release.Name&#125;&#125;</code>添加名称，他的值就是<code>helm install xxx chart的位置</code>中的xxx，避免多次创建name相同。</p><p>修改部分配置文件，参考下面，请结合自己实际：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_14-25-07.png" alt="Snipaste_2020-12-05_14-25-07"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_14-24-57.png" alt="Snipaste_2020-12-05_14-24-57"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install myweb ./mychart</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_14-28-42.png" alt="Snipaste_2020-12-05_14-28-42"></p><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p><code>helm upgrade myweb ./mychart/</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://jkzhao.github.io/2019/08/26/Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/">https://jkzhao.github.io/2019/08/26/Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/</a></p><p><a href="https://www.qikqiak.com/post/understand-kubernetes-affinity/">https://www.qikqiak.com/post/understand-kubernetes-affinity/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;核心技术Pod&quot;&gt;&lt;a href=&quot;#核心技术Pod&quot; class=&quot;headerlink&quot; title=&quot;核心技术Pod&quot;&gt;&lt;/a&gt;核心技术Pod&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://awslzhang.top/categories/Kubernetes/"/>
    
    
    <category term="Docker" scheme="https://awslzhang.top/tags/Docker/"/>
    
    <category term="Kubernetes" scheme="https://awslzhang.top/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes学习</title>
    <link href="https://awslzhang.top/2020/11/15/Kubernetes%E5%AD%A6%E4%B9%A0/"/>
    <id>https://awslzhang.top/2020/11/15/Kubernetes%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-11-15T11:50:36.000Z</published>
    <updated>2021-01-01T05:49:59.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><h2 id="Kubernetes概述"><a href="#Kubernetes概述" class="headerlink" title="Kubernetes概述"></a>Kubernetes概述</h2><p>kubernetes，简称 K8s，是用 8 代替 8 个字符“ubernete”而成的缩写。是一个开源 的，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的 应用简单并且高效（powerful）,Kubernetes 提供了应用部署，规划，更新，维护的一种 机制。</p><p>Kubernetes 是 Google 开源的一个容器编排引擎，<font color="red">它支持自动化部署、大规模可伸缩、 应用容器化管理。</font>在生产环境中部署一个应用程序时，<font color="red">通常要部署该应用的多个实例以便 对应用请求进行负载均衡。</font></p><blockquote><p>Kubernetes是容器化集群管理系统。它让部署容器化应用更加简洁和高效。</p></blockquote><blockquote><p>Kubernetes可以认为是容器的资源管理器，其他的资源管理器还有：</p><ul><li><code>Apache MESOS</code>：分布式资源管理框架，在2019-5，Twitter宣布由MESOS转为Kubernetes</li><li><code>Docker Swarm</code>：轻量、功能少，在2019-7，阿里云宣布不支持Docker Swarm</li><li><font color="red"><code>Kubernetes</code></font>：Google公司发布，采用GO语言开发<ul><li>特点：轻量级、开源、弹性伸缩、负载均衡(IPVS)</li></ul></li></ul></blockquote><h2 id="为什么需要-Kubernetes，它能做什么"><a href="#为什么需要-Kubernetes，它能做什么" class="headerlink" title="为什么需要 Kubernetes，它能做什么?"></a>为什么需要 Kubernetes，它能做什么?</h2><p><font color="red">容器是打包和运行应用程序的好方式。</font>在生产环境中，您需要管理运行应用程序的容器，<strong>并确保不会停机</strong>。例如，<font color="red">如果一个容器发生故障，则需要启动另一个容器。如果系统处理此行为，会不会更容易？</font></p><p><strong>这就是 Kubernetes 的救援方法！</strong>Kubernetes 为您提供了一个<font color="red"><strong>可弹性运行分布式系统的框架</strong></font>。Kubernetes 会满足您的扩展要求、故障转移、部署模式等。例如，Kubernetes 可以轻松管理系统的 Canary 部署。</p><hr><p><strong>Kubernetes 为您提供：</strong></p><ul><li><p><strong>服务发现和负载均衡</strong><br>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果到容器的流量很大，Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</p></li><li><p><strong>存储编排</strong><br>Kubernetes 允许您自动挂载您选择的存储系统，例如本地存储、公共云提供商等。</p></li><li><p><strong>自动部署和回滚</strong><br>您可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态更改为所需状态。例如，您可以自动化 Kubernetes 来为您的部署创建新容器，删除现有容器并将它们的所有资源用于新容器。</p></li><li><p><strong>自动二进制打包</strong><br>Kubernetes 允许您指定每个容器所需 CPU 和内存（RAM）。当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。</p></li><li><p><strong>自我修复</strong><br>Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</p></li><li><p><strong>密钥与配置管理</strong><br>Kubernetes 允许您存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。您可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</p></li></ul><h2 id="Kubernetes架构组件"><a href="#Kubernetes架构组件" class="headerlink" title="Kubernetes架构组件"></a>Kubernetes架构组件</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-15_16-52-10.png" alt="Snipaste_2020-11-15_16-52-10"></p><p><font color="red"><strong>k8s 集群的节点有两个角色，分别为 Master 节点和 Node 节点，整个 K8s 集群Master 和 Node 节点关系如下图所示：</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823181812.png"></p><h3 id="Master节点组件"><a href="#Master节点组件" class="headerlink" title="Master节点组件"></a>Master节点组件</h3><p>Master 节点也称为控制节点，每个 k8s 集群都有一个 Master 节点负责整个集群的管理控制，我们上面介绍的 k8s 三大能力都是经过 Master 节点发起的，Master 节点包含了以下几个组件：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823181408.png"></p><ul><li><code>API server</code>：集群统一入口，提供了 HTTP Rest 接口的服务进程，所有资源对象的增、删、改、查等操作的唯一入口；</li><li><code>controller-manager</code>：k8s 集群所有资源对象的自动化控制中心；<strong>一个资源对应一个控制器</strong>。</li><li><code>scheduler</code>：主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。</li><li><code>etcd</code>：是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</li></ul><h3 id="Worker节点组件"><a href="#Worker节点组件" class="headerlink" title="Worker节点组件"></a>Worker节点组件</h3><p>Node 节点的作用是承接 Master 分配的工作负载，它主要有以下几个关键组件：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823184119.png"></p><ul><li><code>Kubelet</code>：负责 Pod 对应容器的创建、启停等操作，与 Master 节点紧密协作；</li><li><code>kube-proxy</code>：提供网络代理，实现 k8s 集群通信与负载均衡的组件。</li></ul><h2 id="Kubernetes核心概念"><a href="#Kubernetes核心概念" class="headerlink" title="Kubernetes核心概念"></a>Kubernetes核心概念</h2><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>Pod 是 k8s 最重要而且是最基本的一个资源对象，它的结构如下：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200821153531.png"></p><p>从以上 Pod 的结构图可以看出，它其实是容器的一个上层包装结构，这也就是为什么 K8s 可以支持多种容器类型的原因，基于这方面，我理解 k8s 的定位就是一个编排与调度工具，而容器只是它调度的一个资源对象而已。</p><p>Pod 可包含多个容器在里面，每个 Pod 至少会有一个 Pause 容器，其它用户定义的容器都共享该 Pause 容器，Pause 容器的主要作用是用于定义 Pod 的 ip 和 volume。</p><p>Pod 在 k8s 集群中的位置如下图所示：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823185441.png"></p><p><strong>Pod特点：</strong></p><ul><li>k8s中的最小部署单元。</li><li>是一组容器的集合。</li><li>Pod中的所有容器是共享网络的</li><li>Pod的生命周期很短暂</li></ul><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><p>Label 在 k8s 中是一个非常核心的概念，我们可以将 Label 指定到对应的资源对象中，例如 Node、Pod、Replica Set、Service 等，一个资源可以绑定任意个 Label，<font color="red">k8s 通过 Label 可实现多维度的资源分组管理</font>，后续可通过 <font color="red">Label Selector 查询和筛选拥有某些 Label 的资源对象</font>，例如创建一个 Pod，给定一个 Label，workerid=123，后续可通过 workerid=123 删除拥有该标签的 Pod 资源。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823192435.png"></p><h3 id="Replica-Set"><a href="#Replica-Set" class="headerlink" title="Replica Set"></a>Replica Set</h3><p><font color="red"><strong>Replica Set 目的是为了定义一个期望的场景</strong></font>，比如定义某种 <strong>Pod 的副本数量</strong>在任意时刻都处于 Peplica Set 期望的值，假设 Replica Set 定义 Pod 的副本数目为：replicas=2，当该 Replica Set 提交给 Master 后，Master 会定期巡检该 Pod 在集群中的数目，如果发现该 Pod 挂掉了一个，Master 就会尝试依据 Replica Set 设置的 Pod 模版创建 Pod，以维持 Pod 的数量与 Replica Set 预期的 Pod 数量相同。</p><p>通过 Replica Set，k8s 集群实现了用户应用的高可用性，而且大大减少了运维工作量。<font color="red"><strong>因此生产环境一般用 Deployment 或者 Replica Set 去控制 Pod 的生命周期和期望值，而不是直接单独创建 Pod。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823193118.png"></p><p>类似 Replica Set 的还有 <code>Deployment</code>，它的内部实现也是通过 Replica Set 实现的，可以说 Deployment 是 Replica Set 的升级版，它们之间的 yaml 配置文件格式大部分都相同。</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Service 是 k8s 能够实现微服务集群的一个非常重要的概念，顾名思义，k8s 的 Service 就是我们平时所提及的微服务架构中的“微服务”，本文上面提及的 Pod、Replica Set 等都是为 Service 服务的资源， 如下图表示 Service、Pod、Replica Set 的关系：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823200632.png"></p><p>从上图可看出，Service 定义了一个服务访问的入口，客户端通过这个入口即可访问服务背后的应用集群实例，<font color="red">而 Service 则是通过 Label Selector 实现关联与对接的，Replica Set 保证服务集群资源始终处于期望值。</font></p><p>以上只是一个微服务，通常来说一个应用项目会由多个不同业务能力而又彼此独立的微服务组成，多个微服务间组成了一个强大而又高可用的应用服务集群。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823220527.png"></p><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>Namespace 顾名思义是命名空间的意思，在 k8s 中主要用于实现资源隔离的目的，用户可根据不同项目创建不同的 Namespace，通过 k8s 将资源分配到不同 Namespace 中，即可实现不同项目的资源隔离：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823214534.png" alt="img"></p><h1 id="Kubernetes的搭建"><a href="#Kubernetes的搭建" class="headerlink" title="Kubernetes的搭建"></a>Kubernetes的搭建</h1><p><strong>前置知识点</strong> </p><p>目前生产部署Kubernetes 集群主要有两种方式： </p><blockquote><p><strong>kubeadm</strong> </p><p>Kubeadm 是一个 K8s 部署工具，提供 kubeadm init 和 kubeadm join，用于快速部署 Kubernetes 集群。 </p><p>官方地址：<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a> </p></blockquote><blockquote><p><strong>二进制包</strong> </p><p>从 github 下载发行版的二进制包，手动部署每个组件，组成 Kubernetes 集群。Kubeadm 降低部署门槛，但屏蔽了很多细节，遇到问题很难排查。如果想更容易可控，推荐使用二进制包部署 Kubernetes 集群，虽然手动部署麻烦点，期间可以学习很多工作原理，也利于后期维护。 </p></blockquote><hr><p><strong>集群机器须知</strong></p><ul><li>集群间机器网络互通</li><li>禁止Swap交换</li></ul><h2 id="kubeadm部署"><a href="#kubeadm部署" class="headerlink" title="kubeadm部署"></a>kubeadm部署</h2><p><code>kubeadm</code>是官方社区推出的一个用于快速部署 kubernetes 集群的工具，这个工具能通过两条指令完成一个kubernetes集群的部署：</p><ol><li>创建一个Master节点<code>kubeadm init</code></li><li>将Node节点加入到当前集群中<code>kubeadm join &lt;Master 节点的 IP 和端口 &gt;</code></li></ol><blockquote><p>详细步骤：</p></blockquote><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><table><thead><tr><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>master</td><td>192.168.58.11</td></tr><tr><td>node1</td><td>192.168.58.12</td></tr><tr><td>node2</td><td>192.168.58.13</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line">sed -i <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config  <span class="comment"># 永久</span></span><br><span class="line">setenforce 0  <span class="comment"># 临时</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭swap</span></span><br><span class="line">swapoff -a  <span class="comment"># 临时</span></span><br><span class="line">sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab    <span class="comment"># 永久</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据规划设置主机名</span></span><br><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在master添加hosts</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.58.11 k8smaster</span></span><br><span class="line"><span class="string">192.168.58.12 k8snode1</span></span><br><span class="line"><span class="string">192.168.58.13 k8snode2</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将桥接的IPv4流量传递到iptables的链</span></span><br><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl --system  <span class="comment"># 生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间同步</span></span><br><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></table></figure><h3 id="所有节点安装Docker-kubeadm-kubelet"><a href="#所有节点安装Docker-kubeadm-kubelet" class="headerlink" title="所有节点安装Docker/kubeadm/kubelet"></a>所有节点安装Docker/kubeadm/kubelet</h3><blockquote><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p></blockquote><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">$ yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line">$ docker --version</span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure><p>镜像加速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://reg-mirror.qiniu.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="kubeadm-kubelet-kubectl"><a href="#kubeadm-kubelet-kubectl" class="headerlink" title="kubeadm,kubelet,kubectl"></a>kubeadm,kubelet,kubectl</h4><p>国内镜像下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0</span><br><span class="line">$ systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h3 id="部署Kubernetes-Master"><a href="#部署Kubernetes-Master" class="headerlink" title="部署Kubernetes Master"></a>部署Kubernetes Master</h3><p>在192.168.58.11（Master）执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.58.11 \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.18.0 \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><blockquote><p>由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址。</p><p>pod-network-cidr与service-cidr设置不同的网段即可，不可与本机相冲突。</p><p><font color="red"><strong>注意</strong>，只有一个核心是不能初始化的！！！</font></p></blockquote><p>这条命令就是拉取kubernetes的各个组件的镜像：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-16_21-08-35.png" alt="Snipaste_2020-11-16_21-08-35"></p><p><strong>Master初始化完成后由此提示</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-16_21-09-38.png" alt="Snipaste_2020-11-16_21-09-38"></p><p><strong>此时，你的集群还不能使用，上图中还有提示信息</strong></p><blockquote><p>To start using your cluster, you need to run the following as a regular user:</p></blockquote><p>你需要在Master执行一下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">$ sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="加入Kubernetes-Node"><a href="#加入Kubernetes-Node" class="headerlink" title="加入Kubernetes Node"></a>加入Kubernetes Node</h3><p>由Master初始化的信息可得知，Node加入Master集群需要执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.58.11:6443 --token bpx0wc.r7m0c9sp15cfu81r \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:3dd5733fa6ed0394a98b67c57fc512d6fe6776c7cb954a96673b24c8276cb885</span><br></pre></td></tr></table></figure><blockquote><p><font color="red">注意：不要复制我的token，从你的命令行中寻找！</font></p></blockquote><p><strong>两个node节点加入完成之后，在Master查看节点</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-16_21-17-38.png" alt="Snipaste_2020-11-16_21-17-38"></p><p>发现，他们状态都是<code>NotReady</code>。是因为还没有配置最后一步：网络！</p><h3 id="部署CNI网络插件"><a href="#部署CNI网络插件" class="headerlink" title="部署CNI网络插件"></a>部署CNI网络插件</h3><p>Master节点运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>默认镜像地址无法访问，sed命令修改为docker hub镜像仓库。</p><p><strong>查看是否完成</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-16_21-25-16.png" alt="Snipaste_2020-11-16_21-25-16"></p><h3 id="测试kubernetes集群"><a href="#测试kubernetes集群" class="headerlink" title="测试kubernetes集群"></a>测试kubernetes集群</h3><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment nginx --image=nginx</span><br><span class="line">$ kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure><p>访问ip:port，我们发现三台机器的这个端口都可以访问到nginx。</p><h2 id="二进制部署"><a href="#二进制部署" class="headerlink" title="二进制部署"></a>二进制部署</h2><p>略…</p><h1 id="kubectl命令行工具"><a href="#kubectl命令行工具" class="headerlink" title="kubectl命令行工具"></a><code>kubectl</code>命令行工具</h1><p>kubectl 是 Kubernetes 集群的命令行工具，通过 kubectl 能够<font color="red">对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。</font></p><blockquote><p><strong><code>kubectl </code>命令的语法</strong></p><p><code>kubectl [command] [type] [name] [flag]</code></p><ul><li><p><strong>comand</strong>：指定要对资源执行的操作，例如 create、get、describe 和 delete</p></li><li><p><strong>TYPE</strong>：指定资源类型，资源类型是大小写敏感的，开发者能够以单数、复数和缩略的形式。例如：</p><ul><li><code>kubectl get pod</code></li><li><code>kubectl get pods</code></li><li><code>kubectl get po</code></li></ul></li><li><p><strong>NAME</strong>：指定资源的名称，名称也大小写敏感的。如果省略名称，则会显示所有的资源， 例如: <code>kubectl get pods</code></p></li><li><p><strong>flags</strong>：指定可选的参数。例如，可用-s 或者–server 参数指定 Kubernetes API </p><p>server 的地址和端口。 </p></li></ul></blockquote><p><strong>基础命令</strong></p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>create</td><td>通过文件名或标准输入创建资源</td></tr><tr><td>expose</td><td>将一个资源公开为一个新的Service</td></tr><tr><td>run</td><td>在集群中运行一个特定的镜像</td></tr><tr><td>set</td><td>在对象上设置特定的功能</td></tr><tr><td>get</td><td>显示一个/多个资源</td></tr><tr><td>explain</td><td>文档参考资料</td></tr><tr><td>edit</td><td>使用默认的编辑器编辑一个资源</td></tr><tr><td>delete</td><td>通过文件名、标准输入、资源名称或标签选择器删除资源</td></tr></tbody></table><p><strong>部署和集群管理命令</strong></p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>rollout</td><td>管理资源的发布</td></tr><tr><td>rolling-update</td><td>对给定的复制控制器滚动更新</td></tr><tr><td>scale</td><td>扩容或缩容Pod数量，Deployment、ReplicaSet、RC或Job</td></tr><tr><td>autoscale</td><td>创建一个自动选择扩容或缩容并设置Pod数量</td></tr><tr><td>certificate</td><td>修改证书资源</td></tr><tr><td>cluster-info</td><td>显示集群信息</td></tr><tr><td>top</td><td>显示资源使用</td></tr><tr><td>cordon</td><td>标记节点不可调度</td></tr><tr><td>uncordon</td><td>标记节点可调度</td></tr><tr><td>drain</td><td>驱逐节点上的应用，准备下线维护</td></tr><tr><td>taint</td><td>修改节点taint标记</td></tr></tbody></table><p><strong>故障和调试命令</strong></p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>exec</td><td>执行命令到容器</td></tr></tbody></table><h1 id="kubernetes-集群YAML文件详解"><a href="#kubernetes-集群YAML文件详解" class="headerlink" title="kubernetes 集群YAML文件详解"></a>kubernetes 集群YAML文件详解</h1><p>k8s在启动资源时有诸多配置，全写在命令行里很不方便。所以可以通过yaml文件配置，在运行时只用指定一个yaml文件即可</p><blockquote><p>yaml书写格式</p><ul><li>使用空格做为缩进</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li>低版本缩进时不允许使用 Tab 键，只允许使用空格 </li><li>使用#标识注释，从这个字符一直到行尾，都会被解释器忽略</li></ul></blockquote><hr><p>在 k8s 中，一般使用 YAML 格式的文件来创建符合我们预期期望的 pod,这样的 YAML 文件称为<strong>资源清单</strong></p><h2 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a>常用字段</h2><p><font color="red"><strong>必须存在的属性</strong></font></p><table><thead><tr><th>参数名</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>version</td><td>String</td><td>k8s的API版本，通过<code>kubectl api-version</code>查询</td></tr><tr><td>kind</td><td>String</td><td>文件定义的资源类型和角色，比如：Pod</td></tr><tr><td>metadata</td><td>Object</td><td>元数据对象，固定值为<code>metadata</code></td></tr><tr><td>metadata.name</td><td>String</td><td>元数据对象的名字，有我们编写，比如命名Pod的名字</td></tr><tr><td>metadata.namespace</td><td>String</td><td>元数据对象的命名空间，自定义</td></tr><tr><td>Spec</td><td>Object</td><td>详细定义对象，固定值写Spec</td></tr><tr><td>spec.container[]</td><td>list</td><td>容器列表定义，多个容器</td></tr><tr><td>spec.container[].name</td><td>String</td><td>容器名</td></tr><tr><td>spec.container[].image</td><td>String</td><td>容器使用的镜像</td></tr></tbody></table><p><strong>创建NameSpace</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p><strong>创建Pod</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-containers</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br></pre></td></tr></table></figure><h2 id="快速编写yaml🔺"><a href="#快速编写yaml🔺" class="headerlink" title="快速编写yaml🔺"></a>快速编写yaml🔺</h2><h3 id="从启动资源命令中导出yaml"><a href="#从启动资源命令中导出yaml" class="headerlink" title="从启动资源命令中导出yaml"></a>从启动资源命令中导出yaml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment web --image=nginx -o yaml --dry-run &gt; xxx.yaml</span><br></pre></td></tr></table></figure><blockquote><p>如果不写<code>--dry-run</code>，Pod真会运行。写了则不会运行，只是导出模板</p></blockquote><h3 id="从正在运行的资源中导出yaml"><a href="#从正在运行的资源中导出yaml" class="headerlink" title="从正在运行的资源中导出yaml"></a>从正在运行的资源中导出yaml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deploy xxx -o=yaml --<span class="built_in">export</span> &gt; xxx.yaml</span><br></pre></td></tr></table></figure><blockquote><p>此方式导出的yaml会很详细，因为是已经部署好的版本的yaml</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kubernetes&quot;&gt;&lt;a href=&quot;#Kubernetes&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes&quot;&gt;&lt;/a&gt;Kubernetes&lt;/h1&gt;&lt;h2 id=&quot;Kubernetes概述&quot;&gt;&lt;a href=&quot;#Kubernete</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://awslzhang.top/categories/Kubernetes/"/>
    
    
    <category term="Docker" scheme="https://awslzhang.top/tags/Docker/"/>
    
    <category term="Kubernetes" scheme="https://awslzhang.top/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Compose</title>
    <link href="https://awslzhang.top/2020/11/14/Compose/"/>
    <id>https://awslzhang.top/2020/11/14/Compose/</id>
    <published>2020-11-14T15:27:41.000Z</published>
    <updated>2021-01-01T05:49:59.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><p><code>Compose</code> 项目是 <strong>Docker 官方的开源项目</strong>，负责实现<font color="red">对Docker 容器集群的快速编排</font>，需要额外安装。从功能上看，跟 <code>OpenStack</code> 中的 <code>Heat</code> 十分类似。</p><p>其代码目前在 <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 上开源。</p><p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p><blockquote><p>官方介绍：</p><p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see <a href="https://docs.docker.com/compose/#features">the list of features</a>.</p><p>Compose works in all environments: production, staging, development, testing, as well as CI workflows. You can learn more about each case in <a href="https://docs.docker.com/compose/#common-use-cases">Common Use Cases</a>.</p><p>Using Compose is basically a three-step process:</p><ol><li>Define your app’s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</li><li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li><li>Run <code>docker-compose up</code> and Compose starts and runs your entire app.</li></ol><p>翻译：</p><p>Compose是用于定义和运行多容器Docker应用程序的工具。通过Compose，您可以<font color="red">使用YAML文件来配置应用程序的服务</font>。然后，使用一个命令，就可以<font color="red">从配置中创建并启动所有服务</font>。要了解有关Compose的所有功能的更多信息，请参阅<a href="https://docs.docker.com/compose/#features">功能列表</a>。</p><p>Compose可在所有环境中工作：生产，登台，开发，测试以及CI工作流。您可以在“<a href="https://docs.docker.com/compose/#common-use-cases">常见用例”中</a>了解有关每种情况的更多信息。</p><p><strong>使用Compose基本上是一个三步过程</strong>：</p><ol><li>使用定义您的应用环境，<font color="red"><code>Dockerfile</code></font>以便可以在任何地方复制。</li><li>定义组成应用程序的服务，<font color="red"><code>docker-compose.yml</code></font> 以便它们可以在隔离的环境中一起运行。<ol><li>配置文件中配置多个服务(<code>Services</code>)</li></ol></li><li>Run <font color="red"><code>docker-compose up</code></font>and Compose启动并运行您的整个应用程序。</li></ol></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p><code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p><p>使用<code>DockerCompose</code>可以简化我们的操作，例如：</p><p>一个<code>docker-compose.yml</code>看起来像这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">logvolume01:/var/log</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">logvolume01:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>同时部署了<code>web</code>和<code>redis</code>服务！</p><blockquote><p>实际生产环境不会直接采用docker的，需要采用docker-compose；如果是分布式多台服务器可能需要k8s。</p></blockquote><h2 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h2><p><code>Compose</code> 支持 Linux、macOS、Windows 10 三大平台。</p><p><code>Compose</code> 可以通过 Python 的包管理工具 <code>pip</code> 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。</p><p><code>Docker Desktop for Mac/Windows</code> 自带 <code>docker-compose</code> 二进制文件，安装 Docker 之后可以直接使用。</p><p><strong>验证安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose version</span><br><span class="line">docker-compose version 1.25.5, build 8a1c60f6</span><br><span class="line">docker-py version: 4.1.0</span><br><span class="line">CPython version: 3.7.5</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span><br></pre></td></tr></table></figure><h3 id="二进制包安装"><a href="#二进制包安装" class="headerlink" title="二进制包安装"></a>二进制包安装</h3><p>在 Linux 上的也安装十分简单，从 <a href="https://github.com/docker/compose/releases">官方 GitHub Release</a> 处直接下载编译好的二进制文件即可。</p><p>例如，在 Linux 64 位系统上直接下载对应的二进制包。</p><ol><li>下载二进制包</li><li>赋予二进制包的执行权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="PIP安装"><a href="#PIP安装" class="headerlink" title="PIP安装"></a>PIP安装</h3><blockquote><p><em>注：</em> <code>x86_64</code> 架构的 Linux 建议按照上边的方法下载二进制包进行安装，如果您计算机的架构是 <code>ARM</code> (例如，树莓派)，再使用 <code>pip</code> 安装。</p></blockquote><blockquote><p>既然说到架构，这里普及一下：</p><ul><li><code>X86</code>是Intel开发的一种32位指令集，早期Intel和amd的cpu都支持这种指令集</li><li><code>amd64</code>是CPU迈向64位的时候，由ADM率先制造出了兼容X86的CPU，AMD称之为amd64</li><li><code>x64</code>：当时因为兼容x86的CPU架构被amd率先开发，所以intel选择了设计一种全新的指令集x64，但是好像被坑了，后来在不得不在时机落后的情况下也开始支持了amd64指令集，但是换了个名字叫<code>X86_64</code>；</li><li><code>arm</code>：过去称作<strong>高级精简指令集机器</strong>，ARM处理器非常适用于<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E5%8B%95%E9%80%9A%E8%A8%8A">移动通信</a>领域，符合其主要设计目标为低成本、高性能、低耗电的特性。所以常用于手机，潜入设备(树莓派)。</li></ul><p>所以，<code>amd64</code>、<code>x64</code>、<code>X86_64</code>是一种东西。</p></blockquote><p>这种方式是将 Compose 当作一个 Python 应用来从 pip 源中安装。</p><p>执行安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install -U docker-compose</span><br></pre></td></tr></table></figure><p>可以看到类似如下输出，说明安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collecting docker-compose</span><br><span class="line">  Downloading docker-compose-1.25.5.tar.gz (149kB): 149kB downloaded</span><br><span class="line">...</span><br><span class="line">Successfully installed docker-compose cached-property requests texttable websocket-client docker-py dockerpty six enum34 backports.ssl-match-hostname ipaddress</span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>如果是二进制包方式安装的，删除二进制文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果是通过 <code>pip</code> 安装的，则执行如下命令即可删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure><h2 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h2><h3 id="命令对象与格式"><a href="#命令对象与格式" class="headerlink" title="命令对象与格式"></a>命令对象与格式</h3><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p><p><code>docker-compose</code> 命令的基本的使用格式是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose [-f&#x3D;&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><ul><li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li><li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li><li><code>--verbose</code> 输出更多调试信息。</li><li><code>-v, --version</code> 打印版本并退出。</li></ul><h3 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h3><h4 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h4><p>格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p><p>构建（重新构建）项目中的服务容器。</p><p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p><p>可以随时在项目目录下运行 <code>docker-compose build</code> 来重新构建服务。</p><p>选项包括：</p><ul><li><code>--force-rm</code> 删除构建过程中的临时容器。</li><li><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</li><li><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</li></ul><h4 id="config"><a href="#config" class="headerlink" title="config"></a><code>config</code></h4><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p><h4 id="down"><a href="#down" class="headerlink" title="down"></a><code>down</code></h4><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h4><p>进入指定的容器。</p><h4 id="help"><a href="#help" class="headerlink" title="help"></a><code>help</code></h4><p>获得一个命令的帮助。</p><h4 id="images"><a href="#images" class="headerlink" title="images"></a><code>images</code></h4><p>列出 Compose 文件中包含的镜像。</p><h4 id="logs"><a href="#logs" class="headerlink" title="logs"></a><code>logs</code></h4><p>格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p><p>查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。</p><p>该命令在调试问题的时候十分有用。</p><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h4><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。</p><p>选项：</p><ul><li><code>-q</code> 只打印容器的 ID 信息。</li></ul><h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a><code>restart</code></h4><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h4><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><h4 id="start"><a href="#start" class="headerlink" title="start"></a><code>start</code></h4><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><h4 id="stop"><a href="#stop" class="headerlink" title="stop"></a><code>stop</code></h4><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h4 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h4><p>查看各个服务容器内运行的进程。</p><h4 id="up🔺"><a href="#up🔺" class="headerlink" title="up🔺"></a><code>up</code>🔺</h4><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p><p>选项：</p><ul><li><code>-d</code> 在后台运行服务容器。</li><li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</li><li><code>--no-deps</code> 不启动服务所链接的容器。</li><li><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</li><li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</li><li><code>--no-build</code> 不自动构建缺失的服务镜像。</li><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h2 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h2><p>模板文件是使用 <code>Compose</code> 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。</p><p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">examples/web</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">myweb</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/data&quot;</span></span><br></pre></td></tr></table></figure><p><font color="red">注意每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</font></p><p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</p><p>每个指令的用法：<a href="https://yeasy.gitbook.io/docker_practice/compose/compose_file">https://yeasy.gitbook.io/docker_practice/compose/compose_file</a></p><ul><li><code>depends_on</code>：<a href="https://docs.docker.com/compose/compose-file/#depends_on">https://docs.docker.com/compose/compose-file/#depends_on</a></li></ul><h2 id="Compose中的环境变量"><a href="#Compose中的环境变量" class="headerlink" title="Compose中的环境变量"></a>Compose中的环境变量</h2><h3 id="在撰写文件替换环境变量"><a href="#在撰写文件替换环境变量" class="headerlink" title="在撰写文件替换环境变量"></a>在撰写文件替换环境变量</h3><p>可以在外壳中使用环境变量来填充Compose文件中的值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">&quot;webapp:$&#123;TAG&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>如果您有多个环境变量，则可以通过提供环境变量文件的路径来替换它们。默认情况下，该<code>docker-compose</code> 命令将<code>.env</code>在您运行该命令的目录中查找一个名为的文件。通过将文件作为参数，你可以存储在任何地方，并适当命名，例如<code>.env.ci</code>，<code>.env.dev</code>，<code>.env.prod</code>。使用以下<code>--env-file</code>选项完成文件路径的传递：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --env-file ./config/.env.dev up </span><br></pre></td></tr></table></figure><h3 id="在容器中设置环境变量"><a href="#在容器中设置环境变量" class="headerlink" title="在容器中设置环境变量"></a>在容器中设置环境变量</h3><p>您可以使用environment键在服务的容器中设置环境变量 ，就像 <code>docker run -e VARIABLE=VALUE ...</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEBUG=1</span></span><br></pre></td></tr></table></figure><h2 id="Compose网络"><a href="#Compose网络" class="headerlink" title="Compose网络"></a>Compose网络</h2><p>默认情况下，Compose为您的应用设置单个网络。为服务每个容器加入默认网络。</p><blockquote><p><strong>注意</strong></p><p>为应用程序的网络提供一个基于“项目名称”的名称，该名称基于其所在目录的名称。您可以使用<code>--project-name  flag</code>覆盖项目名称。</p></blockquote><p>例如，假设您的应用程序位于名为的目录中<code>myapp</code>，并且您的<code>docker-compose.yml</code>外观如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8001:5432&quot;</span></span><br></pre></td></tr></table></figure><p>运行时<code>docker-compose up</code>，将发生以下情况：</p><ol><li><code>myapp_default</code>创建一个名为的网络。</li><li>容器是使用<code>web</code>的配置创建的。它<code>myapp_default</code>以名称<code>web</code>加入网络 。</li><li>容器是使用<code>db</code>的配置创建的。它<code>myapp_default</code>以名称<code>db</code>加入网络 。</li></ol><p>现在，每个容器都可以查找主机名<code>web</code>或<code>db</code>获取相应容器的IP地址。例如，<code>web</code>的应用程序代码可以连接到URL<code>postgres://db:5432</code>并开始使用Postgres数据库。</p><p>要注意区分是很重要的<code>HOST_PORT</code>和<code>CONTAINER_PORT</code>。在上面的示例中，对于<code>db</code>，<code>HOST_PORT</code>is是<code>8001</code>，容器端口为 <code>5432</code>（postgres默认）。联网的服务到服务通信使用<code>CONTAINER_PORT</code>。当<code>HOST_PORT</code>定义，服务以及虫群外部访问。</p><p>在<code>web</code>容器内，您的连接字符串<code>db</code>将看起来像 <code>postgres://db:5432</code>，而在主机上，连接字符串将看起来像<code>postgres://&#123;DOCKER_IP&#125;:8001</code>。</p><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><h4 id="配置默认网络"><a href="#配置默认网络" class="headerlink" title="配置默认网络"></a>配置默认网络</h4><p>除了（或同时）指定自己的网络，您还可以通过在<code>networks</code>named下定义一个条目来更改应用程序范围的默认网络的设置<code>default</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="comment"># Use a custom driver</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">custom-driver-1</span></span><br></pre></td></tr></table></figure><h4 id="使用现有网络"><a href="#使用现有网络" class="headerlink" title="使用现有网络"></a>使用现有网络</h4><p>如果您希望容器加入现有网络，请使用以下<a href="https://docs.docker.com/compose/compose-file/compose-file-v2/#network-configuration-reference"><code>external</code>选项</a>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">my-pre-existing-network</span></span><br></pre></td></tr></table></figure><p><code>[projectname]_default</code>Compose不会尝试创建一个名为的网络，而是查找一个名为的网络<code>my-pre-existing-network</code>并将您的应用程序的容器连接到该网络。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><p><code>Compose</code> 可以很便捷的让 <code>Wordpress</code> 运行在一个独立的环境中。</p><h3 id="创建空文件夹"><a href="#创建空文件夹" class="headerlink" title="创建空文件夹"></a>创建空文件夹</h3><p>假设新建一个名为 <code>wordpress</code> 的文件夹，然后进入这个文件夹。</p><h3 id="创建-docker-compose-yml-文件"><a href="#创建-docker-compose-yml-文件" class="headerlink" title="创建 docker-compose.yml 文件"></a>创建 <code>docker-compose.yml</code> 文件</h3><p><a href="https://github.com/yeasy/docker_practice/blob/master/compose/demo/wordpress/docker-compose.yml"><code>docker-compose.yml</code></a> 文件将开启一个 <code>wordpress</code> 服务和一个独立的 <code>MySQL</code> 实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">db:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">     <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default_authentication_plugin=mysql_native_password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--collation-server=utf8mb4_unicode_ci</span>     </span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">       <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">wordpress:</span></span><br><span class="line">     <span class="attr">depends_on:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;8000:80&quot;</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span></span><br></pre></td></tr></table></figure><h3 id="构建并运行项目"><a href="#构建并运行项目" class="headerlink" title="构建并运行项目"></a>构建并运行项目</h3><p>运行 <code>docker-compose up -d</code> Compose 就会拉取镜像再创建我们所需要的镜像，然后启动 <code>wordpress</code> 和数据库容器。 接着浏览器访问 <code>127.0.0.1:8000</code> 端口就能看到 <code>WordPress</code> 安装界面了。</p><p><font color="red"></font></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice/</a></p><p><a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-Compose&quot;&gt;&lt;a href=&quot;#Docker-Compose&quot; class=&quot;headerlink&quot; title=&quot;Docker Compose&quot;&gt;&lt;/a&gt;Docker Compose&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 项</summary>
      
    
    
    
    <category term="Docker" scheme="https://awslzhang.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://awslzhang.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker网络</title>
    <link href="https://awslzhang.top/2020/11/13/Docker%E7%BD%91%E7%BB%9C/"/>
    <id>https://awslzhang.top/2020/11/13/Docker%E7%BD%91%E7%BB%9C/</id>
    <published>2020-11-13T11:35:04.000Z</published>
    <updated>2021-01-01T05:49:59.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><blockquote><p>Docker 允许通过外部访问容器或容器互联的方式来提供网络服务。</p></blockquote><h2 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h2><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射。</p><ul><li>当使用 <code>-P</code> 标记时，Docker 会随机映射一个端口到<font color="red">**内部容器开放的网络端口(EXPOSE的端口)**。</font></li><li>当使用<code>-p</code>标记时，需要同时指定宿主机端口与容器端口之间的对应关系。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P nginx</span><br></pre></td></tr></table></figure><p>使用 <code>docker container ls</code> 可以看到，本地主机的 32769被映射到了容器的 80 端口。此时访问本机的 32769端口即可访问容器内 NGINX 默认页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES</span><br><span class="line">3dda28d1a931        nginx               <span class="string">&quot;/docker-entrypoint.…&quot;</span>   24 seconds ago      Up 23 seconds       0.0.0.0:32769-&gt;80/tcp   romantic_volhard</span><br></pre></td></tr></table></figure><blockquote><p><code>-p</code> 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 :</p></blockquote><ul><li><code>ip:hostPort:containerPort </code>：映射到指定地址的指定端口</li><li><code>ip::containerPort</code>：映射所有接口地址</li><li><code>hostPort:containerPort</code>：映射到指定地址的任意端口</li></ul><h3 id="指定映射分类"><a href="#指定映射分类" class="headerlink" title="指定映射分类"></a>指定映射分类</h3><h4 id="映射所有接口地址"><a href="#映射所有接口地址" class="headerlink" title="映射所有接口地址"></a>映射所有接口地址</h4><p>使用 <code>hostPort:containerPort</code> 格式本地的 80 端口映射到容器的 80 端口，可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 80:80 nginx:alpine</span><br></pre></td></tr></table></figure><p>此时默认会绑定本地所有接口上的所有地址。</p><h4 id="映射到指定地址的指定端口"><a href="#映射到指定地址的指定端口" class="headerlink" title="映射到指定地址的指定端口"></a>映射到指定地址的指定端口</h4><p>可以使用 <code>ip:hostPort:containerPort</code> 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1:80:80 nginx:alpine</span><br></pre></td></tr></table></figure><h4 id="映射到指定地址的任意端口"><a href="#映射到指定地址的任意端口" class="headerlink" title="映射到指定地址的任意端口"></a>映射到指定地址的任意端口</h4><p>使用 <code>ip::containerPort</code> 绑定 localhost 的任意端口到容器的 80 端口，本地主机会自动分配一个端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1::80 nginx:alpine</span><br></pre></td></tr></table></figure><p>还可以使用 <code>udp</code> 标记来指定 <code>udp</code> 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1:80:80/udp nginx:alpine</span><br></pre></td></tr></table></figure><p><strong>这里提到了UDP端口号，特此说明TCP、UDP都有端口号并互不影响。</strong></p><blockquote><p> 顺便提出端口号的范围可分为三种：</p><ul><li>Well-Known Ports（即公认端口号）：知名端口号的范围是：0-1023</li><li>Registered Ports（即注册端口）：注册端口号的范围是：1024-49151</li><li>Dynamic, private or ephemeral ports（即动态、私有或临时端口号）：这一段的范围是：49152–65535</li></ul></blockquote><h3 id="查看映射端口配置"><a href="#查看映射端口配置" class="headerlink" title="查看映射端口配置"></a>查看映射端口配置</h3><p>使用 <code>docker port</code> 来查看当前映射的端口配置，也可以查看到绑定的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker port containerId</span><br><span class="line">80/tcp -&gt; 0.0.0.0:80</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>容器有自己的内部网络和 ip 地址（使用 <code>docker inspect</code> 查看，Docker 还可以有一个可变的网络配置。）</li><li><code>-p</code> 标记可以多次使用来绑定多个端口</li></ul></blockquote><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-p 443:443 \</span><br><span class="line">nginx:alpine</span><br></pre></td></tr></table></figure><h2 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h2><p>如果你之前有 <code>Docker</code> 使用经验，你可能已经习惯了使用 <code>--link</code> 参数来使容器互联。</p><p><code>--link</code>方式使容器互联需要对双方容器都做出限制，不好操作。</p><p>随着 Docker 网络的完善，强烈建议大家将容器加入<font color="red"><strong>自定义的 Docker 网络来连接多个容器</strong></font>，而不是使用 <code>--link</code> 参数。</p><h3 id="新建网络"><a href="#新建网络" class="headerlink" title="新建网络"></a>新建网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create -d bridge my-net</span><br></pre></td></tr></table></figure><p><code>-d</code> 参数指定 Docker 网络类型，有 <code>bridge</code> <code>overlay</code>。其中 <code>overlay</code> 网络类型用于 <a href="">Swarm mode</a>，在本小节中你可以忽略它。</p><h3 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h3><p>运行一个容器并连接到新建的 <code>my-net</code> 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm --name busybox1 --network my-net busybox sh</span><br></pre></td></tr></table></figure><p>打开新的终端，再运行一个容器并加入到 <code>my-net</code> 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm --name busybox2 --network my-net busybox sh</span><br></pre></td></tr></table></figure><p>再打开一个新的终端查看容器信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESb47060aca56b        busybox             <span class="string">&quot;sh&quot;</span>                11 minutes ago      Up 11 minutes                           busybox28720575823ec        busybox             <span class="string">&quot;sh&quot;</span>                16 minutes ago      Up 16 minutes                           busybox1</span><br></pre></td></tr></table></figure><p>下面通过 <code>ping</code> 来证明 <code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><p>在 <code>busybox1</code> 容器输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># ping busybox2</span></span><br><span class="line">PING busybox2 (172.19.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.19.0.3: seq=0 ttl=64 time=0.072 ms</span><br><span class="line">64 bytes from 172.19.0.3: seq=1 ttl=64 time=0.118 ms</span><br></pre></td></tr></table></figure><p>用 ping 来测试连接 <code>busybox2</code> 容器，它会解析成 <code>172.19.0.3</code>。</p><p>同理在 <code>busybox2</code> 容器执行 <code>ping busybox1</code>，也会成功连接到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># ping busybox1</span></span><br><span class="line">PING busybox1 (172.19.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.064 ms</span><br><span class="line">64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.143 ms</span><br></pre></td></tr></table></figure><p>这样，<code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>如果你有多个容器之间需要互相连接，推荐使用Docker Compose</p><hr><h1 id="高级网络配置"><a href="#高级网络配置" class="headerlink" title="高级网络配置"></a>高级网络配置</h1><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机，<font color="red">所有不指定网络的容器都会使用此网卡（默认网卡）</font>。它会在挂载到它的网口之间进行转发。</p><p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://tools.ietf.org/html/rfc1918">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1/16</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p><blockquote><p><strong>注意</strong>：默认的<code>docker0</code>网络和自定义网络有一点不同，使用<code>docker0</code>网卡的容器不能实现互联。</p></blockquote><p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/hostos.png"></p><p>接下来的部分将介绍在一些场景中，Docker 所有的网络定制配置。以及通过 Linux 命令来调整、补充、甚至替换 Docker 默认的网络配置。</p><h2 id="快速配置指南"><a href="#快速配置指南" class="headerlink" title="快速配置指南"></a>快速配置指南</h2><p>最后这些选项只有在 <code>docker run</code> 执行时使用，因为它是针对容器的特性内容。</p><ul><li><code>-h HOSTNAME</code> 或 <code>--hostname=HOSTNAME</code> 配置容器主机名</li><li><del><code>--link=CONTAINER_NAME:ALIAS</code> 添加到另一个容器的连接</del></li><li><code>--net=bridge|none|container:NAME_or_ID|host</code> 配置容器的桥接模式</li><li><code>-p SPEC</code> 或 <code>--publish=SPEC</code> 映射容器端口到宿主主机</li><li><code>-P or --publish-all=true|false</code> 映射容器所有端口到宿主主机</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>创建网络</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create -d bridge --subnet 172.11.0.0/16 --gateway 172.11.0.1 mynet</span><br><span class="line">6ca441ff474f979f493774cf0c3c7379d5da03655e4da14bb8b5d80fe3e98d37</span><br></pre></td></tr></table></figure><p><strong>创建2个使用<code>mynet</code>的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name tomcat-mynet-1 --network=mynet tomcat</span><br><span class="line">89a4b49863d4bcd4468a32105df3f8e6f0cec529bcad12264b17a18e636dc8ed</span><br><span class="line">$ docker run -d --name tomcat-mynet-2 --network=mynet tomcat</span><br><span class="line">e594cdd21b422b85306cca3389ca56610dd812a78f02b9977e6d022fcfd792e2</span><br></pre></td></tr></table></figure><p><strong>查看<code>mynet</code>网络的使用情况</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network inspect mynet</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;Containers&quot;: &#123;</span><br><span class="line">    &quot;39483e5272d244662e19aab9a5acaf4f935de7d4e123295c1a114629fbc2837b&quot;: &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;tomcat-mynet-2&quot;,</span><br><span class="line">        &quot;EndpointID&quot;: &quot;868c73cf8b7b734a65837bf6eb6ed197c98a68b416f91ce7c2e7ea8f24cbba8d&quot;,</span><br><span class="line">        &quot;MacAddress&quot;: &quot;02:42:ac:0b:00:02&quot;,</span><br><span class="line">        &quot;IPv4Address&quot;: &quot;172.11.0.2/16&quot;,</span><br><span class="line">        &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;97cf9d5c3505d68546db70b67c65923103a05818243b00b6409f462515200136&quot;: &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;tomcat-mynet-1&quot;,</span><br><span class="line">        &quot;EndpointID&quot;: &quot;bf315a5c26ab09131c88acefb291652c507b8c04d51e678d7370e108771eec55&quot;,</span><br><span class="line">        &quot;MacAddress&quot;: &quot;02:42:ac:0b:00:03&quot;,</span><br><span class="line">        &quot;IPv4Address&quot;: &quot;172.11.0.3/16&quot;,</span><br><span class="line">        &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试自定义网络的容器互联</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it tomcat-mynet-1 ping tomcat-mynet-2</span><br><span class="line">PING tomcat-mynet-2 (172.11.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-mynet-2.mynet (172.11.0.2): icmp_seq=1 ttl=64 time=0.096 ms</span><br><span class="line">64 bytes from tomcat-mynet-2.mynet (172.11.0.2): icmp_seq=2 ttl=64 time=0.094 ms</span><br><span class="line">64 bytes from tomcat-mynet-2.mynet (172.11.0.2): icmp_seq=3 ttl=64 time=0.077 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-mynet-2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 31ms</span><br><span class="line">rtt min/avg/max/mdev = 0.077/0.089/0.096/0.008 ms</span><br><span class="line">$ docker <span class="built_in">exec</span> -it tomcat-mynet-2 ping tomcat-mynet-1</span><br><span class="line">PING tomcat-mynet-1 (172.11.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-mynet-1.mynet (172.11.0.3): icmp_seq=1 ttl=64 time=0.092 ms</span><br><span class="line">64 bytes from tomcat-mynet-1.mynet (172.11.0.3): icmp_seq=2 ttl=64 time=0.080 ms</span><br><span class="line">64 bytes from tomcat-mynet-1.mynet (172.11.0.3): icmp_seq=3 ttl=64 time=0.072 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-mynet-1 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 38ms</span><br><span class="line">rtt min/avg/max/mdev = 0.072/0.081/0.092/0.011 ms</span><br></pre></td></tr></table></figure><p><strong>创建使用默认网络的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name tomcat-docker0 tomcat</span><br><span class="line">e8408dbf5c1e3ddbe0adfee16ab9c8965f9889c55299e50ce1db381401f26c2a</span><br></pre></td></tr></table></figure><p><strong>测试不同网络的容器的连通性</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it tomcat-mynet-1 ping tomcat-docker0</span><br><span class="line">ping: tomcat-docker0: Name or service not known</span><br></pre></td></tr></table></figure><p>发现不同网络内的容器并不相通。这是为什么呢，看下图：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-08_16-39-40.png" alt="Snipaste_2020-11-08_16-39-40"></p><h3 id="网络打通"><a href="#网络打通" class="headerlink" title="网络打通"></a>网络打通</h3><p>解决办法：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-08_16-41-09.png" alt="Snipaste_2020-11-08_16-41-09"></p><p>原理：假如使<code>tomcat-mynet-1</code>连接到<code>tomcat-docker0</code>，则在<code>tomcat-mynet-1</code>已有网络的基础上再次添加一个docker0网络的IP。<font color="red"><strong>即一个容器多个IP</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network  connect bridge tomcat-mynet-1</span><br></pre></td></tr></table></figure><p>此时我们查看<code>tomcat-mynet-1</code>的网络信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect tomcat-mynet-1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&quot;Networks&quot;: &#123;</span><br><span class="line">               &quot;bridge&quot;: &#123;</span><br><span class="line">                   &quot;IPAMConfig&quot;: &#123;&#125;,</span><br><span class="line">                   &quot;Links&quot;: null,</span><br><span class="line">                   &quot;Aliases&quot;: [],</span><br><span class="line">                   &quot;NetworkID&quot;: &quot;fe5399aad1b445bf0dce36a7ed705e597714226a4872986a49a70aea9443e795&quot;,</span><br><span class="line">                   &quot;EndpointID&quot;: &quot;4781b0bb8330308ba0c4d2e64c11edd29ab03cc8d0afadcca0ae3279af7b95a3&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                   &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,</span><br><span class="line">                   &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                   &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                   &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">                   &quot;DriverOpts&quot;: &#123;&#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;mynet&quot;: &#123;</span><br><span class="line">                   &quot;IPAMConfig&quot;: null,</span><br><span class="line">                   &quot;Links&quot;: null,</span><br><span class="line">                   &quot;Aliases&quot;: [</span><br><span class="line">                       &quot;97cf9d5c3505&quot;</span><br><span class="line">                   ],</span><br><span class="line">                   &quot;NetworkID&quot;: &quot;b2c091bf96ebf3ea4ff0ed3427d36b83c31632d8b52aaf2b67afda26b2c54a5f&quot;,</span><br><span class="line">                   &quot;EndpointID&quot;: &quot;bf315a5c26ab09131c88acefb291652c507b8c04d51e678d7370e108771eec55&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.11.0.1&quot;,</span><br><span class="line">                   &quot;IPAddress&quot;: &quot;172.11.0.3&quot;,</span><br><span class="line">                   &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                   &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                   &quot;MacAddress&quot;: &quot;02:42:ac:0b:00:03&quot;,</span><br><span class="line">                   &quot;DriverOpts&quot;: null</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现此容器同时有2个IP：</p><ul><li>172.11.0.3</li><li>172.17.0.3</li></ul><p><del>正因为它也在网络<code>bridge</code>中，所以它能连通<code>tomcat-docker0</code></del>，发现也连不通，才想到默认网卡docker0==bridge是容器互联不支持的。</p><p>以下新建一个网络<code>mynet1</code>，创建容器<code>tomcat-mynet1-1</code>，并将容器<code>tomcat-mynet-1</code>加入网络<code>mynet1</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create --subnet 172.13.0.0 --gateway 172.13.0.1 mynet1</span><br><span class="line">invalid subnet: invalid CIDR address: 172.13.0.0</span><br><span class="line">$ docker network create --subnet 172.13.0.0/16 --gateway 172.13.0.1 mynet1</span><br><span class="line">00e7d460e27849646a4be5fe5f2773ac698f014377391ccb3a8ea637f09c3e49</span><br><span class="line">$ docker run --name tomcat-mynet1-1 -d --network=mynet1 tomcat</span><br><span class="line">219598c82425458a509294e3efdc5d4f1ac8088ae8edbcc67297da641cfe138e</span><br><span class="line">$ docker network connect mynet1 tomcat-mynet-1</span><br></pre></td></tr></table></figure><p><font color="red"><strong>测试网络打通</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it tomcat-mynet-1 ping tomcat-mynet1-1</span><br><span class="line">PING tomcat-mynet1-1 (172.13.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-mynet1-1.mynet1 (172.13.0.2): icmp_seq=1 ttl=64 time=0.140 ms</span><br><span class="line">64 bytes from tomcat-mynet1-1.mynet1 (172.13.0.2): icmp_seq=2 ttl=64 time=0.081 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-mynet1-1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 5ms</span><br><span class="line">rtt min/avg/max/mdev = 0.081/0.110/0.140/0.031 ms</span><br><span class="line">$ docker <span class="built_in">exec</span> -it tomcat-mynet-2 ping tomcat-mynet1-1</span><br><span class="line">ping: tomcat-mynet1-1: Name or service not known</span><br></pre></td></tr></table></figure><blockquote><p>结论：发现配置了网络<code>mynet1</code>的容器<code>tomcat-mynet-1</code>能连通<code>tomcat-mynet1-1</code>，而没有打通网络的容器<code>tomcat-mynet-2</code>则不行。<font color="red">这证明了我们的配置是正确的。原理：一个容器多个IP</font></p></blockquote><blockquote><p>注意：另外不使用的网络也可以通过<code>docker network prune</code>来清除。它不像数据卷占用大量空间，也不用经常在意。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker网络&quot;&gt;&lt;a href=&quot;#Docker网络&quot; class=&quot;headerlink&quot; title=&quot;Docker网络&quot;&gt;&lt;/a&gt;Docker网络&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Docker 允许通过外部访问容器或容器互联的方式来提供网络服务。</summary>
      
    
    
    
    <category term="Docker" scheme="https://awslzhang.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://awslzhang.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker数据卷</title>
    <link href="https://awslzhang.top/2020/11/13/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
    <id>https://awslzhang.top/2020/11/13/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7/</id>
    <published>2020-11-13T11:33:38.000Z</published>
    <updated>2021-01-01T05:49:59.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么需要数据卷"><a href="#为什么需要数据卷" class="headerlink" title="为什么需要数据卷"></a>为什么需要数据卷</h1><p>这得从 docker 容器的文件系统说起。出于效率等一系列原因，docker 容器的文件系统在宿主机上存在的方式很复杂，这会带来下面几个问题：</p><ul><li>不能在宿主机上很方便地访问容器中的文件。</li><li>无法在多个容器之间共享数据。</li><li><font color="red">当容器删除时，容器中产生的数据将丢失。</font></li></ul><p>这样比如说你启动了一个MySQL容器，之后添加的数据全在容器中，当某天容器被删除数据随之删除，并不能做到数据的持久化。</p><hr><p>为了解决这些问题，docker 引入了<strong>数据卷(volume) 机制</strong>。数据卷是存在于一个或多个容器中的特定<font color="red"><strong>文件或文件夹</strong></font>，这个文件或文件夹以独立于 docker 文件系统的形式存在于宿主机中。数据卷的最大特定是：<font color="red"><strong>其生存周期独立于容器的生存周期</strong></font></p><h1 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h1><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></blockquote><blockquote><p>注意：挂载数据卷时，分别可以是目录或文件，它只能包含两种可能：目录:目录；文件:文件</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-12_15-10-00.png" alt="s"></p><h2 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create my-vol</span><br></pre></td></tr></table></figure><p>查看所有的 <code>数据卷</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume ls</span><br><span class="line">DRIVER              VOLUME NAMElocal               my-vol</span><br></pre></td></tr></table></figure><p>在主机里使用以下命令可以查看指定 <code>数据卷</code> 的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume inspect my-vol</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/my-vol/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-vol&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="启动一个挂载数据卷的容器"><a href="#启动一个挂载数据卷的容器" class="headerlink" title="启动一个挂载数据卷的容器"></a>启动一个挂载数据卷的容器</h2><p>我们启动一个挂在数据卷的容器时一定要参照官方文档，以实现MySQL的持久化数据为目的来实现启动一个挂载数据卷的容器。</p><p>通过连接：<a href="https://hub.docker.com/_/mysql%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%9A">https://hub.docker.com/_/mysql中的内容：</a></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/mysql.png"></p><p>以上得知MySQL的数据存放在容器中的<code>/var/lib/mysql</code>目录中，这时我们可以将宿主机的一个目录和其绑定。具体有多种挂载方式：</p><ul><li>匿名挂载</li><li>具名挂载</li><li>指定目录挂载</li></ul><p>以指定目录挂载为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><h2 id="查看数据卷的具体信息"><a href="#查看数据卷的具体信息" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect some-mysql</span><br></pre></td></tr></table></figure><p>截取到数据卷的信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/my/own/datadir&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><h2 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume rm my-vol</span><br></pre></td></tr></table></figure><p><code>数据卷</code> 是被设计用来持久化数据的，<font color="red">它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 <code>数据卷</code>，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 <code>数据卷</code>。</font>如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 <code>docker rm -v</code> 这个命令。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/volume.png"></p><hr><p><font color="red"><strong>无主的数据卷可能会占据很多空间，要清理请使用以下命令</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume prune</span><br></pre></td></tr></table></figure><h1 id="数据卷挂载种类"><a href="#数据卷挂载种类" class="headerlink" title="数据卷挂载种类"></a>数据卷挂载种类</h1><h2 id="匿名挂载"><a href="#匿名挂载" class="headerlink" title="匿名挂载"></a>匿名挂载</h2><p>匿名挂载就是在数据卷挂载时不指定名称，直接输入要挂载的容器内的路径即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql1 -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>那么此容器的数据卷挂载到宿主机的哪了？</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect some-mysql1</span><br></pre></td></tr></table></figure><p>截取到数据卷的信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;8ca6908c31d8fdfe15bd9b2abad40e602d567980501cef921ea5437ae3df7bd6&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/8ca6908c31d8fdfe15bd9b2abad40e602d567980501cef921ea5437ae3df7bd6/_data&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><p>发现数据卷名为：<code>8ca6908c31d8fdfe15bd9b2abad40e602d567980501cef921ea5437ae3df7bd6</code>，挂载到了<code>/var/lib/docker/volumes/8ca6908c31d8fdfe15bd9b2abad40e602d567980501cef921ea5437ae3df7bd6/_data</code></p><h2 id="具名挂载"><a href="#具名挂载" class="headerlink" title="具名挂载"></a>具名挂载</h2><p>匿名挂载就是在数据卷挂载时指定数据卷名称(<strong>那么此时就不能输入宿主机路径了</strong>)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql2 -v mydata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>通过数据卷查看命令得到有名称的数据卷</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               8ca6908c31d8fdfe15bd9b2abad40e602d567980501cef921ea5437ae3df7bd6</span><br><span class="line"><span class="built_in">local</span>               mydata</span><br></pre></td></tr></table></figure><h2 id="指定目录挂载"><a href="#指定目录挂载" class="headerlink" title="指定目录挂载"></a>指定目录挂载</h2><p>手动指定宿主机的目录/文件和容器的目录/文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况在使用的，不建议大家使用匿名挂载</p><p>如何确定是匿名挂载还是具名挂载呢？</p><ul><li>-v 容器内路径         #匿名挂载</li><li>-v 卷名：容器内路径      #具名挂载</li><li>-v /宿主机路径：容器内路径   #指定路径挂载</li></ul><h1 id="数据卷权限"><a href="#数据卷权限" class="headerlink" title="数据卷权限"></a>数据卷权限</h1><p><strong>通过 <code>-v </code>容器内路径:ro rw 改变读写权限</strong></p><ul><li><code>ro</code>：readonly  #只读</li><li><code>rw</code>：readwrite #可读可写</li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro  nginx</span><br></pre></td></tr></table></figure><blockquote><p>只要看到ro就说明这个路径只能通过宿主机来改变，<font color="red">容器内部是无法操作的</font></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么需要数据卷&quot;&gt;&lt;a href=&quot;#为什么需要数据卷&quot; class=&quot;headerlink&quot; title=&quot;为什么需要数据卷&quot;&gt;&lt;/a&gt;为什么需要数据卷&lt;/h1&gt;&lt;p&gt;这得从 docker 容器的文件系统说起。出于效率等一系列原因，docker 容器的文件系统</summary>
      
    
    
    
    <category term="Docker" scheme="https://awslzhang.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://awslzhang.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>构建镜像之Dockerfile</title>
    <link href="https://awslzhang.top/2020/11/07/%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E4%B9%8BDockerfile/"/>
    <id>https://awslzhang.top/2020/11/07/%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E4%B9%8BDockerfile/</id>
    <published>2020-11-07T03:27:38.000Z</published>
    <updated>2021-01-01T05:50:00.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>Docker通过从一个<code>Dockerfile</code>文本文件中读取指令来自动构建映像，该 文本文件按顺序包含构建给定映像所需的所有命令。<code>Dockerfile</code>遵循特定的格式和指令集，您可以在<a href="https://docs.docker.com/engine/reference/builder/">Dockerfile参考中</a>找到。</p><p>Docker映像由只读层组成，每个只读层代表一个Dockerfile指令。这些层是堆叠的，每个层都是上一层的变化的增量。考虑一下<code>Dockerfile</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> python /app/app.py</span></span><br></pre></td></tr></table></figure><p>每条指令创建一层：</p><ul><li><code>FROM</code>从<code>ubuntu:18.04</code>Docker映像创建一个图层。</li><li><code>COPY</code> 从Docker客户端的当前目录添加文件。</li><li><code>RUN</code>使用构建您的应用程序<code>make</code>。</li><li><code>CMD</code> 指定要在容器中运行的命令。</li></ul><p>运行图像并生成容器时，可以 在基础层之上添加一个新的<em>可写层</em>（“容器层”）。对运行中的容器所做的所有更改（例如写入新文件，修改现有文件和删除文件）都将写入此薄可写容器层。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><code>docker build</code>命令从一个构建的图像<code>Dockerfile</code>和一个<em>上下文</em>。构建的上下文是指定位置<code>PATH</code>或的文件集<code>URL</code>。这<code>PATH</code>是本地文件系统上的目录。该<code>URL</code>是一个Git仓库的位置。</p><p>上下文是递归处理的。因此，<code>PATH</code>包括任何子目录，并且<code>URL</code>包括存储库及其子模块。此示例显示了一个使用当前目录作为上下文的构建命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker build .</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon  6.51 MB</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>构建是由Docker守护程序而不是CLI运行的。生成过程要做的第一件事是将整个上下文（递归）发送到守护程序。在大多数情况下，<strong>最好从空目录开始作为上下文，并将Dockerfile保留在该目录中。仅添加构建Dockerfile所需的文件。</strong></p><blockquote><p><strong>警告</strong></p><p>不要用你的根目录下，<code>/</code>作为<code>PATH</code>因为它会导致生成到您的硬盘驱动器的全部内容传输到码头工人守护进程。</p></blockquote><p>要在构建上下文中使用文件，<code>Dockerfile</code>引用是指指令（例如，<code>COPY</code>指令）中指定的文件。要提高构建的性能，请通过将<code>.dockerignore</code>文件添加到上下文目录来排除文件和目录。有关如何<a href="https://docs.docker.com/engine/reference/builder/#dockerignore-file">创建<code>.dockerignore</code> 文件的信息，</a>请参阅此页面上的文档。</p><p>传统上，<code>Dockerfile</code>称为，<code>Dockerfile</code>并且位于上下文的根中。您可以使用<code>-f</code>标志with<code>docker build</code>指向文件系统中任意位置的Dockerfile。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -f &#x2F;path&#x2F;to&#x2F;a&#x2F;Dockerfile .</span><br></pre></td></tr></table></figure><p>如果构建成功，则可以指定存储新映像的存储库和标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t shykes&#x2F;myapp .</span><br></pre></td></tr></table></figure><p>要在构建后将映像标记到多个存储库中，请在<code>-t</code>运行<code>build</code>命令时添加多个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t shykes&#x2F;myapp:1.0.2 -t shykes&#x2F;myapp:latest .</span><br></pre></td></tr></table></figure><p>在Docker守护程序运行中的指令之前<code>Dockerfile</code>，它会对进行初步验证，<code>Dockerfile</code>如果语法不正确，则返回错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t test&#x2F;myapp .</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Error response from daemon: Unknown instruction: RUNCMD</span><br></pre></td></tr></table></figure><p>Docker守护程序以<code>Dockerfile</code>一对一的方式运行指令，如有必要，将每条指令的结果提交到新映像，然后最终输出新映像的ID。Docker守护程序将自动清理您发送的上下文。</p><p><strong>请注意，每条指令都是独立运行的，并会导致创建新映像-因此<code>RUN cd /tmp</code>对下一条指令不会有任何影响。</strong></p><p>Docker将尽可能重用中间映像（缓存），以<code>docker build</code>显着加速该过程。这由<code>Using cache</code>控制台输出中的消息指示。（有关更多信息，请参见<a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/"><code>Dockerfile</code>最佳做法指南</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t svendowideit&#x2F;ambassador .</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon 15.36 kB</span><br><span class="line">Step 1&#x2F;4 : FROM alpine:3.2</span><br><span class="line"> ---&gt; 31f630c65071</span><br><span class="line">Step 2&#x2F;4 : MAINTAINER SvenDowideit@home.org.au</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 2a1c91448f5f</span><br><span class="line">Step 3&#x2F;4 : RUN apk update &amp;&amp;      apk add socat &amp;&amp;        rm -r &#x2F;var&#x2F;cache&#x2F;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 21ed6e7fbb73</span><br><span class="line">Step 4&#x2F;4 : CMD env | grep _TCP&#x3D; | (sed &#39;s&#x2F;.*_PORT_\([0-9]*\)_TCP&#x3D;tcp:\&#x2F;\&#x2F;\(.*\):\(.*\)&#x2F;socat -t 100000000 TCP4-LISTEN:\1,fork,reuseaddr TCP4:\2:\3 \&amp;&#x2F;&#39; &amp;&amp; echo wait) | sh</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 7ea8aef582cc</span><br><span class="line">Successfully built 7ea8aef582cc</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-07_11-36-19.png" alt="Snipaste_2020-11-07_11-36-19"></p><ul><li><code>CMD</code>：指定容器启动时要运行的命令，只有最后一个生效，可以被替代</li><li><code>ENTRYPOINT</code>：指定容器启动时要运行的命令，可以追加命令</li><li><code>COPY</code>：拷贝宿主机文件到镜像</li><li><code>ENV</code>：构建时设置环境变量</li></ul><hr><blockquote><p><strong><code>ENTRYPOINT</code>与<code>CMD</code></strong></p></blockquote><p><strong>CMD</strong></p><p>当Dockerfile中使用CMD时，镜像在ｒｕｎ成容器时，cmd会被执行，但是当使用docker run命令执行镜像时如果手动加入执行命令(docker run xxx ls -al)则CMD的命令会被覆盖，不会执行。</p><p>当Dockerfile中使用ENTRYPOINT时，镜像在ｒｕｎ成容器时，ENTRYPOINT会被执行，但是当使用docker run命令执行镜像时如果手动加入执行命令(docker run xxx -l)则新写的命令会被追加到ENTRYPOINT命令之后。</p><table><thead><tr><th>Dockerfile/(CMD/ENTRYPOINT)</th><th>docker run xxx -l</th><th>docker run xxx ls -al</th></tr></thead><tbody><tr><td>CMD [“ls”,”-a”]</td><td>错误</td><td>ls -al</td></tr><tr><td>ENTRYPOINT [“ls”,”-a”]</td><td>ls -al</td><td>ls -a -al（错误）</td></tr></tbody></table><h2 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h2><ol><li>编写<code>Dockerfile</code></li><li>docker build构建镜像</li><li>docker run运行</li><li>docker push到xxx</li></ol><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="jdk镜像"><a href="#jdk镜像" class="headerlink" title="jdk镜像"></a>jdk镜像</h3><p>虽然有官方的jdk，但是为了展示构建，这里在centos的基础上构建jdk：</p><p><strong>1. 创建<code>Dockerfile</code>，内容为：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> xxx&lt;xxx@xxx.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install wget</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/java &amp;&amp; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/java &amp;&amp; wget -P /usr/<span class="built_in">local</span>/java https://repo.huaweicloud.com/java/jdk/11.0.2+9/jdk-11.0.2_linux-x64_bin.tar.gz &amp;&amp; tar -zxvf *.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk-<span class="number">11.0</span>.<span class="number">2</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>2. 构建-</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myjdk:1.0 .</span><br></pre></td></tr></table></figure><p><strong>3. 运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it myjdk:1.0</span><br></pre></td></tr></table></figure><h2 id="Push-Docker-Hub"><a href="#Push-Docker-Hub" class="headerlink" title="Push Docker Hub"></a>Push Docker Hub</h2><ol><li>创建账号</li><li><code>dockr login -u xxx</code></li><li><code>docker push [OPTIONS] NAME[:TAG]  </code></li></ol><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dockerfile&quot;&gt;&lt;a href=&quot;#Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile&quot;&gt;&lt;/a&gt;Dockerfile&lt;/h1&gt;&lt;p&gt;Docker通过从一个&lt;code&gt;Dockerfile&lt;/code&gt;文本文件</summary>
      
    
    
    
    <category term="Docker" scheme="https://awslzhang.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://awslzhang.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>如何让别人访问到你的本地项目-内网穿透</title>
    <link href="https://awslzhang.top/2020/10/21/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%88%AB%E4%BA%BA%E8%AE%BF%E9%97%AE%E5%88%B0%E4%BD%A0%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://awslzhang.top/2020/10/21/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%88%AB%E4%BA%BA%E8%AE%BF%E9%97%AE%E5%88%B0%E4%BD%A0%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</id>
    <published>2020-10-21T13:28:55.000Z</published>
    <updated>2021-01-01T05:50:00.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先说下原始需求。众所周知，IPv4 网络地址数量非常有限，大约只有 43 亿个地址，全球互联网发展到如今的程度，显然不可能每台设备都分配到 IPv4 地址。</p><p>那现在家庭宽带是怎么连接网络的呢？这里一般会使用 NAT（Network Address Translation，网络地址转换）在一个 IPv4 地址内部扩展出一个内部网络，使这个内部网络可以正常连接到互联网。此时内部设备可以正常访问全球 IPv4 地址（即公网地址），但是外部的设备只能找到这个内部网络共用的全球 IPv4 地址，而没法找到经过 NAT 之后的内部设备地址。</p><p>考虑到大部分用户的主要需求是获取互联网上的各种资源，并没有对外提供服务的需求，现在国内运营商在大部分城市默认已经不会给家庭宽带用户动态分配公网地址，而是换成了一层或多层 NAT 后的内网地址。并且一般用户发送数据的需求远小于获取数据的需求，所以家庭宽带的上下行带宽一般是不对等的，例如某地电信宽带 500M 下行带宽对应的上行带宽只有 30M。</p><p>此时，对于==一些有远程连接、获取 NAS 文件==，或者临时调试服务需求的用户就不太友好了。</p><p>有的电信网络是可以打客服申请公网IP的，但是家庭宽带它限制了大部分常用的端口。</p><p>内网穿透工具就是为了解决上述的没有公网 IP 的问题的。</p><p>顾名思义，就是让你在公网环境下能访问到你的本地网络(本地需联网)。</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>家里部署了一个博客地址，想从外面的网络直接访问到博客，但是由于没有公网IP，所以得另寻他路-内网穿透。虽说是内网，但是你家的网络也必须联网的。</p><h1 id="frp简介"><a href="#frp简介" class="headerlink" title="frp简介"></a>frp简介</h1><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议</p><p>名称其实就是使用了 Fast Reverse Proxy 的首字母缩写。</p><p>简单来说，就是可以随时随地通过<strong>有公网 IP 的服务器</strong>中转连接到<strong>运行 frpc 程序的任意机器的任意端口</strong>。</p><p><a href="https://gofrp.org/docs/">frp官网中文文档地址</a></p><h2 id="前置条件🔺"><a href="#前置条件🔺" class="headerlink" title="前置条件🔺"></a>前置条件🔺</h2><ul><li>具有公网IP的云服务器</li><li>家庭网络，能联网</li><li><a href="https://github.com/fatedier/frp/releases">项目frp</a></li><li>一个解析到云服务器的域名(==访问web服务需要==，其余不需要)</li></ul><h2 id="frp安装"><a href="#frp安装" class="headerlink" title="frp安装"></a>frp安装</h2><p><a href="https://gofrp.org/docs/setup/">https://gofrp.org/docs/setup/</a></p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><h5 id="通过-SSH-访问内网机器"><a href="#通过-SSH-访问内网机器" class="headerlink" title="通过 SSH 访问内网机器"></a><a href="https://gofrp.org/docs/examples/ssh/">通过 SSH 访问内网机器</a></h5><h5 id="通过自定义域名访问内网的-Web-服务"><a href="#通过自定义域名访问内网的-Web-服务" class="headerlink" title="通过自定义域名访问内网的 Web 服务"></a><a href="https://gofrp.org/docs/examples/vhost-http/">通过自定义域名访问内网的 Web 服务</a></h5><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>其他的内网穿透还有一写：</p><ul><li><a href="https://github.com/ehang-io/nps">nps</a>：Github开源</li><li><a href="http://www.ngrok.cc/">Ngfork</a>：付费，有免费版本</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;首先说下原始需求。众所周知，IPv4 网络地址数量非常有限，大约只有 43 亿个地址，全球互联网发展到如今的程度，显然不可能每台设备都分配到</summary>
      
    
    
    
    <category term="网络" scheme="https://awslzhang.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="frp" scheme="https://awslzhang.top/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>狂神说ElasticSearch 7.x笔记（纯手敲）</title>
    <link href="https://awslzhang.top/2020/10/18/%E7%8B%82%E7%A5%9E%E8%AF%B4ElasticSearch-7-x%E7%AC%94%E8%AE%B0%EF%BC%88%E7%BA%AF%E6%89%8B%E6%95%B2%EF%BC%89/"/>
    <id>https://awslzhang.top/2020/10/18/%E7%8B%82%E7%A5%9E%E8%AF%B4ElasticSearch-7-x%E7%AC%94%E8%AE%B0%EF%BC%88%E7%BA%AF%E6%89%8B%E6%95%B2%EF%BC%89/</id>
    <published>2020-10-18T08:14:03.000Z</published>
    <updated>2021-01-01T05:50:00.104Z</updated>
    
    <content type="html"><![CDATA[<p><img src="" alt="下载"></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>此文章是up主-<strong>遇见狂神说</strong>的资料，将他的资料拉取在这是为了更好的查找资料。</p><p>这是大神的讲解视频：<a href="https://www.bilibili.com/video/BV17a4y1x7zq?p=1">https://www.bilibili.com/video/BV17a4y1x7zq?p=1</a></p><h1 id="狂神聊ElasticSearch-初级阶段"><a href="#狂神聊ElasticSearch-初级阶段" class="headerlink" title="狂神聊ElasticSearch(初级阶段)"></a>狂神聊ElasticSearch(初级阶段)</h1><p>E L K</p><p>版本:Elasticsearch7.6.1 (全网最新的)</p><p>6.X 和 7.X 区别十分大(原生API,RestFul高级)</p><blockquote><p>我们要讲解什么?</p></blockquote><p>SQL: like查询%狂神说%,如果是大数据,就十分慢!索引!</p><p>Elasticsearch:搜索(百度,github,淘宝电商!)</p><ol><li>聊一个人</li><li>货比三家</li><li>安装</li><li>生态圈</li><li>分词器 ik</li><li>RestFul操作 ES</li><li>CRUD</li><li>SpringBoot 集成 ElasticSearch(从原理分析!)</li><li>爬虫爬取数据(京东)</li><li>实战,模拟全文检索!</li></ol><blockquote><p>以后你只要需要用到搜索,就可以用ES!(大数据量的情况下使用!)</p></blockquote><p>学了这个就不需要用MySQL来查了</p><h1 id="聊聊DougCutting"><a href="#聊聊DougCutting" class="headerlink" title="聊聊DougCutting"></a>聊聊DougCutting</h1><p>为什么要讲这个人,后面要聊大数据</p><blockquote><p>本故事内容来自公众号：新枣课堂</p></blockquote><p>1998年9月4号,google公司在美国硅谷成立.正如大家所知,它是一家<strong>搜索</strong>引擎起家的公司</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610550313.png" alt="1596610550313"></p><p>无独有偶,一位名叫DougCutting的美国工程师,也迷上了搜索引擎.他做了一个用于文本搜索的函数库(姑且理解为软件的功能组件),命名为Lucene.</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610568104.png" alt="1596610568104"></p><p>Lucene使用Java写的,目标是为各种中小型应用软件加入全文检索功能.因为好用而且开源(代码公开),非常受程序员们稀罕)</p><p>在这个过程中,google确实找到了不少好的办法,并且无私地分享了出来.</p><p>开源是一种精神!</p><p>2003年,google发表了一篇技术学术论文,公开介绍了自己的谷歌文件系统GFS(google File System).这是google公司为了存储海量搜素数据而设计的专用文件系统</p><p>第二年,2004年,Doug Cutting基于google的GFS论文,实现了分布式文件存储系统,并将它命名为NDFS(Nutch Distributed File System)</p><p>还是2004年,google又发表了一篇技术学术论文,介绍自己的MapReduce编程模型.这个编程模型,用于大规模数据集(大于1TB)的并行分析运算.</p><p>2005年,Doug Cutting 又基于MapReduce,在Nutch搜索引擎实现了该功能.</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610581999.png" alt="1596610581999"></p><p>2006年,当时依然很厉害的Yahoo(雅虎)公司,招安了Doug Cutting</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610607769.png" alt="1596610607769"></p><p>截图</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610720399.png" alt="1596610720399"></p><p>我们继续往下说.</p><p>还是2006年,google有发表论文了</p><p>这次,他们介绍自己的BigTable,这是一种分布式的数据存储系统,一种用来处理海量数据的非关系型数据库.</p><p>Doug Cutting 当然没有放过,在自己的hadoop系统里面,引入了BigTable,并命名为HBase.</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610829469.png" alt="1596610829469"></p><p>好吧,反正就是紧跟Google时代步伐,你出什么,我学什么</p><p>所有,Hadoop的核心部分,基本上都有Google的影子.</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610891867.png" alt="1596610891867"></p><p>2008年1月,Hadoop成功上位,成为Apache基金会的顶级项目.</p><p>同年2月,Yahoo宣布建成了一个拥有1W个内核的Hadoop集群,并将自己的搜索引擎产品部署在上面.</p><p>7月,Hadoop打破世界纪录,成为最快排序1TB数据的系统,用时209秒.</p><h1 id="Elasticsearch概述"><a href="#Elasticsearch概述" class="headerlink" title="Elasticsearch概述"></a>Elasticsearch概述</h1><p>elasticsearch,简称为es,es是一个开源的扩展的分布式全文检索引擎,他可以近乎实时的存储,检索数据;本身扩展性很好,可以扩展到上百台服务器,处理PB级别(大数据时代)的数据.es也使用Java并发使用Lucene作为其核心来实现所有索引和搜索的功能,但是它的目的是通过简单的RESTful API 来隐藏Lucene的复杂性,从而让全文搜索变得简单.</p><p>据国际权威的数据库产品评测机构DB Engines的统计,在2016年1月,ElasticSearch已超过Solr等,成为排名第一的搜索引擎类应用</p><blockquote><p>历史</p></blockquote><p>多年前,一个叫做shay banon的刚结婚不久的失业开发者,由于妻子要去伦敦学习厨师,他便跟着去了.在他找工作的过程中,为了给妻子构建一个食谱的搜索引擎,他开始构建一个早期版本的Lucene</p><p>直接 基于Lucene工作会比较困难,所以Shay开始抽象Lucene代码以便Java程序员可以在应用中添加搜索功能.他发布了他的第一个开源项目,叫做”compass” 后来Shay找到一份工作,这个工作处在高性能和内存数据网络的分布式环境中,因此高性能的,实时的,分布式的搜索引擎也是理所当然需要的.然后他决定重写Compass库,使其成为一个独立的服务叫做Elasticsearch.第一个公开版本出现在2010年2月,在那之后Elasticsearch已经成为Github上最受欢迎的项目之一,代码贡献者超过300人.一家主营Elasticsearch的公司就此成立,他们一边提供商业支持,一边开发新功能,不过Elasticsearch将永远开源且对所有人可用 Shay的妻子依然等待着他的食谱搜索…….</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/03-elasticsearch-%E6%A6%82%E8%BF%B0.assets/1597974189393.png" alt="1597974189393"></p><p>谁在使用</p><ol><li>维基百科(百度百科,全文高亮,排序搜素推荐,权重,百度!)</li><li>The Guardian</li><li>Stack Overflow(国外的程序异常处理网站)IT 问题,程序的报错,提交上去,有人会跟你讨论和回答</li><li>Github</li><li>电商网站 淘宝京东</li><li>日志数据分析,logstash采集日志,ES进行复杂的数据分析,ELK技术,elasticsearch+logstach+kibana</li><li>商品价格监控网站,用户设定</li></ol><h1 id="Elasticsearch和Solr差别"><a href="#Elasticsearch和Solr差别" class="headerlink" title="Elasticsearch和Solr差别"></a>Elasticsearch和Solr差别</h1><p>Elasticsearch是一个实时分布式搜索和分析引擎.它让你以前所未有的速度处理大数据成为可能. 维基百科使用它提供全文搜索并高亮关键字,以及输入实时搜索</p><p>Solr简介 Solr是Apache下的一个顶级开源项目,采用Java开发,它是基于Lucene的全文搜索服务器.solr提供了比Lucene更为丰富的查询语言,同时实现了可配置,可扩展,并对索引,搜索性能进行优化 他可以独立运行,运行在tomcat ,jety等这些Servlet容器中 solr对外提供类似于Web-server的API接口</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596613190316.png" alt="1596613190316"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596613206055.png" alt="1596613206055"></p><p>随着数据量的增加,solr的搜索</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596613233807.png" alt="1596613233807"></p><p>50倍的效率</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596613255957.png" alt="1596613255957"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597974203192.png" alt="1597974203192"></p><h2 id="ElasticSearch-vs-Solr-总结"><a href="#ElasticSearch-vs-Solr-总结" class="headerlink" title="ElasticSearch vs Solr 总结"></a>ElasticSearch vs Solr 总结</h2><ol><li>es基本是==开箱即用==(解压就可以用了!),非常简单.solr安装略微复杂一丢丢!</li><li>Solr利用Zookeeper进行分布式管理,而==Elasticsearch自身带有分布式协调管理功能==.</li><li>solr支持更多格式的数据,比如JSON,XML,CSV, 而elasticsearch仅仅支持json文件格式</li><li>Solr官网提供的功能很多,而elasticsearch本身更注重核心功能,高级功能多有第三方插件提供,例如图形化界面需要kibana友好质层支撑</li><li>Solr查询块,但更新索引时慢(即插入删除慢),用于电商等查询多的应用;<ul><li>ES建立索引块(即查询慢),即==实时性查询快==,用于facebook新浪等搜索.</li><li>Solr是传统搜索应用的有力解决方案,但Elasticsearch更适用于新兴的实时搜索应用.</li></ul></li><li>Solr比较成熟,有一个更大,更成熟的用户,开发好贡献者社区,而Elasticsearch相对开发维护者较少,更新太快,==学习使用成本较高==.</li></ol><h1 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="Elasticsearch安装"></a>Elasticsearch安装</h1><blockquote><p>声明:JDK1.8, 最低要求 , Elasticsearch客户端,界面工具!</p></blockquote><p><strong>Java开发,elasticsearch的版本和我们之后对应的Java的核心jar包! 版本对应! JDK环境是正常的</strong></p><p><strong>这里一定要保证</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596614089583.png" alt="1596614089583"></p><p>下载</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596614104028.png" alt="1596614104028"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596614119890.png" alt="1596614119890"></p><p>一定要在服务器上面搭建</p><p>下载地址:<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>官网下载巨慢,翻墙,网盘中下载即可</p><p>华为云: <a href="https://mirrors.huaweicloud.com/elasticsearch/7.6.2/">https://mirrors.huaweicloud.com/elasticsearch/7.6.2/</a></p><p>我们学习的话Window和Linux都可以学习 ==我们这里现在window下学习==</p><p>ELK三剑客,解压即用!(web项目! 前端环境! npm 下载依赖)</p><p>Node.js python2</p><blockquote><p>window下安装!</p></blockquote><ol><li>elasticSearch</li><li>elasticSearch Head：一个前端项目</li><li>kibana</li></ol><p>过程：略</p><h1 id="ES核心概念理解"><a href="#ES核心概念理解" class="headerlink" title="ES核心概念理解"></a>ES核心概念理解</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在前面的学习中,我们掌握了es是什么,同时也把es的服务已经安装启动,那么es是如何去存储数据,数据结构是什么,又是如何实现搜索的呢?我们先来聊聊Elasticsearch的相关概念吧!</p><p><strong>集群,节点,索引,类型,文档,分片,映射</strong>是什么</p><blockquote><p>elasticsearch是面向文档的,关系行数据库和elasticsearch客观的对比! 一切都是json</p></blockquote><table><thead><tr><th>RelationalDB</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库(database)</td><td>索引(indices)</td></tr><tr><td>表(tables)</td><td>types(7版本以及之后会被抛弃，默认_doc)</td></tr><tr><td>行(rows)</td><td>documents</td></tr><tr><td>字段(columns)</td><td>fields</td></tr></tbody></table><p>面向文档 面向文档 面向文档 <del>~</del></p><p>elasticsearch(集群)中可以包含多个索引(数据库),每个索引中可以包含多个类型(表),每个类型先又包含多个文档(行),每个文档中又包含多个字段(列).</p><h2 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h2><p>elasticsearch在后台吧每个<strong>索引划分成多个分片</strong>,每个分片可以在集群中的不同服务器间迁移</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/07-elasticsearch-es%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3.assets/1596629957996.png" alt="1596629957996"></p><h2 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计"></a>逻辑设计</h2><p>一个索引类型中,包含多个文档,比如所文档1,文档2.当我们索引一篇文章时,可以通过这样的一各顺序找到它:索引&gt;类型</p><p><code>&gt;</code>文档id,通过这个组合我们就能索引到某个具体的文档. 注意: id不必是整数,实际上他是一个字符串.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文档</span><br></pre></td></tr></table></figure><table><thead><tr><th>user</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>zhasna</td><td>18</td></tr><tr><td>2</td><td>kaugshen</td><td>23</td></tr><tr><td>3</td><td></td><td></td></tr></tbody></table><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597974203192.png" alt="1597974203192"></p><p>之前说elasticsearch是面向文档的,name就也为这索引和搜索数据的最小单位是文档,elasticsearch中,文档有几个重要属性:</p><ul><li><p>自我包含,一篇文档同时包含字段和对应值,也就是同时包含key:value!</p></li><li><p>可以是层次型的,一个文档中包含文档,复杂的逻辑实体就是这么来的!</p></li><li><p>灵活的结构,文档不依赖预先定义的模式,我们知道关系型数据库中,要提前定义字段才能使用,在elasticsearch中,对于字段是非常灵活的,有时候,我们可以忽略该字段,或者动态的添加一个新的字段.</p><p>尽管我们可以随意的新增或者忽略某个字段,但是,每个字段的类型非常重要,比如一个年龄字段类型,可以是字符串也可以是整型.因为elasticsearch会保存字段和类型之间的映射及其他的设置.这种映射具体到每个映射的每种类型,这也是为什么在elasticsearch中,类型有时候也称为映射类型.</p></li></ul><blockquote><p>类型</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596630612189.png" alt="1596630612189"></p><p>类型是文档的逻辑容器,就像关系型数据库一样,表格是行的容器.类型中对于字段的定义称为映射,比如name映射为字符串类型.我们说文档是无模式的,他们不需要拥有映射中所定义的所有字段,比如新增一个字段,那么elasticsearch是怎么做的呢?</p><p>elasticsearch会自动的将新的字段加入映射,但是这个字段的不确定它是什么类型,elasticsearch就开始猜,如果这个值是18,那么elasticsearch会认为他是整型.但是elasticsearch也可能猜不对,所有最安全的方式就是提前定义好所需要的映射,这点跟关系型数据库殊途同归了,先定义好字段,然后在使用,别整什么幺蛾子.</p><blockquote><p>索引</p></blockquote><p><strong>就是数据库</strong></p><p>索引是映射类型的容器,elasticsearch中的索引是一个非常大的文档集合.索引存储了映射类型字段和其他设置,然后他们呗存储到了各个分片上了.我们来研究下分片是如何工作的.</p><h3 id="物理设计-节点和分片-如何工作"><a href="#物理设计-节点和分片-如何工作" class="headerlink" title="物理设计: 节点和分片 如何工作"></a>物理设计: 节点和分片 如何工作</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596630840364.png" alt="1596630840364"></p><p>一个集群至少要有一个节点,儿一个节点就是一个elasticsearch进程,节点可以有多个索引默认的,如果你创建索引,那么索引将会有5个分片(primary shard,又称主分片) 构成的,每个主分片会有一个副本(replica shard,又称复制分片)</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/07-elasticsearch-es%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3.assets/1596630793639.png" alt="1596630793639"></p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/07-elasticsearch-es%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3.assets/1596630870602.png" alt="1596630870602"></p><blockquote><p>倒排索引</p></blockquote><p>elasticsearch使用的是一种称为倒排索引的结构,采用Lucene倒排索引作为底层.这种结构适用于快速的全文搜索,一个索引由文档中所有不重复的列表构成,对于每一个词,都有一个包含它的文档列表.例如,现在有两个文档,每个文档包含如下内容.</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/07-elasticsearch-es%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3.assets/1596631073200.png" alt="1596631073200"></p><p>为了创建倒排索引,我们首先要将每个文档拆分成独立的词(或称为词条或者tokens),然后创建一个包含所有不重复的词条的排序列表,然后列出每个词条出现在哪个文档:</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596631181270.png" alt="1596631181270"></p><p>两个文档都匹配,但是第一个文档比第二个匹配程度更高.如果没有别的条件,现在,这两个包含关键字的文档都将返回.</p><p>再来看一个示例,比如我们通过博客标签来搜索博客文章.那么倒排索引列表就是这样的一个结构:</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596631425757.png" alt="1596631425757"></p><p>如果要搜索含有python标签的文章,那相对查找所有原始数据而言,查找倒排索引后的数据将会快的多.只需要查看标签这一栏,然后获取相关文章id即可.</p><h1 id="IK分词器插件"><a href="#IK分词器插件" class="headerlink" title="IK分词器插件"></a>IK分词器插件</h1><h2 id="什么是分词器"><a href="#什么是分词器" class="headerlink" title="什么是分词器"></a><strong>什么是分词器</strong></h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596637415868.png" alt="1596637415868"></p><p>==如果使用中文,建议使用ik分词器==</p><p>IK体用了两个分词算法:<code>ik_smart</code>和,其中ik_smart为最少(ˉ▽￣～) 切~~分,ik_max_word为最细粒度划分! 一会我们测试</p><blockquote><p>安装</p></blockquote><ol><li><p><a href="https://github.com/medcl/elasticsearch-analysis-ik%EF%BC%8C%E7%89%88%E6%9C%AC%E9%9C%80%E8%A6%81%E5%92%8CElasticSearch%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94">https://github.com/medcl/elasticsearch-analysis-ik，版本需要和ElasticSearch版本对应</a></p></li><li><p>下载完毕之后,放入到我们的elasticsearch插件即可</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/08-elasticsearch-IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%8F%92%E4%BB%B6.assets/1596637767841.png" alt="1596637767841"></p><ol><li><p>重启观察ES</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596674648793.png" alt="1596674648793"></p></li><li><p>elasticsearch-plugin 可以通过这个命令来查看加载的插件</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596674703775.png" alt="1596674703775"></p></li><li><p>使用kibana测试!</p><p>查看不同的分词器效果</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596674979545.png" alt="1596674979545"></p></li></ol></li></ol><h2 id="ik分词器增加我们自己的配置"><a href="#ik分词器增加我们自己的配置" class="headerlink" title="ik分词器增加我们自己的配置"></a>ik分词器增加我们自己的配置</h2><p>这种自己需要的词,需要自己加到我们的分词器字典中!</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596675349989.png" alt="1596675349989"></p><p>重启ES,看细节</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596675426305.png" alt="1596675426305"></p><p>再次测试一下狂神说,</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596675486318.png" alt="1596675486318"></p><p>以后的话我们需要自己配置自己的词,只需要在自定义的dic文件中进行配置即可!</p><h1 id="Rest风格说明"><a href="#Rest风格说明" class="headerlink" title="Rest风格说明"></a>Rest风格说明</h1><p>一种软件架构风格,而不是标准,只是提供了一组设计原则和约束条件.它主要用于客户端和服务器交互类的软件.基于这个风格设计的软件可以更简洁,更有层次,更易于实现缓存等机制.</p><p>基本Rest风格命令说明</p><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>127.0.01:9200/索引名称/_create/文档id</td><td>创建文档（指定id）</td></tr><tr><td>POST</td><td>127.0.01:9200/索引名称/_doc</td><td>创建文档</td></tr><tr><td>POST</td><td>127.0.01:9200/索引名称/_update/文档id</td><td>修改文档</td></tr><tr><td>DELETE</td><td>127.0.01:9200/索引名称</td><td>删除索引</td></tr><tr><td>DELETE</td><td>127.0.01:9200/索引名称/_doc/文档id</td><td>删除文档</td></tr></tbody></table><blockquote><p>基础测试</p></blockquote><h2 id="关于索引的基本操作"><a href="#关于索引的基本操作" class="headerlink" title="关于索引的基本操作"></a>关于索引的基本操作</h2><h3 id="索引indices"><a href="#索引indices" class="headerlink" title="索引indices"></a>索引indices</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># id</span><br><span class="line">PUT &#x2F;test&#x2F;_create&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;zxj1&quot;,</span><br><span class="line">  &quot;age&quot;:18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># wu id</span><br><span class="line">POST &#x2F;test&#x2F;_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;zxj1&quot;,</span><br><span class="line">  &quot;age&quot;:18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018173524585.png" alt="image-20201018173524585"></p><h3 id="映射mapping"><a href="#映射mapping" class="headerlink" title="映射mapping"></a>映射mapping</h3><p>那么name这个字段用不用指定类型呢,毕竟我们关系型数据库 是需要指定类型映射的啊</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/09-elasticsearch-Rest%E9%A3%8E%E6%A0%BC.assets/1596676128844.png" alt="1596676128844"></p><ol><li><p>指定字段的类型</p><p>获得这个规则! 可通过GET请求获取具体的信息</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018174140347.png" alt="image-20201018174140347"></p></li><li><p>不给索引设置mapping的话，ElasticSearch会默认匹配；如果自己的文档字段没有指定,那么ES就会给我们配置字段类型</p></li></ol><h1 id="关于文档的基本操作"><a href="#关于文档的基本操作" class="headerlink" title="关于文档的基本操作"></a>关于文档的基本操作</h1><p><a href="https://www.bilibili.com/video/BV17a4y1x7zq?p=10">https://www.bilibili.com/video/BV17a4y1x7zq?p=10</a></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a><strong>基本操作</strong></h2><ol><li><p>添加数据</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018173524585.png" alt="image-20201018173524585"></p></li><li><p>获取数据</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597891281730.png" alt="1597891281730"></p></li><li><p>更新数据 PUT，更新时是覆盖更新，没有更新的字段会被覆盖为空！</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597891378076.png" alt="1597891378076"></p></li><li><p>Post _update,==推荐使用这种更新方式!==</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597891620183.png" alt="1597891620183"></p></li></ol><h2 id="简单地搜索"><a href="#简单地搜索" class="headerlink" title="简单地搜索!"></a>简单地搜索!</h2>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test&#x2F;_doc&#x2F;2</span><br></pre></td></tr></table></figure><p>   简单的条件查询,可以根据默认的映射规则,产生基本的查询</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018175222885.png" alt="image-20201018175222885">   <img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892169142.png" alt="1597892169142"></p><blockquote></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597974203192.png" alt="1597974203192"></p><h2 id="复杂操作搜索"><a href="#复杂操作搜索" class="headerlink" title="复杂操作搜索"></a>复杂操作搜索</h2><blockquote><p>select(排序,分页,高亮,模糊查询,精准查询! )</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892352276.png" alt="1597892352276"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892367286.png" alt="1597892367286"></p><p>输出结果不想要那么多,select *</p><p>现在是select name,age</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892385326.png" alt="1597892385326"></p><p>可以指定字段</p><p>结果的过滤</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892451582.png" alt="1597892451582"></p><p>我们之后使用Java操作ES,所有的方法和对象就是这里面的key!</p><blockquote><p>排序</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892561417.png" alt="1597892561417"></p><blockquote><p>分页查询</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892615017.png" alt="1597892615017"></p><p>数据下标还是从0开始,和之前所学的数据结构都是一样的!</p><blockquote><p>布尔值查询</p></blockquote><p>must(and) ,所有条件都要符合 where id=1 and name=xxx</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892730673.png" alt="1597892730673"></p><p>should (or) ,所有条件都要符合 where id=1 or name = xxx</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892885428.png" alt="1597892885428"></p><p>must not (not)</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892928930.png" alt="1597892928930"></p><p>过滤器 filter</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892996458.png" alt="1597892996458"></p><ul><li>gt 大于</li><li>gte 大于等于</li><li>lt 小于</li><li>lte 小于等于</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893039013.png" alt="1597893039013"></p><p>匹配多个条件</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893096034.png" alt="1597893096034"></p><p>用空格分隔也行</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893131147.png" alt="1597893131147"></p><blockquote><p>精确查询</p></blockquote><p>term 查询时直接通过倒排索引指定的词条进程精确查找的!</p><p>关于分词:</p><p>term,直接查询精确的</p><p>match,会使用分词器解析! (先分析分档,然后再通过分析的分档进行查询! )</p><p><strong>两个类型 text keyword</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893556500.png" alt="1597893556500"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893572562.png" alt="1597893572562"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893648565.png" alt="1597893648565"></p><blockquote><p>多个值匹配精确查询</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597900914957.png" alt="1597900914957"></p><blockquote><p>高亮查询!</p></blockquote><p>搜索的高亮条件,会在HTML里面自动的加上标签</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597901143555.png" alt="1597901143555"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597905816361.png" alt="1597905816361"></p><h1 id="集成SpringBoot"><a href="#集成SpringBoot" class="headerlink" title="集成SpringBoot"></a>集成SpringBoot</h1><blockquote><p>找文档!</p></blockquote><p><a href="https://proxies.app.aidoru.net/-----https://www.elastic.co/guide/index.html">https://proxies.app.aidoru.net/-----https://www.elastic.co/guide/index.html</a></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597906806327.png" alt="1597906806327"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597906105998.png" alt="1597906105998"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597906924635.png" alt="img"></p><ol><li><p>找到原生的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>找对象</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597907115554.png" alt="1597907115554"></p></li><li><p>分析这个类中的方法即可</p><blockquote><p>配置基本的项目</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597907258818.png" alt="1597907258818"></p><blockquote><p>问题:一定要保证我们导入的依赖和我们的ES版本一致</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597907493787.png" alt="1597907493787"></p></li></ol><p>按照官网的操作我们要构建一个对象</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597907737591.png" alt="1597907737591"></p><p>分析源码</p><p>狂神的Spring步骤:</p><ol><li><p>找对象</p></li><li><p>放到spring中待用</p></li><li><p>如果是springboot,那就先分析源码</p><p>xxxAutoConfiguration,xxxProperties</p></li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597908504743.png" alt="1597908504743"></p><p>源码中提供的对象</p><p>虽然这里导入了3个类,静态内部类,核心类就一个</p><h2 id="关于索引的API操作详解"><a href="#关于索引的API操作详解" class="headerlink" title="关于索引的API操作详解"></a>关于索引的API操作详解</h2><blockquote><p>具体的Api测试!</p></blockquote><p><code>restHighLevelClient.indices().xxx()</code></p><ol><li><p>创建索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index create</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 构建索引请求实体类 就是创建索引时的&#123;&#125;</span></span><br><span class="line">    CreateIndexRequest springboot_index = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 2.执行创建索引请求,返回响应</span></span><br><span class="line">    CreateIndexResponse createIndexResponse =</span><br><span class="line">            restHighLevelClient.indices().create(springboot_index, RequestOptions.DEFAULT);</span><br><span class="line">   </span><br><span class="line">    System.out.println(createIndexResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断索引是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">getIndices</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     <span class="comment">// 1. 创建请求体内容对象</span></span><br><span class="line">     GetIndexRequest srpingboot_index = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">   </span><br><span class="line">     <span class="comment">// 2. action</span></span><br><span class="line">     <span class="keyword">boolean</span> exists = restHighLevelClient.indices().exists(srpingboot_index,</span><br><span class="line">             RequestOptions.DEFAULT);</span><br><span class="line">     System.out.println(exists);</span><br><span class="line">     GetIndexResponse getIndexResponse = restHighLevelClient.indices().get(srpingboot_index,</span><br><span class="line">             RequestOptions.DEFAULT);</span><br><span class="line">     System.out.println(getIndexResponse);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteIndices</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建请求体内容对象,删除时索引需存在！</span></span><br><span class="line">    DeleteIndexRequest springboot_index = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 2. action</span></span><br><span class="line">    AcknowledgedResponse delete = restHighLevelClient.indices().delete(springboot_index,</span><br><span class="line">            RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// put /index/_create/id &#123;...&#125;</span></span><br><span class="line">    <span class="comment">// 1. 构建创建的文档的内容</span></span><br><span class="line">    IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">    indexRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    indexRequest.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// public IndexRequest source(String source, XContentType xContentType)</span></span><br><span class="line">    indexRequest.source(JSON.toJSONString(<span class="keyword">new</span> User(<span class="string">&quot;zxj&quot;</span>, <span class="number">18</span>)), XContentType.JSON);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 2. 开始请求</span></span><br><span class="line">    IndexResponse index = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(index.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>crud文档</p></li></ol><h2 id="关于文档的API操作详解"><a href="#关于文档的API操作详解" class="headerlink" title="关于文档的API操作详解"></a>关于文档的API操作详解</h2><blockquote><p>创建文档</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// put /index/_create/id &#123;...&#125;</span></span><br><span class="line">    <span class="comment">// 1. 构建创建的文档的内容</span></span><br><span class="line">    IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">    indexRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    indexRequest.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// public IndexRequest source(String source, XContentType xContentType)</span></span><br><span class="line">    indexRequest.source(JSON.toJSONString(<span class="keyword">new</span> User(<span class="string">&quot;zxj&quot;</span>, <span class="number">18</span>)), XContentType.JSON);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 开始请求</span></span><br><span class="line">    IndexResponse index = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(index.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p>这里的返回的全部内容和我们的命令是一样的</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018194243887.png" alt="image-20201018194243887"></p><blockquote><p>更新文档信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">updateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// post /index/_update/id &#123;&quot;doc&quot;:&#123;...&#125;&#125;</span></span><br><span class="line">       <span class="comment">// 1. 构建修改的文档的内容,String index, String id</span></span><br><span class="line">       UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;springboot_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">       updateRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">       updateRequest.doc(JSON.toJSONString(<span class="keyword">new</span> User(<span class="string">&quot;new Name&quot;</span>, <span class="number">18</span>)), XContentType.JSON);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2. 开始请求</span></span><br><span class="line">       UpdateResponse updateResponse = restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(updateResponse.status());</span><br><span class="line">       System.out.println(updateResponse.toString());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018194653575.png" alt="image-20201018194653575"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018194726197.png" alt="image-20201018194726197"></p><blockquote><p>删除文档记录</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">dropDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// delete /index/_doc/id</span></span><br><span class="line">       <span class="comment">// 1. 构建删除文档的对象,String index, String id</span></span><br><span class="line">       DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;springboot_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">       deleteRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2. 开始请求</span></span><br><span class="line">       DeleteResponse delete = restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(delete.status());</span><br><span class="line">       System.out.println(delete.toString());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018195024638.png" alt="image-20201018195024638"></p><h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><blockquote><p>特殊的,真的项目一般都会批量插入数据</p></blockquote><p>批量操作bulkRequest有很多类型：例如下述。这里只展示批量增加</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018195851648.png" alt="image-20201018195851648"></p><p>批量添加文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bulgRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 构建批量请求体</span></span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">        indexRequest.source(JSON.toJSONString(<span class="keyword">new</span> User(<span class="string">&quot;zxj&quot;</span>+i, <span class="number">18</span>)), XContentType.JSON);</span><br><span class="line">        bulkRequest.add(indexRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(!bulk.hasFailures());</span><br><span class="line">    System.out.println(bulk.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询搜索🔺"><a href="#查询搜索🔺" class="headerlink" title="查询搜索🔺"></a>查询搜索🔺</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;search/&#123;key&#125;/&#123;page&#125;/&#123;size&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; searchLists(<span class="meta">@PathVariable(&quot;key&quot;)</span> String keyword,</span><br><span class="line">                                             <span class="meta">@PathVariable(&quot;page&quot;)</span> Long page, <span class="meta">@PathVariable(</span></span><br><span class="line"><span class="meta">                                                     &quot;size&quot;)</span> Long size) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 构建搜索对象</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;jd1&quot;</span>);</span><br><span class="line">    <span class="comment">// 搜索条件构造</span></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    searchSourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">2L</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配查询</span></span><br><span class="line">    MatchQueryBuilder title = QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, keyword);</span><br><span class="line">    searchSourceBuilder.query(title);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// page</span></span><br><span class="line">    <span class="keyword">if</span> (page&lt;=<span class="number">1L</span>)&#123;</span><br><span class="line">        page = <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    searchSourceBuilder.from((<span class="keyword">int</span>) (page * size));</span><br><span class="line">    searchSourceBuilder.size(Math.toIntExact(size));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// highlight</span></span><br><span class="line">    HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">    highlightBuilder.field(<span class="string">&quot;title&quot;</span>); <span class="comment">// title字段高亮</span></span><br><span class="line">    highlightBuilder.requireFieldMatch(<span class="keyword">false</span>); <span class="comment">// 关键字高亮一次</span></span><br><span class="line">    highlightBuilder.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">    highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">    searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line"></span><br><span class="line">    searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Map&lt;String, Object&gt;&gt; objects = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        <span class="comment">// 查询结果</span></span><br><span class="line">        Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将高亮的字段覆盖查询结果的该字段</span></span><br><span class="line">        HighlightField highlightField = hit.getHighlightFields().get(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (highlightField != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Text[] fragments = highlightField.fragments();</span><br><span class="line">            StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (Text fragment : fragments) &#123;</span><br><span class="line">                s.append(fragment);</span><br><span class="line">            &#125;</span><br><span class="line">            sourceAsMap.put(<span class="string">&quot;title&quot;</span>, s.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        objects.add(sourceAsMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objects;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201020213945227.png" alt="image-20201020213945227"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;下载&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h1&gt;&lt;p&gt;此文章是up主-&lt;strong&gt;遇见狂神说&lt;/strong&gt;的资料，将他的资料拉取</summary>
      
    
    
    
    <category term="全文搜索" scheme="https://awslzhang.top/categories/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="ElasticSearch" scheme="https://awslzhang.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>IDEA打包脚本问题</title>
    <link href="https://awslzhang.top/2020/09/21/IDEA%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC%E9%97%AE%E9%A2%98/"/>
    <id>https://awslzhang.top/2020/09/21/IDEA%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC%E9%97%AE%E9%A2%98/</id>
    <published>2020-09-21T13:34:43.000Z</published>
    <updated>2021-01-01T05:49:59.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><strong>shell脚本执行错误 $’\r’:command not found</strong></p><p>这是在IDEA打包的脚本中，移动到Linux，解压，执行脚本时出现的错误</p><h1 id="出现原因以及解决"><a href="#出现原因以及解决" class="headerlink" title="出现原因以及解决"></a>出现原因以及解决</h1><p>在文件中任何样式都是用字节体现的，例如换行：</p><ul><li>在window中：回车+换行 CRLF</li><li>在Linux中：换行：LF</li><li>老版Mac中：回车：CR，之后也是LF</li></ul><p>window下开发有一个大坑，就是换行默认是<code>CRLF</code>，也就是回车换行，但是Linux下只有换行<code>LF</code>，这样代码提交后，会出现编译问题，<strong>所以最好的办法是在IntelliJ下设置默认为LF</strong>。首先我们先介绍CRLF，LF和CR这三种东西，CR是MAC老版本的做法，就是回车，但是后来的MAC系统统一换成LF了，LF是Linux下的做法，就是换行，这个做法比较自然，为什么要回车换行呢，<strong>是吧。微软采用的是CRLF，看上去好像是兼容了CR和LF，但是实际完全不是那么回事，就是回车并换行，好鸡肋啊，微软一直保持这种做法</strong>，开发人员大多在Linux下，所以对于开发人员来说还是比较坑的。下面介绍设置详解：</p><h2 id="File-gt-Settings…"><a href="#File-gt-Settings…" class="headerlink" title="File-&gt;Settings…"></a>File-&gt;Settings…</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/AGPaNgg.png" alt="AGPaNgg"></p><h2 id="Editor-gt-Code-Style"><a href="#Editor-gt-Code-Style" class="headerlink" title="Editor-&gt;Code Style"></a>Editor-&gt;Code Style</h2><p>可以看到，默认是System-Dependent，这个其实还是很牛叉的，根据系统自动配置，但是你是windows系统，默认是CRLF，服务器是Linux，你就得自己换了。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/JOQ6jZ4.png" alt="JOQ6jZ4"></p><p>我们设置成下面这样，保存就好了</p><p><strong>这样设置是之后新建的文件有效果</strong></p><h2 id="之前文件有效"><a href="#之前文件有效" class="headerlink" title="之前文件有效"></a>之前文件有效</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/826328-20200409110931988-1979119311.png" alt="826328-20200409110931988-1979119311"></p><p><strong>File -&gt; Line Separators -&gt; LF</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/826328-20200409110953545-1889327721.png" alt="826328-20200409110953545-1889327721"></p><h1 id="处理方式二"><a href="#处理方式二" class="headerlink" title="处理方式二"></a>处理方式二</h1><p>通过一个Linux命令，将window换行符变为Linux换行符</p><p><code>dos2unix  脚本名</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;shell脚本执行错误 $’\r’:command not found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是</summary>
      
    
    
    
    
    <category term="IDEA" scheme="https://awslzhang.top/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>spark学习笔记-SparkCore解析</title>
    <link href="https://awslzhang.top/2020/08/29/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkCore%E8%A7%A3%E6%9E%90/"/>
    <id>https://awslzhang.top/2020/08/29/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkCore%E8%A7%A3%E6%9E%90/</id>
    <published>2020-08-29T13:41:20.000Z</published>
    <updated>2021-01-01T05:50:00.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark-内核概述"><a href="#Spark-内核概述" class="headerlink" title="Spark 内核概述"></a>Spark 内核概述</h1><p>Spark内核泛指Spark的核心运行机制，包括<strong>Spark核心组件的运行机制、Spark任务调度机制、Spark内存管理机制、Spark核心功能的运行原理</strong>等，熟练掌握Spark内核原理，能够帮助我们更好地完成Spark代码设计，并能够帮助我们准确锁定项目运行过程中出现的问题的症结所在。</p><h2 id="Spark核心组件回顾"><a href="#Spark核心组件回顾" class="headerlink" title="Spark核心组件回顾"></a>Spark核心组件回顾</h2><h3 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h3><p><strong>Spark驱动器节点</strong>，用于执行Spark任务中的<strong>main</strong>方法，负责实际代码的执行工作。Driver在Spark作业执行时主要负责：</p><ol><li>将用户程序转化为作业（job）；</li><li>在Executor之间调度任务(task)；</li><li>跟踪Executor的执行情况；</li><li>通过UI展示查询运行情况；</li></ol><h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>Spark Executor节点是一个JVM进程，负责在 Spark 作业中运行具体任务，任务彼此之间相互独立。Spark 应用启动时，Executor节点被同时启动，并且始终伴随着整个 Spark 应用的生命周期而存在。如果有Executor节点发生了故障或崩溃，Spark 应用也可以继续执行，会将出错节点上的任务调度到其他Executor节点上继续运行。</p><p>Executor有两个核心功能：</p><ol><li>负责<strong>运行组成Spark应用的任务</strong>，并将结果返回给驱动器进程；</li><li>它们通过自身的块管理器（Block Manager）为用户程序中要求缓存的 RDD 提供内存式存储。<strong>RDD 是直接缓存在Executor进程内的</strong>，因此任务可以在运行时充分利用缓存数据加速运算。</li></ol><h2 id="Spark通用运行流程概述"><a href="#Spark通用运行流程概述" class="headerlink" title="Spark通用运行流程概述"></a>Spark通用运行流程概述</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830151813147.png" alt="image-20200830151813147"></p><p>图1-1为Spark通用运行流程，<strong>不论Spark以何种模式进行部署，任务提交后，都会先启动Driver进程</strong>，随后Driver进程向集群管理器注册应用程序，之后集群管理器根据此任务的配置文件分配Executor并启动，当Driver所需的资源全部满足后，<strong>Driver开始执行main函数，Spark查询为懒执行，当执行到action算子时开始反向推算</strong>，<font color="red">根据宽依赖进行stage的划分，随后每一个stage对应一个taskset，taskset中有多个task，根据本地化原则，task会被分发到指定的Executor去执行</font>，在任务执行的过程中，Executor也会不断与Driver进行通信，报告任务运行情况。</p><h1 id="Spark部署模式"><a href="#Spark部署模式" class="headerlink" title="Spark部署模式"></a>Spark部署模式</h1><p>Spark支持3种集群管理器（Cluster Manager），分别为：</p><ol><li><code>Standalone：</code>独立模式，Spark原生的简单集群管理器，自带完整的服务，可单独部署到一个集群中，<strong>无需依赖任何其他资源管理系统</strong>，使用Standalone可以很方便地搭建一个集群；</li><li><code>Apache Mesos：</code>一个强大的分布式资源管理框架，它允许多种不同的框架部署在其上，包括yarn；</li><li><code>Hadoop YARN：</code>统一的资源管理机制，在上面可以运行多套计算框架，如map reduce、storm等，<font color="red">根据driver在集群中的位置不同，分为yarn client和yarn cluster</font>。</li></ol><p>实际上，除了上述这些通用的集群管理器外，Spark内部也提供了一些方便用户测试和学习的简单集群部署模式。<font color="red"><strong>由于在实际工厂环境下使用的绝大多数的集群管理器是Hadoop YARN，因此我们关注的重点是Hadoop YARN模式下的Spark集群部署。</strong></font></p><p>Spark的运行模式取决于传递给<code>SparkContext</code>的<font color="red"><code>MASTER</code>环境变量的值</font>，个别模式还需要辅助的程序接口来配合使用，目前支持的Master字符串及URL包括：</p><table><thead><tr><th><strong>Master URL</strong></th><th><strong>Meaning</strong></th></tr></thead><tbody><tr><td><strong>local</strong></td><td>在本地运行，只有一个工作进程，无并行计算能力。</td></tr><tr><td><strong>local[K]</strong></td><td>在本地运行，有K个工作进程，通常设置K为机器的CPU核心数量。</td></tr><tr><td><strong>local[*]</strong></td><td>在本地运行，工作进程数量等于机器的CPU核心数量。</td></tr><tr><td><strong>spark://HOST:PORT</strong></td><td>以Standalone模式运行，这是Spark自身提供的集群运行模式，默认端口号: 7077。详细文档见:Spark  standalone cluster。</td></tr><tr><td><strong>mesos://HOST:PORT</strong></td><td>在Mesos集群上运行，Driver进程和Worker进程运行在Mesos集群上，部署模式必须使用固定值:–deploy-mode cluster。详细文档见:MesosClusterDispatcher.</td></tr><tr><td><strong>yarn-client</strong></td><td>在Yarn集群上运行，Driver进程在本地，Executor进程在Yarn集群上，部署模式必须使用固定值:–deploy-mode  client。Yarn集群地址必须在HADOOP_CONF_DIR or YARN_CONF_DIR变量里定义。</td></tr><tr><td><strong>yarn-cluster</strong></td><td>在Yarn集群上运行，Driver进程在Yarn集群上，Work进程也在Yarn集群上，部署模式必须使用固定值:–deploy-mode cluster。Yarn集群地址必须在HADOOP_CONF_DIR  or YARN_CONF_DIR变量里定义。</td></tr></tbody></table><p><strong>用户在提交任务给Spark处理时，以下两个参数共同决定了Spark的运行方式。</strong></p><ul><li><code>master MASTER_URL</code> ：决定了Spark任务提交<font color="red">给哪种集群处理。</font></li><li><code>deploy-mode DEPLOY_MODE</code>：决定了Driver的运行方式，<font color="red">可选值为Client或者Cluster。</font></li></ul><h2 id="Standalone模式运行机制"><a href="#Standalone模式运行机制" class="headerlink" title="Standalone模式运行机制"></a>Standalone模式运行机制</h2><p>Standalone集群有<strong>四个重要组成部分</strong>，分别是：</p><ol><li><code>Driver</code>：是一个进程，我们<strong>编写的Spark应用程序就运行在Driver上</strong>，由Driver进程执行；</li><li><code>Master(RM)</code>：是一个进程，<strong>主要负责资源的调度和分配</strong>，并进行集群的监控等职责；</li><li><code>Worker(NM)</code>：是一个进程，一个Worker运行在集群中的一台服务器上，主要负责两个职责，一个是用自己的内存存储RDD的某个或某些partition；另一个是启动其他进程和线程（Executor），对RDD上的partition进行并行的处理和计算。</li><li><code>Executor</code>：是一个进程，一个Worker上可以运行多个Executor，Executor通过启动多个线程（task）来执行对RDD的partition进行并行计算，也就是执行我们对RDD定义的例如map、flatMap、reduce等算子操作。</li></ol><h3 id="Standalone-Client模式"><a href="#Standalone-Client模式" class="headerlink" title="Standalone Client模式"></a>Standalone Client模式</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830152737351.png" alt="image-20200830152737351"></p><p>在Standalone Client模式下，<font color="red"><strong>Driver在任务提交的本地机器上运行</strong></font>：</p><ol><li>Driver启动会向Master注册应用程序</li><li>Master根据submit脚本的资源需求找到内部资源至少可以启动一个Executor的所有Worker</li><li>Worker之间分配Executor</li><li>Executor开启完毕后向Driver反馈</li><li><font color="red">Driver开始执行main函数，之后执行到Action算子时，开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。</font></li></ol><h3 id="Standalone-Cluster模式"><a href="#Standalone-Cluster模式" class="headerlink" title="Standalone Cluster模式"></a>Standalone Cluster模式</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830154509558.png" alt="image-20200830154509558"></p><p>在Standalone Cluster模式下，<font color="red"><strong>任务提交后，Master会找到一个Worker启动Driver进程</strong></font></p><ol><li>Driver启动会向Master注册应用程序</li><li>Master根据submit脚本的资源需求找到内部资源至少可以启动一个Executor的所有Worker</li><li>Worker之间分配Executor</li><li>Executor开启完毕后向Driver反馈</li><li><font color="red">Driver开始执行main函数，之后执行到Action算子时，开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。</font></li></ol><h2 id="Yarn模式运行机制🔺"><a href="#Yarn模式运行机制🔺" class="headerlink" title="Yarn模式运行机制🔺"></a>Yarn模式运行机制🔺</h2><h3 id="YARN-Client模式"><a href="#YARN-Client模式" class="headerlink" title="YARN Client模式"></a>YARN Client模式</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830155921502.png" alt="image-20200830155921502"></p><p>在YARN Client模式下，<font color="red"><strong>Driver在任务提交的本地机器上运行</strong></font></p><ol><li>Driver启动后会和ResourceManager通讯申请启动ApplicationMaster</li><li>ResourceManager分配container，在合适的NodeManager上启动ApplicationMaster</li><li>ApplicationMaster的功能相当于一个<font color="red"><code>ExecutorLaucher</code></font>，只负责向ResourceManager申请Executor内存。</li><li>ResourceManager接到ApplicationMaster的资源申请后会分配container，然后ApplicationMaster在资源分配指定的NodeManager上启动Executor进程</li><li><font color="red">Executor进程启动后会向Driver反向注册</font></li><li>Driver开始执行main函数，之后执行到Action算子时，触发一个job，并根据宽依赖开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。</li></ol><h3 id="YARN-Cluster模式🔺"><a href="#YARN-Cluster模式🔺" class="headerlink" title="YARN Cluster模式🔺"></a>YARN Cluster模式🔺</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830160157808.png" alt="image-20200830160157808"></p><p>在YARN Cluster模式下，<font color="red"><strong>任务提交后会和ResourceManager通讯申请启动ApplicationMaster</strong></font></p><ol><li>随后ResourceManager分配container，在合适的NodeManager上启动ApplicationMaster，此时的ApplicationMaster就是Driver。</li><li>Driver启动后向ResourceManager申请Executor内存</li><li>ResourceManager接到ApplicationMaster的资源申请后会分配container，然后在合适的NodeManager上启动Executor进程</li><li>Executor进程启动后会向Driver反向注册</li><li>Driver开始执行main函数，之后执行到Action算子时，触发一个job，并根据宽依赖开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。</li></ol><h1 id="YARN-Cluster模式源代码解读🔺🔺"><a href="#YARN-Cluster模式源代码解读🔺🔺" class="headerlink" title="YARN Cluster模式源代码解读🔺🔺"></a>YARN Cluster模式源代码解读🔺🔺</h1><h2 id="Spark-Submit"><a href="#Spark-Submit" class="headerlink" title="Spark Submit"></a>Spark Submit</h2><p><strong>1. YARN Cluster的计算由命令开始：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">-- master MASTER_URL yarn\</span><br><span class="line">-- deploy-mode cluster \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p><em>调用命令的本质就是启动了SparkSubmit的进程，通过Java命令：</em></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830162407076.png" alt="image-20200830162407076"></p><p><font color="red"><em>所以，当执行后，此节点会立马开启了一个进程：<code>SparkSubmit</code></em></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830162517111.png" alt="image-20200830162517111"></p><h3 id="SparkSubmitArguments参数封装"><a href="#SparkSubmitArguments参数封装" class="headerlink" title="SparkSubmitArguments参数封装"></a>SparkSubmitArguments参数封装</h3><p>因为<code>SparkSubmit</code>是通过<code>java xxx</code>命令执行的，所以我们需要直接查看它的main方法：</p><p>图中圈出的部分是代码的参数验证，它限制了部署模式必须是<code>client</code>、<code>cluster</code>的一种</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830163439950.png" alt="image-20200830163439950"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830163544480.png" alt="image-20200830163544480"></p><h3 id="submit提交"><a href="#submit提交" class="headerlink" title="submit提交"></a>submit提交</h3><p>之后参数验证完毕后，根据提交状态，我们可以确定它执行了<code>case SparkSubmitAction.SUBMIT =&gt; submit(appArgs)</code></p><p>submit函数中分别调用了：</p><ul><li><code>prepareSubmitEnvironment</code></li><li><code>doRunMain</code></li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830164234921.png" alt="image-20200830164234921"></p><h4 id="prepareSubmitEnvironment提交环境准备"><a href="#prepareSubmitEnvironment提交环境准备" class="headerlink" title="prepareSubmitEnvironment提交环境准备"></a>prepareSubmitEnvironment提交环境准备</h4><p>在<code>prepareSubmitEnvironment</code>方法的源代码中我们找到了关键部分</p><p>发现<code>prepareSubmitEnvironment</code>的返回值<code>childMainClass</code>被赋值为了<font color="red">**<code>org.apache.spark.deploy.yarn.Client</code>**</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830164713753.png" alt="image-20200830164713753"></p><h4 id="doRunMain"><a href="#doRunMain" class="headerlink" title="doRunMain"></a>doRunMain</h4><p>在运行<code>doRunMain</code>方法内部时将<code>prepareSubmitEnvironment</code>方法的返回值<code>childMainClass</code>传入了新方法<code>runMain</code>，此时它的值是**<code>org.apache.spark.deploy.yarn.Client</code>**</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830165235145.png" alt="image-20200830165235145"></p><h5 id="runMain"><a href="#runMain" class="headerlink" title="runMain"></a>runMain</h5><p>发现此方法对传入的<code>childMainClass</code>即：**<code>org.apache.spark.deploy.yarn.Client</code><strong>进行了返回获取实体类，<font color="red">**并且判断它的main方法，并调用！！！</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830165939807.png" alt="image-20200830165939807"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830170053716.png" alt="image-20200830170053716"></p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>上面说到Spark Submit的main方法里面以反射调用了<code>org.apache.spark.deploy.yarn.Client</code>的main方法，下面开始查看<code>org.apache.spark.deploy.yarn.Client</code>的main方法。</p><p>发现：</p><ol><li>执行了参数封装</li><li>开启线程执行Client的逻辑，注意这里不是以java命令执行的，所以不会开启进程，而是以线程方式执行的，只会开启一个线程。</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830170750827.png" alt="image-20200830170750827"></p><h3 id="ClientArguments"><a href="#ClientArguments" class="headerlink" title="ClientArguments"></a>ClientArguments</h3><p>参数封装时，对我们最开始sparksubmit时指定的class进行了封装</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830170956395.png" alt="image-20200830170956395"></p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p><code>new Client(args, sparkConf).run()</code>，以线程的方式运行了Client线程的逻辑。</p><p>上面可以分为两种逻辑：</p><ol><li>new Client</li><li>client.run</li></ol><h4 id="new-Client"><a href="#new-Client" class="headerlink" title="new Client"></a>new Client</h4><p>查看它的构造方法，发现它创建了对象<code>private val yarnClient = YarnClient.createYarnClient</code></p><p>再次查看对象<code>YarnClient</code>的内容，发现它有RM，ResourceManager的地址。</p><p><font color="red"><strong>所以，Client类可以通过对象<code>yarnClient </code>来与<code>ResourceManager</code>进行交互。</strong></font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">ApplicationClientProtocol</span> rmClient;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">InetSocketAddress</span> rmAddress;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830171947757.png" alt="image-20200830171947757"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830172001381.png" alt="image-20200830172001381"></p><h4 id="client-run"><a href="#client-run" class="headerlink" title="client.run"></a><strong>client.run</strong></h4><p>发现方法<code>submitApplication</code>返回了appId，appId是Yarn中的概念，是一个唯一ID，每个执行任务唯一的对应一个。<font color="red">所以<code>submitApplication</code>是一个与Yarn交互并获取到appId的方法。</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830172804937.png" alt="image-20200830172804937"></p><p>例如，以下以spark-shell的yarn client模式运行的就有appId。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830173010937.png" alt="image-20200830173010937"></p><h5 id="submitApplication🔺"><a href="#submitApplication🔺" class="headerlink" title="submitApplication🔺"></a>submitApplication🔺</h5><p>[上述的yarnClient](#new Client)是一个保存着RM地址的对象，它在submitApplication方法中开始对RM进行了连接。</p><ol><li>同时向RM进行了资源的申请，通过RM的反馈<code>newAppResponse</code>得到了Yarn的唯一id</li><li>构建应用AM的指令</li><li>申请RM执行应用！！！</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830173429640.png" alt="image-20200830173429640"></p><h6 id="createContainerLaunchContext🔺"><a href="#createContainerLaunchContext🔺" class="headerlink" title="createContainerLaunchContext🔺"></a>createContainerLaunchContext🔺</h6><p><font color="red"><strong>AM执行封装指令，command</strong></font></p><p>此方法是<code>logInfo(&quot;Setting up container launch context for our AM&quot;)</code>，启动context for our AM的指令内容。</p><p>发现：</p><ol><li>cluster模式构建的Java命令启动的是<code>org.apache.spark.deploy.yarn.ApplicationMaster</code></li><li>client模式构建的Java命令启动的是<code>org.apache.spark.deploy.yarn.ExecutorLauncher</code></li></ol><p><font color="red"><strong>注意：因为是以Java命令通知RM启动的，RM会寻找一个NM来通过Java命令启动，所以以<code>ApplicationMaster</code>为例，它启动的应该是进程。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830174128613.png" alt="image-20200830174128613"></p><p>例如，以下以spark-shell的yarn client模式运行的启动的是<code>ExecutorLauncher</code>。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830174427258.png" alt="image-20200830174427258"></p><h2 id="ApplicationMaster🔺"><a href="#ApplicationMaster🔺" class="headerlink" title="ApplicationMaster🔺"></a>ApplicationMaster🔺</h2><p><font color="red"><strong>ApplicationMaster是以进程启动的</strong></font></p><p>上面得知，通过java命令的方法开启了一台NM执行AM，所以下面查看AM的main：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830180331230.png" alt="image-20200830180331230"></p><h3 id="master-run"><a href="#master-run" class="headerlink" title="master.run"></a>master.run</h3><p>此方法中的关键点：在AM中运行</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830180521026.png" alt="image-20200830180521026"></p><h4 id="runDriver"><a href="#runDriver" class="headerlink" title="runDriver"></a>runDriver</h4><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830180708534.png" alt="image-20200830180708534"></p><h5 id="startUserApplication：启动Driver类的main"><a href="#startUserApplication：启动Driver类的main" class="headerlink" title="startUserApplication：启动Driver类的main"></a>startUserApplication：启动Driver类的main</h5><p>此方法是启动Driver类，也就是我们自己编写的带有<code>sparkContext</code>的类，同时也是最开始spark-submit提交时class的参数的类。</p><ol><li>通过一直传递的参数，开始获取我们编写的类</li><li>获取到类后，通过反射获取到main函数</li><li>然后通过反射调用main函数</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830180856820.png" alt="image-20200830180856820"></p><h5 id="registerAM"><a href="#registerAM" class="headerlink" title="registerAM"></a>registerAM</h5><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830182105200.png" alt="image-20200830182105200"></p><h6 id="allocateResources"><a href="#allocateResources" class="headerlink" title="allocateResources"></a>allocateResources</h6><p>RM向AM申请资源：</p><p>由上面可知amClient是存储了AM地址的对象，由此对象连接AM获取可分配的资源</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830182245257.png" alt="image-20200830182245257"></p><h6 id="handleAllocatedContainers分配开启容器"><a href="#handleAllocatedContainers分配开启容器" class="headerlink" title="handleAllocatedContainers分配开启容器"></a>handleAllocatedContainers分配开启容器</h6><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830182438026.png" alt="image-20200830182438026"></p><h6 id="runAllocatedContainers"><a href="#runAllocatedContainers" class="headerlink" title="runAllocatedContainers"></a>runAllocatedContainers</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Launches executors in the allocated containers.</span><br></pre></td></tr></table></figure><p>在每个分配的容器中启动执行程序。看到启动了一个ExecutorRunnable的线程在线程池里。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830182553599.png" alt="image-20200830182553599"></p><h6 id="ExecutorRunnable"><a href="#ExecutorRunnable" class="headerlink" title="ExecutorRunnable"></a>ExecutorRunnable</h6><p>看到此线程的逻辑就是通过<code>nmClient</code>连接NM节点开始<code>container</code></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830182659297.png" alt="image-20200830182659297"></p><p><font color="red"><strong>那么，是如何开启Container容器呢</strong></font></p><h6 id="startContainer🔺"><a href="#startContainer🔺" class="headerlink" title="startContainer🔺"></a>startContainer🔺</h6><p>发现此方法中又调用了方法<code>val commands = prepareCommand()</code>来<font color="red">生成Java命令行命令来开启<code>org.apache.spark.executor.CoarseGrainedExecutorBackend</code></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830183133066.png" alt="image-20200830183133066"></p><p><font color="red"><strong>所以Container容器中开启了<code>CoarseGrainedExecutorBackend</code>，它是来计算任务的，即Executor的后台。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830183322800.png" alt="image-20200830183322800"></p><h2 id="CoarseGrainedExecutorBackend"><a href="#CoarseGrainedExecutorBackend" class="headerlink" title="CoarseGrainedExecutorBackend"></a>CoarseGrainedExecutorBackend</h2><p><font color="red"><strong>CoarseGrainedExecutorBackend是以进程启动的</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830183429858.png" alt="image-20200830183429858"></p><h3 id="run-1"><a href="#run-1" class="headerlink" title="run"></a>run</h3><p>发现它新建了一个计算<strong>终端</strong>环境，通过查看它的类时：<code>CoarseGrainedExecutorBackend</code></p><p>发现了新的属性<code>var executor: Executor = null</code>，这时发现此对象才是计算的根本！！。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830183711553.png" alt="image-20200830183711553"></p><p>发现它继承了<code>ThreadSafeRpcEndpoint</code>，而<code>ThreadSafeRpcEndpoint</code>终端有四个生命周期：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830183921529.png" alt="image-20200830183921529"></p><p>因为CoarseGrainedExecutorBackend继承了它，所以他也是个终端，且CoarseGrainedExecutorBackend开启后会执行onStart中定义的事情：在Container的CoarseGrainedExecutorBackend创建完毕后会向Driver所在的终端发送Executor启动完毕的信息</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830184011123.png" alt="image-20200830184011123"></p><p>而我们Driver的收到信息后，会反馈给CoarseGrainedExecutorBackend，CoarseGrainedExecutorBackend收到信息后执行以下内容，创建计算对象，上面讲到CoarseGrainedExecutorBackend并不是一个计算对象，有着计算作用的是它的属性<code>executor</code>，这时创建<code>executor</code>属性</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830184231615.png" alt="image-20200830184231615"></p><p>以上资源调度完事，Executor已经启动</p><h2 id="总结🔺"><a href="#总结🔺" class="headerlink" title="总结🔺"></a>总结🔺</h2><p>上面的源码已经完全的解释了下图：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830185102697.png" alt="image-20200830185102697"></p><p>由源码的流程可看出共启动了以下几种进程：</p><ol><li>spark-submit：发布任务的客户端启动</li><li>ApplicationMaster：RM随机找一台NM启动</li><li>CoarseGrainedExecutorBackend：AM申请到的NM中的Container中启动，此进程中的CoarseGrainedExecutorBackend对象的Executor属性才是计算的属性</li></ol><hr><h1 id="Spark-任务调度机制"><a href="#Spark-任务调度机制" class="headerlink" title="Spark 任务调度机制"></a>Spark 任务调度机制</h1><p>在工厂环境下，Spark集群的部署方式一般为YARN-Cluster模式，之后的内核分析内容中我们默认集群的部署方式为YARN-Cluster模式。</p><h2 id="Spark任务提交流程"><a href="#Spark任务提交流程" class="headerlink" title="Spark任务提交流程"></a>Spark任务提交流程</h2><p>在上一章中我们讲解了Spark YARN-Cluster模式下的任务提交流程</p><p>下面的时序图清晰地说明了一个Spark应用程序从提交到运行的完整流程：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830185555274.png" alt="image-20200830185555274"></p><p>提交一个Spark应用程序，首先通过Client向ResourceManager请求启动一个Application，同时检查是否有足够的资源满足Application的需求，如果资源条件满足，则准备ApplicationMaster的启动上下文，交给ResourceManager，并循环监控Application状态。</p><p>当提交的资源队列中有资源时，ResourceManager会在某个NodeManager上启动ApplicationMaster进程，<font color="red">ApplicationMaster会单独启动Driver后台线程，当Driver启动后，ApplicationMaster会通过本地的RPC连接Driver</font>，并开始向ResourceManager申请Container资源运行Executor进程（一个Executor对应与一个Container），当ResourceManager返回Container资源，ApplicationMaster则在对应的Container上启动Executor。</p><p>Driver线程主要是初始化SparkContext对象，准备运行所需的上下文，然后一方面保持与ApplicationMaster的RPC连接，通过ApplicationMaster申请资源，另一方面根据用户业务逻辑开始调度任务，将任务下发到已有的空闲Executor上。</p><p>当ResourceManager向ApplicationMaster返回Container资源时，ApplicationMaster就尝试在对应的Container上启动Executor进程，<font color="red">Executor进程起来后，会向Driver反向注册，注册成功后保持与Driver的心跳，同时等待Driver分发任务，当分发的任务执行完毕后，将任务状态上报给Driver。</font></p><p>从上述时序图可知，Client只负责提交Application并监控Application的状态。对于Spark的任务调度主要是集中在两个方面: <strong>资源申请和任务分发</strong>，其主要是通过ApplicationMaster、Driver以及Executor之间来完成。</p><h2 id="Spark任务调度概述🔺"><a href="#Spark任务调度概述🔺" class="headerlink" title="Spark任务调度概述🔺"></a>Spark任务调度概述🔺</h2><p>当Driver起来后，Driver则会根据用户程序逻辑准备任务，并根据Executor资源情况逐步分发任务。在详细阐述任务调度前，首先说明下Spark里的几个概念。一个Spark应用程序包括Job、Stage以及Task三个概念：</p><ul><li> Job是以Action方法为界，遇到一个Action方法则触发一个Job；</li><li>Stage是Job的子集，以RDD宽依赖(即Shuffle)为界，遇到Shuffle做一次划分；</li><li> Task是Stage的子集，以并行度(分区数)来衡量，分区数是多少，则有多少个task。</li></ul><p>Spark的任务调度总体来说分两路进行，<font color="red"><strong>一路是Stage级的调度，一路是Task级的调度</strong></font>，总体调度流程如下图所示：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830190028855.png" alt="image-20200830190028855"></p><p>Spark RDD通过其Transactions操作，形成了RDD血缘关系图，即DAG，最后通过Action的调用，触发Job并调度执行。</p><p><font color="red"><strong>DAGScheduler负责Stage级的调度</strong></font>，主要是将job切分成若干Stages，并将每个Stage打包成TaskSet交给TaskScheduler调度。</p><p><font color="red"><strong>TaskScheduler负责Task级的调度</strong></font>，将DAGScheduler给过来的TaskSet按照指定的调度策略分发到Executor上执行，调度过程中SchedulerBackend负责提供可用资源，其中<strong>SchedulerBackend有多种实现，分别对接不同的资源管理系统</strong>。</p><p>下面这张图描述了Spark-On-Yarn模式下在任务调度期间，ApplicationMaster、Driver以及Executor内部模块的交互过程：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830190229195.png" alt="image-20200830190229195"></p><h2 id="Spark-Stage级调度🔺"><a href="#Spark-Stage级调度🔺" class="headerlink" title="Spark Stage级调度🔺"></a>Spark Stage级调度🔺</h2><p>Spark的任务调度是从DAG切割开始，主要是由DAGScheduler来完成。当遇到一个Action操作后就会触发一个Job的计算，并交给DAGScheduler来提交，下图是涉及到Job提交的相关方法调用流程图。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830190303628.png" alt="image-20200830190303628"></p><p><font color="red">**<code>dag.submit</code>**提交stage时先提交第一个Stage，在Stage切分阶段除了最后一个Stage叫<code>ResultStage</code>只进行Shuffle Read，其余Stage均称为<code>ShuffleMapStage</code>均进行Shuffle Read和Write，除了第一个不进行Read</font></p><p>Job由最终的RDD和Action方法封装而成，SparkContext将Job交给DAGScheduler提交，它会根据RDD的血缘关系构成的DAG进行切分，将一个Job划分为若干Stages，<font color="red">具体划分策略是，由最终的RDD不断通过依赖回溯判断父依赖是否是宽依赖，即以Shuffle为界，划分Stage，窄依赖的RDD之间被划分到同一个Stage中，可以进行pipeline式的计算</font></p><p>如图紫色流程部分。划分的Stages分两类，一类叫做ResultStage，<strong>为DAG最下游的Stage</strong>，由Action方法决定，<strong>另一类叫做ShuffleMapStage，为下游Stage准备数据</strong>，下面看一个简单的例子WordCount。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830190837690.png" alt="image-20200830190837690"></p><p>Job由saveAsTextFile触发，该Job由RDD-3和saveAsTextFile方法组成，根据RDD之间的依赖关系从RDD-3开始回溯搜索，直到没有依赖的RDD-0，<strong>在回溯搜索过程中，RDD-3依赖RDD-2，并且是宽依赖</strong>，所以在RDD-2和RDD-3之间划分Stage，RDD-3被划到最后一个Stage，即ResultStage中，RDD-2依赖RDD-1，RDD-1依赖RDD-0，这些依赖都是窄依赖，所以将RDD-0、RDD-1和RDD-2划分到同一个Stage<strong>，即ShuffleMapStage中，实际执行的时候，数据记录会一气呵成地执行RDD-0到RDD-2的转化</strong>。不难看出，其本质上是一个深度优先搜索算法。</p><p><font color="red">一个Stage是否被提交，需要判断它的父Stage是否执行，只有在父Stage执行完毕才能提交当前Stage，如果一个Stage没有父Stage，那么从该Stage开始提交。Stage提交时会将Task信息（分区信息以及方法等）序列化并被打包成TaskSet交给TaskScheduler</font>，一个Partition对应一个Task，另一方面TaskScheduler会监控Stage的运行状态，只有Executor丢失或者Task由于Fetch失败才需要重新提交失败的Stage以调度运行失败的任务，其他类型的Task失败会在TaskScheduler的调度过程中重试。</p><p>相对来说DAGScheduler做的事情较为简单，仅仅是在Stage层面上划分DAG，提交Stage并监控相关状态信息。TaskScheduler则相对较为复杂，下面详细阐述其细节。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>DAGScheduler就是对整个Job进行了Stage的切分，并对每个Stage的多个Task封装为TaskSet交给TaskScheduler。</p><p>DAGScheduler在提交Stage时，从第一个往后提交，因为每个Stage之间都存在Shuffle，需要上个Stage的Shuffle Wrtire的数据</p><h2 id="Spark-Task级调度"><a href="#Spark-Task级调度" class="headerlink" title="Spark Task级调度"></a>Spark Task级调度</h2><p>Spark Task的调度是由TaskScheduler来完成，由前文可知，DAGScheduler将Stage打包到TaskSet交给TaskScheduler，TaskScheduler会将TaskSet封装为TaskSetManager到调度队列中，TaskSetManager结构如下图所示。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830191254343.png" alt="image-20200830191254343"></p><p><font color="red"><strong>TaskSetManager负责监控管理同一个Stage中的Tasks，TaskScheduler就是以TaskSetManager为单元来调度任务。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830191444090.png" alt="image-20200830191444090"></p><p>前面也提到，<font color="red">TaskScheduler初始化后会启动SchedulerBackend，它负责跟外界打交道，接收Executor的注册信息，并维护Executor的状态</font>，所以说SchedulerBackend是管“获取任务”的，同时它在启动后会定期地去“询问”TaskScheduler有没有任务要运行，TaskScheduler在SchedulerBackend“问”它的时候，会从调度队列中按照指定的调度策略选择TaskSetManager去调度运行，大致方法调用流程如下图所示：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830191635299.png" alt="image-20200830191635299"></p><p>SchedulerBackEnd收到待执行的任务后从TaskSetPool，开始联系Executor开始执行</p><h3 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h3><p>前面讲到，TaskScheduler会先把DAGScheduler给过来的TaskSet封装成TaskSetManager扔到任务队列里，然后再从任务队列里按照一定的规则把它们取出来在SchedulerBackend给过来的Executor上运行。<font color="red">这个调度过程实际上还是比较粗粒度的，是面向TaskSetManager的</font></p><p>TaskScheduler是以树的方式来管理任务队列，树中的节点类型为Schdulable，叶子节点为TaskSetManager，非叶子节点为Pool，下图是它们之间的继承关系。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830192011398.png" alt="image-20200830192011398"></p><p>TaskScheduler支持两种调度策略，<strong>一种是FIFO，也是默认的调度策略，另一种是FAIR</strong>。在TaskScheduler初始化过程中会实例化rootPool，表示树的根节点，是Pool类型。</p><h3 id="失败重试和黑名单"><a href="#失败重试和黑名单" class="headerlink" title="失败重试和黑名单"></a>失败重试和黑名单</h3><p>除了选择合适的Task调度运行外，还需要监控Task的执行状态，前面也提到，与外部打交道的是<code>SchedulerBackend</code>，Task被提交到Executor启动执行后，Executor会将执行状态上报给SchedulerBackend，SchedulerBackend则告诉TaskScheduler，TaskScheduler找到该Task对应的TaskSetManager，并通知到该TaskSetManager，这样TaskSetManager就知道Task的失败与成功状态，<font color="red">对于失败的Task，会记录它失败的次数，如果失败次数还没有超过最大重试次数，那么就把它放回待调度的Task池子中，否则整个Application失败。</font></p><p><font color="red">在记录Task失败次数过程中，会记录它上一次失败所在的Executor Id和Host，这样下次再调度这个Task时，会使用黑名单机制，避免它被调度到上一次失败的节点上，起到一定的容错作用。</font>黑名单记录Task上一次失败所在的Executor Id和Host，以及其对应的“拉黑”时间，“拉黑”时间是指这段时间内不要再往这个节点上调度这个Task了。</p><h1 id="Spark-Shuffle解析"><a href="#Spark-Shuffle解析" class="headerlink" title="Spark Shuffle解析"></a>Spark Shuffle解析</h1><h2 id="Shuffle要点"><a href="#Shuffle要点" class="headerlink" title="Shuffle要点"></a>Shuffle要点</h2><h3 id="ShuffleMapStage与ResultStage"><a href="#ShuffleMapStage与ResultStage" class="headerlink" title="ShuffleMapStage与ResultStage"></a>ShuffleMapStage与ResultStage</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831205831081.png" alt="image-20200831205831081"></p><p>在划分stage时，最后一个stage称为finalStage，它本质上是一个ResultStage对象，前面的所有stage被称为ShuffleMapStage。</p><p>ShuffleMapStage的结束伴随着shuffle文件的写磁盘。除了第一个ShuffleMapStage，剩余的也都会读读盘。</p><p>ResultStage基本上对应代码中的action算子，即将一个函数应用在RDD的各个partition的数据集上，意味着一个job的运行结束。</p><h3 id="Shuffle中任务个数"><a href="#Shuffle中任务个数" class="headerlink" title="Shuffle中任务个数"></a>Shuffle中任务个数</h3><p>我们知道，Spark Shuffle分为map阶段和reduce阶段，或者称之为<code>ShuffleRead</code>阶段和<code>ShuffleWrite</code>阶段，那么对于一次Shuffle，map过程和reduce过程都会由若干个task来执行，那么map task和reduce task的数量是如何确定的呢？</p><p>假设Spark任务从HDFS中读取数据，<font color="red">那么初始RDD分区个数由该文件的split个数决定</font>，也就是一个split对应生成的RDD的一个partition，我们假设初始partition个数为N。</p><p>初始RDD经过一系列算子计算后（<strong>假设没有执行repartition和coalesce算子进行重分区</strong>，则分区个数不变，仍为N，如果经过重分区算子，那么分区个数变为M），我们假设分区个数不变，<font color="red">当执行到Shuffle操作时，map端的task个数和partition个数一致，即map task为N个。</font></p><p><font color="red"><strong>reduce端的stage默认取spark.default.parallelism这个配置项的值作为分区数，如果没有配置，则以map端的最后一个RDD的分区数作为其分区数（也就是N），那么分区数就决定了reduce端的task的个数。</strong></font></p><h3 id="Reduce端数据的读取"><a href="#Reduce端数据的读取" class="headerlink" title="Reduce端数据的读取"></a>Reduce端数据的读取</h3><p>根据stage的划分我们知道，map端task和reduce端task不在相同的stage中，map task位于ShuffleMapStage，reduce task位于ResultStage，map task会先执行，那么后执行的reduce task如何知道从哪里去拉取map task落盘后的数据呢？</p><p>reduce端的数据拉取过程如下：</p><ol><li>map task 执行完毕后会将计算状态以及磁盘小文件位置等信息封装到MapStatus对象中，然后由本进程中的MapOutPutTrackerWorker对象将mapStatus对象发送给Driver进程的MapOutPutTrackerMaster对象；</li><li>在reduce task开始执行之前会先让本进程中的MapOutputTrackerWorker向Driver进程中的MapoutPutTrakcerMaster发动请求，请求磁盘小文件位置信息；</li><li> 当所有的Map task执行完毕后，Driver进程中的MapOutPutTrackerMaster就掌握了所有的磁盘小文件的位置信息。此时MapOutPutTrackerMaster会告诉MapOutPutTrackerWorker磁盘小文件的位置信息；</li><li>完成之前的操作之后，由BlockTransforService去Executor0所在的节点拉数据，默认会启动五个子线程。每次拉取的数据量不能超过48M（reduce task每次最多拉取48M数据，将拉来的数据存储到Executor内存的20%内存中）。</li></ol><h2 id="HashShuffle"><a href="#HashShuffle" class="headerlink" title="HashShuffle"></a>HashShuffle</h2><p>以下的讨论都假设每个Executor有1个CPU core。</p><h3 id="未经优化的HashShuffleManager"><a href="#未经优化的HashShuffleManager" class="headerlink" title="未经优化的HashShuffleManager"></a>未经优化的HashShuffleManager</h3><p>默认shuffle前后分区是不变的，所以没有优化后的HashShuffleManager每个Task任务都会生成n个文件，n是分区数，但是这样生成的文件太多，效率太慢</p><p>shuffle write阶段，主要就是在一个stage结束计算之后，为了下一个stage可以执行shuffle类的算子（比如reduceByKey），而将每个task处理的数据按key进行“划分”。<font color="red">所谓“划分”，就是对相同的key执行hash算法，从而将相同key都写入同一个磁盘文件中，而每一个磁盘文件都只属于下游stage的一个task。</font>在将数据写入磁盘之前，会先将数据写入内存缓冲中，当内存缓冲填满之后，才会溢写到磁盘文件中去。</p><p><font color="red"><strong>下一个stage的task有多少个，当前stage的每个task就要创建多少份磁盘文件。</strong></font>比如下一个stage总共有100个task，那么当前stage的每个task都要创建100份磁盘文件。如果当前stage有50个task，总共有10个Executor，每个Executor执行5个task，那么每个Executor上总共就要创建500个磁盘文件，所有Executor上会创建5000个磁盘文件。由此可见，未经优化的shuffle write操作所产生的磁盘文件的数量是极其惊人的。</p><p>shuffle read阶段，通常就是一个stage刚开始时要做的事情。<font color="red">此时该stage的每一个task就需要将上一个stage的计算结果中的所有相同key，从各个节点上通过网络都拉取到自己所在的节点上，然后进行key的聚合或连接等操作。</font>由于shuffle write的过程中，map task给下游stage的每个reduce task都创建了一个磁盘文件，因此shuffle read的过程中，每个reduce task只要从上游stage的所有map task所在节点上，拉取属于自己的那一个磁盘文件即可。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831213230836.png" alt="image-20200831213230836"></p><h3 id="优化后的HashShuffleManager"><a href="#优化后的HashShuffleManager" class="headerlink" title="优化后的HashShuffleManager"></a>优化后的HashShuffleManager</h3><p>为了优化HashShuffleManager我们可以设置一个参数，spark.shuffle. consolidateFiles，该参数默认值为false，将其设置为true即可开启优化机制，通常来说，如果我们使用HashShuffleManager，那么都建议开启这个选项。</p><p>开启consolidate机制之后，在shuffle write过程中，task就不是为下游stage的每个task创建一个磁盘文件了，此时会出现<strong>shuffleFileGroup</strong>的概念，<font color="red">每个shuffleFileGroup会对应一批磁盘文件，磁盘文件的数量与下游stage的task数量是相同的。</font>一个Executor上有多少个CPU core，就可以并行执行多少个task。而第一批并行执行的每个task都会创建一个shuffleFileGroup，并将数据写入对应的磁盘文件内。</p><p>当Executor的CPU core执行完一批task，<font color="red">接着执行下一批task时，下一批task就会复用之前已有的shuffleFileGroup，包括其中的磁盘文件，</font>也就是说，此时task会将数据写入已有的磁盘文件中，而不会写入新的磁盘文件中。因此，consolidate机制允许不同的task复用同一批磁盘文件，这样就可以有效将多个task的磁盘文件进行一定程度上的合并，从而大幅度减少磁盘文件的数量，进而提升shuffle write的性能。</p><p>也就是Executor的每个核core会创建n个文件，n是下个stage的并行度。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831213702651.png" alt="image-20200831213702651"></p><h2 id="SortShuffle解析🔺"><a href="#SortShuffle解析🔺" class="headerlink" title="SortShuffle解析🔺"></a>SortShuffle解析🔺</h2><p>SortShuffleManager的运行机制主要分成两种，<strong>一种是普通运行机制，另一种是bypass运行机制。</strong><font color="red">当shuffle read task的数量小于等于spark.shuffle.sort. bypassMergeThreshold参数的值时（默认为200），就会启用bypass机制。</font></p><h3 id="普通运行机制"><a href="#普通运行机制" class="headerlink" title="普通运行机制"></a>普通运行机制</h3><p>在该模式下，<font color="red">数据会先写入一个内存数据结构中，</font>此时根据不同的shuffle算子，可能选用不同的数据结构。<strong>如果是reduceByKey这种聚合类的shuffle算子，那么会选用Map数据结构</strong>，一边通过Map进行聚合，一边写入内存；<strong>如果是join这种普通的shuffle算子，那么会选用Array数据结构</strong>，直接写入内存。接着，每写一条数据进入内存数据结构之后，就会判断一下，是否达到了某个临界阈值。<strong>如果达到临界阈值的话，那么就会尝试将内存数据结构中的数据溢写到磁盘，然后清空内存数据结构。</strong></p><p><font color="red">在溢写到磁盘文件之前，会先根据key对内存数据结构中已有的数据进行排序。排序过后，会分批将数据写入磁盘文件。</font>默认的batch数量是10000条，也就是说，排序好的数据，会以每批1万条数据的形式分批写入磁盘文件。写入磁盘文件是通过Java的BufferedOutputStream实现的。BufferedOutputStream是Java的缓冲输出流，首先会将数据缓冲在内存中，当内存缓冲满溢之后再一次写入磁盘文件中，这样可以减少磁盘IO次数，提升性能。</p><p><font color="red">一个task将所有数据写入内存数据结构的过程中，会发生多次磁盘溢写操作，也就会产生多个临时文件。最后会将之前所有的临时磁盘文件都进行合并，这就是merge过程，此时会将之前所有临时磁盘文件中的数据读取出来，然后依次写入最终的磁盘文件之中。</font>此外，由于一个task就只对应一个磁盘文件，<strong>也就意味着该task为下游stage的task准备的数据都在这一个文件中，因此还会单独写一份索引文件</strong>，其中标识了下游各个task的数据在文件中的start offset与end offset。</p><p>这与Kafka中的Partition的索引文件、日志文件思想类似，通过索引来使文件读取加快</p><p>普通运行机制的SortShuffleManager工作原理如图所示：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831214716757.png" alt="image-20200831214716757"></p><p><font color="red">*<em>总结来说，有几个并行任务就有几个文件，相对于优化后的HashShuffleManager，它是有几个核心，既有几个核心</em>并行度（主要取决于并行度）的文件。**</font></p><h3 id="ByPass机制"><a href="#ByPass机制" class="headerlink" title="ByPass机制"></a>ByPass机制</h3><p>bypass运行机制的触发条件如下：</p><ul><li>shuffle map task数量小于spark.shuffle.sort.bypassMergeThreshold参数的值。</li><li>不是聚合类的shuffle算子。</li></ul><p>此时，每个task会为每个下游task都创建一个临时磁盘文件，并将数据按key进行hash然后根据key的hash值，将key写入对应的磁盘文件之中。当然，写入磁盘文件时也是先写入内存缓冲，缓冲写满之后再溢写到磁盘文件的。最后，同样会将所有临时磁盘文件都合并成一个磁盘文件，并创建一个单独的索引文件。</p><p><font color="red">该过程的磁盘写机制其实跟未经优化的HashShuffleManager是一模一样的，因为都要创建数量惊人的磁盘文件，只是在最后会做一个磁盘文件的合并而已。</font>因此少量的最终磁盘文件，也让该机制相对未经优化的HashShuffleManager来说，shuffle read的性能会更好。</p><p>而该机制与普通SortShuffleManager运行机制的不同在于：</p><ol><li>第一，<strong>磁盘写机制不同；</strong></li><li>第二，<strong>不会进行排序。也就是说，启用该机制的最大好处在于，shuffle write过程中，不需要进行数据的排序操作，也就节省掉了这部分的性能开销。</strong></li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831214852355.png" alt="image-20200831214852355"></p><h1 id="Spark内存管理"><a href="#Spark内存管理" class="headerlink" title="Spark内存管理"></a>Spark内存管理</h1><p>在执行Spark 的应用程序时，Spark 集群会启动 Driver 和 Executor 两种 JVM 进程，前者为主控进程，负责创建 Spark 上下文，提交 Spark 作业（Job），并将作业转化为计算任务（Task），在各个 Executor 进程间协调任务的调度，后者负责在工作节点上执行具体的计算任务，并将结果返回给 Driver，同时为需要持久化的 RDD 提供存储功能。由于 Driver 的内存管理相对来说较为简单，本节主要对 Executor 的内存管理进行分析，下文中的 Spark 内存均特指 Executor 的内存。</p><h2 id="内存空间分配"><a href="#内存空间分配" class="headerlink" title="内存空间分配"></a>内存空间分配</h2><h3 id="统一内存管理"><a href="#统一内存管理" class="headerlink" title="统一内存管理"></a>统一内存管理</h3><p>Spark 1.6 之后引入的统一内存管理机制，存储内存和执行内存共享同一块空间，可以动态占用对方的空闲区域，统一内存管理的堆内内存结构如图所示：</p><p><strong>堆外内存</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831215139324.png" alt="image-20200831215139324"></p><p><strong>堆内内存</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831215144277.png" alt="image-20200831215144277"></p><ul><li>storage：存储RDD缓存</li><li>Executor：进行计算需要的内存</li><li>Other：用户自定义的数据结构和未缓存的RDD</li></ul><p><font color="red">其中最重要的优化在于动态占用机制，其规则如下：</font></p><ol><li>   设定基本的存储内存和执行内存区域（spark.storage.storageFraction 参数），该设定确定了双方各自拥有的空间的范围；</li><li>   双方的空间都不足时，则存储到硬盘；若己方空间不足而对方空余时，可借用对方的空间;（存储空间不足是指不足以放下一个完整的 Block）</li><li>   <strong>执行内存的空间被对方占用后，可让对方将占用的部分转存到硬盘，然后”归还”借用的空间；</strong></li><li>   <strong>存储内存的空间被对方占用后，无法让对方”归还”，因为需要考虑 Shuffle 过程中的很多因素，实现起来较为复杂。</strong></li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831215719557.png" alt="image-20200831215719557"></p><p><font color="red"></font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spark-内核概述&quot;&gt;&lt;a href=&quot;#Spark-内核概述&quot; class=&quot;headerlink&quot; title=&quot;Spark 内核概述&quot;&gt;&lt;/a&gt;Spark 内核概述&lt;/h1&gt;&lt;p&gt;Spark内核泛指Spark的核心运行机制，包括&lt;strong&gt;Spark核</summary>
      
    
    
    
    <category term="Spark" scheme="https://awslzhang.top/categories/Spark/"/>
    
    
    <category term="Spark" scheme="https://awslzhang.top/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>spark学习笔记-SparkStreaming</title>
    <link href="https://awslzhang.top/2020/08/26/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkStreaming/"/>
    <id>https://awslzhang.top/2020/08/26/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkStreaming/</id>
    <published>2020-08-26T14:09:19.000Z</published>
    <updated>2021-01-01T05:50:00.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark-Streaming概述"><a href="#Spark-Streaming概述" class="headerlink" title="Spark Streaming概述"></a>Spark Streaming概述</h1><h2 id="Spark-Streaming是什么"><a href="#Spark-Streaming是什么" class="headerlink" title="Spark Streaming是什么"></a>Spark Streaming是什么</h2><p>Spark Streaming用于流式数据的处理。Spark Streaming支持的数据输入源很多，<font color="red">例如：Kafka、Flume、Twitter、ZeroMQ和简单的TCP套接字等等</font>。数据输入后可以用Spark的高度抽象原语如：<strong>map、reduce、join、window等进行运算</strong>。而结果也能保存在很多地方，<strong>如HDFS，数据库</strong>等。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200828193447365.png" alt="image-20200828193447365"></p><p>和Spark基于RDD的概念很相似，Spark Streaming使用<font color="red">离散化流(discretized stream)</font>作为抽象表示，叫作DStream。DStream 是随时间推移而收到的数据的序列。在内部，<strong>每个时间区间收到的数据都作为 RDD 存在</strong>，而DStream是由这些RDD所组成的序列(因此得名“<strong>离散化</strong>”)。</p><p><font color="red"><strong>注意</strong>：离散化的反义词就是连续，这证明SparkStreaming并不是真正的实时处理(来一条计算一条)，而是每次计算小批量的数据，小批量的数据值得就是一定采集周期之内的数据。</font></p><h1 id="DStream入门"><a href="#DStream入门" class="headerlink" title="DStream入门"></a>DStream入门</h1><p><code>DStream</code>是SparkStreaming计算的抽象。例如：Spark Core计算中的RDD，SparkSQL中的DS、DF。</p><h2 id="无状态的WordCount案例实操"><a href="#无状态的WordCount案例实操" class="headerlink" title="无状态的WordCount案例实操"></a>无状态的WordCount案例实操</h2><p>需求：使用netcat工具向9999端口不断的发送数据，通过SparkStreaming读取端口数据并统计不同单词出现的次数</p><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>scala</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建SparkConf并设置App名称</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WC&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化SparkStreamingContext</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.通过监控端口创建DStream，读进来的数据为一行行</span></span><br><span class="line">    <span class="keyword">val</span> lineStreams: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">&quot;192.168.0.201&quot;</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将每一行数据做切分，形成一个个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordStreams: <span class="type">DStream</span>[<span class="type">String</span>] = lineStreams.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将单词映射成元组（word,1）</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOneStreams: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordStreams.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将相同的单词次数做统计</span></span><br><span class="line">    <span class="keyword">val</span> wordAndCountStreams: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOneStreams.reduceByKey(_+_)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    wordAndCountStreams.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动SparkStreamingContext的收集器，收集器必须一直开启，才能收集到数据</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    <span class="comment">// 主程序等待收集器关闭，然后主程序关闭</span></span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200828195052616.png" alt="image-20200828195052616"></p><p><font color="red">注意：如果程序运行时，log日志太多，可以将spark conf目录下的log4j文件里面的日志级别改成WARN。并加入到项目中</font></p><hr><p><strong>程序解析</strong></p><p><code>Discretized Stream</code>是Spark Streaming的基础抽象，代表持续性的数据流和经过各种Spark原语操作后的结果数据流。在内部实现上，<strong>DStream是一系列连续的RDD来表示</strong>。每个RDD含有一段时间间隔内的数据，如下图：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200828195323123.png" alt="image-20200828195323123"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200828195402058.png" alt="image-20200828195402058"></p><h1 id="DStream创建"><a href="#DStream创建" class="headerlink" title="DStream创建"></a>DStream创建</h1><p>Spark Streaming原生支持一些不同的数据源。一些“核心”数据源已经被打包到<code>Spark Streaming </code>的 Maven 工件中，而其他的一些则可以通过<code>spark-streaming-kafka</code>等附加工件获取。每个接收器都以 Spark 执行器程序中<font color="red"><strong>一个长期运行的任务的形式运行，因此会占据分配给应用的 CPU 核心。</strong>此外，我们还需要有可用的 CPU 核心来处理数据。</font>这意味着如果要运行多个接收器，<strong>就必须至少有和接收器数目相同的核心数</strong>，还要加上用来完成计算所需要的核心数。</p><p><font color="bule">例如，如果我们想要在流计算应用中运行 10 个接收器，那么至少需要为应用分配 11 个 CPU 核心。所以如果在本地模式运行，**不要使用local[1]**。</font>因为1个核心无法同时满足接收器和计算的任务。</p><h2 id="文件数据源"><a href="#文件数据源" class="headerlink" title="文件数据源"></a>文件数据源</h2><h3 id="用法及说明"><a href="#用法及说明" class="headerlink" title="用法及说明"></a>用法及说明</h3><p>文件数据流：能够读取所有HDFS API兼容的文件系统文件，通过fileStream方法进行读取，Spark Streaming 将会监控 dataDirectory 目录并不断处理移动进来的文件，。<font color="red"><strong>记住目前不支持嵌套目录</strong></font></p><p>一般不会使用，因为FLume是一套处理文件日志的收集系统，用它会好，但是它又没有Kafka好，因为Flume是推数据，不考虑计算节点的处理能力，有可能造成计算节点中数据的堆积，而Kafka不会，是计算节点主动读取Kafka数据，计算能力多大，读取多少数据。</p><p><code>streamingContext.textFileStream(dataDirectory)</code></p><p><font color="red"><strong>注意事项</strong></font></p><ol><li>文件需要有相同的数据格式；</li><li>文件进入 <code>dataDirectory</code>的方式需要通过移动或者重命名来实现；</li><li>一旦文件移动进目录，则不能再修改，即便修改了也不会读取新数据；</li></ol><h2 id="自定义数据源"><a href="#自定义数据源" class="headerlink" title="自定义数据源"></a>自定义数据源</h2><h3 id="用法及说明-1"><a href="#用法及说明-1" class="headerlink" title="用法及说明"></a>用法及说明</h3><p>需要继承<code>Receiver</code>，并实现<code>onStart</code>、<code>onStop</code>方法来自定义数据源采集。</p><h3 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h3><p>我们已上面的读取某个套接字的数据的数据源为例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">BufferedReader</span>, <span class="type">InputStreamReader</span>&#125;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">Socket</span></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.<span class="type">StandardCharsets</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.receiver.<span class="type">Receiver</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerReceiver</span>(<span class="params">host: <span class="type">String</span>, port: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Receiver</span>[<span class="type">String</span>](<span class="params"><span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最初启动的时候，调用该方法，作用为：读数据并将数据发送给Spark</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onStart</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Thread</span>(<span class="string">&quot;Socket Receiver&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() &#123;</span><br><span class="line">        receive()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;.start()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//读数据并将数据发送给Spark</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个Socket</span></span><br><span class="line">    <span class="keyword">var</span> socket: <span class="type">Socket</span> = <span class="keyword">new</span> <span class="type">Socket</span>(host, port)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个变量，用来接收端口传过来的数据</span></span><br><span class="line">    <span class="keyword">var</span> input: <span class="type">String</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个BufferedReader用于读取端口传来的数据</span></span><br><span class="line">    <span class="keyword">val</span> reader = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">InputStreamReader</span>(socket.getInputStream, <span class="type">StandardCharsets</span>.<span class="type">UTF_8</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据</span></span><br><span class="line">    input = reader.readLine()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当receiver没有关闭并且输入数据不为空，则循环发送数据给Spark</span></span><br><span class="line">    <span class="keyword">while</span> (!isStopped() &amp;&amp; input != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 将读到的数据加入数据源中存储</span></span><br><span class="line">      store(input)</span><br><span class="line">      input = reader.readLine()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳出循环则关闭资源</span></span><br><span class="line">    reader.close()</span><br><span class="line">    socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重启任务</span></span><br><span class="line">    restart(<span class="string">&quot;restart&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onStop</span></span>(): <span class="type">Unit</span> = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用自定义的数据源采集数据</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.<span class="type">DStream</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FileStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.初始化Spark配置信息</span></span><br><span class="line"><span class="type">Val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">.setAppName(<span class="string">&quot;StreamWordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化SparkStreamingContext</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.创建自定义receiver的Streaming</span></span><br><span class="line"><span class="keyword">val</span> lineStream = ssc.receiverStream(<span class="keyword">new</span> <span class="type">CustomerReceiver</span>(<span class="string">&quot;hadoop102&quot;</span>, <span class="number">9999</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.将每一行数据做切分，形成一个个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordStreams = lineStream.flatMap(_.split(<span class="string">&quot;\t&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.将单词映射成元组（word,1）</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOneStreams = wordStreams.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.将相同的单词次数做统计</span></span><br><span class="line">    <span class="keyword">val</span> wordAndCountStreams] = wordAndOneStreams.reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.打印</span></span><br><span class="line">    wordAndCountStreams.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.启动SparkStreamingContext</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Kafka数据源🔺"><a href="#Kafka数据源🔺" class="headerlink" title="Kafka数据源🔺"></a>Kafka数据源🔺</h2><h3 id="用法及说明-2"><a href="#用法及说明-2" class="headerlink" title="用法及说明"></a>用法及说明</h3><p><font color="red">在工程中需要引入 Maven 工件· spark- streaming-kafka_2.10 ·来使用它</font>。包内提供的 <code>KafkaUtils </code>对象可以在 <code>StreamingContext</code> 和<code>JavaStreamingContext</code>中以你的 Kafka 消息创建出 DStream。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming-kafka-0-8_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于 <code>KafkaUtils</code> 可以订阅多个主题，因此它创建出的 DStream 由成对的主题和消息组成。要创建出一个流数据，需要使用 ：</p><ol><li><code>StreamingContext </code>实例</li><li>一个由逗号隔开的<code>ZooKeeper</code>主机列表字符串</li><li>消费者组的名字(唯一名字)</li><li>以及一个从主题到针对这个主题的接收器线程数的映射表来调用<code>createStream()</code>方法。</li></ol><p>因为Kafka的topic有分区数的概念，所有分区的数据合起来便是整个topic的数据，而topic的分区至多被一个消费者消费<font color="red">，所以启动的消费者的线程应该&lt;=topic的分区数。</font></p><p><code>// Map of (topic_name to numPartitions) to consume. Each partition is consumed in its own thread   </code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//3.通过监控端口创建DStream，读进来的数据为一行行</span></span><br><span class="line"><span class="comment">//    lineStreams = k-v  value才是kafka输入的数据</span></span><br><span class="line">    <span class="keyword">val</span> lineStreams: <span class="type">ReceiverInputDStream</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">KafkaUtils</span>.createStream(</span><br><span class="line">      ssc,</span><br><span class="line">      <span class="string">&quot;192.168.0.201:2181&quot;</span>,</span><br><span class="line">      <span class="string">&quot;group1&quot;</span>,</span><br><span class="line">      <span class="type">Map</span>((<span class="string">&quot;myTopic&quot;</span>, <span class="number">3</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="comment">// Map of (topic_name to numPartitions) to consume. Each partition is consumed in its own thread              </span></span><br></pre></td></tr></table></figure><h3 id="WC无状态的案例实操"><a href="#WC无状态的案例实操" class="headerlink" title="WC无状态的案例实操"></a>WC无状态的案例实操</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Kafka</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.创建SparkConf并设置App名称</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WC&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化SparkStreamingContext</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.通过监控端口创建DStream，读进来的数据为一行行</span></span><br><span class="line"><span class="comment">//    lineStreams = k-v  value才是kafka输入的数据</span></span><br><span class="line">    <span class="keyword">val</span> lineStreams: <span class="type">ReceiverInputDStream</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">KafkaUtils</span>.createStream(</span><br><span class="line">      ssc,</span><br><span class="line">      <span class="string">&quot;192.168.0.201:2181&quot;</span>,</span><br><span class="line">      <span class="string">&quot;group1&quot;</span>,</span><br><span class="line">      <span class="type">Map</span>((<span class="string">&quot;myTopic&quot;</span>, <span class="number">3</span>))</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将每一行数据做切分，形成一个个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordStreams: <span class="type">DStream</span>[<span class="type">String</span>] = lineStreams.flatMap(_._2.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将单词映射成元组（word,1）</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOneStreams: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordStreams.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将相同的单词次数做统计</span></span><br><span class="line">    <span class="keyword">val</span> wordAndCountStreams: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOneStreams.reduceByKey(_+_)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    wordAndCountStreams.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动SparkStreamingContext的收集器，收集器必须一直开启，才能收集到数据</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    <span class="comment">// 主程序等待收集器关闭，然后主程序关闭</span></span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>Kafka</code>的操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop201 kafka]$ bin/kafka-topics.sh --zookeeper hadoop201:2181 --create --replication-factor 3 --partitions 3 --topic myTopic</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop201 kafka]$ bin/kafka-console-producer.sh --broker-list hadoop202:9092 --topic myTopic</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>idea程序执行</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200828203819133.png" alt="image-20200828203819133"></p><p><font color="red"><strong>注意</strong>：上面所有的程序都是无状态的计算，即每个采集周期之间的数据互不影响，但这是不合理的，流式处理应该汇总所有的数据进行统计计算。这称为<strong>有状态的计算</strong>，下面开始有状态的计算</font></p><h1 id="DStream的转换"><a href="#DStream的转换" class="headerlink" title="DStream的转换"></a>DStream的转换</h1><h2 id="无状态的转换"><a href="#无状态的转换" class="headerlink" title="无状态的转换"></a>无状态的转换</h2><p>无状态转化操作就是把简单的RDD转化操作应用到每个批次上，也就是转化DStream中的每一个RDD。部分无状态转化操作列在了下表中。</p><p><font color="red"><strong>注意</strong>，针对键值对的DStream转化操作(比如 reduceByKey())要添加import StreamingContext._才能在Scala中使用。</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200829144132973.png" alt="image-20200829144132973"></p><p>需要记住的是，尽管这些函数看起来像作用在整个流上一样，但事实上每个DStream在内部是由许多RDD(批次)组成，且无状态转化操作是分别<strong>应用到每个RDD上的</strong>。<strong>例如，reduceByKey()会归约每个时间区间中的数据，<font color="red">但不会归约不同区间之间的数据</font>。</strong> </p><p>举个例子，在之前的wordcount程序中，我们只会统计5秒内接收到的数据的单词个数，而不会累加。 </p><h2 id="有状态的转换🔺"><a href="#有状态的转换🔺" class="headerlink" title="有状态的转换🔺"></a>有状态的转换🔺</h2><h3 id="UpdateStateByKey"><a href="#UpdateStateByKey" class="headerlink" title="UpdateStateByKey"></a>UpdateStateByKey</h3><p>UpdateStateByKey原语用于记录历史记录，<font color="red">有时，我们需要在 DStream 中跨批次维护状态(例如流计算中累加wordcount)。</font>针对这种情况，updateStateByKey() 为我们提供了对一个状态变量的访问，<font color="red"><strong>用于键值对形式的 DStream。</strong></font></p><p>updateStateByKey() 的结果会是一个新的 DStream，其内部的 RDD 序列是由每个时间区间对应的(键，状态)对组成的。</p><p>updateStateByKey操作使得我们可以在用新信息进行更新时保持任意的状态。为使用这个功能，你需要： </p><ol><li>指定检查点目录，因为每次计算时会用到之前的数据，而不断累加的之前的数据是不能放入内存的，所以要设置目录存放这些数据。</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateStateByKey</span></span>[<span class="type">S</span>: <span class="type">ClassTag</span>](updateFunc: (<span class="type">Seq</span>[<span class="type">V</span>], <span class="type">Option</span>[<span class="type">S</span>]) =&gt; <span class="type">Option</span>[<span class="type">S</span>])</span><br></pre></td></tr></table></figure><ol><li>可以看到泛型和参数，其中泛型是之前的数据的此KEY的Value的类型</li><li>参数中：Seq序列是最新的采集周期的数据相同key的集合</li><li>Option{S}是之前计算好的此KEY对应的最后Value，为什么是Option，如果是第一次计算，则他是空</li></ol><p><strong>改良的WC</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Kafka</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.创建SparkConf并设置App名称</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WC&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化SparkStreamingContext  Seconds(5)采集周期，5S生成一个DStream即RDD</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">    ssc.sparkContext.setCheckpointDir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.通过监控端口创建DStream，读进来的数据为一行行</span></span><br><span class="line">    <span class="comment">//    lineStreams = k-v  value才是kafka输入的数据</span></span><br><span class="line">    <span class="keyword">val</span> lineStreams: <span class="type">ReceiverInputDStream</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">KafkaUtils</span>.createStream(</span><br><span class="line">      ssc,</span><br><span class="line">      <span class="string">&quot;192.168.0.201:2181&quot;</span>,</span><br><span class="line">      <span class="string">&quot;group1&quot;</span>,</span><br><span class="line">      <span class="type">Map</span>((<span class="string">&quot;myTopic&quot;</span>, <span class="number">3</span>))</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将每一行数据做切分，形成一个个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordStreams: <span class="type">DStream</span>[<span class="type">String</span>] = lineStreams.flatMap(_._2.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将单词映射成元组（word,1）</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOneStreams: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordStreams.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    def updateStateByKey[S: ClassTag](updateFunc: (Seq[V], Option[S]) =&gt; Option[S])</span></span><br><span class="line">    <span class="comment">//  可以看到泛型和参数，其中泛型是之前的数据的此KEY的Value的类型，其中</span></span><br><span class="line">    <span class="comment">// 参数中：Seq序列是最新的采集周期的数据相同key的集合，Option&#123;S&#125;是之前计算好的此KEY对应的最后Value，为什么是Option，如果是第一次计算，则他是空</span></span><br><span class="line">    <span class="comment">// 定义更新状态方法，参数values为当前批次单词频度，state为以往批次单词频度</span></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOneStreams.updateStateByKey &#123;</span><br><span class="line">      <span class="keyword">case</span> (seq, buffer) =&gt;</span><br><span class="line">        <span class="type">Some</span>(seq.sum + buffer.getOrElse(<span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动SparkStreamingContext的收集器，收集器必须一直开启，才能收集到数据</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    <span class="comment">// 主程序等待收集器关闭，然后主程序关闭</span></span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200829152850299.png" alt="image-20200829152850299"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200829153242722.png" alt="image-20200829153242722"></p><p>可以发现数值一直在变大</p><h3 id="Window-Operations"><a href="#Window-Operations" class="headerlink" title="Window Operations"></a>Window Operations</h3><p><code>Window Operations</code>可以设<strong>置窗口的大小</strong>和<strong>滑动窗口的间隔</strong>来动态的获取当前Steaming的允许状态。基于窗口的操作会在一个比 StreamingContext 的批次间隔更长的时间范围内，通过整合多个批次的结果，计算出整个窗口的结果。</p><p><strong>其中：</strong></p><ol><li>窗口的大小必须是采集周期的整数倍</li><li>滑动窗口的间隔必须是采集周期的整数倍</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200829153601198.png" alt="image-20200829153601198"></p><p>例如：上图窗口大小就是采集周期的三倍；滑动窗口的间隔则是采集周期的两倍</p><p><font color="red"><strong>注意：所有基于窗口的操作都需要两个参数，分别为窗口时长以及滑动步长，两者都必须是 StreamContext 的批次间隔的整数倍</strong></font></p><p><code>window(windowLength, slideInterval)</code>: 基于对源DStream窗化的批次进行计算返回一个新的Dstream</p><h2 id="其他重要操作🔺"><a href="#其他重要操作🔺" class="headerlink" title="其他重要操作🔺"></a>其他重要操作🔺</h2><h3 id="Transform🔺"><a href="#Transform🔺" class="headerlink" title="Transform🔺"></a>Transform🔺</h3><p>Transform原语允许DStream上执行任意的RDD-to-RDD函数。即使这些函数并没有在DStream的API中暴露出来，通过该函数可以方便的扩展Spark API。<strong>该函数每一批次调度一次</strong>。其实也就是对DStream中的RDD应用转换。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200829154426732.png" alt="image-20200829154426732"></p><h1 id="DStream输出"><a href="#DStream输出" class="headerlink" title="DStream输出"></a>DStream输出</h1><p>输出操作指定了对流数据经转化操作得到的数据所要执行的操作(例如把结果推入外部数据库或输出到屏幕上)。与RDD中的惰性求值类似，如果一个DStream及其派生出的DStream都没有被执行输出操作，那么这些DStream就都不会被求值。 <font color="red">如果StreamingContext中没有设定输出操作，整个context就都不会启动。</font></p><p>输出操作如下：</p><ol><li>print()：在运行流程序的驱动结点上打印DStream中每一批次数据的最开始10个元素。这用于开发和调试。在Python API中，同样的操作叫print()。</li><li>saveAsTextFiles(prefix, [suffix])：以text文件形式存储这个DStream的内容。每一批次的存储文件名基于参数中的prefix和suffix。”prefix-Time_IN_MS[.suffix]”. </li><li>saveAsObjectFiles(prefix, [suffix])：以Java对象序列化的方式将Stream中的数据保存为 SequenceFiles . 每一批次的存储文件名基于参数中的为”prefix-TIME_IN_MS[.suffix]”. Python中目前不可用。</li><li>saveAsHadoopFiles(prefix, [suffix])：将Stream中的数据保存为 Hadoop files. 每一批次的存储文件名基于参数中的为”prefix-TIME_IN_MS[.suffix]”。<br>Python API Python中目前不可用。</li><li>foreachRDD(func)：<strong>这是最通用的输出操作</strong>，即将函数 func 用于产生于 stream的每一个RDD。其中参数传入的函数func应该实现将每一个RDD中数据推送到外部系统，如将RDD存入文件或者通过网络将其写入数据库。注意：函数func在运行流应用的驱动中被执行，同时其中一般函数RDD操作从而强制其对于流RDD的运算。</li></ol><p><font color="red"></font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spark-Streaming概述&quot;&gt;&lt;a href=&quot;#Spark-Streaming概述&quot; class=&quot;headerlink&quot; title=&quot;Spark Streaming概述&quot;&gt;&lt;/a&gt;Spark Streaming概述&lt;/h1&gt;&lt;h2 id=&quot;Spark</summary>
      
    
    
    
    <category term="Spark" scheme="https://awslzhang.top/categories/Spark/"/>
    
    
    <category term="Spark" scheme="https://awslzhang.top/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>spark学习笔记-SparkSQL</title>
    <link href="https://awslzhang.top/2020/08/24/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkSQL/"/>
    <id>https://awslzhang.top/2020/08/24/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkSQL/</id>
    <published>2020-08-24T13:10:34.000Z</published>
    <updated>2021-01-01T05:50:00.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark-SQL概述"><a href="#Spark-SQL概述" class="headerlink" title="Spark SQL概述"></a>Spark SQL概述</h1><h2 id="什么是Spark-SQL"><a href="#什么是Spark-SQL" class="headerlink" title="什么是Spark SQL"></a>什么是Spark SQL</h2><p>park SQL是Spark用来处理结构化数据的一个模块，它提供了2个编程抽象：<font color="red">DataFrame和DataSet</font>，并且作为分布式SQL查询引擎的作用。</p><p>将Spark SQL转换成RDD，然后提交到集群执行，执行效率非常快！</p><h2 id="Spark-SQL的特点"><a href="#Spark-SQL的特点" class="headerlink" title="Spark SQL的特点"></a>Spark SQL的特点</h2><ul><li>易整合</li><li>统一的数据访问方式</li><li>兼容Hive</li><li>标准的数据连接</li></ul><h2 id="什么是DataFrame"><a href="#什么是DataFrame" class="headerlink" title="什么是DataFrame"></a>什么是DataFrame</h2><p>与RDD类似，DataFrame也是一个分布式数据容器。然而DataFrame更像传统数据库的二维表格，除了数据以外，<strong>还记录数据的结构信息，即schema</strong>。同时，与Hive类似，DataFrame也支持嵌套数据类型（struct、array和map）。从API易用性的角度上看，DataFrame API提供的是一套高层的关系操作，比函数式的RDD API要更加友好，门槛更低。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200824211402757.png" alt="image-20200824211402757"></p><p>上图直观地体现了DataFrame和RDD的区别。左侧的RDD[Person]虽然以Person为类型参数，但Spark框架本身不了解Person类的内部结构。而右侧的DataFrame却提供了详细的结构信息，使得Spark SQL可以清楚地知道该数据集中包含哪些列，每列的名称和类型各是什么。DataFrame是为数据提供了Schema的视图。可以把它当做数据库中的一张表来对待，DataFrame也是懒执行的。性能上比RDD要高，主要原因：</p><p><font color="red">优化的执行计划：查询计划通过Spark catalyst optimiser进行优化。</font></p><p><font color="red">但是DataFrame只存储了结构信息，即在每一行中，只能通过索引来访问元素，并不能通过类型访问。因为DataFrame不保存类型信息。</font></p><h2 id="什么是DataSet"><a href="#什么是DataSet" class="headerlink" title="什么是DataSet"></a>什么是DataSet</h2><ol><li>是Dataframe API的一个扩展，是Spark最新的数据抽象。</li><li>用户友好的API风格，既具有类型安全检查也具有Dataframe的查询优化特性。</li><li>Dataset支持编解码器，当需要访问非堆上的数据时可以避免反序列化整个对象，提高了效率。</li><li><font color="red">样例类被用来在Dataset中定义数据的结构信息，样例类中每个属性的名称直接映射到DataSet中的字段名称。</font></li><li>Dataframe是Dataset的特列，DataFrame=Dataset[Row] ，所以可以通过as方法将Dataframe转换为Dataset。Row是一个类型，跟Car、Person这些的类型一样，所有的表结构信息我都用Row来表示。</li><li><font color="red"><strong>DataSet是强类型的</strong>。比如可以有Dataset[Car]，Dataset[Person].</font></li><li><font color="red">DataFrame只是知道字段，但是不知道字段的类型，所以在执行这些操作的时候是没办法在编译的时候检查是否类型失败的，比如你可以对一个String进行减法操作，在执行的时候才报错</font>，而DataSet不仅仅知道字段，<strong>而且知道字段类型，所以有更严格的错误检查。就跟JSON对象和类对象之间的类比</strong>。</li></ol><h2 id="RDD、DataFrame、DataSet🔺"><a href="#RDD、DataFrame、DataSet🔺" class="headerlink" title="RDD、DataFrame、DataSet🔺"></a>RDD、DataFrame、DataSet🔺</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200824213514197.png" alt="image-20200824213514197"></p><ul><li>RDD：没有结构和类型</li><li>DataFrame：有结构没类型。所以由DF变为RDD时，RDD存储的是ROW对象，此时只能通过索引获取值，因为它不存储类型</li><li>DataSet：有结构和类型。所以DS变RDD时，RDD存储的是确定的类，可以通过类访问确定类型的属性</li></ul><p>由于上述三者的关系，我们可以确定：</p><ol><li>RDD转换DF时，需要说明结构</li><li>RDD转换DS时，需要说明结构和类型。(类同时包含结构和类型)</li><li>DF转RDD时，直接转换，RDD存储ROW</li><li>DS转RDD时，直接转换，RDD存储具体的类</li></ol><h1 id="SparkSQL编程"><a href="#SparkSQL编程" class="headerlink" title="SparkSQL编程"></a>SparkSQL编程</h1><h2 id="SparkSession新的起始点"><a href="#SparkSession新的起始点" class="headerlink" title="SparkSession新的起始点"></a>SparkSession新的起始点</h2><p>在老的版本中，SparkSQL提供两种SQL查询起始点：一个叫<code>SQLContext</code>，用于Spark自己提供的SQL查询；一个叫<code>HiveContext</code>，用于连接Hive的查询。</p><p>SparkSession是Spark最新的SQL查询起始点，实质上是SQLContext和HiveContext的组合，所以在SQLContext和HiveContext上可用的API在SparkSession上同样是可以使用的。<font color="red">**<code>SparkSession</code>内部封装了<code>sparkContext</code>，所以计算实际上是由sparkContext完成的。**</font></p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>DataFrame只会知道数据的整体结构，当你查询一个列名<code>name</code>时<strong>，此时它并不知道它的类型，如果你进行操作编译时不会出错，当运行时才有可能出错。</strong></p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>在Spark SQL中<code>SparkSession</code>是创建<code>DataFrame</code>和执行SQL<strong>的入口</strong>，创建DataFrame有三种方式：</p><ul><li>通过Spark的数据源进行创建；</li><li>从一个存在的RDD进行转换；</li><li>还可以从Hive Table进行查询返回。</li></ul><h4 id="Spark数据源创建"><a href="#Spark数据源创建" class="headerlink" title="Spark数据源创建"></a><strong>Spark数据源创建</strong></h4><p>查看Spark数据源进行创建的文件格式</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.read.</span><br><span class="line">csv   format   jdbc   json   load   option   options   orc   parquet   schema   table   text   textFile</span><br></pre></td></tr></table></figure><p><strong>读取json文件创建DataFrame</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">&quot;file:///home/hadoop/test.json&quot;</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint, name: string]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+---+--------+</span><br><span class="line">|age|    name|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">| <span class="number">40</span>|    lisi|</span><br><span class="line">+---+--------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h4 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h4><p><a href="#RDD%E8%BD%ACDataFrame">点击跳转</a></p><h3 id="SQL风格语法🔺"><a href="#SQL风格语法🔺" class="headerlink" title="SQL风格语法🔺"></a>SQL风格语法🔺</h3><p>如果想以SQL形式读取数据，就必须有表，上面我们创建的对象<code>df</code>并不是表明，我们需要通过这个对象来创建一个临时视图<font color="red">，既然是视图，必然只可以查询。</font>然后就可以通过视图名来编写SQL来查询了！！</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.create</span><br><span class="line">createGlobalTempView   createOrReplaceTempView   createTempView</span><br><span class="line"></span><br><span class="line">scala&gt; df.createTempView(<span class="string">&quot;table&quot;</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; spark.sql(<span class="string">&quot;select * from table where age=40&quot;</span>).show</span><br><span class="line">+---+----+</span><br><span class="line">|age|name|</span><br><span class="line">+---+----+</span><br><span class="line">| <span class="number">40</span>|lisi|</span><br><span class="line">+---+----+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意</strong>：临时表是Session范围内的，Session退出后，表就失效了。</font>如果想应用范围内有效，可以使用全局表。注意使用全局表时需要全路径访问，如：global_temp.people</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.newSession.sql(<span class="string">&quot;select * from table where age=40&quot;</span>).show <span class="comment">// 错误</span></span><br><span class="line">scala&gt; df.createGlobalTempView(<span class="string">&quot;tmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; spark.newSession.sql(<span class="string">&quot;select * from global_temp.tmp&quot;</span>).show</span><br><span class="line">+---+--------+</span><br><span class="line">|age|    name|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">| <span class="number">40</span>|    lisi|</span><br><span class="line">+---+--------+</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果使用全局表的话，无论哪个Session环境都必须使用<code>global_temp.xxx</code>形式访问。</p><h3 id="DSL风格语法"><a href="#DSL风格语法" class="headerlink" title="DSL风格语法"></a>DSL风格语法</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.select(<span class="string">&quot;name&quot;</span>).show</span><br><span class="line">+--------+</span><br><span class="line">|    name|</span><br><span class="line">+--------+</span><br><span class="line">|zhangsan|</span><br><span class="line">|    lisi|</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt; df.select($<span class="string">&quot;age&quot;</span>+<span class="number">1</span>).show</span><br><span class="line">+---------+</span><br><span class="line">|(age + <span class="number">1</span>)|</span><br><span class="line">+---------+</span><br><span class="line">|       <span class="number">21</span>|</span><br><span class="line">|       <span class="number">41</span>|</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><ul><li><code>select</code>：只查看指定列数据</li><li><code>select($&quot;&quot;)</code>：以此列为变量进行其他计算</li></ul><h3 id="RDD转DataFrame"><a href="#RDD转DataFrame" class="headerlink" title="RDD转DataFrame"></a>RDD转DataFrame</h3><p>注意：如果需要RDD与DF或者DS之间操作，<font color="red">那么都需要引入<code> import spark.implicits._</code> <strong>【spark不是包名，而是sparkSession对象的名称】</strong></font></p><p><strong>前置条件：<font color="red">导入隐式转换并创建一个RDD</font></strong></p><p><strong>1. 通过手动指定结构</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> spark.implicits._</span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.makeRDD(<span class="number">1</span> to <span class="number">10</span>)</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">20</span>] at makeRDD at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = rdd.toDF(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [id: int]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+---+</span><br><span class="line">| id|</span><br><span class="line">+---+</span><br><span class="line">|  <span class="number">1</span>|</span><br><span class="line">|  <span class="number">2</span>|</span><br><span class="line">|  <span class="number">3</span>|</span><br><span class="line">|  <span class="number">4</span>|</span><br><span class="line">|  <span class="number">5</span>|</span><br><span class="line">|  <span class="number">6</span>|</span><br><span class="line">|  <span class="number">7</span>|</span><br><span class="line">|  <span class="number">8</span>|</span><br><span class="line">|  <span class="number">9</span>|</span><br><span class="line">| <span class="number">10</span>|</span><br><span class="line">+---+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><strong>2. 通过样例类指定结构，类同时包含结构和类型</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> spark.implicits._</span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>), (<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>)))</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">24</span>] at makeRDD at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">user</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">mapRdd</span> </span>= rdd.map(x=&gt;&#123;user(x._1, x._2)&#125;)</span><br><span class="line">mapRdd: org.apache.spark.rdd.<span class="type">RDD</span>[user] = <span class="type">MapPartitionsRDD</span>[<span class="number">25</span>] at map at &lt;console&gt;:<span class="number">31</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = mapRdd.toDF</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+--------+---+</span><br><span class="line">|    name|age|</span><br><span class="line">+--------+---+</span><br><span class="line">|zhangsan| <span class="number">20</span>|</span><br><span class="line">|    lisi| <span class="number">20</span>|</span><br><span class="line">+--------+---+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h3 id="DataFrame转RDD"><a href="#DataFrame转RDD" class="headerlink" title="DataFrame转RDD"></a>DataFrame转RDD</h3><p>DataFrame：有结构没类型。所以由DF变为RDD时，RDD存储的是ROW对象，此时只能通过索引获取值，因为它不存储类型</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> dfToRDD = df.rdd</span><br><span class="line">dfToRDD: org.apache.spark.rdd.<span class="type">RDD</span>[org.apache.spark.sql.<span class="type">Row</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">35</span>] at rdd at &lt;console&gt;:<span class="number">35</span></span><br><span class="line"></span><br><span class="line">scala&gt; dfToRDD.collect</span><br><span class="line">res11: <span class="type">Array</span>[org.apache.spark.sql.<span class="type">Row</span>] = <span class="type">Array</span>([zhangsan,<span class="number">20</span>], [lisi,<span class="number">20</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>请注意<code>Row</code>对象，它只能索引访问元素，而且它不知道字段的类型</p><h2 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><p><font color="red">因为<code>DataSet</code>创建时同时需要结构和类型，这时就需要使用到样例类了，因为类既有结构又有类型。</font>通过类创建DataSet很方便。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> spark.implicits._</span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span>  <span class="title">val</span> <span class="title">caseClassDS</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">&quot;Andy&quot;</span>, <span class="number">32</span>)).toDS()</span><br><span class="line">caseClassDS: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h3 id="RDD转DataSet"><a href="#RDD转DataSet" class="headerlink" title="RDD转DataSet"></a>RDD转DataSet</h3><p>SparkSQL能够自动将包含有<code>case</code>类的RDD转换成DataFrame，<code>case</code>类定义了table的结构，<font color="red"><strong>case类属性通过反射变成了表的列名。</strong></font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> spark.implicits._</span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>), (<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>)))</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">24</span>] at makeRDD at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">user</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">mapRdd</span> </span>= rdd.map(x=&gt;&#123;user(x._1, x._2)&#125;)</span><br><span class="line">mapRdd: org.apache.spark.rdd.<span class="type">RDD</span>[user] = <span class="type">MapPartitionsRDD</span>[<span class="number">25</span>] at map at &lt;console&gt;:<span class="number">31</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> ds = mapRdd.toDS</span><br></pre></td></tr></table></figure><h3 id="DataSet转RDD"><a href="#DataSet转RDD" class="headerlink" title="DataSet转RDD"></a>DataSet转RDD</h3><p>调用rdd方法即可。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span>  <span class="title">val</span> <span class="title">caseClassDS</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">&quot;Andy&quot;</span>, <span class="number">32</span>)).toDS()</span><br><span class="line">caseClassDS: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = caseClassDS.rdd</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Person</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">39</span>] at rdd at &lt;console&gt;:<span class="number">30</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h2 id="DataSet与DataFrame的互操作"><a href="#DataSet与DataFrame的互操作" class="headerlink" title="DataSet与DataFrame的互操作"></a>DataSet与DataFrame的互操作</h2><ol><li>DataFrame与DataSet相比的话少了类型，所以将DF的结构添加类型即可，可以通过<font color="red"><strong>case类属性通过反射变成了表的列名。</strong></font>主要操作<code>df.as[类]</code></li><li>DataSet与DataFrame相比的话，啥也不缺，直接转换即可：<code>ds.toDF</code></li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span>  <span class="title">val</span> <span class="title">caseClassDS</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">&quot;Andy&quot;</span>, <span class="number">32</span>)).toDS()</span><br><span class="line">caseClassDS: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = caseClassDS.toDF</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> ds = df.as[<span class="type">Person</span>]</span><br><span class="line">ds: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h1 id="Idea创建Spark-SQL程序"><a href="#Idea创建Spark-SQL程序" class="headerlink" title="Idea创建Spark SQL程序"></a>Idea创建Spark SQL程序</h1><p>IDEA中程序的打包和运行方式都和<code>SparkCore</code>类似，需要注意<code>Spark SQL</code>程序需要引入以下包，<font color="red"><code>SparkCore</code>的包中是没有<code>SparkSQL</code>的开发环境的</font></p><p><strong>Maven依赖中需要添加新的依赖项：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>程序环境三部曲</strong></p><ol><li>环境配置对象<code>sparkConfig</code></li><li>SparkSQL环境<code>sparkSession</code></li><li>DF与DS的相互隐式转换导入<code>import spark.implicits._</code></li></ol><p>注意：如果需要RDD与DF或者DS之间操作，<font color="red">那么都需要引入<code> import spark.implicits._</code> <strong>【spark不是包名，而是sparkSession对象的名称】</strong></font></p><p><strong>程序如下</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSql</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建配置对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;sql&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SparkSQL环境</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(config).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// SparkSession包含了SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>), (<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = initRDD.map(x =&gt; person(x._1, x._2)).toDF()</span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[person] = initRDD.map(x =&gt; person(x._1, x._2)).toDS()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Row</span>] = df.rdd</span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[person] = ds.rdd</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br></pre></td></tr></table></figure><p><font color="red"></font></p><h1 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h1><h2 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h2><p>一对一。</p><p>很简单，直接采用匿名函数即可。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSql</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建配置对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;udf&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SparkSQL环境</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(config).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SparkSession包含了SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>), (<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = initRDD.map(x =&gt; person(x._1, x._2)).toDF()</span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[person] = initRDD.map(x =&gt; person(x._1, x._2)).toDS()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------df与ds使用方法一致 --------------</span></span><br><span class="line">    ds.createTempView(<span class="string">&quot;ds_table&quot;</span>)</span><br><span class="line">    spark.udf.register(<span class="string">&quot;addName&quot;</span>, (x:<span class="type">String</span>)=&gt; <span class="string">&quot;Name:&quot;</span>+x)</span><br><span class="line">    spark.sql(<span class="string">&quot;select addName(name) from ds_table&quot;</span>).show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br></pre></td></tr></table></figure><h2 id="UDAF"><a href="#UDAF" class="headerlink" title="UDAF"></a>UDAF</h2><p>用户自定义聚合函数</p><p><code>强类型的Dataset</code>和<code>弱类型的DataFrame</code>都提供了相关的聚合函数， 如 count()，countDistinct()，avg()，max()，min()。除此之外，用户可以设定<strong>自己的自定义聚合函数</strong>。</p><h3 id="弱类型自定义函数"><a href="#弱类型自定义函数" class="headerlink" title="弱类型自定义函数"></a>弱类型自定义函数</h3><p>弱类型用户自定义聚合函数：通过继承<code>UserDefinedAggregateFunction</code>来实现用户自定义聚合函数。下面展示一个求平均工资的自定义聚合函数。</p><p>缺点：需要自己手动输入各种类型，在编写逻辑时只能通过索引拿到值，必须和设置类型时顺序一致，否则运行时后出现问题。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSql</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建配置对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;udf&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SparkSQL环境</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(config).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SparkSession包含了SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>), (<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = initRDD.map(x =&gt; person(x._1, x._2)).toDF()</span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[person] = initRDD.map(x =&gt; person(x._1, x._2)).toDS()</span><br><span class="line"></span><br><span class="line">    ds.createTempView(<span class="string">&quot;ds_table&quot;</span>)</span><br><span class="line">    <span class="comment">// 注册聚合函数</span></span><br><span class="line">    <span class="keyword">val</span> avg = <span class="keyword">new</span> myAvg</span><br><span class="line">    spark.udf.register(<span class="string">&quot;myavg&quot;</span>, avg)</span><br><span class="line">    <span class="comment">// 弱类型可以通过sql或者DSL两种模式查询，通过SQL因为它的输入只是一个值而已</span></span><br><span class="line">    spark.sql(<span class="string">&quot;select myavg(age) from ds_table&quot;</span>).show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">myAvg</span> <span class="keyword">extends</span> <span class="title">UserDefinedAggregateFunction</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 输入值的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">inputSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;age&quot;</span>, <span class="type">LongType</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户自定义处理函数内部使用的变量的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="comment">// 记住顺序，后面的操作全是有序的</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;sum&quot;</span>, <span class="type">LongType</span>).add(<span class="string">&quot;count&quot;</span>, <span class="type">LongType</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">dataType</span></span>: <span class="type">DataType</span> = <span class="type">DoubleType</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对于相同的输入是否一直返回相同的输出；函数的稳定性</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">deterministic</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 看到buffer就是工作区，函数内部变量的初始化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer(<span class="number">0</span>) = <span class="number">0</span>L <span class="comment">// sum</span></span><br><span class="line">    buffer(<span class="number">1</span>) = <span class="number">0</span>L <span class="comment">// count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// buffer是工作区，input是函数的输入。这个函数就是每次来新的输入值时，函数内部变量的变化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>, input: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer(<span class="number">0</span>) = buffer.getLong(<span class="number">0</span>) + input.getLong(<span class="number">0</span>) <span class="comment">// sum</span></span><br><span class="line">    buffer(<span class="number">1</span>) = buffer.getLong(<span class="number">1</span>) + <span class="number">1</span> <span class="comment">// count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多个Executor执行后，形成多个buffer  最后合并到一起</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buffer1: <span class="type">MutableAggregationBuffer</span>, buffer2: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer1(<span class="number">0</span>) = buffer1.getLong(<span class="number">0</span>) + buffer2.getLong(<span class="number">0</span>)</span><br><span class="line">    buffer1(<span class="number">1</span>) = buffer1.getLong(<span class="number">1</span>) + buffer2.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后的结果</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span></span>(buffer: <span class="type">Row</span>): <span class="type">Any</span> = &#123;</span><br><span class="line">    buffer.getLong(<span class="number">0</span>).toDouble / buffer.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <font color="red"><strong>弱类型可以通过sql或者DSL两种模式查询，通过SQL因为它的输入只是一个值而已</strong></font></p><h3 id="强类型自定义函数"><a href="#强类型自定义函数" class="headerlink" title="强类型自定义函数"></a>强类型自定义函数</h3><p>强类型用户自定义聚合函数：通过继承<code>Aggregator</code>来实现强类型自定义聚合函数。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSql</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建配置对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;udf&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SparkSQL环境</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(config).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SparkSession包含了SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>), (<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = initRDD.map(x =&gt; person(x._1, x._2)).toDF()</span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[person] = initRDD.map(x =&gt; person(x._1, x._2)).toDS()</span><br><span class="line"></span><br><span class="line">    ds.createTempView(<span class="string">&quot;ds_table&quot;</span>)</span><br><span class="line">    <span class="comment">// 注册聚合函数</span></span><br><span class="line">    <span class="keyword">val</span> avg = <span class="keyword">new</span> <span class="type">StrongAvg</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 但是不能使用SQL形式，因为我们强类型输入的值是一个类，用sql编写如何传送给函数结构加类型，那么通过有结构和类型的只有DS</span></span><br><span class="line">    <span class="comment">// 所以我们需要使用DS的DSL方式查询</span></span><br><span class="line">    <span class="comment">// 将聚合函数转换为查询列</span></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">TypedColumn</span>[person, <span class="type">Double</span>] = avg.toColumn.name(<span class="string">&quot;avg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ds.select(value).show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// !!!因为样例类属性默认val，需要手动设置为var</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">dealwith</span>(<span class="params">var sum: <span class="type">Long</span>, var count: <span class="type">Long</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myAvg</span> <span class="keyword">extends</span> <span class="title">UserDefinedAggregateFunction</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 输入值的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">inputSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;age&quot;</span>, <span class="type">LongType</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户自定义处理函数内部使用的变量的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="comment">// 记住顺序，后面的操作全是有序的</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;sum&quot;</span>, <span class="type">LongType</span>).add(<span class="string">&quot;count&quot;</span>, <span class="type">LongType</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">dataType</span></span>: <span class="type">DataType</span> = <span class="type">DoubleType</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对于相同的输入是否一直返回相同的输出；函数的稳定性</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">deterministic</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 看到buffer就是工作区，函数内部变量的初始化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer(<span class="number">0</span>) = <span class="number">0</span>L <span class="comment">// sum</span></span><br><span class="line">    buffer(<span class="number">1</span>) = <span class="number">0</span>L <span class="comment">// count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// buffer是工作区，input是函数的输入。这个函数就是每次来新的输入值时，函数内部变量的变化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>, input: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer(<span class="number">0</span>) = buffer.getLong(<span class="number">0</span>) + input.getLong(<span class="number">0</span>) <span class="comment">// sum</span></span><br><span class="line">    buffer(<span class="number">1</span>) = buffer.getLong(<span class="number">1</span>) + <span class="number">1</span> <span class="comment">// count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多个Executor执行后，形成多个buffer  最后合并到一起</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buffer1: <span class="type">MutableAggregationBuffer</span>, buffer2: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer1(<span class="number">0</span>) = buffer1.getLong(<span class="number">0</span>) + buffer2.getLong(<span class="number">0</span>)</span><br><span class="line">    buffer1(<span class="number">1</span>) = buffer1.getLong(<span class="number">1</span>) + buffer2.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后的结果</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span></span>(buffer: <span class="type">Row</span>): <span class="type">Any</span> = &#123;</span><br><span class="line">    buffer.getLong(<span class="number">0</span>).toDouble / buffer.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Aggregator[-IN, BUF, OUT]</span></span><br><span class="line"><span class="comment">// 泛型分别为输入类型，处理类型，输出类型。因为强类型所以需要指定类型，这样就能直接通过对象访问到每个值，不是通过索引</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrongAvg</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[person, dealwith, <span class="type">Double</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始值，因为返回dealwith，所以是处理逻辑类的初始化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: dealwith = dealwith(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个函数就是每次来新的输入值时，函数内部变量的变化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(b: dealwith, a: person): dealwith = &#123;</span><br><span class="line">    b.sum = b.sum + a.age</span><br><span class="line">    b.count = b.count + <span class="number">1</span></span><br><span class="line">    b</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多个Executor执行后，形成多个dealwith  最后合并到一起</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(b1: dealwith, b2: dealwith): dealwith = &#123;</span><br><span class="line">    b1.sum = b1.sum + b2.sum</span><br><span class="line">    b1.count = b1.count + b2.count</span><br><span class="line">    b1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(reduction: dealwith): <span class="type">Double</span> = &#123;</span><br><span class="line">    reduction.sum.toDouble / reduction.count</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转码对象设置，固定套路，第三方使用 Encoders.product!!!</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[dealwith] = <span class="type">Encoders</span>.product</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转码对象设置</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Double</span>] = <span class="type">Encoders</span>.scalaDouble</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spark-SQL数据源"><a href="#Spark-SQL数据源" class="headerlink" title="Spark SQL数据源"></a>Spark SQL数据源</h1><h2 id="通用加载-保存方法"><a href="#通用加载-保存方法" class="headerlink" title="通用加载/保存方法"></a>通用加载/保存方法</h2><h3 id="手动指定选项"><a href="#手动指定选项" class="headerlink" title="手动指定选项"></a>手动指定选项</h3><p>park SQL的DataFrame接口支持多种数据源的操作。一个DataFrame可以进行RDDs方式的操作，也可以被注册为临时表。<strong>把DataFrame注册为临时表之后，就可以对该DataFrame执行SQL查询。</strong>\</p><p>Spark SQL的<font color="red"><strong>默认数据源为Parquet格式</strong></font>。数据源为Parquet文件时，Spark SQL可以方便的执行所有的操作。修改配置项<code>spark.sql.sources.default</code>，可修改默认数据源格式。</p><p><font color="red">当数据源格式不是<code>parquet</code>格式文件时，需要手动指定数据源的格式</font>。数据源格式需要指定全名（例如：org.apache.spark.sql.parquet），如果数据源格式为内置格式，则只需要指定简称定json, parquet, jdbc, orc, libsvm, csv, text来指定数据的格式。</p><p><strong>两种方式：</strong></p><ol><li>可以通过SparkSession提供的read.load方法用于通用加载数据，使用write和save保存数据</li><li>read.xxx()</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    spark.read.csv()</span></span><br><span class="line"><span class="comment">//    spark.read.json()</span></span><br><span class="line">    </span><br><span class="line">    spark.read.format(<span class="string">&quot;csv&quot;</span>).load()</span><br><span class="line">    spark.read.format(<span class="string">&quot;json&quot;</span>).load()</span><br></pre></td></tr></table></figure><h3 id="文件保存选项"><a href="#文件保存选项" class="headerlink" title="文件保存选项"></a>文件保存选项</h3><p>可以采用<code>SaveMode</code>执行存储操作，<code>SaveMode</code>定义了对数据的处理模式。需要注意的是，这些保存模式不使用任何锁定，不是原子操作。此外，当使用<code>Overwrite</code>方式执行时，在输出新数据之前原数据就已经被删除。SaveMode详细介绍如下表：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200826201904989.png" alt="image-20200826201904989"></p><h2 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h2><p>Spark SQL 能够自动推测 JSON数据集的结构，并将它加载为一个Dataset[Row]. 可以通过SparkSession.read.json()去加载一个 一个JSON 文件。</p><p><font color="red"><strong>注意：这个JSON文件不是一个传统的JSON文件，每一行都得是一个JSON串。</strong></font></p><p><code>spark.read.format(&quot;json&quot;).load()</code></p><h2 id="Parquet文件"><a href="#Parquet文件" class="headerlink" title="Parquet文件"></a>Parquet文件</h2><p><code>Parquet</code>是一种流行的列式存储格式，可以高效地存储具有嵌套字段的记录。Parquet格式经常在Hadoop生态圈中被使用，它也支持Spark SQL的全部数据类型。<font color="red">Spark SQL 提供了直接读取和存储 Parquet 格式文件的方法。 (默认)</font></p><p><code>spark.read.load(xxx)</code>，不用指定类型，默认<code>Parquet</code></p><p><code>peopleDF.write.mode.parquet(&quot;hdfs://hadoop102:9000/people.parquet&quot;)</code></p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>Spark SQL可以通过JDBC从关系型数据库中读取数据的方式创建DataFrame，通过对DataFrame一系列的计算后，还可以将数据再写回关系型数据库中。</p><p><font color="red">注意:需要将相关的数据库驱动放到spark的类路径下。如果使用Spark-Shell的话</font></p><h3 id="读方式一"><a href="#读方式一" class="headerlink" title="读方式一"></a>读方式一</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> jdbcDF = spark.read</span><br><span class="line">.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://hadoop102:3306/rdd&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;rddtable&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;000000&quot;</span>)</span><br><span class="line">.load()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读方式二"><a href="#读方式二" class="headerlink" title="读方式二"></a>读方式二</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> connectionProperties = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">connectionProperties.put(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">connectionProperties.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;000000&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> jdbcDF2 = spark.read.jdbc(<span class="string">&quot;jdbc:mysql://hadoop102:3306/rdd&quot;</span>, <span class="string">&quot;rddtable&quot;</span>,connectionProperties)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="写方式一"><a href="#写方式一" class="headerlink" title="写方式一"></a>写方式一</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jdbcDF.write.mode(xxx)</span><br><span class="line">.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://hadoop102:3306/rdd&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;dftable&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;000000&quot;</span>)</span><br><span class="line">.save()</span><br></pre></td></tr></table></figure><h3 id="写方式二"><a href="#写方式二" class="headerlink" title="写方式二"></a>写方式二</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbcDF2.write.jdbc(<span class="string">&quot;jdbc:mysql://hadoop102:3306/rdd&quot;</span>, <span class="string">&quot;db&quot;</span>, connectionProperties)</span><br></pre></td></tr></table></figure><h2 id="Hive数据仓库"><a href="#Hive数据仓库" class="headerlink" title="Hive数据仓库"></a>Hive数据仓库</h2><p>Apache Hive是Hadoop上的SQL引擎，<strong>Spark SQL编译时可以包含Hive支持，也可以不包含</strong>。包含Hive支持的Spark SQL可以<strong>支持Hive表访问、UDF(用户自定义函数)以及 Hive 查询语言(HiveQL/HQL)等</strong>。需要强调的一点是，如果要在Spark SQL中包含Hive的库，并不需要事先安装Hive。一般来说，最好还是在编译Spark SQL时引入Hive支持，这样就可以使用这些特性了。如果你下载的是二进制版本的 Spark，它应该已经在编译时添加了 Hive 支持。 </p><p><font color="red">若要把Spark SQL连接到一个部署好的Hive上，你必须把hive-site.xml复制到 Spark的配置文件目录中($SPARK_HOME/conf)</font>。即使没有部署好Hive，Spark SQL也可以运行。<font color="red"> 需要注意的是，如果你没有部署好Hive，Spark SQL会在当前的工作目录中创建出自己的Hive 元数据仓库，叫作 metastore_db。</font>此外，如果你尝试使用 HiveQL 中的 CREATE TABLE (并非 CREATE EXTERNAL TABLE)语句来创建表，这些表会被放在你默认的文件系统中的 /user/hive/warehouse 目录中(如果你的 classpath 中有配好的 hdfs-site.xml，默认的文件系统就是 HDFS，否则就是本地文件系统)。</p><h3 id="内嵌的Hive应用"><a href="#内嵌的Hive应用" class="headerlink" title="内嵌的Hive应用"></a>内嵌的Hive应用</h3><p>如果要使用内嵌的Hive，什么都不用做，直接用就可以了。 </p><p>可以通过添加参数初次指定数据仓库地址：–conf </p><p><font color="red"><strong>注意：</strong>如果你使用的是内部的Hive，在Spark2.0之后，spark.sql.warehouse.dir用于指定数据仓库的地址，如果你需要是用HDFS作为路径，那么需要将core-site.xml和hdfs-site.xml 加入到Spark conf目录，否则只会创建master节点上的warehouse目录，查询时会出现文件找不到的问题，这是需要使用HDFS，则需要将metastore删除，重启集群。</font></p><h3 id="外部的Hive应用"><a href="#外部的Hive应用" class="headerlink" title="外部的Hive应用"></a>外部的Hive应用</h3><p>如果想连接外部已经部署好的Hive，需要通过以下几个步骤。</p><ol><li>将Hive中的hive-site.xml拷贝或者软连接到Spark安装目录下的conf目录下。</li><li>打开spark shell，注意带上访问Hive元数据库的JDBC客户端</li></ol><p><code>bin/spark-shell --jars mysql-connector-java-5.1.27-bin.jar</code></p><p>又或者将此jar包放入spark的依赖目录</p><h3 id="Spark-SQL-CLI"><a href="#Spark-SQL-CLI" class="headerlink" title="Spark SQL CLI"></a>Spark SQL CLI</h3><p>Spark SQL CLI可以很方便的在本地运行Hive元数据服务以及从命令行执行查询任务。在Spark目录下执行如下命令启动Spark SQL CLI：</p><p><code>./bin/spark-sql</code></p><h3 id="代码中使用Hive"><a href="#代码中使用Hive" class="headerlink" title="代码中使用Hive"></a>代码中使用Hive</h3><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-hive --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-hive_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hive/hive-exec --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建SparkSession时需要添加hive支持</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> warehouseLocation: <span class="type">String</span> = <span class="keyword">new</span> <span class="type">File</span>(<span class="string">&quot;spark-warehouse&quot;</span>).getAbsolutePath</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">.builder()</span><br><span class="line">.appName(<span class="string">&quot;Spark Hive Example&quot;</span>)</span><br><span class="line">.config(<span class="string">&quot;spark.sql.warehouse.dir&quot;</span>, warehouseLocation)</span><br><span class="line">.enableHiveSupport() <span class="comment">// 添加hive支持</span></span><br><span class="line">.getOrCreate()</span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意：</strong>蓝色部分为使用内置Hive需要指定一个Hive仓库地址。若使用的是外部Hive，则需要<strong>将hive-site.xml添加到ClassPath下</strong>。</font></p><p><font color="red"></font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spark-SQL概述&quot;&gt;&lt;a href=&quot;#Spark-SQL概述&quot; class=&quot;headerlink&quot; title=&quot;Spark SQL概述&quot;&gt;&lt;/a&gt;Spark SQL概述&lt;/h1&gt;&lt;h2 id=&quot;什么是Spark-SQL&quot;&gt;&lt;a href=&quot;#什么是Sp</summary>
      
    
    
    
    <category term="Spark" scheme="https://awslzhang.top/categories/Spark/"/>
    
    
    <category term="Spark" scheme="https://awslzhang.top/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>spark学习笔记-广播变量及累加器</title>
    <link href="https://awslzhang.top/2020/08/23/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%BF%E6%92%AD%E5%8F%98%E9%87%8F%E5%8F%8A%E7%B4%AF%E5%8A%A0%E5%99%A8/"/>
    <id>https://awslzhang.top/2020/08/23/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%BF%E6%92%AD%E5%8F%98%E9%87%8F%E5%8F%8A%E7%B4%AF%E5%8A%A0%E5%99%A8/</id>
    <published>2020-08-23T12:32:50.000Z</published>
    <updated>2021-01-01T05:50:00.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spark由三大数据结构：</p><ul><li>RDD：分布式数据集</li><li>广播变量：分布式只读变量</li><li>累加器：分布式只写变量</li></ul><h1 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h1><p>累加器用来对信息进行聚合，通常在向 Spark传递函数时，比如使用 map() 函数或者用 filter() 传条件时，可以使用驱动器程序中定义的变量，但是集群中运行的每个任务都会得到这些变量的一份新的副本，更新这些副本的值也不会影响驱动器中的对应变量。如果我们想实现所有分片处理时更新共享变量的功能，那么累加器可以实现我们想要的效果。</p><p>假设一段逻辑，实现累加操作，我们一般<code>rdd.reduce(_+_)</code>，那我们如果用中间值保存的话怎么做呢？</p><p>代码展示：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ACC</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    sc.makeRDD(<span class="number">1</span> to <span class="number">10</span>).foreach(x=&gt;&#123;sum=sum+x&#125;)</span><br><span class="line">    println(sum)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>发现Sum依旧是0，没有改变。 原因如下：</strong></font></p><p>如下图：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823203514400.png" alt="image-20200823203514400"></p><ol><li>在Driver端创建了变量sum</li><li>将Sum变量写入Executor的计算逻辑，Sum会被序列到各个Executor中</li><li>Executor中执行完毕后，它们各自中的sum被修改。</li><li>但是它们没有传回Driver，如果Driver打印sum的话，依旧是声明时的的0.</li></ol><p><strong>解决办法</strong></p><p>使用累加器。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ACC</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    var sum = 0</span></span><br><span class="line">    <span class="comment">// 创建累加器</span></span><br><span class="line">    <span class="keyword">val</span> accumulator: <span class="type">LongAccumulator</span> = sc.longAccumulator</span><br><span class="line">    sc.makeRDD(<span class="number">1</span> to <span class="number">10</span>).foreach &#123;</span><br><span class="line">      i =&gt; &#123;</span><br><span class="line">        accumulator.add(i.toLong)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(accumulator.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">这样当我们在Driver端获取值的时候，各个分区的的累加的值会被拉到Driver端最后进行一次累加操作后，展示。</font></p><p>累加器的用法如下所示。</p><p>通过在驱动器中调用SparkContext.accumulator(initialValue)方法，创建出存有初始值的累加器。返回值为 org.apache.spark.Accumulator[T] 对象，其中 T 是初始值 initialValue 的类型。Spark闭包里的执行器代码可以使用累加器的 += 方法(在Java中是 add)增加累加器的值。 驱动器程序可以调用累加器的value属性(在Java中使用value()或setValue())来访问累加器的值。 </p><p><font color="red">注意：工作节点上的任务不应该访问累加器的值。从这些任务的角度来看，累加器是一个只写变量。</font></p><p>对于要在行动操作中使用的累加器，Spark只会把每个任务对各累加器的修改应用一次。因此，如果想要一个无论在失败还是重复计算时都绝对可靠的累加器，我们必须把它放在 foreach() 这样的行动操作中。转化操作中累加器可能会发生不止一次更新</p><h2 id="自定义累加器"><a href="#自定义累加器" class="headerlink" title="自定义累加器"></a>自定义累加器</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.util.<span class="type">AccumulatorV2</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> scala.collection.<span class="type">JavaConversions</span>._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogAccumulator</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">spark</span>.<span class="title">util</span>.<span class="title">AccumulatorV2</span>[<span class="type">String</span>, java.util.<span class="type">Set</span>[<span class="type">String</span>]] </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> _logArray: java.util.<span class="type">Set</span>[<span class="type">String</span>] = <span class="keyword">new</span> java.util.<span class="type">HashSet</span>[<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断此累加器是否是初始化状态</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>: <span class="type">Boolean</span> = &#123;</span><br><span class="line">    _logArray.isEmpty</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 累加器清零</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    _logArray.clear()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 累加元素</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(v: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    _logArray.add(v)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个分区中的数据向Driver端汇总时，最后的合并</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(other: org.apache.spark.util.<span class="type">AccumulatorV2</span>[<span class="type">String</span>, java.util.<span class="type">Set</span>[<span class="type">String</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    other <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> o: <span class="type">LogAccumulator</span> =&gt; _logArray.addAll(o.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取值</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: java.util.<span class="type">Set</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    java.util.<span class="type">Collections</span>.unmodifiableSet(_logArray)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>():org.apache.spark.util.<span class="type">AccumulatorV2</span>[<span class="type">String</span>, java.util.<span class="type">Set</span>[<span class="type">String</span>]] = &#123;</span><br><span class="line">    <span class="keyword">val</span> newAcc = <span class="keyword">new</span> <span class="type">LogAccumulator</span>()</span><br><span class="line">    _logArray.synchronized&#123;</span><br><span class="line">      newAcc._logArray.addAll(_logArray)</span><br><span class="line">    &#125;</span><br><span class="line">    newAcc</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤掉带字母的</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">LogAccumulator</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> conf=<span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;LogAccumulator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc=<span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> accum = <span class="keyword">new</span> <span class="type">LogAccumulator</span></span><br><span class="line">      <span class="comment">// 需要手动注册</span></span><br><span class="line">    sc.register(accum, <span class="string">&quot;logAccum&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sum = sc.parallelize(<span class="type">Array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2a&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4b&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7cd&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>), <span class="number">2</span>).filter(line =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> pattern = <span class="string">&quot;&quot;</span><span class="string">&quot;^-?(\d+)&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="keyword">val</span> flag = line.matches(pattern)</span><br><span class="line">      <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        accum.add(line)</span><br><span class="line">      &#125;</span><br><span class="line">      flag</span><br><span class="line">    &#125;).map(_.toInt).reduce(_ + _)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;sum: &quot;</span> + sum)</span><br><span class="line">    <span class="keyword">for</span> (v &lt;- accum.value) print(v + <span class="string">&quot;&quot;</span>)</span><br><span class="line">    println()</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义累加器需要继承<code>org.apache.spark.util.AccumulatorV2[IN, OUT]</code>，其中：</p><ul><li><code>IN</code>：是累加的元素</li><li><code>OUT</code>：是最后获取的元素</li></ul><h1 id="广播变量-调优策略"><a href="#广播变量-调优策略" class="headerlink" title="广播变量(调优策略)"></a>广播变量(调优策略)</h1><p>其实广播变量有没有都可以实现相同的功能，但是效率会比较低。如果一份数据需要发送给Executor端来进行计算。</p><ul><li>不使用广播变量的话，数据会同时发送给多个Executor，每个一份，效率低</li><li>使用广播变量的话，多个Executor读取的是同一份的数据</li></ul><p>广播变量用来高效分发较大的对象。向所有工作节点发送一个较大的只读值，以供一个或多个Spark操作使用。比如，如果你的应用需要向所有节点发送一个较大的只读查询表，甚至是机器学习算法中的一个很大的特征向量，广播变量用起来都很顺手。 在多个并行操作中使用同一个变量，但是 Spark会为每个任务分别发送。</p><p>使用广播变量的过程如下：</p><ol><li>通过对一个类型 T 的对象调用 <code>SparkContext.broadcast</code> 创建出一个<code>Broadcast[T]</code>对象。 <strong>任何可序列化的类型都可以这么实现。</strong> </li><li> 通过 <code>value </code>属性访问该对象的值(在 Java 中为 value() 方法)。 </li><li>变量只会被发到各个节点一次，。<font color="red"><strong>应作为只读值处理(修改这个值不会影响到别的节点)</strong></font></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Spark由三大数据结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDD：分布式数据集&lt;/li&gt;
&lt;li&gt;广播变量：分布式只读变量&lt;/li&gt;
&lt;li&gt;累</summary>
      
    
    
    
    <category term="Spark" scheme="https://awslzhang.top/categories/Spark/"/>
    
    
    <category term="Spark" scheme="https://awslzhang.top/tags/Spark/"/>
    
  </entry>
  
</feed>
