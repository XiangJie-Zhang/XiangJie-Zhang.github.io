<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flink状态编程和容错机制</title>
      <link href="2021/01/02/Flink%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>2021/01/02/Flink%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Flink状态管理"><a href="#Flink状态管理" class="headerlink" title="Flink状态管理"></a>Flink状态管理</h1><p>流式计算分为<strong>无状态和有状态</strong>两种情况。无状态的计算观察每个独立事件，并根据最后一个事件输出结果。例如，流处理应用程序从传感器接收温度读数，并在温度超过90度时发出警告。有状态的计算则会基于多个事件输出结果。以下是一些例子。</p><ul><li>所有类型的窗口。例如，计算过去一小时的平均温度，就是有状态的计算。</li><li>所有用于复杂事件处理的状态机。例如，若在一分钟内收到两个相差20度以上的温度读数，则发出警告，这是有状态的计算。</li><li>流与流之间的所有关联操作，以及流与静态表或动态表之间的关联操作，都是有状态的计算。</li></ul><p>下图展示了无状态流处理和有状态流处理的主要区别。无状态流处理分别接收每条数据记录(图中的黑条)，<font color="red">然后根据最新输入的数据生成输出数据(白条)</font>。有状态流处理会维护状态(根据每条输入记录进行更新)，<font color="red">并基于最新输入的记录和当前的状态值生成输出记录(灰条)。</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210103155758486.png" alt="image-20210103155758486"></p><p>上图中输入数据由黑条表示。无状态流处理每次只转换一条输入记录，并且仅根据最新的输入记录输出结果(白条)。有状态 流处理维护所有已处理记录的状态值，并根据每条新输入的记录更新状态，因此输出记录(灰条)反映的是综合考虑多个事件之后的结果。</p><p>尽管无状态的计算很重要，但是流处理对有状态的计算更感兴趣。事实上，正确地实现有状态的计算比实现无状态的计算难得多。旧的流处理系统并不支持有状态的计算，而新一代的流处理系统则将状态及其正确性视为重中之重.</p><h2 id="有状态的算子和应用程序"><a href="#有状态的算子和应用程序" class="headerlink" title="有状态的算子和应用程序"></a>有状态的算子和应用程序</h2><p>Flink内置的很多算子，数据源source，数据存储sink都是有状态的，流中的数据都是buffer records，会保存一定的元素或者元数据。例如: ProcessWindowFunction会缓存输入流的数据，ProcessFunction会保存设置的定时器信息等等。</p><p>在Flink中，<font color="red"><strong>状态始终与特定算子相关联</strong></font>。总的来说，有两种类型的状态：</p><ol><li>算子状态（operator state）</li><li>键控状态（keyed state）</li></ol><blockquote><p>即Flink的状态是由算子维护的，每个算子的状态都是本算子的，其他算子访问不到本算子的。</p><p>算子状态和键控状态的区别就是：</p><ol><li>算子状态的状态是和算子绑定的，算子的状态的访问权限是此算子处理的所有数据。一个算子一个状态。并行度增加，算子就增加，状态就增加</li><li>键控状态的状态是和key绑定的，访问权限是相应key的数据才能访问到对应key的状态。</li></ol></blockquote><hr><p>Flink的状态说白了就相当于本地变量，但是Flink提供了对它的管理：一致性、故障、高效率存储访问。所以当程序故障时，Flink的管理机制可以实现从远程读取之前保存的状态继续开始计算，而不是状态丢失重新计算。</p><h3 id="算子状态（operator-state）"><a href="#算子状态（operator-state）" class="headerlink" title="算子状态（operator state）"></a>算子状态（operator state）</h3><p>算子状态的作用范围限定为算子任务。这意味着由<strong>同一并行任务所处理的所有数据都可以访问到相同的状态</strong>，状态对于同一任务而言是共享的。算子状态不能由相同或不同算子的另一个任务访问。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210103161006283.png" alt="image-20210103161006283"></p><p>结合图来讲就是因为并行度task的多个任务，不同的任务之间的状态不能访问。而相同任务、分区中被处理的数据都可以访问本任务、分区中的状态。</p><h4 id="状态数据结构"><a href="#状态数据结构" class="headerlink" title="状态数据结构"></a>状态数据结构</h4><p>Flink为算子状态提供三种基本数据结构：</p><ol><li>列表状态（List state）：将状态表示为一组数据的列表</li><li>联合列表状态（Union list state）也将状态表示为数据的列表。它与常规列表状态的区别在于，在发生故障时，或者从保存点（savepoint）启动应用程序时如何恢复。</li><li>广播状态（Broadcast state）：如果一个算子有多项任务，而它的每项任务状态又都相同，那么这种特殊情况最适合应用广播状态。</li></ol><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>只需要实现<code>ListCheckpointed</code>接口即可，并实现快照存储和故障恢复的方法。其余就是和使用正常本地变量一致。</p><hr><p>一般来讲，Map算子进行的都是无状态的计算，这次我们通过状态变量通过map的方式来展现，通过计算元素个数，这个计算和之前的数据有联系，所以需要Flink状态变量</p><p>当然可以直接使用本地变量，算子状态的状态变量和本地变量本身几乎没什么区别，但是如果使用状态变量的话，对于程序的checkpoint保存的异常恢复有效果，所以请看例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.transform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Collections</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.<span class="type">MapFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.checkpoint.<span class="type">ListCheckpointed</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.example.flink.source.&#123;<span class="type">SensorReading</span>, <span class="type">SensorSource</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">OperatorState</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    value.map(<span class="keyword">new</span> <span class="type">MyMap</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyMap</span> <span class="keyword">extends</span> <span class="title">MapFunction</span>[<span class="type">SensorReading</span>, <span class="type">Integer</span>] <span class="keyword">with</span> <span class="title">ListCheckpointed</span>[<span class="type">Integer</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> count: <span class="type">Integer</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(t: <span class="type">SensorReading</span>): <span class="type">Integer</span> = &#123;</span><br><span class="line">      count = count + <span class="number">1</span></span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容错恢复时，找到之前存储的变量</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">restoreState</span></span>(list: util.<span class="type">List</span>[<span class="type">Integer</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">import</span> collection.<span class="type">JavaConverters</span>._</span><br><span class="line">      list.asScala.foreach(count += _)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对状态变量进行快照存储</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">snapshotState</span></span>(l: <span class="type">Long</span>, l1: <span class="type">Long</span>): util.<span class="type">List</span>[<span class="type">Integer</span>] = <span class="type">Collections</span>.singletonList(count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键控状态（keyed-state）"><a href="#键控状态（keyed-state）" class="headerlink" title="键控状态（keyed state）"></a>键控状态（keyed state）</h3><p>键控状态是根据输入数据流中<strong>定义的键（key）来维护和访问的</strong>。<strong>Flink为每个键值维护一个状态实例，并将具有相同键的所有数据，都分区到同一个算子任务中，这个任务会维护和处理这个key对应的状态。</strong>当任务处理一条数据时，它会自动将状态的访问范围限定为当前数据的key。<strong>因此，具有相同key的所有数据都会访问相同的状态</strong>。Keyed State很类似于一个分布式的key-value map数据结构，<font color="red"><strong>只能用于KeyedStream（keyBy算子处理之后）。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210103161339404.png" alt="image-20210103161339404"></p><h4 id="状态数据结构-1"><a href="#状态数据结构-1" class="headerlink" title="状态数据结构"></a>状态数据结构</h4><p>Flink的Keyed State支持以下数据类型：</p><ol><li>ValueState[T]保存单个的值，值的类型为T。</li><li>ListState[T]保存一个列表，列表里的元素的数据类型为T。基本操作如下：</li><li> MapState[K, V]保存Key-Value对。</li><li>ReducingState[T]</li><li>AggregatingState[I, O]</li></ol><h4 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h4><p>其实在Flink时间语义一文中已经使用了键控状态，即1S内温度连续上升报警示例。</p><p>在代码中这样使用：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210103163621295.png" alt="image-20210103163621295"></p><p>大家可能注意到：</p><ol><li><code>getRuntimeContext</code>方法，即如果使用键控状态的话，<strong>必须继承富函数</strong></li><li>键控状态的声明和赋值不是在一起的，这是因为如果声明和赋值在一起，那么变量初始化时就要调用<code>getRuntimeContext</code>，但是在没有运行到这里时，<code>getRuntimeContext</code>是没有值的，所以这时有两种解决办法：<ol><li>使用scala的lazy懒加载</li><li>赋值内容写在open()方法中</li></ol></li></ol><p>继上面的例子，通过键控状态实现，<strong>这时计算的是每个key的数量</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.transform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.<span class="type">RichMapFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.&#123;<span class="type">ValueState</span>, <span class="type">ValueStateDescriptor</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala.typeutils.<span class="type">Types</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.example.flink.source.&#123;<span class="type">SensorReading</span>, <span class="type">SensorSource</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">KeyedState</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>).keyBy(_.id)</span><br><span class="line">    value.map(<span class="keyword">new</span> <span class="type">MyMap</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyMap</span> <span class="keyword">extends</span> <span class="title">RichMapFunction</span>[<span class="type">SensorReading</span>, <span class="type">Integer</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">private</span> <span class="keyword">val</span> count: <span class="type">ValueState</span>[<span class="type">Integer</span>] = getRuntimeContext.getState(<span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Integer</span>](<span class="string">&quot;count&quot;</span>, <span class="type">Types</span>.of[<span class="type">Integer</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(t: <span class="type">SensorReading</span>): <span class="type">Integer</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (count.value()==<span class="literal">null</span>) count.update(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">val</span> integer: <span class="type">Integer</span> = count.value() + <span class="number">1</span></span><br><span class="line">      count.update(integer)</span><br><span class="line">      integer</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态后端"><a href="#状态后端" class="headerlink" title="状态后端"></a>状态后端</h2><p>状态的存储、访问以及维护，由一个可插入的组件决定，这个组件就 叫做状态后端（state backend）</p><p>状态后端主要负责两件事：本地的状态管理，以及将检查点 （checkpoint）状态写入远程存储</p><p>由于有效的状态访问对于处理数据的低延迟至关重要，<strong>因此每个并行 任务都会在本地维护其状态</strong>，以确保快速的状态访问</p><h3 id="选择一个状态后端"><a href="#选择一个状态后端" class="headerlink" title="选择一个状态后端"></a><strong>选择一个状态后端</strong></h3><h4 id="MemoryStateBackend"><a href="#MemoryStateBackend" class="headerlink" title="MemoryStateBackend"></a><em>MemoryStateBackend</em></h4><p>内存级的状态后端，会将键控状态作为内存中的对象进行管理，将它们存储在 TaskManager 的 内存上，而将 checkpoint 存储在 JobManager 的内存 中 </p><p>特点：快速、低延迟，但不稳定</p><h4 id="FsStateBackend"><a href="#FsStateBackend" class="headerlink" title="FsStateBackend"></a><em>FsStateBackend</em></h4><p>将 checkpoint 存到远程的持久化文件系统（FileSystem）上，而对于本地状 态，跟 MemoryStateBackend 一样，也会存在 TaskManager 的内存上</p><p> 同时拥有内存级的本地访问速度，和更好的容错保证</p><h4 id="RocksDBStateBackend"><a href="#RocksDBStateBackend" class="headerlink" title="RocksDBStateBackend"></a><em>RocksDBStateBackend</em></h4><p>将所有状态序列化后，存入本地的 RocksDB 中存储</p><p>TaskManager的状态只是进行缓存，并不真正的存在于内存</p><h3 id="如何使用-2"><a href="#如何使用-2" class="headerlink" title="如何使用"></a>如何使用</h3><p><code>env.setStateBackend(new FsStateBackend(&quot;&quot;))</code></p><p>Flink官方可以支持<em>FsStateBackend</em>、<em>MemoryStateBackend</em>，第三个也支持，不过需要导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-statebackend-rocksdb_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="状态一致性"><a href="#状态一致性" class="headerlink" title="状态一致性"></a>状态一致性</h2><p>当在分布式系统中引入状态时，自然也引入了一致性问题。只听状态一致性有点难听懂，它本质就是<font color="red"><strong>成功处理故障并恢复前后的结果的正确性级别</strong></font>。</p><p>也就是说在成功处理故障并恢复之后得到的结果，与没有发生任何故障时得到的结果相比，前者到底有多正确？举例来说，假设要对最近一小时登录的用户计数。在系统经历故障之后，计数结果是多少？如果有偏差，是有漏掉的计数（最多一次）还是重复计数（最少一次）？</p><h3 id="一致性级别"><a href="#一致性级别" class="headerlink" title="一致性级别"></a>一致性级别</h3><p>在流处理中，一致性可以分为3个级别：</p><ol><li><code>at-most-once</code>: 这其实是没有正确性保障的委婉说法——故障发生之后，计数结果可能丢失。同样的还有udp。</li><li><code>at-least-once</code>: 这表示计数结果可能大于正确值，但绝不会小于正确值。也就是说，计数程序在发生故障后可能多算，但是绝不会少算。</li><li><code>exactly-once</code>: 这指的是系统保证在发生故障后得到的计数结果与正确值一致。</li></ol><p>Flink的一个重大价值在于，<strong>它既保证了exactly-once，也具有低延迟和高吞吐的处理能力。</strong></p><h3 id="端到端的一致性🔺"><a href="#端到端的一致性🔺" class="headerlink" title="端到端的一致性🔺"></a>端到端的一致性🔺</h3><p>目前我们看到的一致性保证都是由流处理器实现的，<strong>也就是说都是在 Flink 流处理器内部保证的</strong>；而在真实应用中，流处理应用除了流处理器以外还包含了数据源（例如 Kafka）和输出到持久化系统。</p><p>即端到端一致性指的是从Source-Flink内部程序-Sink持久化系统，状态的一致性即结果的正确性贯穿了整个流处理应用的始终。</p><p>每一个组件都保证了它自己的一致性，<font color="red">整个端到端的一致性级别取决于所有组件中一致性最弱的组件</font>。具体可以划分如下：</p><ul><li>内部保证 —— <strong>依赖checkpoint</strong></li><li>source 端 —— 需要外部源<strong>可重设数据的读取位置</strong></li><li>sink 端 —— 需要保证从故障恢复时，<strong>数据不会重复写入外部系统</strong></li></ul><p>而对于sink端，又有两种具体的实现方式：</p><ol><li>幂等（Idempotent）写入。</li><li>事务性（Transactional）写入。</li></ol><h4 id="幂等写入"><a href="#幂等写入" class="headerlink" title="幂等写入"></a>幂等写入</h4><p>所谓幂等操作，是说一个操作，可以重复执行很多次，但只导致一次结果更改，也就是说，后面再重复执行就不起作用了。</p><p>但是它的结果会有一个渐变的流程，例如求最大温度：</p><p>1-&gt;2-&gt;10，此时故障从上一检查点处重新计算，2-&gt;10-&gt;12。最终的SInk数据流为1-&gt;2-&gt;10-&gt;2-&gt;10-&gt;12。虽然最终结果无误，但是流程看起来不好，如果这些数据要实时展示，则会给人误解。</p><h4 id="事务性写入🔺"><a href="#事务性写入🔺" class="headerlink" title="事务性写入🔺"></a>事务性写入🔺</h4><p>需要构建事务来写入外部系统，构建的事务对应着 checkpoint，等到 checkpoint 真正完成的时候，才把所有对应的结果写入 sink 系统中。</p><p>对于事务性写入，具体又有两种实现方式：预写日志（WAL）和两阶段提交（2PC）。DataStream API 提供了<code>GenericWriteAheadSink</code>模板类和<code>TwoPhaseCommitSinkFunction </code>接口，可以方便地实现这两种方式的事务性写入。</p><blockquote><p>预写日志（WAL）并不是真正的<code>exactly-once</code>，当批量写入Sink时，如果中途出错，从checkpoint回放数据，则会导致数据重复插入</p><p>两阶段提交（2PC）才是真正的<code>exactly-once</code>，但是它需要写入的系统支持事务，并且事务的超时时间最好和checkpoint的超时时间一致。</p><p>[两阶段提交保证ExactlyOnce](#Exactly-once 两阶段提交)</p></blockquote><p><strong>两阶段提交（2PC）</strong></p><ul><li>对于每个 checkpoint，sink 任务会启动一个事务，并将接下来所有 接收的数据添加到事务里</li><li>然后将这些数据写入外部 sink 系统，但不提交它们 —— 这时只是 “预提交”</li><li>当它收到 checkpoint 完成的通知时，它才正式提交事务，实现结果 的真正写入</li><li>这种方式真正实现了 exactly-once，它需要一个提供事务支持的外部 sink 系统。Flink 提供了 TwoPhaseCommitSinkFunction 接口</li></ul><h3 id="不同-Source-和-Sink-的一致性保证"><a href="#不同-Source-和-Sink-的一致性保证" class="headerlink" title="不同 Source 和 Sink 的一致性保证"></a>不同 Source 和 Sink 的一致性保证</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104211430912.png" alt="image-20210104211430912"></p><h3 id="Flink-Kafka-端到端状态一致性的保证"><a href="#Flink-Kafka-端到端状态一致性的保证" class="headerlink" title="Flink+Kafka 端到端状态一致性的保证"></a>Flink+Kafka 端到端状态一致性的保证</h3><ul><li>内部 —— 利用 checkpoint 机制，把状态存盘，发生故障的时候以恢 复，保证内部的状态一致性</li><li>source —— kafka consumer 作为 source，可以将偏移量保存下来， 如果后续任务出现了故障，恢复的时候可以由连接器重置偏移量，重新 消费数据，保证一致性</li><li>sink —— kafka producer 作为sink，采用两阶段提交 sink，需要实现 一个 TwoPhaseCommitSinkFunction</li></ul><h1 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h1><p>Flink具体如何保证exactly-once呢? 它使用一种被称为”检查点”（checkpoint）的特性，在出现故障时将系统重置回正确状态。</p><p>说到容错机制，就是Flink应用程序在遇到问题时的计算结果是否还正确的问题。</p><p><strong>Flink容错机制的核心就是应用状态的一致性检查点</strong>，它是通过应用状态的一致性检查点来实现故障恢复的！</p><p>有状态流应用的一致检查点，其实就是所有任务的状态，在某个时间点的一份 拷贝（一份快照）；<font color="red"><strong>这个时间点，应该是所有任务都恰好处理完一个相同的输 入数据的时候</strong>，而不是同一时刻同时存储各个算子的状态</font>。</p><blockquote><p>如果不是这样必然会导致故障时有的算子计算了数据n有的没有计算，那么故障恢复时数据n还要被重放吗，补充放之前没有计算的算子丢失了此数据，重放的话之前计算了此数据的算子重复计算了此数据。</p></blockquote><h2 id="从检查点恢复状态"><a href="#从检查点恢复状态" class="headerlink" title="从检查点恢复状态"></a>从检查点恢复状态</h2><p>在执行流应用程序期间，Flink 会定期保存状态的一致检查点</p><p>如果发生故障， Flink 将会使用最近的检查点来一致恢复应用程序的状态，并 重新启动处理流程：</p><blockquote><p>遇到故障之后，第一步就是重启应用</p></blockquote><blockquote><p>第二步是从 checkpoint 中读取状态，将状态重置</p><p>从检查点重新启动应用程序后，其内部状态与检查点完成时的状态完全相同</p></blockquote><blockquote><p>第三步：开始消费并处理检查点到发生故障之间的所有数据</p><p>这种检查点的保存和恢复机制可以为应用程序状态提供<strong>“精确一次” （exactly-once）的一致性</strong>，因为所有算子都会保存检查点并恢复其所有状 态，这样一来所有的输入流就都会被重置到检查点完成时的位置（但是需要Source的组件支持数据回放，如果是sock流的话就GG了）</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104212513441.png" alt="image-20210104212513441"></p><h2 id="检查点的实现算法🔺"><a href="#检查点的实现算法🔺" class="headerlink" title="检查点的实现算法🔺"></a>检查点的实现算法🔺</h2><p>检查点的实现算法有：</p><ol><li>暂停应用，保存状态到检查点，再重新恢复应用（Flink不是这一种）</li><li>异步，基于 Chandy-Lamport 算法的分布式快照，将检查点的保存和数据处理分离开，不暂停整个应用（Flink）</li></ol><blockquote><p>即每个算子都单独的去保存状态到状态后端，在算子在获取到检查点屏障时，直接将状态更新到状态后端，然后继续计算后面的数据，而检查点屏障也发送给后面的算子，后面的算子也和前面算子的处理逻辑一样，所以同一检查点的各个算子的状态并不是同一时刻保存到状态后端的。</p></blockquote><p><strong>Flink 检查点算法</strong></p><p>检查点分界线（Checkpoint Barrier）</p><ul><li>Flink 的检查点算法用到了一种称为<strong>分界线（barrier）</strong>的特殊数据形式（类似于WaterMark）， 用来把一条流上<strong>数据按照不同的检查点分开</strong></li><li><strong>分界线之前到来的数据导致的状态更改，都会被包含在当前分界线所属 的检查点中；而基于分界线之后的数据导致的所有更改，就会被包含在 之后的检查点中</strong></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>现在是一个有两个输入流的应用程序，用并行的两个 Source 任务来读取</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104213222043.png" alt="image-20210104213222043"></p><p>然后由JobManager协调发出给所有并行的Source任务发送一条带有新检查点 ID 的消息，通过这 种方式来启动检查点</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104213323571.png" alt="image-20210104213323571"></p><p>数据源将它们的状态写入检查点，并发出一个检查点 barrier。状态后端在状态存入检查点之后，会返回通知给 source 任务，source 任务就会 向 JobManager 确认检查点完成。</p><p>例如下图，Source1、Source2在经过Barrier后，直接将状态发送到状态后端。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104213517551.png" alt="image-20210104213517551"></p><p>但是，由于并行度，Barrier的传递也是和WaterMark类似的，<font color="red">都是广播的方式发送给下游所有算子</font>。<font color="red">下游算子接收到上游所有的Barrier后</font>才开始将当前状态发送给StateBackend。<strong>这被称为分界线对齐</strong></p><p>既然下游算子接收到上游的所有Barrier后才开始保存状态，那就必然面临着Barrier到达先后的问题，如下图<code>Sum Even</code>需要接收到蓝2与黄2才能保存状态。</p><ol><li>但是如果此时的到达顺序为蓝2，Source1的数据4，黄2；则Source1的数据4不会被加入状态而是被缓存</li><li>但是如果此时的到达顺序为蓝2，Source2的数据4，黄2；则Source2的数据4会被加入状态</li></ol><blockquote><p>对于barrier已经到达的分区，继续到达的数据会被缓存</p><p>而barrier尚未到达的分区，数据会被正常处理</p><hr><p>因为对于barrier已经到达的分区，如果继续计算加入状态的话，当检查点故障恢复时继续加入的数据会被重放，再次加入状态，就导致了这个数据被计算了2次，就不是exactly once了</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104214139282.png" alt="image-20210104214139282"></p><p>当收到所有输入分区的 barrier 时，任务就将其状态保存到状态后端的检查点中， 然后将 barrier 继续向下游转发。向下游转发检查点 barrier 后，任务继续正常的数据处理</p><p>Sink 任务向 JobManager 确认状态保存到 checkpoint 完毕</p><p>当所有任务都确认已成功将状态保存到检查点时，检查点就真正完成了</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104214755905.png" alt="image-20210104214755905"></p><h2 id="保存点"><a href="#保存点" class="headerlink" title="保存点"></a>保存点</h2><p>是Flink特有的功能，它与检查点的区别就是一个是手动触发的；一个是JobManager周期性触发的。</p><p>保存点就是自定义的镜像保存功能，将数据保存到指定地方。可以通过数据启动程序</p><p><strong>特点：</strong></p><ol><li>原则上，创建保存点使用的算法与检查点完全相同，因此保存点可以认 为就是具有一些额外元数据的检查点</li><li>Flink不会自动创建保存点，因此用户（或者外部调度程序）必须明确地 触发创建操作</li></ol><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><strong>1. 有计划的备份</strong></p><p><strong>2. Flink版本迁移</strong></p><p>Flink升级时，之前的Flink程序不可能重启，这样以前计算的数据被丢失是不被允许的，在Flink升级前设置一个保存点，然后FLink版本更新后，使用新版Flink命令开启Flink应用程序通过保存点加载数据，做到数据不丢失</p><p><strong>3. 暂停和重启应用</strong></p><p>资源不充足时，停调不重要的任务并添加保存点。待资源充足时再次开始并加载之前数据。</p><h2 id="容错机制的开启🔺"><a href="#容错机制的开启🔺" class="headerlink" title="容错机制的开启🔺"></a>容错机制的开启🔺</h2><p><strong>1. 检查点默认不开启，手动开启</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env.enableCheckpointing(<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>参数为检查点的间隔，每5000ms产生一个检查点</p><p><strong>2. 添加状态后端组件，指定检查点保存位置</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env.setStateBackend(<span class="keyword">new</span> <span class="type">FsStateBackend</span>(<span class="string">&quot;file:///。。。。&quot;</span>))</span><br></pre></td></tr></table></figure><hr><p>Checkpoint的设置：</p><ol><li><code>env.getCheckpointConfig.setCheckpointTimeout(60000)</code>：检查点超时时间</li><li><code>env.getCheckpointConfig.setMaxConcurrentCheckpoints(2)</code>：同时存在的保存点</li><li><code>env.getCheckpointConfig.setMinPauseBetweenCheckpoints(100)</code>：上一检查点结束后和下一检查点产生前的最小等待时间；<strong>如果在此等待时间内正好由于检查点时间间隔该产生下一检查点了，则下一检查点的产生时间变更为最小等待时间过去之后。</strong></li></ol><h2 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h2><p>Flink程序故障时，重启并不能解决一切问题。那么有效的重启策略就是有必要的。</p><p>设置重启策略：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env.setRestartStrategy()</span><br></pre></td></tr></table></figure><p>有下面几个策略：</p><ol><li>不重启</li><li>回滚重启：由资源管理器决定</li><li>固定延迟重启：可设置重启次数和重启间隔</li><li>失败率重启：可设置重启次数、重启间隔、指定的时间之内</li></ol><h1 id="Exactly-once-两阶段提交"><a href="#Exactly-once-两阶段提交" class="headerlink" title="Exactly-once 两阶段提交"></a>Exactly-once 两阶段提交</h1><p>JobManager 协调各个 TaskManager 进行 checkpoint 存储</p><p>checkpoint保存在 StateBackend中，默认StateBackend是内存级的，也可以改 为文件级的进行持久化保存</p><p>当 checkpoint 启动时，JobManager 会将检查点分界线（barrier）注入数据流</p><p>barrier会在算子间传递下去</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104211640764.png" alt="image-20210104211640764"></p><p>每个算子会对当前的状态做个快照，保存到状态后端</p><p>checkpoint 机制可以保证内部的状态一致性</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104211739784.png" alt="image-20210104211739784"></p><p>每个内部的 transform 任务遇到 barrier 时，都会把状态存到 checkpoint 里</p><p>sink 任务首先把数据写入外部 kafka，这些数据都属于<strong>预提交的事务</strong>；遇到 barrier 时，<strong>把状态保存到状态后端，并开启新的预提交事务</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104211815182.png" alt="image-20210104211815182"></p><p>当所有算子任务的快照完成，也就是这次的 checkpoint 完成时，JobManager 会向所有任务发通知，确认这次 checkpoint 完成</p><p>sink 任务收到确认通知，正式提交之前的事务，kafka 中未确认数据改为“已确 认”</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210104211830889.png" alt="image-20210104211830889"></p><p><strong>Exactly-once 两阶段提交步骤</strong></p><ol><li>第一条数据来了之后，开启一个 kafka 的事务（transaction），正常写入 kafka 分 区日志但标记为未提交，这就是“预提交” </li><li>jobmanager 触发 checkpoint 操作，barrier 从 source 开始向下传递，遇到 barrier 的算子将状态存入状态后端，并通知 jobmanager </li><li>sink 连接器收到 barrier，保存当前状态，存入 checkpoint，通知 jobmanager， 并开启下一阶段的事务，用于提交下个检查点的数据</li><li>jobmanager 收到所有任务的通知，发出确认信息，表示 checkpoint 完成</li><li> sink 任务收到 jobmanager 的确认信息，正式提交这段时间的数据</li><li> 外部kafka关闭事务，提交的数据可以正常消费了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink的时间语义和watermark</title>
      <link href="2020/12/23/Flink%E6%97%B6%E9%97%B4%E8%AF%AD%E4%B9%89%E5%92%8CWaterMark/"/>
      <url>2020/12/23/Flink%E6%97%B6%E9%97%B4%E8%AF%AD%E4%B9%89%E5%92%8CWaterMark/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们将介绍时间语义，并描述流中不同的时间概念。我们将讨论流处理器在乱序事件流的情况下如何提供准确的计算结果，以及我们如何处理历史事件流，如何在流中进行时间旅行。</p><blockquote><p>时间旅行。乱序事件流，更有古老数据的事件。</p></blockquote><h2 id="不同的时间语义"><a href="#不同的时间语义" class="headerlink" title="不同的时间语义"></a>不同的时间语义</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-23_19-05-44.png" alt="Snipaste_2020-12-23_19-05-44"></p><ul><li>Event Time：事件的创建事件。（除了未开源的Google DataFlow外，Flink是唯一支持事件时间的）</li><li>Ingestion Time：数据进入Flink的时间</li><li>Processing Time：执行操作算子的<strong>本地系统时间</strong>，与机器相关</li></ul><h2 id="更加形象的事件时间"><a href="#更加形象的事件时间" class="headerlink" title="更加形象的事件时间"></a>更加形象的事件时间</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-23_19-07-29.png" alt="Snipaste_2020-12-23_19-07-29"></p><p>1977-2015是处理时间、星球大战1-星球大战7是事件时间。</p><ul><li>不同的时间语义有不同的应用场合</li><li>我们往往更关心事件时间（Event Time）</li></ul><hr><h1 id="事件时间"><a href="#事件时间" class="headerlink" title="事件时间"></a>事件时间</h1><p>事件时间是流中的事件实际发生的时间。事件时间基于流中的事件所包含的时间戳。<font color="red">通常情况下，在事件进入流处理程序前，事件数据就已经包含了时间戳</font>。下图展示了事件时间窗口将会正确的将事件分发到窗口中去。可以如实反应事情是怎么发生的。即使事件可能存在延迟。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0213.png"></p><p>事件时间使得计算结果的过程不需要依赖处理数据的速度。基于事件时间的操作是可以预测的，而计算结果也是确定的。无论流处理程序处理流数据的速度快或是慢，无论事件到达流处理程序的速度快或是慢，事件时间窗口的计算结果都是一样的。因为它采用的是事件中的时间</p><p><font color="red">如果使用事件时间，即使碰到了事件乱序到达的情况，我们也可以保证结果的正确性</font>。还有，当我们在处理可以重播的流数据时，由于时间戳的确定性，我们可以快进过去。也就是说，我们可以重播一条流，然后分析历史数据，就好像流中的事件是实时发生一样。另外，我们可以快进历史数据来使我们的应用程序追上现在的事件，然后应用程序仍然是一个实时处理程序，而且业务逻辑不需要改变。</p><h2 id="代码中设置事件时间"><a href="#代码中设置事件时间" class="headerlink" title="代码中设置事件时间"></a>代码中设置事件时间</h2><p>我们可以直接在代码中，对执行环境调用<code>setStreamTimeCharacteristic</code>方法，设置流的时间特性；具体的时间，<strong>还需要从数据中提取时间戳（timestamp）</strong>（<font color="red">必须</font>）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"><span class="comment">// 设置流的时间特征</span></span><br><span class="line">env.setStreamTimeCharacteristic(<span class="type">TimeCharacteristic</span>.<span class="type">EventTime</span>)</span><br></pre></td></tr></table></figure><p><strong>提取时间戳+设置水位线</strong></p><p><a href="#%E6%B0%B4%E4%BD%8D%E7%BA%BF%E7%9A%84%E5%BC%95%E5%85%A5">查看</a></p><h2 id="事件时间怎么解决乱序数据"><a href="#事件时间怎么解决乱序数据" class="headerlink" title="事件时间怎么解决乱序数据"></a>事件时间怎么解决乱序数据</h2><p>乱序数据会让窗口计算不准确</p><p>如图，被圆圈圈住得数据是当前事件得事件时间（发生事件得时间），而事件得顺序就是事件到达Flink得顺序。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-23_19-34-40.png" alt="Snipaste_2020-12-23_19-34-40"></p><p>假如，我们开了一个时间长度为5s得事件时间窗口。因为是事件时间窗口，当事件时间为5s得事件到达时，我们这个0-5得时间窗口就能关闭了吗，就能认为这个窗口得数据都到达了吗？</p><p>答案是不能的，如果是处理时间的窗口，那么过了5S窗口就直接关闭了，它使用机器时间。但是事件时间窗口使用的是事件的时间，这个时间他在数据里，虽然第5s的数据到了，但没人能保证5S之前的数据会不会由于网络、分布式等原因迟到，会导致乱序数据的产生，或者第5s有没有多条数据。</p><p>那么如果是事件事件窗口得话，这个窗口就永久不关闭吗，这样大量窗口在处理，会拖垮程序的。</p><p><font color="red"><strong>这时候提出了水位线的概念，来代表事件时间数据流的时间流动进度。</strong></font></p><h1 id="水位线（WaterMark）🔺"><a href="#水位线（WaterMark）🔺" class="headerlink" title="水位线（WaterMark）🔺"></a>水位线（WaterMark）🔺</h1><p>提出水位线之前，我们可以列举几个事件时间窗口得问题：</p><ul><li>怎样避免乱序数据带来计算不正确？<ul><li>Watermark 是用于处理乱序事件的，而正确的处理乱序事件，通常用Watermark 机制结合 window 来实现；</li></ul></li><li>我们应该怎样去决定何时触发事件时间窗口的计算？（怎么关闭时间窗口）</li></ul><p><strong>watermark 用来让程序自己平衡延迟和结果正确性</strong></p><p>在本小节中，我们将会看到如何使用水位线来设置事件时间窗口的行为。</p><hr><p>水位线是时间全局进度的度量标准。<strong>系统可以确信在一个时间点之后，不会有早于这个时间点发生的事件到来了。</strong>本质上，水位线提供了一个逻辑时钟，这个逻辑时钟告诉系统当前的事件时间。当一个运算符接收到含有时间T的水位线时，这个运算符会认为早于时间T的发生的事件已经全部都到达了。<strong>对于事件时间窗口和乱序事件的处理，水位线非常重要。</strong><font color="red">运算符一旦接收到水位线，运算符会认为一段时间内发生的所有事件都已经观察到，可以触发针对这段时间内所有事件的计算了。</font></p><blockquote><p><strong>系统可以确信在一个时间点之后，不会有早于这个时间点发生的事件到来了。</strong></p><p>（只是这样规定的，实际上还是有可能有早于这个时间点发生的事件到来，这时事件被称为迟到事件，默认迟到事件被丢弃。后面有单独的迟到事件的处理章节）</p></blockquote><h2 id="水位线作用"><a href="#水位线作用" class="headerlink" title="水位线作用"></a>水位线作用</h2><p>水位线提供了一种<strong>结果可信度和延时之间的妥协</strong>。激进的水位线设置可以保证低延迟，但结果的准确性不够。在这种情况下，<strong>迟到的事件有可能晚于水位线到达，我们需要编写一些代码来处理迟到事件</strong>。另一方面，<strong>如果水位线设置的过于宽松，计算的结果准确性会很高，但可能会增加流处理程序不必要的延时</strong>。</p><blockquote><p>白话讲</p><p><strong>结果可信度和延时之间的妥协</strong>：</p><p>就是说水位线时有一个最大延迟时间的概念，加入最大的事件时间到了是10S，但是最大延迟时间是5S，那么当前水位线就是5S，那么0-10S的窗口就不会关闭计算，它在等待因为某些原因还没有到的0-10S的事件。</p><p>一方面：</p><p>当最大时间时间到了15S，最大延迟时间是5S，那么当前水位线就是10S。即0-10S的窗口已经关闭开始了计算，那么之后到的0-10S的事件事件数据就是迟到事件，需要编写一些代码来处理（默认丢弃）</p><p>另一方面：</p><p>如果将水位线设置的宽松，准确性就会提高。例如放大最大延迟时间，但是可能会增加流处理程序不必要的延时</p></blockquote><p>如图，设时间窗口大小为10S，最大延迟事件为5S。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-23_21-13-13.png" alt="Snipaste_2020-12-23_21-13-13"></p><hr><p>在13S到达时，水位线为7S。</p><ul><li>这时如果没有更大的事件时间到来时，那么这个时间段内所有0-10S的数据都会进入窗口。</li><li>当15S的事件时间到达时，水位线为10S。0-10S的窗口将被计算并且关闭。</li><li>如果在15S的事件时间到达后，又来临了0-10S的事件时间。它们默认将被抛弃，除了写了专门处理的代码</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-23_21-22-39.png" alt="Snipaste_2020-12-23_21-22-39"></p><h2 id="水位线特点🔺"><a href="#水位线特点🔺" class="headerlink" title="水位线特点🔺"></a>水位线特点🔺</h2><ul><li>watermark默认每200ms插入一次，由程序员编码插入。可以使用<code>env.getConfig.setAutoWatermarkInterval(5000)</code>方法进行设置。</li><li>Watermark 是一种衡量 Event Time 进展的机制，可以设定延迟触发</li><li>watermark 必须单调递增，以确保任务的事件时间时钟在向前推进，而不是在后退</li><li>只有事件时间需要水位线，水位线只有在窗口计算时才有用，事件时间可以设置最大延迟时间</li><li><font color="red">系统认为时间戳小于水位线的事件都已经到达了</font></li><li><font color="red">事件时间窗口的闭合触发规则：水位线大于等于窗口结束时间</font></li><li><font color="red"><code>watermark  = 最大事件时间 - 最大延迟时间</code></font></li></ul><blockquote><p>通常，当水位线超过窗口结束时间时，窗口将不再接收事件，然后触发计算，计算完毕，窗口被销毁</p></blockquote><hr><blockquote><p> 通常都是在流之后立马设置水位线，因为经过分流后在设置水位线，流之间的水位线会很乱</p></blockquote><h2 id="水位线的引入"><a href="#水位线的引入" class="headerlink" title="水位线的引入"></a>水位线的引入</h2><h3 id="自带"><a href="#自带" class="headerlink" title="自带"></a>自带</h3><p><strong>对于排好序的数据，不需要延迟触发，可以只指定时间戳就行了</strong></p><p>当10S到达后，因为窗口是左闭右开，这个10S不会立马加入窗口计算，<font color="red">所以当前水位线是最大事件时间-1ms。</font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间戳必须是ms，根据自己需求写</span></span><br><span class="line">dataStream.assignAscendingTimestamps(_timestamp * <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><strong>对于乱序数据，需要来设置延迟时间，来解决问题</strong></p><p>即设置最大延迟时间</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.assignTimestampsAndWatermarks(</span><br><span class="line">       <span class="comment">// 设置最大延迟时间为5S</span></span><br><span class="line">       <span class="keyword">new</span> <span class="type">BoundedOutOfOrdernessTimestampExtractor</span>[(<span class="type">String</span>, <span class="type">Long</span>)](<span class="type">Time</span>.seconds(<span class="number">5</span>)) &#123;</span><br><span class="line">         <span class="comment">// 设置那个元素是事件自带的</span></span><br><span class="line">       <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(t: (<span class="type">String</span>, <span class="type">Long</span>)) = t._2</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>我们知道默认的水平线计算规则为<code>最大事件时间-最大延迟时间</code>，即<code>BoundedOutOfOrdernessTimestampExtractor</code>类的实现。而且是每隔200ms插入一次。</p><p>Flink提供了接口，我们可以自定义实现水平线的实现逻辑，即它的计算规则可以更改，并且它的插入也可以更改（规则性插入|不规则插入），分别对应着两个接口：</p><ol><li><code>AssignerWithPeriodicWatermarks</code>：<a href="#%E5%91%A8%E6%9C%9F%E6%80%A7%E7%9A%84%E7%94%9F%E6%88%90%E6%B0%B4%E4%BD%8D%E7%BA%BF">周期性的生成水位线</a></li><li><code>AssignerWithPunctuatedWatermarks</code>：<a href="#%E5%A6%82%E4%BD%95%E4%BA%A7%E7%94%9F%E4%B8%8D%E8%A7%84%E5%88%99%E7%9A%84%E6%B0%B4%E4%BD%8D%E7%BA%BF">产生不规则的水位线</a></li></ol><h4 id="周期性的生成水位线"><a href="#周期性的生成水位线" class="headerlink" title="周期性的生成水位线"></a>周期性的生成水位线</h4><p>周期性的生成水位线：系统会周期性的将水位线插入到流中（水位线也是一种特殊的事件!）。默认周期是200毫秒，也就是说，系统会每隔200毫秒就往流中插入一次水位线。</p><blockquote><p>这里的200毫秒是机器时间！</p></blockquote><p>可以使用<code>ExecutionConfig.setAutoWatermarkInterval()</code>方法进行设置。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">env.setStreamTimeCharacteristic(<span class="type">TimeCharacteristic</span>.<span class="type">EventTime</span>)</span><br><span class="line"><span class="comment">// 每隔5秒产生一个水位线</span></span><br><span class="line">env.getConfig.setAutoWatermarkInterval(<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>上面的例子产生水位线的逻辑：每隔5秒钟，Flink会调用AssignerWithPeriodicWatermarks中的getCurrentWatermark()方法。如果方法返回的时间戳大于之前水位线的时间戳，新的水位线会被插入到流中。这个检查保证了水位线是单调递增的。如果方法返回的时间戳小于等于之前水位线的时间戳，则不会产生新的水位线。</p><hr><p>例子，自定义一个周期性的时间戳抽取</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeriodicAssigner</span> <span class="keyword">extends</span> <span class="title">AssignerWithPeriodicWatermarks</span>[<span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> bound = <span class="number">60</span> * <span class="number">1000</span> <span class="comment">// 默认，延时为1分钟</span></span><br><span class="line">  <span class="keyword">var</span> maxTs = <span class="type">Long</span>.<span class="type">MinValue</span> + bound <span class="comment">// 观察到的最大时间戳</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getCurrentWatermark</span></span>: <span class="type">Watermark</span> &#123;</span><br><span class="line">      <span class="comment">// 设置水位线，默认规则</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">Watermark</span>(maxTs - bound)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个事件到来都会执行，更新最大事件时间戳</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(r: <span class="type">SensorReading</span>, previousTS: <span class="type">Long</span>) &#123;</span><br><span class="line">    maxTs = maxTs.max(r.timestamp)</span><br><span class="line">    r.timestamp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的逻辑就是<code>BoundedOutOfOrdernessTimestampExtractor</code>的逻辑。</p><h4 id="如何产生不规则的水位线"><a href="#如何产生不规则的水位线" class="headerlink" title="如何产生不规则的水位线"></a><a href="#%E5%A6%82%E4%BD%95%E4%BA%A7%E7%94%9F%E4%B8%8D%E8%A7%84%E5%88%99%E7%9A%84%E6%B0%B4%E4%BD%8D%E7%BA%BF">如何产生不规则的水位线</a></h4><p>有时候输入流中会包含一些用于指示系统进度的特殊元组或标记。Flink为此类情形以及可根据输入元素生成水位线的情形提供了<code>AssignerWithPunctuatedWatermarks</code>接口。该接口中的<code>checkAndGetNextWatermark()</code>方法会在针对每个事件的<code>extractTimestamp()</code>方法后立即调用。它可以决定是否生成一个新的水位线。<strong>如果该方法返回一个非空、且大于之前值的水位线，算子就会将这个新水位线发出。</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PunctuatedAssigner</span> <span class="keyword">extends</span> <span class="title">AssignerWithPunctuatedWatermarks</span>[<span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> bound = <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每来一条数据就调用一次</span></span><br><span class="line">  <span class="comment">// 紧跟`extractTimestamp`函数调用</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">checkAndGetNextWatermark</span></span>(r: <span class="type">SensorReading</span>, extractedTS: <span class="type">Long</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r.id == <span class="string">&quot;sensor_1&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 抽取的时间戳 - 最大延迟时间</span></span><br><span class="line">      <span class="keyword">new</span> <span class="type">Watermark</span>(extractedTS - bound)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不产生时间戳</span></span><br><span class="line">      <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每来一条数据就调用一次</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(r: <span class="type">SensorReading</span>, previousTS: <span class="type">Long</span>) &#123;</span><br><span class="line">    r.timestamp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大延迟时间的设置"><a href="#最大延迟时间的设置" class="headerlink" title="最大延迟时间的设置"></a>最大延迟时间的设置</h2><p>完美的水位线永远不会错：时间戳小于水位线的事件不会再出现。在特殊情况下(例如非乱序事件流)，最近一次事件的时间戳就可能是完美的水位线。启发式水位线则相反，它只估计时间，因此有可能出错，即迟到的事件(其时间戳小于水位线标记时间)晚于水位线出现。针对启发式水位线，Flink提供了处理迟到元素的机制。</p><p><strong>设定水位线通常需要用到领域知识。</strong>举例来说，如果知道事件的迟到时间不会超过5秒，就可以将水位线标记时间设为收到的最大时间戳减去5秒。另一种做法是，采用一个Flink作业监控事件流，学习事件的迟到规律，并以此构建水位线生成模型。</p><p>如果最大延迟时间设置的很大，计算出的结果会更精确，但收到计算结果的速度会很慢，同时系统会缓存大量的数据，并对系统造成比较大的压力。如果最大延迟时间设置的很小，那么收到计算结果的速度会很快，但可能收到错误的计算结果。不过Flink处理迟到数据的机制可以解决这个问题。上述问题看起来很复杂，但是恰恰符合现实世界的规律：大部分真实的事件流都是乱序的，并且通常无法了解它们的乱序程度(因为理论上不能预见未来)。水位线是唯一让我们直面乱序事件流并保证正确性的机制; 否则只能选择忽视事实，假装错误的结果是正确的。</p><blockquote><ul><li>思考题一：实时程序，要求实时性非常高，并且结果并不一定要求非常准确，那么应该怎么办？</li><li>回答：直接使用处理时间。</li><li>思考题二：如果要进行时间旅行，也就是要还原以前的数据集当时的流的状态，应该怎么办？</li><li>回答：使用事件时间。使用Hive将数据集先按照时间戳升序排列，再将最大延迟时间设置为0。</li></ul></blockquote><h2 id="水位线、事件窗口的验证🔺"><a href="#水位线、事件窗口的验证🔺" class="headerlink" title="水位线、事件窗口的验证🔺"></a>水位线、事件窗口的验证🔺</h2><p>因为是验证窗口与水位线的关系，所以我们需要一个函数能同时获取窗口的基本信息（开始结束时间）和水位线的。</p><p>这就是前面提到的<code>PrcessWindowFunction</code>，因为要获取获取窗口的基本信息。所以，增量聚合函数在这里行不通。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 水位线和窗口结束时间结束 的关系</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line">    env.setStreamTimeCharacteristic(<span class="type">TimeCharacteristic</span>.<span class="type">EventTime</span>)</span><br><span class="line"></span><br><span class="line">    env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9000</span>, &#x27;\n&#x27;)</span><br><span class="line">      .map(r =&gt; (r.split(<span class="string">&quot; &quot;</span>)(<span class="number">0</span>), r.split(<span class="string">&quot; &quot;</span>)(<span class="number">1</span>).toLong * <span class="number">1000</span>))</span><br><span class="line">      .assignTimestampsAndWatermarks(</span><br><span class="line">        <span class="comment">// 设置最大延迟时间为5S</span></span><br><span class="line">        <span class="keyword">new</span> <span class="type">BoundedOutOfOrdernessTimestampExtractor</span>[(<span class="type">String</span>, <span class="type">Long</span>)](<span class="type">Time</span>.seconds(<span class="number">5</span>)) &#123;</span><br><span class="line">          <span class="comment">// 设置那个元素是事件自带的</span></span><br><span class="line">          <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(t: (<span class="type">String</span>, <span class="type">Long</span>)) = t._2</span><br><span class="line">        &#125;)</span><br><span class="line">      .keyBy(r =&gt; r._1)</span><br><span class="line">      <span class="comment">// 开窗10S</span></span><br><span class="line">      .timeWindow(<span class="type">Time</span>.seconds(<span class="number">10</span>))</span><br><span class="line">      .process(<span class="keyword">new</span> <span class="type">MyProcess</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[(<span class="type">String</span>, <span class="type">Long</span>), <span class="type">String</span>, <span class="type">String</span>, <span class="type">TimeWindow</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements: <span class="type">Iterable</span>[(<span class="type">String</span>, <span class="type">Long</span>)], out: <span class="type">Collector</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> startTime: <span class="type">String</span> = <span class="keyword">new</span> <span class="type">Timestamp</span>(context.window.getStart).toString</span><br><span class="line">      <span class="keyword">val</span> endTime: <span class="type">String</span> = <span class="keyword">new</span> <span class="type">Timestamp</span>(context.window.getEnd).toString</span><br><span class="line">      out.collect(<span class="string">s&quot;窗口的大小为：<span class="subst">$startTime</span>-<span class="subst">$endTime</span>\t窗口内的元素为：<span class="subst">$elements</span>\t个数为：<span class="subst">$&#123;elements.size&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>输入2，5，8，9，10。发现窗口没有反应，即第一个窗口没有关闭</li><li>输入12，15。发现窗口关闭了，当输入15时，水平线为10.正好大于等于第一个窗口的结束时间，所以窗口开始计算</li><li>看到日志第一个窗口没有10S，<strong>因为窗口是左闭右开的。</strong></li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201224163855851.png" alt="image-20201224163855851"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201224160149977.png" alt="image-20201224160149977"></p><h2 id="水位线的传递"><a href="#水位线的传递" class="headerlink" title="水位线的传递"></a>水位线的传递</h2><p>每个流都有着自己的水位线，在进行流合并时，水位线是怎么传递的呢？</p><p><font color="red"><strong>一个流在一个分区中就有一个水位线</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210101195833056.png" alt="image-20210101195833056"></p><blockquote><ol><li>在map_1和map_2都有自己的水位线</li><li>在发往分区1，2时，它们各自的水位线都发送，每个分区只将最小的水位线当最此分区此操作的水位线</li></ol><p>此时，如果125是窗口结束时间，如果想要触发结束，则map_1,map_2都要大于125的水位线</p><p><strong>结论，添加watermark离Source越近越好</strong></p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0309.png"></p><hr><h1 id="底层级处理函数🔺"><a href="#底层级处理函数🔺" class="headerlink" title="底层级处理函数🔺"></a>底层级处理函数🔺</h1><p>我们之前学习的转换算子<strong>是无法访问事件的时间戳信息和水位线信息的。</strong>而这在一些应用场景下，极为重要。例如MapFunction这样的map转换算子就无法访问时间戳或者当前事件的事件时间。</p><p>基于此，DataStream API提供了一系列的<strong>Low-Level转换算子。可以访问时间戳、水位线以及注册定时事件。</strong>还可以输出特定的一些事件，例如超时事件等。Process Function用来构建事件驱动的应用以及实现自定义的业务逻辑(使用之前的window函数和转换算子无法实现)。<strong>例如，Flink-SQL就是使用Process Function实现的。</strong></p><blockquote><p>Process Function都是Rich Function</p></blockquote><p><code>Flink</code>提供了8个Process Function：</p><ul><li>ProcessFunction：处理没有经过分组和开窗的流，直接对整条流处理，每个元素触发执行一次</li><li><code>KeyedProcessFunction</code>：处理分组后没有开窗的流，每个元素触发执行一次</li><li><code>CoProcessFunction</code>：处理connect之后的流</li><li>ProcessJoinFunction：处理两条流join后的流 </li><li>BroadcastProcessFunction</li><li>KeyedBroadcastProcessFunction</li><li><code>ProcessWindowFunction</code>：处理分流和开窗口以后的流，每个窗口结束时执行一次</li><li>ProcessAllWindowFunction：处理没有分流但开了窗的流，窗口结束时执行</li></ul><p>我们这里详细介绍一下KeyedProcessFunction。</p><h2 id="KeyedProcessFunction"><a href="#KeyedProcessFunction" class="headerlink" title="KeyedProcessFunction"></a><strong><em>KeyedProcessFunction</em></strong></h2><p>KeyedProcessFunction用<strong>来操作KeyedStream</strong>。KeyedProcessFunction<strong>会处理流的每一个元素，输出为0个、1个或者多个元素</strong>。<strong>所有的Process Function都继承自RichFunction接口</strong>，所以都有open()、close()和getRuntimeContext()等方法。而KeyedProcessFunction[KEY, IN, OUT]还额外提供了两个方法:</p><ol><li><code>processElement(v: IN, ctx: Context, out: Collector[OUT])</code>, 流中的<strong>每一个元素都会调用这个方法</strong>，调用结果将会放在Collector数据类型中输出。<strong>Context可以访问元素的时间戳，元素的key，以及TimerService时间服务</strong>。**Context还可以将结果输出到别的流(side outputs)**（后面讲#<a href="#%E4%BE%A7%E8%BE%93%E5%87%BA%E6%B5%81">侧输出流</a>）。</li><li><code>onTimer(timestamp: Long, ctx: OnTimerContext, out: Collector[OUT])</code>是一个回调函数。当之前<font color="red"><strong>注册的定时器触发时调用</strong></font>。参数timestamp为定时器所设定的触发的时间戳。Collector为输出结果的集合。OnTimerContext和processElement的Context参数一样，提供了上下文的一些信息，例如firing trigger的时间信息(事件时间或者处理时间)。</li></ol><h3 id="例子：时间服务和定时器"><a href="#例子：时间服务和定时器" class="headerlink" title="例子：时间服务和定时器"></a>例子：<a href="#%E6%97%B6%E9%97%B4%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%9A%E6%97%B6%E5%99%A8">时间服务和定时器</a></h3><p>Context和OnTimerContext所持有的TimerService对象拥有以下方法:</p><ul><li><code>currentProcessingTime(): Long</code> 返回当前处理时间</li><li><code>currentWatermark(): Long</code> 返回当前水位线的时间戳</li><li><code>registerProcessingTimeTimer(timestamp: Long): Unit</code> 会注册当前key的processing time的timer。当processing time到达定时时间时，触发timer。</li><li><code>registerEventTimeTimer(timestamp: Long): Unit</code> 会注册当前key的event time timer。当水位线大于等于定时器注册的时间时，触发定时器执行回调函数。</li><li><code>deleteProcessingTimeTimer(timestamp: Long): Unit</code> 删除之前注册处理时间定时器。如果没有这个时间戳的定时器，则不执行。</li><li><code>deleteEventTimeTimer(timestamp: Long): Unit</code> 删除之前注册的事件时间定时器，如果没有此时间戳的定时器，则不执行。</li></ul><p>当定时器timer触发时，执行回调函数onTimer()。<strong>processElement()方法和onTimer()方法是同步（不是异步）方法，这样可以避免并发访问和操作状态。</strong></p><p><strong>针对每一个key和timestamp，只能注册一个定期器</strong>。也就是说，每一个key可以注册多个定时器，但在每一个时间戳只能注册一个定时器。KeyedProcessFunction默认将所有定时器的时间戳放在一个优先队列中。在Flink做检查点操作时，定时器也会被保存到状态后端中。</p><p>举个例子说明KeyedProcessFunction如何操作KeyedStream。</p><p>下面的程序展示了如何监控温度传感器的温度值，如果温度值在一秒钟之内(processing time)连续上升，报警。</p><p>原理：通过状态变量（流中保留之前流数据的计算结果，每当新的数据到到达时，更新保存的状态变量）比较当前温度和上一个温度，如果大于的话，创建一个1S后的定时器报警；如果小于的话，取消之前的报警器。这样如果1S中之内报警器没有被取消的话，证明1S内温度在不断上升！</p><p>主要程序：（为什么使用状态变量，因为防止宕机后，丢失数据（状态变量可以存在hdfs上，初始化时读取，没有再初始化），使用状态变量的话得用懒执行，因为不用懒执行的话，初始化时<code>getRuntimeContext</code>还没有）</p><blockquote><p>需要注意我没有设置并行度，如果你的程序没有输出结果的话，是因为一般电脑的核数为8|16，所以addSource的并行度为8|16，而每个addSource在每s每个id大约会生成3条数据（根据300ms计算的得出），而乘以并行度8最后为24条，这时只有24条记录连续上升才会导致报警触发，所以很难出现结果。大家们可以单独将addSource的并行度设置为1</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.&#123;<span class="type">ValueState</span>, <span class="type">ValueStateDescriptor</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala.typeutils.<span class="type">Types</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.<span class="type">KeyedProcessFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"><span class="keyword">import</span> org.example.flink.source.&#123;<span class="type">SensorReading</span>, <span class="type">SensorSource</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TemperatureMonitor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> source: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    source.keyBy(r =&gt; r.id).process(<span class="keyword">new</span> <span class="type">MykeyedFunction</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MykeyedFunction</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>[<span class="type">String</span>, <span class="type">SensorReading</span>, <span class="type">String</span>] </span>&#123;</span><br><span class="line">    <span class="comment">// 定义状态变量，使用懒执行</span></span><br><span class="line">    <span class="comment">// 懒加载；</span></span><br><span class="line">    <span class="comment">// 状态变量会在检查点操作时进行持久化，例如hdfs</span></span><br><span class="line">    <span class="comment">// 只会初始化一次，单例模式</span></span><br><span class="line">    <span class="comment">// 在当机重启程序时，首先去持久化设备寻找名为`last-temp`的状态变量，如果存在，则直接读取。不存在，则初始化。</span></span><br><span class="line">    <span class="comment">// 流中上次温度，通过对比本次温度和上次温度，来看温度的上升/下降趋势  下降的话 取消之前设置的定时报警</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> perTemperature: <span class="type">ValueState</span>[<span class="type">Double</span>] = getRuntimeContext.getState(<span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Double</span>]</span><br><span class="line">    (<span class="string">&quot;last-temperature&quot;</span>, <span class="type">Types</span>.of[<span class="type">Double</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 之前设置的报警时间，当温度下降时需要获取之前设置的报警器的时间，通过时间来删除报警器</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> time: <span class="type">ValueState</span>[<span class="type">Long</span>] = getRuntimeContext.getState(<span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Long</span>]</span><br><span class="line">    (<span class="string">&quot;time&quot;</span>, <span class="type">Types</span>.of[<span class="type">Long</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个流的元素都会执行一遍</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">processElement</span></span>(i: <span class="type">SensorReading</span>, context: <span class="type">KeyedProcessFunction</span>[<span class="type">String</span>, <span class="type">SensorReading</span>, <span class="type">String</span>]#<span class="type">Context</span>, collector: <span class="type">Collector</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// 获取上次温度</span></span><br><span class="line">      <span class="keyword">val</span> lastTemperature: <span class="type">Double</span> = perTemperature.value()</span><br><span class="line">      <span class="comment">// 更新温度的状态变量</span></span><br><span class="line">      perTemperature.update(i.temperature)</span><br><span class="line">      <span class="keyword">val</span> curTime: <span class="type">Long</span> = time.value()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果是第一条温度，则上条温度为0 || 本地温度比上次温度低   当前是初始化或降温趋势，删除定时任务</span></span><br><span class="line">      <span class="keyword">if</span> (lastTemperature == <span class="number">0.0</span> || i.temperature&lt;lastTemperature) &#123;</span><br><span class="line">        <span class="comment">// 删除报警器，并清空定时器的状态变量</span></span><br><span class="line">        context.timerService().deleteProcessingTimeTimer(curTime)</span><br><span class="line">        time.clear()</span><br><span class="line">        <span class="comment">// 如果是温度处于上升趋势||定时器是未设置  则要设置定时器</span></span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i.temperature&gt; lastTemperature  &amp;&amp; curTime==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 1S 内  如果温度没有下降趋势，即没有取消定时器，则报警</span></span><br><span class="line">        <span class="keyword">val</span> l: <span class="type">Long</span> = context.timerService().currentProcessingTime() + <span class="number">1000</span></span><br><span class="line">        context.timerService().registerProcessingTimeTimer(l)</span><br><span class="line">        time.update(l)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不要按照注释那样写，血的教训  这样写 定时事件的时间和状态变量存储的时间不同，导致无法删除应该删除的定时事件</span></span><br><span class="line"><span class="comment">//        context.timerService().registerProcessingTimeTimer(context.timerService().currentProcessingTime() + 1000)</span></span><br><span class="line"><span class="comment">//        time.update(context.timerService().currentProcessingTime() + 1000)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器触发时执行的逻辑</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onTimer</span></span>(timestamp: <span class="type">Long</span>, ctx: <span class="type">KeyedProcessFunction</span>[<span class="type">String</span>, <span class="type">SensorReading</span>, <span class="type">String</span>]#<span class="type">OnTimerContext</span>, out: <span class="type">Collector</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      out.collect(<span class="string">s&quot;温度计id为<span class="subst">$&#123;ctx.getCurrentKey&#125;</span>的实例温度在1S内连续上升！&quot;</span>)</span><br><span class="line">      <span class="comment">// 不清空的话，如果温度继续上升则无法进行下一次的报警</span></span><br><span class="line">      time.clear()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了更好的展示结果，构造数据需要减少产生量：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.source</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Calendar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.<span class="type">SourceFunction</span>.<span class="type">SourceContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.&#123;<span class="type">RichParallelSourceFunction</span>, <span class="type">SourceFunction</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.<span class="type">Random</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SensorSource</span> <span class="keyword">extends</span> <span class="title">RichParallelSourceFunction</span>[<span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> running = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(sourceContext: <span class="type">SourceContext</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> rand = <span class="keyword">new</span> <span class="type">Random</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> curFTemp = (<span class="number">1</span> to <span class="number">10</span>).map(</span><br><span class="line">      i =&gt; (<span class="string">&quot;sensor_&quot;</span> + i, rand.nextGaussian() * <span class="number">20</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (running) &#123;</span><br><span class="line">      curFTemp = curFTemp.map(</span><br><span class="line">        t =&gt; (t._1, t._2 + rand.nextGaussian() * <span class="number">0.5</span>)</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">val</span> curTime = <span class="type">Calendar</span>.getInstance.getTimeInMillis</span><br><span class="line"></span><br><span class="line">      curFTemp.foreach(t =&gt; sourceContext.collect(<span class="type">SensorReading</span>(t._1, curTime, t._2)))</span><br><span class="line"></span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">300</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel</span></span>(): <span class="type">Unit</span> = running = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>只有用了Flink的流处理才能计算到连续的数据流中的状态数据变化，而如果用Spark来实现这个功能的根本实现不了的。因为：</p><ul><li>Spark的流处理是微批，无法监控到不同微批数据中的状态，就无法进行连续1S的数据计算</li><li>如果采用批处理的话，是可以。但是数据的产生都是实时的，根本不能用批处理。写写DEMO可以，实际无用处。</li></ul></blockquote><h2 id="CoProcessFunction"><a href="#CoProcessFunction" class="headerlink" title="CoProcessFunction"></a><strong><em>CoProcessFunction</em></strong></h2><p>对于两条输入流，DataStream API提供了CoProcessFunction这样的low-level操作。CoProcessFunction提供了操作每一个输入流的方法: processElement1()和processElement2()。类似于ProcessFunction，这两种方法都通过Context对象来调用。这个Context对象可以访问事件数据，定时器时间戳，TimerService，以及side outputs。<strong>CoProcessFunction也提供了onTimer()回调函数</strong>。下面的例子展示了如何使用CoProcessFunction来合并两条流。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.transform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.&#123;<span class="type">ValueState</span>, <span class="type">ValueStateDescriptor</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala.typeutils.<span class="type">Types</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.co.<span class="type">CoProcessFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"><span class="keyword">import</span> org.example.flink.source.&#123;<span class="type">SensorReading</span>, <span class="type">SensorSource</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CoProcessFunctionTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ingest sensor stream</span></span><br><span class="line">    <span class="keyword">val</span> readings: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// filter switches enable forwarding of readings</span></span><br><span class="line">    <span class="keyword">val</span> filterSwitches: <span class="type">DataStream</span>[(<span class="type">String</span>, <span class="type">Long</span>)] = env</span><br><span class="line">      .fromCollection(<span class="type">Seq</span>(</span><br><span class="line">        (<span class="string">&quot;sensor_2&quot;</span>, <span class="number">10</span> * <span class="number">1000</span>L),</span><br><span class="line">        (<span class="string">&quot;sensor_7&quot;</span>, <span class="number">60</span> * <span class="number">1000</span>L)</span><br><span class="line">      ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> forwardedReadings = readings</span><br><span class="line">      <span class="comment">// connect readings and switches</span></span><br><span class="line">      .connect(filterSwitches)</span><br><span class="line">      <span class="comment">// key by sensor ids</span></span><br><span class="line">      .keyBy(_.id, _._1)</span><br><span class="line">      <span class="comment">// apply filtering CoProcessFunction</span></span><br><span class="line">      .process(<span class="keyword">new</span> <span class="type">ReadingFilter</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReadingFilter</span> <span class="keyword">extends</span> <span class="title">CoProcessFunction</span>[<span class="type">SensorReading</span>, (<span class="type">String</span>, <span class="type">Long</span>), <span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line">    <span class="comment">// switch to enable forwarding</span></span><br><span class="line">    <span class="comment">// 传送数据的开关</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> forwardingEnabled: <span class="type">ValueState</span>[<span class="type">Boolean</span>] = getRuntimeContext</span><br><span class="line">      .getState(</span><br><span class="line">        <span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Boolean</span>](<span class="string">&quot;filterSwitch&quot;</span>, <span class="type">Types</span>.of[<span class="type">Boolean</span>])</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hold timestamp of currently active disable timer</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> disableTimer: <span class="type">ValueState</span>[<span class="type">Long</span>] = getRuntimeContext</span><br><span class="line">      .getState(</span><br><span class="line">        <span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Long</span>](<span class="string">&quot;timer&quot;</span>, <span class="type">Types</span>.of[<span class="type">Long</span>])</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">processElement1</span></span>(reading: <span class="type">SensorReading</span>,</span><br><span class="line">                                 ctx: <span class="type">CoProcessFunction</span>[<span class="type">SensorReading</span>,</span><br><span class="line">                                   (<span class="type">String</span>, <span class="type">Long</span>), <span class="type">SensorReading</span>]#<span class="type">Context</span>,</span><br><span class="line">                                 out: <span class="type">Collector</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// check if we may forward the reading</span></span><br><span class="line">      <span class="comment">// 决定我们是否要将数据继续传下去</span></span><br><span class="line">      <span class="keyword">if</span> (forwardingEnabled.value()) &#123;</span><br><span class="line">        out.collect(reading)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">processElement2</span></span>(switch: (<span class="type">String</span>, <span class="type">Long</span>),</span><br><span class="line">                                 ctx: <span class="type">CoProcessFunction</span>[<span class="type">SensorReading</span>,</span><br><span class="line">                                   (<span class="type">String</span>, <span class="type">Long</span>), <span class="type">SensorReading</span>]#<span class="type">Context</span>,</span><br><span class="line">                                 out: <span class="type">Collector</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// enable reading forwarding</span></span><br><span class="line">      <span class="comment">// 允许继续传输数据</span></span><br><span class="line">      forwardingEnabled.update(<span class="literal">true</span>)</span><br><span class="line">      <span class="comment">// set disable forward timer</span></span><br><span class="line">      <span class="keyword">val</span> timerTimestamp = ctx.timerService().currentProcessingTime()</span><br><span class="line">      + switch._2</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> curTimerTimestamp = disableTimer.value()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (timerTimestamp &gt; curTimerTimestamp) &#123;</span><br><span class="line">        <span class="comment">// remove current timer and register new timer</span></span><br><span class="line">        ctx.timerService().deleteProcessingTimeTimer(curTimerTimestamp)</span><br><span class="line">        ctx.timerService().registerProcessingTimeTimer(timerTimestamp)</span><br><span class="line">        disableTimer.update(timerTimestamp)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onTimer</span></span>(ts: <span class="type">Long</span>,</span><br><span class="line">                         ctx: <span class="type">CoProcessFunction</span>[<span class="type">SensorReading</span>,</span><br><span class="line">                           (<span class="type">String</span>, <span class="type">Long</span>), <span class="type">SensorReading</span>]#<span class="type">OnTimerContext</span>,</span><br><span class="line">                         out: <span class="type">Collector</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// remove all state; forward switch will be false by default</span></span><br><span class="line">      forwardingEnabled.clear()</span><br><span class="line">      disableTimer.clear()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ProcessFunction"><a href="#ProcessFunction" class="headerlink" title="ProcessFunction"></a>ProcessFunction</h2><blockquote><p><code>process function</code>与<code>KeyedProcessFunction</code>区别：</p><p><code>KeyedProcessFunction</code>是对于keyby后的流计算，而<code>process function</code>是对keyby前的流计算，都是一个元素触发一次计算</p></blockquote><h1 id="侧输出流"><a href="#侧输出流" class="headerlink" title="侧输出流"></a>侧输出流</h1><p>上面我们说过水位线加上最大延迟时间可保证小幅度迟到的数据可以继续加入窗口被计算，但是如果数据迟到的离谱，这时配置最大延迟时间肯定没有用了。</p><p>如果不设置它会默认舍弃这种迟到的时间。除非我们手动代码设置来处理这些数据，有2中方式。</p><ol><li>允许迟到的数据，一定时间内。此时来的数据与之前的结果进行聚合计算</li><li>输出到侧输出流</li></ol><p>与之前聊过的lambda架构，批处理提供数据准确性。而Flink通过一个流处理就能保证数据准确性，也是依靠了下面三点：</p><blockquote><p>准确计算性的三重保证：</p><ol><li>watermark：将时间进度由慢的watermark调控</li><li>allowedLateness：时间窗口结束时间小于等于水位线后开始聚合计算，计算后又有该时间范围内的数据到达时，迟到的数据每个元素进入都会和原窗口的结果进行聚合</li><li>侧输出流：最后的数据进入侧输出流。</li></ol></blockquote><hr><p>以下举一个例子，通过三重：watermark和最大延迟时间、允许迟到时间、和侧输出流保存丢弃元素来看处理乱序和迟到数据：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.transform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.&#123;<span class="type">ValueState</span>, <span class="type">ValueStateDescriptor</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala.typeutils.<span class="type">Types</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.<span class="type">TimeCharacteristic</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.<span class="type">BoundedOutOfOrdernessTimestampExtractor</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala.function.<span class="type">ProcessWindowFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.<span class="type">TimeWindow</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">LaterDataDeal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置事件时间</span></span><br><span class="line">    env.setStreamTimeCharacteristic(<span class="type">TimeCharacteristic</span>.<span class="type">EventTime</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 端口输入数据</span></span><br><span class="line">    <span class="keyword">val</span> input: <span class="type">DataStream</span>[<span class="type">String</span>] = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>, &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据的改装</span></span><br><span class="line">    <span class="keyword">val</span> mapStream: <span class="type">DataStream</span>[(<span class="type">String</span>, <span class="type">Long</span>)] = input.map(x =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> spilt: <span class="type">Array</span>[<span class="type">String</span>] = x.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">      (spilt(<span class="number">0</span>), spilt(<span class="number">1</span>).toLong * <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置水位线和最大延迟时间</span></span><br><span class="line">    <span class="keyword">val</span> preStream: <span class="type">WindowedStream</span>[(<span class="type">String</span>, <span class="type">Long</span>), <span class="type">String</span>, windows.<span class="type">TimeWindow</span>] = mapStream.assignTimestampsAndWatermarks(<span class="keyword">new</span> <span class="type">BoundedOutOfOrdernessTimestampExtractor</span>[(<span class="type">String</span>, <span class="type">Long</span>)](<span class="type">Time</span>.seconds(<span class="number">5</span>)) &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(t: (<span class="type">String</span>, <span class="type">Long</span>)): <span class="type">Long</span> = t._2</span><br><span class="line">    &#125;)</span><br><span class="line">      <span class="comment">// 分组+开窗</span></span><br><span class="line">      .keyBy(_._1)</span><br><span class="line">      .timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>))</span><br><span class="line">      <span class="comment">// 设置允许迟到数据的时间</span></span><br><span class="line">      .allowedLateness(<span class="type">Time</span>.seconds(<span class="number">5</span>))</span><br><span class="line">      <span class="comment">// 设置迟到的数据，侧输出流</span></span><br><span class="line">      .sideOutputLateData(<span class="keyword">new</span> <span class="type">OutputTag</span>[(<span class="type">String</span>, <span class="type">Long</span>)](<span class="string">&quot;later&quot;</span>))</span><br><span class="line"></span><br><span class="line">    preStream</span><br><span class="line">      <span class="comment">// 设置处理函数，需要同时考虑到第一次处理  和  因为允许迟到数据到来时和之前处理结果合并时的计算打印不同的值</span></span><br><span class="line">      .process(<span class="keyword">new</span> <span class="type">MyCount1</span>).print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyCount1</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[(<span class="type">String</span>, <span class="type">Long</span>), <span class="type">String</span>, <span class="type">String</span>, <span class="type">TimeWindow</span>]</span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements: <span class="type">Iterable</span>[(<span class="type">String</span>, <span class="type">Long</span>)], out: <span class="type">Collector</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// 设置每个窗口单独的状态变量，用于区别是水位线过窗口结束时间时的计算（第一次）还是允许迟到数据来临时候的聚合计算（后几次），只用于打印不同的值，实际上逻辑不必分开写</span></span><br><span class="line">      <span class="keyword">val</span> flag: <span class="type">ValueState</span>[<span class="type">Boolean</span>] = context.windowState.getState(<span class="keyword">new</span> <span class="type">ValueStateDescriptor</span>[<span class="type">Boolean</span>](<span class="string">&quot;flag&quot;</span>, <span class="type">Types</span>.of[<span class="type">Boolean</span>]))</span><br><span class="line"></span><br><span class="line">      <span class="comment">// flag默认false</span></span><br><span class="line">      <span class="comment">// false时是第一次计算，即水位线超过窗口结束时间时候</span></span><br><span class="line">      <span class="keyword">if</span> (!flag.value())&#123;</span><br><span class="line">        out.collect(<span class="string">s&quot;窗口开始第一次计算（水位线此时已经超过窗口结束时间），此时窗口内的元素的个数为<span class="subst">$&#123;elements.size&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment">// 更新状态</span></span><br><span class="line">        flag.update(<span class="literal">true</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 此时是因为允许迟到数据开始的聚合计算，此时此窗口已经计算了一个结果，但是因为允许迟到数据的时间未过，所以窗口未关闭，此时来一条数据需要计算一次</span></span><br><span class="line">        out.collect(<span class="string">s&quot;窗口整合迟到的数据开始计算...，此时窗口内的元素的个数为<span class="subst">$&#123;elements.size&#125;</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210102155853069.png" alt="image-20210102155853069"></p><p>可以看到因为水位线的关系，窗口[0,5)虽然在事件时间7到达时还没有触发计算，7之后的2还被直接纳入了窗口[0,5)，当事件时间10到达时，水位线已经到达了窗口的关闭时间，导致窗口计算，此时窗口内元素为3。</p><p>然后继续输入窗口[0,5)的数据</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210102160109858.png" alt="image-20210102160109858"></p><p>发现迟到的数据再次和[0,5)之前的结果整合计算，这是因为设置了<code>.allowedLateness(Time.seconds(5))</code>允许迟到的时间为5，在此时间区间内到达的数据会每条和之前窗口的计算结果进行整合计算。当超过这5秒时，再次到达的[0,5)窗口数据将被丢弃。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210102160331132.png" alt="image-20210102160331132"></p><p>第一个是[5,10)的窗口，当允许超时时间过去后，再次输入[0,5)窗口数据，数据被丢弃，存到了侧输出流<code>later</code></p>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink Api学习</title>
      <link href="2020/12/17/Flink-API/"/>
      <url>2020/12/17/Flink-API/</url>
      
        <content type="html"><![CDATA[<h1 id="DataStream-API"><a href="#DataStream-API" class="headerlink" title="DataStream API"></a>DataStream API</h1><p>所有的Flink程序都是由三部分组成的： Source 、Transformation 和 Sink。</p><p>Source 负责读取数据源，Transformation 利用各种算子进行处理加工，Sink 负责输出。</p><p>所以练习API，Source是必不可少的，没有数据源就没有第一步。这里使用手动造数据的方法，而Flink提供了一下方式。</p><h2 id="搭建执行环境"><a href="#搭建执行环境" class="headerlink" title="搭建执行环境"></a>搭建执行环境</h2><p>编写Flink程序的第一件事情就是搭建执行环境。执行环境决定了程序是运行在单机上还是集群上。在DataStream API中，程序的执行环境是由StreamExecutionEnvironment设置的。在我们的例子中，我们通过调用静态getExecutionEnvironment()方法来获取执行环境。这个方法根据调用方法的上下文，返回一个本地的或者远程的环境。如果这个方法是一个客户端提交到远程集群的代码调用的，那么这个方法将会返回一个远程的执行环境。否则，将返回本地执行环境。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a local stream execution environment</span></span><br><span class="line"><span class="keyword">val</span> localEnv = <span class="type">StreamExecutionEnvironment</span></span><br><span class="line">  .createLocalEnvironment()</span><br><span class="line"><span class="comment">// create a remote stream execution environment</span></span><br><span class="line"><span class="keyword">val</span> remoteEnv = <span class="type">StreamExecutionEnvironment</span></span><br><span class="line">  .createRemoteEnvironment(</span><br><span class="line">    <span class="string">&quot;host&quot;</span>, <span class="comment">// hostname of JobManager</span></span><br><span class="line">    <span class="number">1234</span>, <span class="comment">// port of JobManager process</span></span><br><span class="line">    <span class="string">&quot;path/to/jarFile.jar&quot;</span></span><br><span class="line">  ) <span class="comment">// JAR file to ship to the JobManager</span></span><br></pre></td></tr></table></figure><p>接下来，我们使用<code>env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</code>来将我们程序的时间语义设置为事件时间。执行环境提供了很多配置选项，例如：设置程序的并行度和程序是否开启容错机制。</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><ul><li>从集合中读取：fromElements、fromCollection</li><li>从文件中读取：readTextFile</li><li>从网络sock：socketTextStream</li><li>Kafka数据源 ：（额外导包）</li></ul><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka-0.10_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>0.10是Kafka版本</p></blockquote><p>使用addSource通用数据源，addSource(SourceFunction)，使用富函数SourceFunction（需要隐式转换）也可以。下面的自定义数据源就是这个原理。</p><p>既然addSource需要SourceFunction的参数难道用我们自己实现吗，不用，既然我们导了包就能直接用现成的！</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> kafkaProps = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line"> kafkaProps.setProperty(<span class="string">&quot;zookeeper.connect&quot;</span>, <span class="type">ZOOKEEPER_HOST</span>)</span><br><span class="line"> kafkaProps.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="type">KAFKA_BROKER</span>)</span><br><span class="line"> kafkaProps.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="type">TRANSACTION_GROUP</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">//topicd的名字是new，schema默认使用SimpleStringSchema()即可</span></span><br><span class="line"> <span class="keyword">val</span> transaction = env</span><br><span class="line">   .addSource(</span><br><span class="line">     <span class="keyword">new</span> <span class="type">FlinkKafkaConsumer08</span>[<span class="type">String</span>](<span class="string">&quot;new&quot;</span>, <span class="keyword">new</span> <span class="type">SimpleStringSchema</span>(), kafkaProps)</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>我们创建一个温度器，并随机它的数据：</p><p><strong>创建数据结构</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxjgg.source</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReading</span>(<span class="params">id: <span class="type">String</span>, temperature: <span class="type">Double</span>, timestamp: <span class="type">Long</span></span>)</span></span><br></pre></td></tr></table></figure><p><strong>生成数据</strong></p><p>需要集成Flink的类，因为之后要用Flink来处理这些数据</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxjgg.source</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.&#123;<span class="type">RichParallelSourceFunction</span>, <span class="type">SourceFunction</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.<span class="type">Random</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SensorSource</span> <span class="keyword">extends</span> <span class="title">RichParallelSourceFunction</span>[<span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> running: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(sourceContext: <span class="type">SourceFunction</span>.<span class="type">SourceContext</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> random = <span class="keyword">new</span> <span class="type">Random</span>()</span><br><span class="line">    <span class="keyword">val</span> result = (<span class="number">1</span> to <span class="number">10</span>).map(x =&gt; (x + <span class="string">&quot;&quot;</span>, random.nextGaussian() * <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (running) &#123;</span><br><span class="line">      result.map(x =&gt; (x._1, x._2 + random.nextGaussian() * <span class="number">0.5</span>))</span><br><span class="line">      result.foreach(x =&gt; sourceContext.collect(<span class="type">SensorReading</span>(x._1, x._2, <span class="type">System</span>.currentTimeMillis())))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel</span></span>(): <span class="type">Unit</span> = running = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试数据处理</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxjgg.source</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value:<span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    value.print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你可能已经注意到Flink程序的定义和提交执行使用的就是正常的Scala或者Java的方法。大多数情况下，这些代码都写在一个静态main方法中。在我们的例子中，我们定义了Test对象，然后将大多数的应用程序逻辑放在了main()中。</p><p>Flink流处理程序的结构如下：</p><ol><li>创建Flink程序执行环境。</li><li>从数据源读取一条或者多条流数据</li><li>使用流转换算子实现业务逻辑</li><li>将计算结果输出到一个或者多个外部设备（可选）</li><li>执行程序</li></ol><p>接下来我们详细的学习一下这些部分。</p><h2 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h2><p>Flink没有类似于spark中foreach方法，让用户进行迭代的操作。虽有对外的输出操作都要利用Sink完成。最后通过类似如下方式完成整个任务最终输出操作。</p><p><code> stream.addSink(new MySink(xxxx))</code></p><p>官方提供了一部分的框架的sink。除此以外，需要用户自定义实现sink。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210101142032322.png" alt="image-20210101142032322"></p><p>第三方：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210101142045980.png" alt="image-20210101142045980"></p><p>其他的需要自定义！！</p><h3 id="Kafka-1"><a href="#Kafka-1" class="headerlink" title="Kafka"></a>Kafka</h3><p>继上面的Kafka的Source，继续写Sink</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataStream.addSink(<span class="keyword">new</span> <span class="type">FlinkKafkaProducer011</span>[<span class="type">String</span>](<span class="string">&quot;localhost:9092&quot;</span>, <span class="string">&quot;topic&quot;</span>, <span class="keyword">new</span> <span class="type">SimpleStringSchema</span>()))</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>因为官方没有Redis的Sink，但是Bahir提供了。所以需要引入它的包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.bahir<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-redis_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义一个redis的mapper类，用于定义保存到redis时调用的命令：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRedisMapper</span> <span class="keyword">extends</span> <span class="title">RedisMapper</span>[<span class="type">SensorReading</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getCommandDescription</span></span>: <span class="type">RedisCommandDescription</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">RedisCommandDescription</span>(<span class="type">RedisCommand</span>.<span class="type">HSET</span>, <span class="string">&quot;sensor_temperature&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getValueFromData</span></span>(t: <span class="type">SensorReading</span>): <span class="type">String</span> = t.temperature.toString</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getKeyFromData</span></span>(t: <span class="type">SensorReading</span>): <span class="type">String</span> = t.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主函数中调用：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">FlinkJedisPoolConfig</span>.<span class="type">Builder</span>().setHost(<span class="string">&quot;localhost&quot;</span>).setPort(<span class="number">6379</span>).build()</span><br><span class="line">dataStream.addSink( <span class="keyword">new</span> <span class="type">RedisSink</span>[<span class="type">SensorReading</span>](conf, <span class="keyword">new</span> <span class="type">MyRedisMapper</span>))</span><br></pre></td></tr></table></figure><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-elasticsearch6_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主函数中调用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> httpHosts = <span class="keyword">new</span> util.<span class="type">ArrayList</span>[<span class="type">HttpHost</span>]()</span><br><span class="line">httpHosts.add(<span class="keyword">new</span> <span class="type">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> esSinkBuilder = <span class="keyword">new</span> <span class="type">ElasticsearchSink</span>.<span class="type">Builder</span>[<span class="type">SensorReading</span>]( httpHosts, <span class="keyword">new</span> <span class="type">ElasticsearchSinkFunction</span>[<span class="type">SensorReading</span>] &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(t: <span class="type">SensorReading</span>, runtimeContext: <span class="type">RuntimeContext</span>, requestIndexer: <span class="type">RequestIndexer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;saving data: &quot;</span> + t)</span><br><span class="line">    <span class="keyword">val</span> json = <span class="keyword">new</span> util.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">String</span>]()</span><br><span class="line">    json.put(<span class="string">&quot;data&quot;</span>, t.toString)</span><br><span class="line">    <span class="keyword">val</span> indexRequest = <span class="type">Requests</span>.indexRequest().index(<span class="string">&quot;sensor&quot;</span>).`<span class="class"><span class="keyword">type</span>`(<span class="params">&quot;readingData&quot;</span>).<span class="title">source</span>(<span class="params">json</span>)</span></span><br><span class="line"><span class="class">    <span class="title">requestIndexer</span>.<span class="title">add</span>(<span class="params">indexRequest</span>)</span></span><br><span class="line"><span class="class">    <span class="title">println</span>(<span class="params">&quot;saved successfully&quot;</span>)</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125; )</span></span><br><span class="line"><span class="class"><span class="title">dataStream</span>.<span class="title">addSink</span>(<span class="params"> esSinkBuilder.build(</span>) )</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><h3 id="JDBC-1-10没有"><a href="#JDBC-1-10没有" class="headerlink" title="JDBC(1.10没有)"></a>JDBC(1.10没有)</h3><p><strong>1.11后有，这种不够灵活，不能根据情况进行插入或者更新。</strong></p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/connectors/jdbc.html">Apache Flink 1.12 Documentation: JDBC Connector</a></p><p>This connector provides a sink that writes data to a JDBC database.</p><p>To use it, add the following dependency to your project (along with your JDBC-driver):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-jdbc_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Note that the streaming connectors are currently <strong>NOT</strong> part of the binary distribution. See how to link with them for cluster execution <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/project-configuration.html">here</a>.</p><p>Created JDBC sink provides at-least-once guarantee. Effectively exactly-once can be achieved using upsert statements or idempotent updates.</p><p>Example usage:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StreamExecutionEnvironment</span> env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment();</span><br><span class="line">env</span><br><span class="line">        .fromElements(...)</span><br><span class="line">        .addSink(<span class="type">JdbcSink</span>.sink(</span><br><span class="line">                <span class="string">&quot;insert into books (id, title, author, price, qty) values (?,?,?,?,?)&quot;</span>,</span><br><span class="line">                (ps, t) -&gt; &#123;</span><br><span class="line">                    ps.setInt(<span class="number">1</span>, t.id);</span><br><span class="line">                    ps.setString(<span class="number">2</span>, t.title);</span><br><span class="line">                    ps.setString(<span class="number">3</span>, t.author);</span><br><span class="line">                    ps.setDouble(<span class="number">4</span>, t.price);</span><br><span class="line">                    ps.setInt(<span class="number">5</span>, t.qty);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="type">JdbcConnectionOptions</span>.<span class="type">JdbcConnectionOptionsBuilder</span>()</span><br><span class="line">                        .withUrl(getDbMetadata().getUrl())</span><br><span class="line">                        .withDriverName(getDbMetadata().getDriverClass())</span><br><span class="line">                        .build()));</span><br><span class="line">env.execute();</span><br></pre></td></tr></table></figure><p>Please refer to the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/api/java/org/apache/flink/connector/jdbc/JdbcSink.html">API documentation</a> for more details.</p><h4 id="自定义-1"><a href="#自定义-1" class="headerlink" title="自定义"></a>自定义</h4><p>1.10以及以前没有官方的，需要自定义。需要使用富函数的<code>SinkFunction</code>，使用富函数的生命周期来创建和关闭JDBC的连接</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJdbcSink</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">RichSinkFunction</span>[<span class="type">SensorReading</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> conn: <span class="type">Connection</span> = _</span><br><span class="line">  <span class="keyword">var</span> insertStmt: <span class="type">PreparedStatement</span> = _</span><br><span class="line">  <span class="keyword">var</span> updateStmt: <span class="type">PreparedStatement</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="comment">// open 主要是创建连接</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">open</span></span>(parameters: <span class="type">Configuration</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">super</span>.open(parameters)</span><br><span class="line"></span><br><span class="line">    conn = <span class="type">DriverManager</span>.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">    insertStmt = conn.prepareStatement(<span class="string">&quot;INSERT INTO temperatures (sensor, temp) VALUES (?, ?)&quot;</span>)</span><br><span class="line">    updateStmt = conn.prepareStatement(<span class="string">&quot;UPDATE temperatures SET temp = ? WHERE sensor = ?&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用连接，执行sql</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">invoke</span></span>(value: <span class="type">SensorReading</span>, context: <span class="type">SinkFunction</span>.<span class="type">Context</span>[_]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    </span><br><span class="line">updateStmt.setDouble(<span class="number">1</span>, value.temperature)</span><br><span class="line">    updateStmt.setString(<span class="number">2</span>, value.id)</span><br><span class="line">    updateStmt.execute()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (updateStmt.getUpdateCount == <span class="number">0</span>) &#123;</span><br><span class="line">      insertStmt.setString(<span class="number">1</span>, value.id)</span><br><span class="line">      insertStmt.setDouble(<span class="number">2</span>, value.temperature)</span><br><span class="line">      insertStmt.execute()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">close</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    insertStmt.close()</span><br><span class="line">    updateStmt.close()</span><br><span class="line">    conn.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换算子"><a href="#转换算子" class="headerlink" title="转换算子"></a><a href="#%E8%BD%AC%E6%8D%A2%E7%AE%97%E5%AD%90">转换算子</a></h2><p>在这一小节我们将大概看一下DataStream API的基本转换算子。与时间有关的操作符（例如窗口操作符和其他特殊的转换算子）将会在后面的章节叙述。一个流的转换操作将会应用在一个或者多个流上面，这些转换操作将流转换成一个或者多个输出流。编写一个DataStream API简单来说就是将这些转换算子组合在一起来构建一个数据流图，这个数据流图就实现了我们的业务逻辑。</p><p><font color="red"><strong>大部分的流转换操作都基于用户自定义函数UDF</strong></font>。UDF函数打包了一些业务逻辑并定义了输入流的元素如何转换成输出流的元素。像<code>MapFunction</code>这样的函数，将会被定义为类，这个类实现了Flink针对特定的转换操作暴露出来的接口。虽然匿名函数很方便，但是逻辑复杂时过长的匿名函数会显得逻辑混乱。</p><p>DataStream API针对大多数数据转换操作提供了转换算子。如果你很熟悉批处理API、函数式编程语言或者SQL，那么你将会发现这些API很容易学习。我们会将DataStream API的转换算子分成四类：</p><ul><li>基本转换算子：将会作用在数据流中的每一条单独的数据上。</li><li>KeyedStream转换算子：在数据有key的情况下，对数据应用转换算子。</li><li>多流转换算子：合并多条流为一条流或者将一条流分割为多条流。</li><li>分布式转换算子：将重新组织流里面的事件。</li></ul><h3 id="基本转换算子"><a href="#基本转换算子" class="headerlink" title="基本转换算子"></a><a href="#%E5%9F%BA%E6%9C%AC%E8%BD%AC%E6%8D%A2%E7%AE%97%E5%AD%90">基本转换算子</a></h3><p><strong>基本转换算子会针对流中的每一个单独的事件做处理，也就是说每一个输入数据会产生一个输出数据。</strong>单值转换，数据的分割，数据的过滤，都是基本转换操作的典型例子。我们将解释这些算子的语义并提供示例代码。</p><h4 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a><em>MAP</em></h4><p><code>map</code>算子通过调用<code>DataStream.map()</code>来指定。<code>map</code>算子的使用将会产生一条新的数据流。它会将每一个输入的事件传送到一个用户自定义的mapper，这个mapper只返回一个输出事件，这个输出事件和输入事件的类型可能不一样。下图展示了一个map算子，这个map将每一个正方形转化成了圆形。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0501.png" alt="img"></p><p><code>MapFunction</code>的类型与输入事件和输出事件的类型相关，可以通过实现<code>MapFunction</code>接口来定义。接口包含<code>map()</code>函数，这个函数将一个输入事件恰好转换为一个输出事件。</p><p>下面的代码实现了将SensorReading中的id字段抽取出来的功能。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> readings: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = ...</span><br><span class="line"><span class="keyword">val</span> sensorIds: <span class="type">DataStream</span>[<span class="type">String</span>] = readings.map(<span class="keyword">new</span> <span class="type">IdExtractor</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdExtractor</span> <span class="keyword">extends</span> <span class="title">MapFunction</span>[<span class="type">SensorReading</span>, <span class="type">String</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(r: <span class="type">SensorReading</span>) : <span class="type">String</span> = r.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然我们更推荐匿名函数的写法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sensorIds: <span class="type">DataStream</span>[<span class="type">String</span>] = filteredReadings.map(r =&gt; r.id)</span><br></pre></td></tr></table></figure><h4 id="FILTER"><a href="#FILTER" class="headerlink" title="FILTER"></a><em>FILTER</em></h4><p><code>filter</code>转换算子通过在每个输入事件上对一个布尔条件进行求值来过滤掉一些元素，然后将剩下的元素继续发送。一个<code>true</code>的求值结果将会把输入事件保留下来并发送到输出，而如果求值结果为<code>false</code>，则输入事件会被抛弃掉。我们通过调用<code>DataStream.filter()</code>来指定流的<code>filter</code>算子，<code>filter</code>操作将产生一条新的流，其类型和输入流中的事件类型是一样的。下图展示了只产生白色方框的<code>filter</code>操作。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0502.png" alt="img"></p><p>布尔条件可以使用函数、FilterFunction接口或者匿名函数来实现。FilterFunction中的泛型是输入事件的类型。定义的<code>filter()</code>方法会作用在每一个输入元素上面，并返回一个布尔值。</p><p>下面的例子展示了如何使用filter来从传感器数据中过滤掉温度值小于25华氏温度的读数。</p><p><code>val filteredReadings = readings.filter(r =&gt; r.temperature &gt;= 25)</code></p><h4 id="FLATMAP"><a href="#FLATMAP" class="headerlink" title="FLATMAP"></a><em>FLATMAP</em></h4><p><code>flatMap</code>算子和<code>map</code>算子很类似，不同之处在于针对每一个输入事件<code>flatMap</code>可以生成0个、1个或者多个输出元素。事实上，<code>flatMap</code>转换算子是<code>filter</code>和<code>map</code>的泛化。所以<code>flatMap</code>可以实现<code>map</code>和<code>filter</code>算子的功能。下图展示了<code>flatMap</code>如何根据输入事件的颜色来做不同的处理。如果输入事件是白色方框，则直接输出。输入元素是黑框，则复制输入。灰色方框会被过滤掉。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0503.png" alt="img"></p><p>flatMap算子将会应用在每一个输入事件上面。对应的<code>FlatMapFunction</code>定义了<code>flatMap()</code>方法，这个方法返回0个、1个或者多个事件到一个<code>Collector</code>集合中，作为输出结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; T: the type of input elements</span><br><span class="line">&#x2F;&#x2F; O: the type of output elements</span><br><span class="line">FlatMapFunction[T, O]</span><br><span class="line">    &gt; flatMap(T, Collector[O]): Unit</span><br></pre></td></tr></table></figure><p>下面的例子展示了在数据分析教程中经常用到的例子，我们用<code>flatMap</code>来实现。使用<code>_</code>来切割传感器ID，比如<code>sensor_1</code>。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdSplitter</span> <span class="keyword">extends</span> <span class="title">FlatMapFunction</span>[<span class="type">String</span>, <span class="type">String</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">flatMap</span></span>(id: <span class="type">String</span>, out: <span class="type">Collector</span>[<span class="type">String</span>]) : <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> arr = id.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        arr.foreach(out.collect)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名函数写法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> splitIds = sensorIds</span><br><span class="line">  .flatMap(r =&gt; r.split(<span class="string">&quot;_&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="键控流转换算子"><a href="#键控流转换算子" class="headerlink" title="键控流转换算子"></a><a href="#%E9%94%AE%E6%8E%A7%E6%B5%81%E8%BD%AC%E6%8D%A2%E7%AE%97%E5%AD%90">键控流转换算子</a></h3><p>很多流处理程序的一个基本要求就是要能<font color="red">对数据进行分组，分组后的数据共享某一个相同的属性</font>。DataStream API提供了一个叫做<code>KeyedStream</code>的抽象，此抽象会从<strong>逻辑上对DataStream进行分区</strong>，分区后的数据拥有同样的<code>Key</code>值，分区后的流互不相关。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-19_10-47-17.png"></p><p>而Spark的分组函数不是这样，因为它是批处理。所以他不是一个事件执行一个分组，而是一批数据执行一次分组。所以它的分组之后是K,[V]的事件，即它的分组函数是物理分组。</p><hr><p>针对KeyedStream的状态转换操作可以读取数据或者写入数据到当前事件Key所对应的状态中。<strong>这表明拥有同样Key的所有事件都可以访问同样的状态</strong>，也就是说所以这些事件可以一起处理。</p><blockquote><p>也就是说分组后的每个key所在的分区都会维护一个状态，为了之后的滚动计算分区内的值，每当分区中的一个事件到来时，都会与之前保存好的状态相计算，得到最新的状态。而每个key的状态都是隔离的。</p></blockquote><blockquote><p>要小心使用状态转换操作和基于Key的聚合操作。如果Key的值越来越多，例如：Key是订单ID，我们必须及时清空Key所对应的状态，以免引起内存方面的问题。稍后我们会详细讲解。</p></blockquote><p>KeyedStream可以使用map，flatMap和filter算子来处理。接下来我们会使用keyBy算子来将DataStream转换成KeyedStream，并讲解基于key的转换操作：<strong>滚动聚合和reduce算子。</strong></p><h4 id="KEYBY"><a href="#KEYBY" class="headerlink" title="KEYBY"></a><em>KEYBY</em></h4><p>keyBy通过指定key来将DataStream转换成KeyedStream。基于不同的key，流中的事件将被分配到不同的分区中去。所有具有相同key的事件将会在接下来的操作符的同一个子任务槽中进行处理。拥有不同key的事件可以在同一个任务中处理。但是算子只能访问当前事件的key所对应的状态。</p><p>如下图所示，把输入事件的颜色作为key，黑色的事件输出到了一个分区，其他颜色输出到了另一个分区。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0504.png"></p><p><code>keyBy()</code>方法接收一个参数，这个参数指定了key或者keys，有很多不同的方法来指定key。我们将在后面讲解。下面的代码声明了<code>id</code>这个字段为SensorReading流的key。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> keyed: <span class="type">KeyedStream</span>[<span class="type">SensorReading</span>, <span class="type">String</span>] = readings.keyBy(r =&gt; r.id)</span><br></pre></td></tr></table></figure><p>匿名函数<code>r =&gt; r.id</code>抽取了传感器读数SensorReading的id值。</p><h4 id="滚动聚合🔺"><a href="#滚动聚合🔺" class="headerlink" title="滚动聚合🔺"></a><em>滚动聚合</em>🔺</h4><p><font color="red"><strong>滚动聚合算子由<code>KeyedStream</code>调用，并生成一个聚合以后的DataStream</strong></font>，例如：sum，minimum，maximum。<strong>一个滚动聚合算子会为每一个观察到的key保存一个聚合的值</strong>。<strong>针对每一个输入事件，算子将会更新保存的聚合结果</strong>，并发送一个带有更新后的值的事件到下游算子。<strong>滚动聚合不需要用户自定义函数，但需要接受一个参数，这个参数指定了在哪一个字段上面做聚合操作</strong>。DataStream API提供了以下滚动聚合方法。</p><ul><li>sum()：在输入流上对指定的字段做滚动相加操作。</li><li>min()：在输入流上对指定的字段求最小值。</li><li>max()：在输入流上对指定的字段求最大值。</li><li>minBy()：在输入流上针对指定字段求最小值，并返回包含当前观察到的最小值的事件。</li><li>maxBy()：在输入流上针对指定字段求最大值，并返回包含当前观察到的最大值的事件。</li></ul><p>滚动聚合算子无法组合起来使用，每次计算只能使用一个单独的滚动聚合算子。</p><blockquote><p>因为滚动聚合算子只能对<code>KeyedStream</code>调用，且调用后会变为<code>DataStream</code></p></blockquote><p>下面的例子根据第一个字段来对类型为<code>Tuple3</code>的流做分流操作，然后针对第二个字段做滚动求和操作。</p><p><strong>scala version</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> inputStream = env.fromElements((<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> resultStream = inputStream.keyBy(<span class="number">0</span>).sum(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在这个例子里面，输入流根据第一个字段来分流，然后在第二个字段上做计算。对于key 1，输出结果是(1,2,2),(1,7,2)。对于key 2，输出结果是(2,3,1),(2,5,1)。第一个字段是key，第二个字段是求和的数值，第三个字段未定义。</p><blockquote><p>滚动聚合操作会对每一个key都保存一个状态。因为状态从来不会被清空，所以我们在使用滚动聚合算子时只能使用在<font color="red">含有有限个key的流上面。</font></p></blockquote><h4 id="REDUCE🔺"><a href="#REDUCE🔺" class="headerlink" title="REDUCE🔺"></a><em>REDUCE</em>🔺</h4><p>reduce算子是滚动聚合的泛化实现。<strong>它将一个ReduceFunction应用到了一个KeyedStream上面去。</strong>reduce算子将会把每一个输入事件和当前已经reduce出来的值做聚合计算。<strong>reduce操作不会改变流的事件类型。输出流数据类型和输入流数据类型是一样的。</strong></p><blockquote><p>实际上reduce方法就是自定义的滚动聚合方法，与之不同的是它不会改变流类型，使用会不会将KeyedStream[T]-&gt;DataStream[T1]</p></blockquote><p>reduce函数可以通过实现接口ReduceFunction来创建一个类。ReduceFunction接口定义了<code>reduce()</code>方法，此方法接收两个输入事件，输入一个相同类型的事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; T: the element type</span><br><span class="line">ReduceFunction[T]</span><br><span class="line">    &gt; reduce(T, T): T</span><br></pre></td></tr></table></figure><p>下面的例子，流根据传感器ID分流，然后计算每个传感器的当前最大温度值。</p><p><strong>scala version</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyReduce</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    <span class="keyword">val</span> value1: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = value.keyBy(_.id).reduce(<span class="keyword">new</span> myReduce)</span><br><span class="line">    value1.print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">myReduce</span> <span class="keyword">extends</span> <span class="title">ReduceFunction</span>[<span class="type">SensorReading</span>]</span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(t: <span class="type">SensorReading</span>, t1: <span class="type">SensorReading</span>): <span class="type">SensorReading</span> = &#123;</span><br><span class="line">     <span class="keyword">if</span> (t.temperature&gt;t1.temperature) &#123;</span><br><span class="line">       t</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       t1</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>reduce作为滚动聚合的泛化实现，同样也要针对每一个key保存状态。因为状态从来不会清空，<font color="red">所以我们需要将reduce算子应用在一个有限key的流上。</font></p></blockquote><h3 id="多流转换算子"><a href="#多流转换算子" class="headerlink" title="多流转换算子"></a><a href="#%E5%A4%9A%E6%B5%81%E8%BD%AC%E6%8D%A2%E7%AE%97%E5%AD%90">多流转换算子</a></h3><p>许多应用需要摄入多个流并将流合并处理，还可能需要将一条流分割成多条流然后针对每一条流应用不同的业务逻辑。接下来，我们将讨论DataStream API中提供的能够处理多条输入流或者发送多条输出流的操作算子。</p><h4 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a><em>UNION</em></h4><p>DataStream.union()方法将两条或者多条DataStream合并成一条具有<strong>与输入流相同类型的输出DataStream</strong>。接下来的转换算子将会处理输入流中的所有元素。下图展示了union操作符如何将黑色和白色的事件流合并成一个单一输出流。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0505.png" alt="img"></p><p>事件合流的方式为FIFO方式。操作符并不会产生一个特定顺序的事件流。<strong>union操作符也不会进行去重。每一个输入事件都被发送到了下一个操作符。</strong></p><p>下面的例子展示了如何将三条类型为SensorReading的数据流合并成一条流。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> parisStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = ...</span><br><span class="line"><span class="keyword">val</span> tokyoStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = ...</span><br><span class="line"><span class="keyword">val</span> rioStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = ...</span><br><span class="line"><span class="keyword">val</span> allCities: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = parisStream</span><br><span class="line">  .union(tokyoStream, rioStream)</span><br></pre></td></tr></table></figure><h4 id="CONNECT-COMAP和COFLATMAP🔺"><a href="#CONNECT-COMAP和COFLATMAP🔺" class="headerlink" title="CONNECT, COMAP和COFLATMAP🔺"></a><em>CONNECT, COMAP和COFLATMAP</em>🔺</h4><p>联合两条流的事件是非常常见的流处理需求。例如监控一片森林然后发出高危的火警警报。报警的Application接收两条流，一条是温度传感器传回来的数据，一条是烟雾传感器传回来的数据。当两条流都超过各自的阈值时，报警。</p><p>DataStream API提供了<code>connect</code>操作来支持以上的应用场景。<code>DataStream.connect()</code>方法接收一条<code>DataStream</code>，然后返回一个<code>ConnectedStreams</code>类型的对象，这个对象表示了两条连接的流。</p><p>ConnectedStreams提供了<code>map()</code>和<code>flatMap()</code>方法，分别需要接收类型为<code>CoMapFunction</code>和<code>CoFlatMapFunction</code>的参数。</p><p>以上两个函数里面的泛型是第一条流的事件类型和第二条流的事件类型，以及输出流的事件类型。还定义了两个方法，每一个方法针对一条流来调用。<code>map1()</code>和<code>flatMap1()</code>会调用在第一条流的元素上面，<code>map2()</code>和<code>flatMap2()</code>会调用在第二条流的元素上面。flatmap的flatmap函数可以发送多个值，而map只能一个。</p><p>对两条流做连接查询通常需要这两条流基于某些条件被确定性的路由到操作符中相同的并行实例里面去。<strong>在默认情况下，connect()操作将不会对两条流的事件建立任何关系，所以两条流的事件将会随机的被发送到下游的算子实例里面去。</strong>这样的行为会产生不确定性的计算结果，显然不是我们想要的。<font color="red">为了针对ConnectedStreams进行确定性的转换操作，connect()方法可以和keyBy()或者broadcast()组合起来使用。我们首先看一下keyBy()的示例。</font></p><ul><li>使用keyBy指定key来对两条流建立关系</li></ul><p><strong>keyby</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> one = ...</span><br><span class="line"><span class="keyword">val</span> two = ...</span><br><span class="line"><span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">val</span> keyedConnect1 = one.connect(two).keyBy(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 写法2</span></span><br><span class="line"><span class="keyword">val</span> keyedConnect2 = one.keyBy(<span class="number">0</span>).connect(two.keyBy(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> one: <span class="type">DataStream</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = env.fromElements((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>,<span class="string">&quot;b&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> two: <span class="type">DataStream</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = env.fromElements((<span class="number">1</span>, <span class="string">&quot;m&quot;</span>), (<span class="number">2</span>,<span class="string">&quot;n&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> keyedConnect2: <span class="type">ConnectedStreams</span>[(<span class="type">Int</span>, <span class="type">String</span>), (<span class="type">Int</span>, <span class="type">String</span>)] = one.keyBy(<span class="number">0</span>).connect(two.keyBy(<span class="number">0</span>))</span><br><span class="line">    keyedConnect2.map(<span class="keyword">new</span> <span class="type">MyCoMap</span>).print()</span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyCoMap</span> <span class="keyword">extends</span> <span class="title">CoMapFunction</span>[(<span class="type">Int</span>, <span class="type">String</span>),(<span class="type">Int</span>, <span class="type">String</span>),<span class="type">String</span>]</span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map1</span></span>(in1: (<span class="type">Int</span>, <span class="type">String</span>)): <span class="type">String</span> = &#123;</span><br><span class="line">      in1._1+in1._2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map2</span></span>(in1: (<span class="type">Int</span>, <span class="type">String</span>)): <span class="type">String</span> = &#123;</span><br><span class="line">      in1._1+in1._2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：1a 1m 2b 2n</span></span><br></pre></td></tr></table></figure><h4 id="SideOutput"><a href="#SideOutput" class="headerlink" title="SideOutput"></a><em>SideOutput</em></h4><p>大部分的DataStream API的算子的输出是单一输出，也就是某种数据类型的流。除了split算子，可以将一条流分成多条流，这些流的数据类型也都相同。process function的side outputs功能可以产生多条流，并且这些流的数据类型可以不一样。一个side output可以定义为OutputTag[X]对象，<strong>X是输出流的数据类型</strong>。process function可以通过Context对象发射一个事件到一个或者多个side outputs。</p><blockquote><p><code>process function</code>与<code>KeyedProcessFunction</code>区别：</p><p><code>KeyedProcessFunction</code>是对于keyby后的流计算，而<code>process function</code>是对keyby前的流计算，都是一个元素触发一次计算</p></blockquote><p><strong>将数据发送到不同的侧输出流</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SideOutputStream</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> inputStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    inputStream.process(<span class="keyword">new</span> <span class="type">MySideOutputStream</span>).getSideOutput(<span class="keyword">new</span> <span class="type">OutputTag</span>[<span class="type">SensorReading</span>](<span class="string">&quot;tmp&quot;</span>))</span><br><span class="line">      .print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ProcessFunction`处理的是没有 kelBy的流</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MySideOutputStream</span> <span class="keyword">extends</span> <span class="title">ProcessFunction</span>[<span class="type">SensorReading</span>, <span class="type">SensorReading</span>]</span>&#123;</span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">private</span> <span class="keyword">val</span> tag: <span class="type">OutputTag</span>[<span class="type">SensorReading</span>] = <span class="keyword">new</span> <span class="type">OutputTag</span>[<span class="type">SensorReading</span>](<span class="string">&quot;tmp&quot;</span>)</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">processElement</span></span>(i: <span class="type">SensorReading</span>, context: <span class="type">ProcessFunction</span>[<span class="type">SensorReading</span>, <span class="type">SensorReading</span>]#<span class="type">Context</span>, collector: <span class="type">Collector</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// 满足指定条件则输入到侧输出流，所有元素都需要发送到正常流</span></span><br><span class="line">      <span class="keyword">if</span> (i.temperature&lt;<span class="number">10.0</span>) &#123;</span><br><span class="line">        context.output(tag, i)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      collector.collect(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210102142714440.png" alt="image-20210102142714440"></p><h3 id="分布式转换算子"><a href="#分布式转换算子" class="headerlink" title="分布式转换算子"></a><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E8%BD%AC%E6%8D%A2%E7%AE%97%E5%AD%90">分布式转换算子</a></h3><p>当我们使用DataStream API来编写程序时，系统将自动的选择数据分区策略，然后根据操作符的语义和设置的并行度将数据路由到正确的地方去。有些时候，我们需要在应用程序的层面控制分区策略，或者自定义分区策略。例如，如果我们知道会发生数据倾斜，那么我们想要针对数据流做负载均衡，将数据流平均发送到接下来的操作符中去。又或者，应用程序的业务逻辑可能需要一个算子所有的并行任务都需要接收同样的数据。再或者，我们需要自定义分区策略的时候。在这一小节，我们将展示DataStream的一些方法，可以使我们来控制或者自定义数据分区策略。</p><blockquote><p>keyBy()方法不同于分布式转换算子。所有的分布式转换算子将产生DataStream数据类型。而keyBy()产生的类型是KeyedStream，它拥有自己的keyed state。</p><p>分布式转换算子实际上就是shuffle将原有分区的数据发送到下一任务的不同分区。如果下一任务有多个并行，则有用，如果就一个它怎么发还是给一个并行度1的任务执行</p></blockquote><p>数据交换策略如下：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0203.png"></p><ul><li>前向策略将数据从一个任务发送到接收任务。如果两个任务都位于同一台物理计算机上（这通常由任务调度器确保），这种交换策略可以避免网络通信。</li><li>广播策略将所有数据发送到算子的所有的并行任务上面去。因为这种策略会复制数据和涉及网络通信，所以代价相当昂贵。</li><li>基于键控的策略通过Key值(键)对数据进行分区保证具有相同Key的数据将由同一任务处理。在图2-2中，输出“Extract hashtags”算子使用键来分区（hashtag），以便count算子的任务可以正确计算每个#标签的出现次数。</li><li>随机策略统一将数据分配到算子的任务中去，以便均匀地将负载分配到不同的计算任务。</li></ul><h4 id="Random"><a href="#Random" class="headerlink" title="Random"></a><em>Random</em></h4><p>随机数据交换由<code>DataStream.shuffle()</code>方法实现。shuffle方法将数据随机的分配到下游算子的并行任务中去。</p><h4 id="Round-Robin"><a href="#Round-Robin" class="headerlink" title="Round-Robin"></a><em>Round-Robin</em></h4><p><code>rebalance()</code>方法使用Round-Robin负载均衡算法将输入流平均分配到随后的并行运行的任务中去。图5-7为round-robin分布式转换算子的示意图。</p><h4 id="Rescale"><a href="#Rescale" class="headerlink" title="Rescale"></a><em>Rescale</em></h4><p><code>rescale()</code>方法使用的也是round-robin算法，但只会将数据发送到接下来的并行运行的任务中的一部分任务中。本质上，当发送者任务数量和接收者任务数量不一样时，rescale分区策略提供了一种轻量级的负载均衡策略。<font color="red">如果接收者任务的数量是发送者任务的数量的倍数时，rescale操作将会效率更高。</font></p><p><code>rebalance()</code>和<code>rescale()</code>的根本区别在于任务之间连接的机制不同。 <code>rebalance()</code>将会针对所有发送者任务和所有接收者任务之间建立通信通道，而<code>rescale()</code>仅仅针对每一个任务和下游算子的一部分子并行任务之间建立通信通道。rescale的示意图为图5-7。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/spaf_0507.png" alt="5-7"></p><h4 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a><em>Broadcast</em></h4><p><code>broadcast()</code>方法将输入流的所有数据复制并发送到下游算子的所有并行任务中去。</p><h4 id="Global"><a href="#Global" class="headerlink" title="Global"></a><em>Global</em></h4><p><code>global()</code>方法将所有的输入流数据都发送到下游算子的第一个并行任务中去。这个操作需要很谨慎，因为将所有数据发送到同一个task，将会对应用程序造成很大的压力。</p><h4 id="Custom"><a href="#Custom" class="headerlink" title="Custom"></a><em>Custom</em></h4><p>当Flink提供的分区策略都不适用时，我们可以使用<code>partitionCustom()</code>方法来自定义分区策略。这个方法接收一个<code>Partitioner</code>对象，这个对象需要实现分区逻辑以及定义针对流的哪一个字段或者key来进行分区。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-19_14-38-09.png" alt="Snipaste_2020-12-19_14-38-09"></p><h2 id="设置并行度"><a href="#设置并行度" class="headerlink" title="设置并行度"></a><a href="#%E8%AE%BE%E7%BD%AE%E5%B9%B6%E8%A1%8C%E5%BA%A6">设置并行度</a></h2><p>Flink应用程序在一个像集群这样的分布式环境中并行执行。当一个数据流程序提交到作业管理器执行时，系统将会创建一个数据流图，然后准备执行需要的操作符。每一个操作符将会并行化到一个或者多个任务中去。每个算子的并行任务都会处理这个算子的输入流中的一份子集。一个算子并行任务的个数叫做算子的并行度。它决定了算子执行的并行化程度，以及这个算子能处理多少数据量。</p><p>一般设置并行度，我们不要在代码里设置全局并行度，这样硬编码不好，应当使用集群默认并行度，这样当集群扩充节点时，可以改变当前运行job的并行度，这样代码就不用重改代码实现并行度的增加。如果写死了，集群再怎么设置，并行度也不会变化。那么我们就应该对特定的算子进行并行度的计算。</p><p>在下面的例子里面，数据源的操作符将会按照环境默认的并行度来并行执行，map操作符的并行度将会是默认并行度的2倍，sink操作符的并行度为2。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StreamExecutionEnvironment</span> env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment;</span><br><span class="line">int defaultP = env.getParallelism;</span><br><span class="line">env</span><br><span class="line">  .addSource(<span class="keyword">new</span> <span class="type">CustomSource</span>)</span><br><span class="line">  .map(<span class="keyword">new</span> <span class="type">MyMapper</span>)</span><br><span class="line">  .setParallelism(defaultP * <span class="number">2</span>)</span><br><span class="line">  .print()</span><br><span class="line">  .setParallelism(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>当我们通过客户端将应用程序的并行度设置为16并提交执行时，source操作符的并行度为16，mapper并行度为32，sink并行度为2。如果我们在本地环境运行应用程序的话，例如在IDE中运行，机器是8核，那么source任务将会并行执行在8个任务上面，mapper运行在16个任务上面，sink运行在2个任务上面。</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a><a href="#%E7%B1%BB%E5%9E%8B">类型</a></h2><p>Flink程序所处理的流中的事件一般是对象类型。操作符接收对象输出对象。所以Flink的内部机制需要能够处理事件的类型。在网络中传输数据，或者将数据写入到状态后端、检查点和保存点中，都需要我们对数据进行序列化和反序列化。为了高效的进行此类操作，Flink需要流中事件类型的详细信息。Flink使用了<code>Type Information</code>的概念来表达数据类型，这样就能针对不同的数据类型产生特定的序列化器，反序列化器和比较操作符。</p><p>Flink也能够通过分析输入数据和输出数据来自动获取数据的类型信息以及序列化器和反序列化器。尽管如此，在一些特定的情况下，例如匿名函数或者使用泛型的情况下，我们需要明确的提供数据的类型信息，来提高我们程序的性能。</p><h3 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a><a href="#%E6%94%AF%E6%8C%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">支持的数据类型</a></h3><p>Flink支持Java和Scala提供的所有普通数据类型。最常用的数据类型可以做以下分类：</p><ul><li>Primitives（原始数据类型）</li><li>Java和Scala的Tuples（元组）</li><li>Scala的样例类</li><li>POJO类型</li><li>一些特殊的类型</li></ul><p>接下来让我们一探究竟。</p><p><em>Primitives</em></p><p>Java和Scala提供的所有原始数据类型都支持，例如<code>Int</code>(Java的<code>Integer</code>)，String，Double等等。下面举一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream[Long] numbers = env.fromElements(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>);</span><br><span class="line">numbers.map(n -&gt; n + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><em>Tuples</em></p><p>元组是一种组合数据类型，由固定数量的元素组成。</p><p>Flink为Java的Tuple提供了高效的实现。Flink实现的Java Tuple最多可以有25个元素，根据元素数量的不同，Tuple都被实现成了不同的类：Tuple1，Tuple2，一直到Tuple25。Tuple类是强类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; persons = env</span><br><span class="line">  .fromElements(</span><br><span class="line">    Tuple2.of(<span class="string">&quot;Adam&quot;</span>, <span class="number">17</span>),</span><br><span class="line">    Tuple2.of(<span class="string">&quot;Sarah&quot;</span>, <span class="number">23</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">persons.filter(p -&gt; p.f1 &gt; <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>Tuple的元素可以通过它们的public属性访问——f0，f1，f2等等。或者使用<code>getField(int pos)</code>方法来访问，元素下标从0开始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2</span><br><span class="line"></span><br><span class="line">Tuple2&lt;String, Integer&gt; personTuple = Tuple2.of(<span class="string">&quot;Alex&quot;</span>, <span class="number">42</span>);</span><br><span class="line">Integer age = personTuple.getField(<span class="number">1</span>); <span class="comment">// age = 42</span></span><br></pre></td></tr></table></figure><p>不同于Scala的Tuple，Java的Tuple是可变数据结构，所以Tuple中的元素可以重新进行赋值。重复利用Java的Tuple可以减轻垃圾收集的压力。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">personTuple.f1 = <span class="number">42</span>; <span class="comment">// set the 2nd field to 42</span></span><br><span class="line">personTuple.setField(<span class="number">43</span>, <span class="number">1</span>); <span class="comment">// set the 2nd field to 43</span></span><br></pre></td></tr></table></figure><p><em>POJO</em></p><p>POJO类的定义：</p><ul><li>公有类</li><li>无参数的公有构造器</li><li>所有的字段都是公有的，可以通过getters和setters访问。</li><li>所有字段的数据类型都必须是Flink支持的数据类型。</li></ul><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DataStream&lt;Person&gt; persons = env.fromElements(</span><br><span class="line">  <span class="keyword">new</span> Person(<span class="string">&quot;Alex&quot;</span>, <span class="number">42</span>),</span><br><span class="line">  <span class="keyword">new</span> Person(<span class="string">&quot;Wendy&quot;</span>, <span class="number">23</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><em>其他数据类型</em></p><ul><li>Array, ArrayList, HashMap, Enum</li><li>Hadoop Writable types</li></ul><h2 id="定义Key以及引用字段🔺"><a href="#定义Key以及引用字段🔺" class="headerlink" title="定义Key以及引用字段🔺"></a><a href="#%E5%AE%9A%E4%B9%89key%E4%BB%A5%E5%8F%8A%E5%BC%95%E7%94%A8%E5%AD%97%E6%AE%B5">定义Key以及引用字段</a>🔺</h2><p>在Flink中，我们必须明确指定输入流中的元素中的哪一个字段是key。</p><h3 id="使用字段位置进行keyBy"><a href="#使用字段位置进行keyBy" class="headerlink" title="使用字段位置进行keyBy"></a><a href="#%E4%BD%BF%E7%94%A8%E5%AD%97%E6%AE%B5%E4%BD%8D%E7%BD%AE%E8%BF%9B%E8%A1%8Ckeyby">使用字段位置进行keyBy</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple3&lt;Int, String, Long&gt;&gt; input = ...</span><br><span class="line">KeyedStream&lt;Tuple3&lt;Int, String, Long&gt;, String&gt; keyed = input.keyBy(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>如果我们想要用元组的第2个字段和第3个字段做keyBy，可以看下面的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input.keyBy(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="使用字段表达式来进行keyBy"><a href="#使用字段表达式来进行keyBy" class="headerlink" title="使用字段表达式来进行keyBy"></a><a href="#%E4%BD%BF%E7%94%A8%E5%AD%97%E6%AE%B5%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8Ckeyby">使用字段表达式来进行keyBy</a></h3><p>对于样例类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; sensorStream = ...</span><br><span class="line">sensorStream.keyBy(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>对于元组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple3&lt;Integer, String, Long&gt;&gt; javaInput = ...</span><br><span class="line">javaInput.keyBy(<span class="string">&quot;f2&quot;</span>) <span class="comment">// key Java tuple by 3rd field</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-19_14-46-16.png"></p><h3 id="Key选择器"><a href="#Key选择器" class="headerlink" title="Key选择器"></a><a href="#key%E9%80%89%E6%8B%A9%E5%99%A8">Key选择器</a></h3><p>方法类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KeySelector[IN, KEY]</span><br><span class="line">  &gt; getKey(IN): KEY</span><br></pre></td></tr></table></figure><p><strong>scala version</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sensorData = ...</span><br><span class="line"><span class="keyword">val</span> byId = sensorData.keyBy(r =&gt; r.id)</span><br></pre></td></tr></table></figure><p><strong>java version</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; sensorData = ...</span><br><span class="line">KeyedStream&lt;SensorReading, String&gt; byId = sensorData.keyBy(r -&gt; r.id);</span><br></pre></td></tr></table></figure><h2 id="实现UDF函数，更细粒度的控制流"><a href="#实现UDF函数，更细粒度的控制流" class="headerlink" title="实现UDF函数，更细粒度的控制流"></a><a href="#%E5%AE%9E%E7%8E%B0udf%E5%87%BD%E6%95%B0%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E6%8E%A7%E5%88%B6%E6%B5%81">实现UDF函数，更细粒度的控制流</a></h2><p>其上上面的例子已经有使用UDF自定义函数处理逻辑了。</p><h3 id="函数类"><a href="#函数类" class="headerlink" title="函数类"></a><a href="#%E5%87%BD%E6%95%B0%E7%B1%BB">函数类</a></h3><p>Flink暴露了所有udf函数的接口(实现方式为接口或者抽象类)。例如MapFunction, FilterFunction, ProcessFunction等等。</p><p>例子实现了FilterFunction接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterFilter</span> <span class="keyword">extends</span> <span class="title">FilterFunction</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">filter</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.contains(<span class="string">&quot;flink&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(<span class="keyword">new</span> FlinkFilter);</span><br></pre></td></tr></table></figure><p>还可以将函数实现成匿名类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(</span><br><span class="line">  <span class="keyword">new</span> RichFilterFunction&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">filter</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value.contains(<span class="string">&quot;flink&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们filter的字符串”flink”还可以当作参数传进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; tweets = ...</span><br><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(<span class="keyword">new</span> KeywordFilter(<span class="string">&quot;flink&quot;</span>));</span><br><span class="line"></span><br><span class="line">class KeywordFilter(keyWord: String) extends FilterFunction&lt;String&gt; &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">filter</span><span class="params">(String value)</span> </span>= &#123;</span><br><span class="line">    <span class="keyword">return</span> value.contains(keyWord);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a><a href="#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">匿名函数</a></h3><p><strong>匿名函数可以实现一些简单的逻辑，但无法实现一些高级功能，例如访问状态等等。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; tweets = ...</span><br><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(r -&gt; r.contains(<span class="string">&quot;flink&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="富函数🔺"><a href="#富函数🔺" class="headerlink" title="富函数🔺"></a><a href="#%E5%AF%8C%E5%87%BD%E6%95%B0">富函数</a>🔺</h3><p>其实上面的数据源就是用了富函数，它可以定义更多的操作。</p><p>我们经常会有这样的需求<strong>：在函数处理数据之前，需要做一些初始化的工作；或者需要在处理数据时可以获得函数执行上下文的一些信息；以及在处理完数据时做一些清理工作。</strong>而DataStream API就提供了这样的机制。</p><p>DataStream API提供的所有转换操作函数，都拥有它们的“富”版本，并且我们在使用常规函数或者匿名函数的地方来使用富函数。例如下面就是富函数的一些例子，可以看出，<strong>只需要在常规函数的前面加上<code>Rich</code>前缀就是富函数了。</strong></p><ul><li>RichMapFunction</li><li>RichFlatMapFunction</li><li>RichFilterFunction</li><li>…</li></ul><p>当我们使用富函数时，我们可以实现两个额外的方法：</p><ul><li>open()方法是rich function的初始化方法，当一个算子例如map或者filter被调用之前open()会被调用。open()函数通常用来做一些只需要做一次即可的初始化工作。</li><li>close()方法是生命周期中的最后一个调用的方法，通常用来做一些清理工作。</li></ul><p>另外，getRuntimeContext()方法提供了函数的RuntimeContext的一些信息，例如函数执行的并行度，当前子任务的索引，当前子任务的名字。同时还它还包含了访问<strong>分区状态</strong>的方法。下面看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFlatMap</span> <span class="keyword">extends</span> <span class="title">RichFlatMapFunction</span>&lt;<span class="title">Integer</span>, <span class="title">Tuple2</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> subTaskIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> subTaskIndex = getRuntimeContext.getIndexOfThisSubtask;</span><br><span class="line">    <span class="comment">// 做一些初始化工作</span></span><br><span class="line">    <span class="comment">// 例如建立一个和HDFS的连接</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(Integer in, Collector&lt;Tuple2&lt;Integer, Integer&gt;&gt; out)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in % <span class="number">2</span> == subTaskIndex) &#123;</span><br><span class="line">      out.collect((subTaskIndex, in));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 清理工作，断开和HDFS的连接。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Window-API"><a href="#Window-API" class="headerlink" title="Window API"></a>Window API</h1><p>一般真实的流都是无界的，怎样处理无界的数据？</p><p>将无界流转换为有界流开始计算，因为无界流是无限制的，不会有结果。</p><p>可以把无限的数据流进行切分，得到有限的数据集进行处理 —— 也就是得到有界流；窗口（window）就是将无限流切割为有限流的一种方式，它会将流数据分发到有限大小的桶（bucket）中进行分析</p><h2 id="window-类型"><a href="#window-类型" class="headerlink" title="window 类型"></a>window 类型</h2><ol><li>时间窗口（Time Window）：主要写的时间窗口，计数窗口类似。<ul><li><a href="#%E6%97%B6%E9%97%B4%E6%BB%9A%E5%8A%A8%E7%AA%97%E5%8F%A3">滚动时间窗口</a>：<strong>Tumbling Windows</strong></li><li><a href="#%E6%97%B6%E9%97%B4%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3">滑动时间窗口</a>：<strong>Sliding Windows</strong></li><li><a href="#%E4%BC%9A%E8%AF%9D%E7%AA%97%E5%8F%A3">会话窗口</a>：<strong>Session Windows</strong></li></ul></li><li>计数窗口（Count Window）<ul><li>滚动计数窗口</li><li>滑动计数窗口</li></ul></li></ol><h3 id="时间窗口"><a href="#时间窗口" class="headerlink" title="时间窗口"></a>时间窗口</h3><p><font color="red">时间窗口又分为：事件时间、触发时间。默认的是触发时间窗口</font></p><h4 id="时间滚动窗口"><a href="#时间滚动窗口" class="headerlink" title="时间滚动窗口"></a>时间滚动窗口</h4><p><strong>Tumbling Windows</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201220215345926.png" alt="image-20201220215345926"></p><ol><li>时间对齐，窗口长度固定，没有重叠</li><li>滚动窗口是特殊的滑动窗口（滑动间隔=窗口长度）</li><li>左闭右开</li></ol><p>滚动窗口计算某一秒所在的窗口的起始时间，offset=0，ts=1…n(s)：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201220144118892.png" alt="image-20201220144118892"></p><h4 id="时间滑动窗口"><a href="#时间滑动窗口" class="headerlink" title="时间滑动窗口"></a>时间滑动窗口</h4><p><strong>Sliding Windows</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201220220206360.png" alt="image-20201220220206360"></p><ol><li>滑动窗口是固定窗口的更广义的一种形式，滑动窗口由固定的窗口长度和滑动间隔组成</li><li>窗口长度固定，可以有重叠</li></ol><blockquote><p>注意：</p><p>因为滑动窗口在滑动间隔&lt;窗口长度时，不同的窗口会有重复的数据，为了前面的窗口的消失不影响后面窗口的数据，Flink会将数据复制分别给使用到此数据的不同窗口。</p><p><font color="red">所以，如果滑动间隔过小，会导致Flink复制过多的数据，造成效率严重降低。</font></p><p>例如：</p><p>窗口长度100min，窗口哦间隔1min；这样每过一分钟，就会复制此窗口的后99条数据给下一个窗口。</p></blockquote><h4 id="会话窗口"><a href="#会话窗口" class="headerlink" title="会话窗口"></a>会话窗口</h4><p><strong>Session Windows</strong>，只有时间窗口才有会话窗口</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201220221007431.png" alt="image-20201220221007431"></p><ol><li>由一系列事件组合一个指定时间长度的 timeout 间隙组成，也就是一段时间没有接收到新数据就会生成新的窗口</li><li>特点：时间无对齐</li></ol><blockquote><p> 指定时间长度timeout内无数据，新数据来临后会直接产生新的窗口。它可用来统计行为模式</p><p> 即：新来的事件和上一事件的时间间隔大于timeout的话，上一窗口直接关闭，新来的事件在新的窗口，是它的第一个事件。</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201221150605732.png" alt="image-20201221150605732"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201221150626503.png" alt="image-20201221150626503"></p><h2 id="Window-API-1"><a href="#Window-API-1" class="headerlink" title="Window API"></a>Window API</h2><p><strong><font color="red">一般数据先分流后开窗。</font>分流后不同key可能不在一个slot中也可能不在一个taskmanager中，这样，每个key的窗口互不干涉，加大并行。</strong></p><h3 id="create-window"><a href="#create-window" class="headerlink" title="create window"></a>create window</h3><p><strong><em>window</em></strong></p><p>最底层的开窗口的方法：<code>window()</code>。用 <code>.window() </code>来定义一个窗口，然后基于这个 window 去做一些聚合或者其它处理操作。注意 window () 方法必须在 keyBy 之后才能用。</p><blockquote><p>window()与windowall()</p><p>windowall()是应用在DataStream上的，将所有数据放在一个窗口中</p><p>window()是应用在DataStream和<strong>KeydStream</strong>上的。</p></blockquote><p>而<code>window</code>方法构造时间、计数窗口是需要一个窗口分配器（<strong>window assigner</strong>）的。WindowAssigner 负责将每条输入的数据分发到正确的 window 中，Flink 提供了通用的 <strong>WindowAssigner</strong>：</p><ul><li>滚动窗口（tumbling window）</li><li>滑动窗口（sliding window）</li><li>会话窗口（session window）</li><li>全局窗口（global window），都在一个窗口中</li></ul><hr><p><strong><em>timewindow</em>,<em>countwindow</em>🔺</strong></p><p>window方法创建还需要<strong>window assigner</strong>，比较麻烦。Flink 提供了更加简单的<code> .timeWindow</code> 和<code>.countWindow</code> 方法，用于定义时间窗口和计数窗口。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    .keyBy(<span class="number">0</span>).timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>L))</span><br><span class="line">    .reduce((r1, _)=&gt;r1).print()</span><br></pre></td></tr></table></figure><p><img src="E:\Projects\sync\md\flink\Snipaste_2020-12-19_12-00-52.png" alt="image-20201220102331672"></p><blockquote><p>Flink的窗口函数和Spark的有所不同，即开窗口的类型是SensorReading而不是SensorReading[]，因为它实际上是批处理，即来一条数据给一条数据打上窗口的标签。而不是赞一个窗口的数据再处理，Flink也能这样做即使用全窗口函数<code>ProcessWindowFunction</code>。</p></blockquote><p><strong>创建不同类型的窗口</strong>：</p><ol><li><strong>滚动时间窗口（tumbling time window）</strong>：<code>.timeWindow(Time.seconds(5L))</code></li><li><strong>滑动时间窗口（sliding time window）</strong>：<code>.timeWindow(Time.seconds(5L), Time.seconds(1L))</code></li><li><strong>会话窗口（session window）</strong>：<code>.window(EventTimeSessionWindows.withGrap(Time.minutes(10)))</code></li><li><strong>滚动计数窗口（tumbling count window）</strong>：<code>.countWindow(Time.seconds(5L))</code></li><li><strong>滑动计数窗口（sliding count window）</strong>：<code>.countWindow(Time.seconds(5L), Time.seconds(1L))</code></li></ol><h3 id="window-function🔺"><a href="#window-function🔺" class="headerlink" title="window function🔺"></a>window function🔺</h3><p>window function 定义了要对窗口中收集的数据做的计算操作，可以分为两类：</p><ul><li>增量聚合函数：每条数据到来就进行计算,只保存一个简单的状态(累加器)，窗口闭合即计算完成<ul><li>ReduceFuntion</li><li>AggregateFunction<ul><li>merge只会在事件时间的窗口中用到</li></ul></li></ul></li><li>全窗口函数：先把窗口所有数据收集起来,等到计算的时候会遍历所有数据.类似于Spark的微批处理，区别是时间区域（ProcessWindowFunction，一个富函数）</li></ul><h3 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h3><ul><li>.trigger() —— 触发器：定义 window 什么时候关闭，触发计算并输出结果</li><li>.evictor() —— 移除器：定义移除某些数据的逻辑</li><li>.allowedLateness() —— 允许处理迟到的数据</li><li>.sideOutputLateData() —— 将迟到的数据放入侧输出流</li><li>.getSideOutput() —— 获取侧输出流</li></ul><h2 id="增量聚合与全量聚合"><a href="#增量聚合与全量聚合" class="headerlink" title="增量聚合与全量聚合"></a>增量聚合与全量聚合</h2><h3 id="增量聚合"><a href="#增量聚合" class="headerlink" title="增量聚合"></a>增量聚合</h3><h4 id="ReduceFunction"><a href="#ReduceFunction" class="headerlink" title="ReduceFunction"></a><em>ReduceFunction</em></h4><p>比较抽象，实现简单，实现的功能较少，不可以改变流的数据类型。</p><h4 id="AggregateFunction"><a href="#AggregateFunction" class="headerlink" title="AggregateFunction"></a><em>AggregateFunction</em></h4><p>比reduce实现较麻烦，但是可以改变流中的数据类型，较灵活。</p><blockquote><p>它的优点：每个窗口只用保存一个状态即可。正是因为它的优点给它带来了一些缺点：因为保存的数据少，无法计算一些场景：例如计算窗口数据的中位数，或者计算窗口数据中出现频率最高的值。</p><p>这时使用ReduceFunction和AggregateFunction就无法实现了。<font color="red">。这个时候就需要ProcessWindowFunction了。</font></p></blockquote><p>先来看接口定义<em>AggregateFunction</em>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public interface <span class="type">AggregateFunction</span>&lt;<span class="type">IN</span>, <span class="type">ACC</span>, <span class="type">OUT</span>&gt;</span><br><span class="line">  <span class="keyword">extends</span> <span class="type">Function</span>, <span class="type">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a new accumulator to start a new aggregate</span></span><br><span class="line">  <span class="type">ACC</span> createAccumulator();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add an input element to the accumulator and return the accumulator</span></span><br><span class="line">  <span class="type">ACC</span> add(<span class="type">IN</span> value, <span class="type">ACC</span> accumulator);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// compute the result from the accumulator and return it.</span></span><br><span class="line">  <span class="type">OUT</span> getResult(<span class="type">ACC</span> accumulator);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// merge two accumulators and return the result.</span></span><br><span class="line">  <span class="type">ACC</span> merge(<span class="type">ACC</span> a, <span class="type">ACC</span> b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IN是输入元素的类型，ACC是累加器的类型，OUT是输出元素的类型。</p><p>例如：求平均温度。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TumblingWindow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">      .keyBy(<span class="number">0</span>).timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>L))</span><br><span class="line">      <span class="comment">// 例如计算平均温度</span></span><br><span class="line">      .aggregate(<span class="keyword">new</span> <span class="type">MyAggregate</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 【流输入、累加器、流输出】</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyAggregate</span> <span class="keyword">extends</span> <span class="title">AggregateFunction</span>[<span class="type">SensorReading</span>, (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>), (<span class="type">String</span>, <span class="type">Double</span>)] </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createAccumulator</span></span>(): (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 累加逻辑</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(in: <span class="type">SensorReading</span>, acc: (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>)): (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (in.id, acc._2 + <span class="number">1</span>, acc._3 + in.temperature)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 流合并，只有事件时间（默认为触发时间窗口）窗口才会用到</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(acc: (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>), acc1: (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>)): (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (acc._1, acc._2 + acc1._2, acc._3 + acc1._3)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getResult</span></span>(acc: (<span class="type">String</span>, <span class="type">Long</span>, <span class="type">Double</span>)): (<span class="type">String</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (acc._1, acc._3 / acc._2)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全量聚合"><a href="#全量聚合" class="headerlink" title="全量聚合"></a>全量聚合</h3><h4 id="ProcessWindowFunction"><a href="#ProcessWindowFunction" class="headerlink" title="ProcessWindowFunction"></a><em>ProcessWindowFunction</em></h4><p>一些业务场景，我们需要收集窗口内所有的数据进行计算，例如计算窗口数据的中位数，或者计算窗口数据中出现频率最高的值。这样的需求，使用ReduceFunction和AggregateFunction就无法实现了。这个时候就需要ProcessWindowFunction了。</p><blockquote><p>但是，此方法虽然能获取到的信息比较多，例如：窗口信息和窗口内所有数据的集合。但是正式因为存的东西过多，将会非常占用空间。所以 有一种将ReduceFunction/AggregateFunctionProcessWindowFunction结合起来使用的方式，吸取两边的优点。<font color="red">增量聚合负责聚合，全窗口函数负责包装窗口信息</font></p></blockquote><p>先来看接口定义</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessWindowFunction&lt;IN</span>, <span class="title">OUT</span>, <span class="title">KEY</span>, <span class="title">W</span> <span class="keyword">extends</span> <span class="title">Window&gt;</span></span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">AbstractRichFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Evaluates the window</span></span><br><span class="line">  void process(<span class="type">KEY</span> key, <span class="type">Context</span> ctx, <span class="type">Iterable</span>&lt;<span class="type">IN</span>&gt; vals, <span class="type">Collector</span>&lt;<span class="type">OUT</span>&gt; out)</span><br><span class="line">    <span class="keyword">throws</span> <span class="type">Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Deletes any custom per-window state when the window is purged</span></span><br><span class="line">  public void clear(<span class="type">Context</span> ctx) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The context holding window metadata</span></span><br><span class="line">  public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> <span class="title">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Returns the metadata of the window</span></span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">W</span> window();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the current processing time</span></span><br><span class="line">    public <span class="keyword">abstract</span> long currentProcessingTime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the current event-time watermark</span></span><br><span class="line">    public <span class="keyword">abstract</span> long currentWatermark();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// State accessor for per-window state</span></span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">KeyedStateStore</span> windowState();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// State accessor for per-key global state</span></span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">KeyedStateStore</span> globalState();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Emits a record to the side output identified by the OutputTag.</span></span><br><span class="line">    public <span class="keyword">abstract</span> &lt;<span class="type">X</span>&gt; void output(<span class="type">OutputTag</span>&lt;<span class="type">X</span>&gt; outputTag, <span class="type">X</span> value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>process()方法接受的参数为：window的key，Iterable迭代器包含窗口的所有元素，Collector用于输出结果流。Context参数和别的process方法一样。而ProcessWindowFunction的Context对象还可以访问window的元数据(窗口开始和结束时间)，当前处理时间和水位线，per-window state和per-key global state，side outputs。</p><ul><li>per-window state: 用于保存一些信息，这些信息可以被process()访问，只要process所处理的元素属于这个窗口。</li><li>per-key global state: 同一个key，也就是在一条KeyedStream上，不同的window可以访问per-key global state保存的值。</li></ul><p>例子：计算5s滚动窗口中平均值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyProcessWindowFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> source: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">    source.keyBy(r=&gt;r.id).timeWindow(<span class="type">Time</span>.seconds(<span class="number">3</span>L)).process(<span class="keyword">new</span> test1).print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输入，输出，key，窗口类型</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">test1</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[<span class="type">SensorReading</span>, (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Long</span>, <span class="type">Long</span>), <span class="type">String</span>, <span class="type">TimeWindow</span>] </span>&#123;</span><br><span class="line">    <span class="comment">// 窗口最后的处理逻辑， elements是窗口中的所有事件</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements: <span class="type">Iterable</span>[<span class="type">SensorReading</span>], out: <span class="type">Collector</span>[(<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Long</span>, <span class="type">Long</span>)]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">var</span> sum: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line">      <span class="keyword">val</span> size: <span class="type">Int</span> = elements.size</span><br><span class="line">      elements.foreach(x=&gt;&#123;</span><br><span class="line">        sum+=x.temperature</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      out.collect((key, sum / size, context.window.getStart, context.window.getEnd))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意的地方</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201221174330638.png" alt="image-20201221174330638"></p><h3 id="增量、全量联合使用🔺"><a href="#增量、全量联合使用🔺" class="headerlink" title="增量、全量联合使用🔺"></a>增量、全量联合使用🔺</h3><p>如果计算中位数或者出现最高频率的数据，则必须用全量聚合。但是，如果计算平均数之类的为了效率，直接使用增量聚合，然是如果还想获取到窗口的基础信息，则还需要全量聚合的封装，但是此时全量聚合不再计算，二十封装一次数据。</p><ol><li>增量聚合直接计算出结果</li><li>然后全量聚合根据增量聚合的结果，调整输入和输出并附加窗口信息</li><li>调用时通过<code>aggregate(增量, 全量)</code></li><li><font color="red">重要的一点，经过<code>aggregate</code>增量聚合之后，全量聚合的elements集合只有一条数据</font></li></ol><hr><p>例子：计算5s滚动窗口中的最低和最高的温度。输出的元素包含了(流的Key, 最低温度, 最高温度, 窗口结束时间)。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.flink.transform.window</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.<span class="type">AggregateFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala.function.<span class="type">ProcessWindowFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.<span class="type">TimeWindow</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"><span class="keyword">import</span> org.example.flink.source.&#123;<span class="type">SensorReading</span>, <span class="type">SensorSource</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">AggregateAndProcessWindow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">out</span>(<span class="params">id: <span class="type">String</span>, max: <span class="type">Double</span>, min: <span class="type">Double</span>,var startTime: <span class="type">Long</span>,var endTime: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  <span class="title">def</span> <span class="title">main</span>(<span class="params">args: <span class="type">Array</span>[<span class="type">String</span>]</span>)</span>: <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    env.addSource(<span class="keyword">new</span> <span class="type">SensorSource</span>)</span><br><span class="line">      .keyBy(r=&gt;r.id).timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>L))</span><br><span class="line">      <span class="comment">// 例如计算平均温度</span></span><br><span class="line">      .aggregate(<span class="keyword">new</span> myAggFunction ,<span class="keyword">new</span> <span class="type">MyProcessWindowFunction</span>).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">myAggFunction</span> <span class="keyword">extends</span> <span class="title">AggregateFunction</span>[<span class="type">SensorReading</span>, (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>), out]</span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createAccumulator</span></span>(): (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (<span class="string">&quot;&quot;</span>, <span class="type">Double</span>.<span class="type">MinValue</span>, <span class="type">Double</span>.<span class="type">MaxValue</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(in: <span class="type">SensorReading</span>, acc: (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>)): (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (in.id, in.temperature.max(acc._2), in.temperature.min(acc._3))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(acc: (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>), acc1: (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>)): (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>) = &#123;</span><br><span class="line">      (acc._1, acc._2.max(acc1._2), acc1._3.min(acc._3))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getResult</span></span>(acc: (<span class="type">String</span>, <span class="type">Double</span>, <span class="type">Double</span>)): out = &#123;</span><br><span class="line">      out(acc._1, acc._2, acc._3, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输入，输出，key，窗口类型</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyProcessWindowFunction</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[out, out, <span class="type">String</span>, <span class="type">TimeWindow</span>] </span>&#123;</span><br><span class="line">    <span class="comment">// 因为是增量聚合的下游，所以一个窗口之会有一条数据，即聚合好的最大最小值，这里只要附加窗口信息即可，iterable只有一条数据，也不会占用过多从存储空间</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements: <span class="type">Iterable</span>[out], out: <span class="type">Collector</span>[out]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> head: out = elements.head</span><br><span class="line">      head.startTime = context.window.getStart</span><br><span class="line">      head.endTime = context.window.getEnd</span><br><span class="line">      out.collect(head)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样就可以通过增量聚合减少存储的同时使用全量聚合的窗口信息。</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201221175646429.png" alt="image-20201221175646429"></p><h2 id="其他可选API"><a href="#其他可选API" class="headerlink" title="其他可选API"></a>其他可选API</h2><ul><li>trigger() —— 触发器：定义 window 什么时候关闭，触发计算并输出结果</li><li>evitor() —— 移除器：定义移除某些数据的逻辑</li><li>allowedLateness() —— 允许处理迟到的数据(没必要，窗口到达结束时间时立马计算不关闭，允许迟到的数据每个元素进入都会和原窗口的结果进行聚合)</li><li>sideOutputLateData() —— 将迟到的数据放入侧输出流（当设置的最大迟到时间之后还来了之前的数据，需要放入侧输出流），乱序、迟到数据处理</li><li>getSideOutput() —— 获取侧输出流</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>聚合的两种计算场景：</p><ol><li>keydStream</li><li>window</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20210101172351300.png" alt="image-20210101172351300"></p><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><p>转载下的文章都是通过互联网上复制下来的，这样做的目的是为了能够方便查看和更好的阅读，仅此而已，谢谢各位作者~~</p><p><a href="https://github.com/confucianzuoyuan/flink-tutorial">https://github.com/confucianzuoyuan/flink-tutorial</a></p>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ready!</title>
      <link href="2020/12/17/ready/"/>
      <url>2020/12/17/ready/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好, 这里需要密码.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a1367f49e5ec24a8bf3ec0bdf6a63b65b995d6f9980147404c3137e2a06ee749">2ef123d636f2f21a7a6ecf818bf73b0168cc121ba75be9c227f6b4e8abc8413603bac797fa8aba46a44799f8da9c09b9d6964423f549ebb8738c6a9f7571f3b07f436d66846c8fb526343feafe0563584630c3d18a490b1635b405c2305064bb470554f2840230840c6b449d15044d616f863e1b370c8d3116827054df0d45d5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink学习笔记</title>
      <link href="2020/12/16/Flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/16/Flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h1><h2 id="Flink是什么"><a href="#Flink是什么" class="headerlink" title="Flink是什么"></a>Flink是什么</h2><p>Apache Flink 是一个<strong>框架</strong>和<strong>分布式处理引擎</strong>，用于对<strong>无界和有界数据流</strong>进行<strong>状态</strong>计算。</p><p>我们知道，hdfs、mapreduce、hbase分别是对应google的三篇论文提出的技术，而Flink也是基于Google的dataflow model提出的技术。</p><blockquote><p>有状态：对输入进行计算时，要和之前的计算结果发生关系。</p><p>无状态：<strong>幂等性，每次输入，输出都一致</strong>。</p><p>结果准确性：exactly-once，只处理一次</p></blockquote><h2 id="为什么使用Flink"><a href="#为什么使用Flink" class="headerlink" title="为什么使用Flink"></a>为什么使用Flink</h2><ul><li>流批数据相同计算逻辑</li><li>低延迟，相对于Spark Streaming的微批有更小的延迟</li><li>结果的准确性和良好的容错性</li></ul><h3 id="数据处理架构的演变"><a href="#数据处理架构的演变" class="headerlink" title="数据处理架构的演变"></a>数据处理架构的演变</h3><h4 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h4><p>所有的存储和计算都交由一个DBMS来处理，然后通过各个系统来展示。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_20-47-35.png" alt="Snipaste_2020-12-16_20-47-35"></p><p>特点：</p><ul><li>实时性很好</li></ul><p>问题：</p><ul><li>能够同时处理的请求有限，当数据量大，请求多时就无法处理了</li></ul><h4 id="分析处理"><a href="#分析处理" class="headerlink" title="分析处理"></a>分析处理</h4><p>将数据从业务数据库复制到数仓，再进行分析和查询</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_20-50-09.png" alt="Snipaste_2020-12-16_20-50-09"></p><p>特点：</p><ul><li>不用在联表查询，不怕高并发</li></ul><p>问题：</p><ul><li>实时性做不到</li></ul><h3 id="流处理架构"><a href="#流处理架构" class="headerlink" title="流处理架构"></a>流处理架构</h3><p>上面的事务处理和分析处理都有各自的优点，但是没有同时满足低延迟和数据正确。</p><p>所以出现了流处理结构，通过将数据存在数据库中变为存在于流处理的内容中（有状态），定时持久化到本地，内存不够的话使用集群，就能同时满足低延时和高吞吐。</p><p>但是这样有个缺点，因为使用集群处理，无法保证各个节点事件的有序性，这样就会对最终结果造成偏差。</p><p>这时，lambda架构通过两套处理系统，分别对低延迟和数据准确性做出了保障。</p><h4 id="Lambda架构"><a href="#Lambda架构" class="headerlink" title="Lambda架构"></a>Lambda架构</h4><p>lambda架构：事件流既要进行流处理（低延迟）还要进行批处理（保证准确性），用两套系统保证低延迟和结果准确。twitter提出</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_20-59-21.png" alt="Snipaste_2020-12-16_20-59-21"></p><blockquote><p>为什么这里的批处理结果不准确？</p><p><strong>时间正确处理/语义化窗口</strong>（按照事件触发时间计算，不是按照事件到达时间计算），只有FLink能做到</p><p>缺点：</p><p>流处理负责低延迟，数据不准确；批处理负责数据准确。<strong>但几乎处理逻辑大致相同，却写两遍。</strong>不好</p></blockquote><blockquote><p><strong>时间正确处理/语义化窗口</strong></p><p>（按照事件触发时间计算，不是按照事件到达时间计算）</p><p>例如，由于网络延迟，一个日志本来是昨天产生的，结果今天才到达服务器。</p><p>这时，sparkstream会认为它是今天的数据，它只能按照处理时间计算。而flink认为它是昨天的数据，它按照事件时间计算。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201216114055114.png" alt="image-20201216114055114"></p><p><strong>上图查看结果</strong>，在ss中事件放在了一个一分钟的窗口中，而事件事件并不在一分钟之内，所以得知ss是计算处理时间。而Flink放在了2个窗口中，所以它不是计算处理时间，而是计算事件本身的时间。</p></blockquote><p><font color="red"><strong>所以，Flink出现了，能同时处理批流数据的计算框架。</strong></font></p><h2 id="Flink特点"><a href="#Flink特点" class="headerlink" title="Flink特点"></a>Flink特点</h2><ul><li>事件驱动（事件到达，立马计算）（SS不是事件驱动，因为它是微批，攒够一个批的事件才计算）</li><li>时间正确处理/语义化窗口</li><li>exacly-once</li><li>毫秒延迟</li><li>高可用</li><li>与众多常用存储系统的连接</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_21-07-39.png" alt="Snipaste_2020-12-16_21-07-39"></p><h2 id="vs-Spark-Streaming"><a href="#vs-Spark-Streaming" class="headerlink" title="vs Spark Streaming"></a>vs Spark Streaming</h2><ul><li>流(stream)和微批(micro-batching)</li><li>数据模型，RDD与DataFlow</li><li>运行时架构<ul><li>–spark 是批计算，将 DAG 划分为不同的 stage，一个完成后才可以计算下一个</li><li>–flink 是标准的流执行模式，一个事件在一个节点处理完后可以直接发往下一个节点进行处理</li></ul></li><li>shuffle区别🔺<ul><li>Spark是批处理，在shuffle时要等此stage的数据全部计算完毕才可以进行shuffle洗牌，开始下一个stage</li><li>而flink是流处理，每次处理就一张牌，它的shuffle也就不是洗牌了，而是发牌给下一个子任务，<strong>也不需要等待其他事件的到达。</strong>flink也有个api叫shuffle，它是随机发牌给下一个子任务，而rebalance是轮询发牌给下一个子任务的分区。</li></ul></li></ul><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="在IDEA中编写Flink程序"><a href="#在IDEA中编写Flink程序" class="headerlink" title="在IDEA中编写Flink程序"></a>在IDEA中编写Flink程序</h2><p>本项目使用的Flink版本为最新版本，也就是1.11.0。现在提供maven项目的配置文件。</p><ol><li>使用Intellij IDEA创建一个Maven新项目</li><li>勾选<code>Create from archetype</code>，然后点击<code>Add Archetype</code>按钮</li><li><code>GroupId</code>中输入<code>org.apache.flink</code>，<code>ArtifactId</code>中输入<code>flink-quickstart-scala</code>，<code>Version</code>中输入<code>1.11.0</code>，然后点击<code>OK</code></li><li>点击向右箭头，出现下拉列表，选中<code>flink-quickstart-scala:1.11.0</code>，点击<code>Next</code></li><li><code>Name</code>中输入<code>FlinkTutorial</code>，<code>GroupId</code>中输入<code>com.atguigu</code>，<code>ArtifactId</code>中输入<code>FlinkTutorial</code>，点击<code>Next</code></li><li>最好使用IDEA默认的Maven工具：Bundled（Maven 3），点击<code>Finish</code>，等待一会儿，项目就创建好了</li></ol><p>编写<code>WordCount.scala</code>程序</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line">    <span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">object</span> <span class="title">StreamingJob</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">/** Main program method */</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) : <span class="type">Unit</span> = &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// get the execution environment</span></span><br><span class="line">        <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span></span><br><span class="line">          .getExecutionEnvironment</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// get input data by connecting to the socket</span></span><br><span class="line">        <span class="keyword">val</span> text: <span class="type">DataStream</span>[<span class="type">String</span>] = env</span><br><span class="line">          .socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>, &#x27;\n&#x27;)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// parse the data, group it, window it, and aggregate the counts</span></span><br><span class="line">        <span class="keyword">val</span> windowCounts = text</span><br><span class="line">          .flatMap &#123; w =&gt; w.split(<span class="string">&quot;\\s&quot;</span>) &#125;</span><br><span class="line">          .map &#123; w =&gt; <span class="type">WordWithCount</span>(w, <span class="number">1</span>) &#125;</span><br><span class="line">          .keyBy(<span class="string">&quot;word&quot;</span>)</span><br><span class="line">          .timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>))</span><br><span class="line">          .sum(<span class="string">&quot;count&quot;</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// print the results with a single thread, rather than in parallel</span></span><br><span class="line">        windowCounts</span><br><span class="line">          .print()</span><br><span class="line">          .setParallelism(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">        env.execute(<span class="string">&quot;Socket Window WordCount&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">/** Data type for words with count */</span></span><br><span class="line">      <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">WordWithCount</span>(<span class="params">word: <span class="type">String</span>, count: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class">    &#125;</span></span><br></pre></td></tr></table></figure><p>打开一个终端（Terminal），运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nc -lk 9999</span><br></pre></td></tr></table></figure><p>接下来使用<code>IDEA</code>运行就可以了。</p><h2 id="下载Flink运行时环境，提交Jar包的运行方式"><a href="#下载Flink运行时环境，提交Jar包的运行方式" class="headerlink" title="下载Flink运行时环境，提交Jar包的运行方式"></a>下载Flink运行时环境，提交Jar包的运行方式</h2><p>下载链接：<a href="http://mirror.bit.edu.cn/apache/flink/flink-1.11.0/flink-1.11.0-bin-scala_2.11.tgz">http://mirror.bit.edu.cn/apache/flink/flink-1.11.0/flink-1.11.0-bin-scala_2.11.tgz</a></p><p>然后解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar xvfz flink-1.11.0-bin-scala_2.11.tgz</span><br></pre></td></tr></table></figure><p>启动Flink集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> flink-1.11.0</span><br><span class="line">$ ./bin/start-cluster.sh</span><br></pre></td></tr></table></figure><p>可以打开Flink WebUI查看集群状态：<a href="http://localhost:8081/">http://localhost:8081</a></p><p>在<code>IDEA</code>中使用<code>maven package</code>打包。</p><p>提交打包好的<code>JAR</code>包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> flink-1.11.0</span><br><span class="line">$ ./bin/flink run 打包好的JAR包的绝对路径</span><br></pre></td></tr></table></figure><p>停止Flink集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/stop-cluster.sh</span><br></pre></td></tr></table></figure><p>查看标准输出日志的位置，在<code>log</code>文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> flink-1.11.0/<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="程序与数据流"><a href="#程序与数据流" class="headerlink" title="程序与数据流"></a>程序与数据流</h2><ul><li>所有的Flink程序都是由三部分组成的： Source 、Transformation 和 Sink。</li><li>Source 负责读取数据源，Transformation 利用各种算子进行处理加工，Sink 负责输出</li><li>在运行时，Flink上运行的程序会被映射成“逻辑数据流”（dataflows），它包含了这三部分</li><li>每一个dataflow以一个或多个sources开始以一个或多个sinks结束。dataflow类似于任意的有向无环图（DAG）</li><li>在大部分情况下，程序中的转换运算（transformations）跟dataflow中的算子（operator）是一一对应的关系</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-32-45.png" alt="Snipaste_2020-12-16_23-32-45"></p><h1 id="Flink运行架构🔺"><a href="#Flink运行架构🔺" class="headerlink" title="Flink运行架构🔺"></a>Flink运行架构🔺</h1><h2 id="Flink运行时组件"><a href="#Flink运行时组件" class="headerlink" title="Flink运行时组件"></a>Flink运行时组件</h2><p>Flink运行时架构主要包括四个不同的组件，它们会在运行流处理应用程序时协同工作：作业管理器（JobManager）、资源管理器（ResourceManager）、任务管理器（TaskManager），以及分发器（Dispatcher）。因为Flink是用Java和Scala实现的，所以所有组件都会运行在Java虚拟机（JVMs）上。</p><h3 id="作业管理器（JobManager）"><a href="#作业管理器（JobManager）" class="headerlink" title="作业管理器（JobManager）"></a>作业管理器（JobManager）</h3><p>类似于Spark的Driver进程，一个Job就对应这一个JobManager。</p><ul><li>控制一个应用程序执行的主进程，也就是说，每个应用程序都会被一个不同的JobManager 所控制执行。</li><li>JobManager 会先接收到要执行的应用程序，这个应用程序会包括：作业图（JobGraph）、逻辑数据流图（logical dataflow graph）和打包了所有的类、库和其它资源的JAR包。</li><li>JobManager 会把JobGraph转换成一个物理层面的数据流图，这个图被叫做“执行图”（ExecutionGraph），包含了所有可以并发执行的任务。</li><li>JobManager 会向资源管理器（ResourceManager）请求执行任务必要的资源，也就是任务管理器（TaskManager）上的<strong>插槽（slot）</strong>。一旦它获取到了足够的资源，就会将执行图分发到真正运行它们的TaskManager上。而在运行过程中，JobManager会负责所有需要中央协调的操作，<strong>比如说检查点（checkpoints）的协调。</strong></li></ul><h4 id="执行图（ExecutionGraph）🔺"><a href="#执行图（ExecutionGraph）🔺" class="headerlink" title="执行图（ExecutionGraph）🔺"></a>执行图（ExecutionGraph）🔺</h4><p>Flink 中的执行图可以分成四层：StreamGraph -&gt; JobGraph -&gt; ExecutionGraph -&gt; 物理执行图</p><ol><li>StreamGraph：是根据用户通过 Stream API 编写的代码生成的最初的图。用来表示程序的拓扑结构。</li><li>JobGraph：StreamGraph经过优化后生成了 JobGraph，提交给 JobManager 的数据结构。主要的优化为，<strong>将多个符合条件的节点 chain 在一起作为一个节点</strong>，避免在不同的slot而进行网络IO。</li><li>ExecutionGraph：JobManager 根据 JobGraph 生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。</li><li>物理执行图：JobManager 根据 ExecutionGraph 对 Job 进行调度后，在各个TaskManager 上部署 Task 后形成的“图”，并不是一个具体的数据结构。</li></ol><p><strong>流程图实例</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/sdkkfkasd.png" alt="sdkkfkasd"></p><ul><li>StreamGraph-&gt;JobGraph时，最后两个合并了，是因为它们之间没有shuffle并且相同并行度，所以串为一个节点，避免它们不在一个slot中可能导致的网络传输</li><li>JobGraph-&gt;ExecutionGraph，这是由Job Manager完成的，它展示了并行的任务<ul><li><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-17_20-19-52.png" alt="Snipaste_2020-12-17_20-19-52"></li></ul></li></ul><p>所以最后各个子任务在TaskManger上的分布可能是：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-46-12.png" alt="Snipaste_2020-12-16_23-46-12"></p><blockquote><p>扁平的长方形指的是slot</p></blockquote><h4 id="任务链（Operator-Chains）🔺"><a href="#任务链（Operator-Chains）🔺" class="headerlink" title="任务链（Operator Chains）🔺"></a>任务链（Operator Chains）🔺</h4><p>Graph节点合并规则-Operator Chains</p><ul><li>Flink 采用了一种称为任务链的优化技术，<font color="red"><strong>可以在特定条件下减少本地通信的开销</strong></font>。为了满足任务链的要求<strong>，必须将两个或多个算子设为相同的并行度，并通过本地转发（local forward）的方式进行连接</strong></li><li><strong>相同并行度</strong>的 <strong>one-to-one</strong>(维护分区内数据有序) 操作，Flink 这样相连的算子链接在一起形成一个 task，原来的算子成为里面的 subtask</li><li>并行度相同、并且是 one-to-one 操作，两个条件缺一不可</li></ul><hr><blockquote><p>在代码编译过程中会将streamGarph变为JobGraph，其中会将多个符合条件的节点 chain 在一起作为一个节点，为什么？</p><p>因为把它们放在一个节点它们最终会在一个slot中运行，这时它们之间数据传递会走本地方式连接，如果不放在一起，则有可能会出现它们节点在不同的slot中执行，必然造成线程间数据连接或者不同的job manager中的slot间网络数据连接。效率低下。</p></blockquote><p>所以，各个子任务的并行度最好一致，因为在相同slot中执行使用本地线程传输会比可能的网络传输有效率。举一个反面教材：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-17_20-25-35.png" alt="Snipaste_2020-12-17_20-25-35"></p><p>由图得知，除了CE剩下的都是并行度4。并且C和D之间是shuffle，而D和E之间不是shuffle。</p><p>这个图唯一能优化的地方就是E的并行度，如果把它的并行度设为4，则D-E之后走slot本地传输，而不会跨slot传输；至于C，因为c-d是shuffle，所以C的并行度在这里不重要。</p><p><font color="red">但是最好各个子任务的并行度最好一致。</font></p><h5 id="任务链禁用"><a href="#任务链禁用" class="headerlink" title="任务链禁用"></a>任务链禁用</h5><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-17_22-14-42.png" alt="Snipaste_2020-12-17_22-14-42"></p><p>根据默认规则上图的key和sink是要合并的，但是我就是不像让它合并，可以参考的方法有：</p><ol><li>在key后手动重分区(rebalance|shuffle)</li><li>单独为key操作设置<code>disableChaining</code>，这样key前后都不会参与合并</li><li>抛开此图来讲，key和前后都是合并状态，如果想让key和前面断开和后边合并，可以单独为key设置<code>.startNewChain</code></li><li>如果直接为此图禁用合并Chain，则直接在环境处<code>.disableChaining</code></li></ol><h3 id="任务管理器（TaskManager）"><a href="#任务管理器（TaskManager）" class="headerlink" title="任务管理器（TaskManager）"></a>任务管理器（TaskManager）</h3><p>类似于Spark的Executor进程。</p><ul><li>Flink中的工作进程。通常在Flink中会有多个TaskManager运行，每一个TaskManager都包含了一定数量的插槽（slots）。插槽的数量限制了TaskManager能够执行的任务数量。</li><li>启动之后，TaskManager会向资源管理器注册它的插槽；收到资源管理器的指令后，TaskManager就会将一个或者多个插槽提供给JobManager调用。JobManager就可以向插槽分配任务（tasks）来执行了。</li><li>在执行过程中，一个TaskManager可以跟其它运行同一应用程序的TaskManager交换数据。</li></ul><blockquote><p>TaskManager是进程；slot是线程；</p></blockquote><h4 id="TaskManager-和-Slots🔺"><a href="#TaskManager-和-Slots🔺" class="headerlink" title="TaskManager 和 Slots🔺"></a>TaskManager 和 Slots🔺</h4><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-07-10.png" alt="Snipaste_2020-12-16_23-07-10"></p><ul><li>Flink 中每一个 TaskManager 都是一个JVM进程，它可能会在独立的线程上执行一个或多个子任务</li><li>为了控制一个 TaskManager 能接收多少个 task， TaskManager 通过 task slot 来进行控制（一个 TaskManager 至少有一个 slot）</li><li>Task Slot 是静态的概念，是指 TaskManager 具有的并发执行能力 </li></ul><blockquote><p><font color="red"><strong>共享slot</strong></font></p><p>默认情况下，Flink 允许子任务共享 slot，子任务即同一Job的不同操作。 这样的结果是，一个 slot 可以保存作业的整个管道。(当此Job设置全局并行度为1时,即<code>env.setParallelism(1)</code>)</p><p>此图就是一个slot保存了整个作业的处理逻辑：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-19-17.png" alt="Snipaste_2020-12-16_23-19-17"></p><p>如果想不用共享solt，可以为不同的子任务设置不同的共享组(slotSharingGroup)。</p><p>如果禁用了共享slot之后，则并行度和slot使用的计算方式已经不是下面的计算方式。首先按照分组计算各个子任务的最大并行度，<strong>然后不同组之间的最大相加。</strong></p></blockquote><h4 id="并行度测试🔺"><a href="#并行度测试🔺" class="headerlink" title="并行度测试🔺"></a>并行度测试🔺</h4><p>代码中可以通过<code>env.setParallelism(1)</code>设置Job默认并行度，<strong>但是每个子任务都有自己的并行度</strong>，所以，<font color="red"><strong>一个Stream最后的并行度（即最后需要的slot）要综合各个算子，一般(没有设置不同的共享组)可以认为就是其所有算子中最大的并行度。</strong></font>（因为共享slot的存在，使得同一任务的不同子任务可以共享slot，所以只需要其所有算子中最大的并行度。）</p><blockquote><p>一个特定算子的 子任务（subtask）的个数被称之为其并行度（parallelism）</p></blockquote><p>如果设置了不同的共享组(slotSharingGroup)，则计算方法不是上面的计算方法，而是每个组内都要使用上面的计算方法，并且不同的组相加<strong>（因为共享组之间的任务不能共享slot，比如2组的任务不能到1组的slot执行）</strong>。最后的数就是此Job最终会消耗的slot数目。</p><p><strong>例如以下代码：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> text: <span class="type">DataStream</span>[<span class="type">String</span>] = env</span><br><span class="line">  .socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>, &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse the data, group it, window it, and aggregate the counts</span></span><br><span class="line"><span class="keyword">val</span> windowCounts = text</span><br><span class="line">  .flatMap &#123; w =&gt; w.split(<span class="string">&quot;\\s&quot;</span>) &#125;.slotSharingGroup(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">  .map &#123; w =&gt; <span class="type">WordWithCount</span>(w, <span class="number">1</span>) &#125;</span><br><span class="line">  .keyBy(<span class="string">&quot;word&quot;</span>)</span><br><span class="line">  .sum(<span class="string">&quot;count&quot;</span>).setParallelism(<span class="number">2</span>).slotSharingGroup(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// print the results with a single thread, rather than in parallel</span></span><br><span class="line">windowCounts</span><br><span class="line">  .print()</span><br><span class="line">  .setParallelism(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>最终消耗4个slot，计算明细如下：</p><ul><li>defalut组：最大并行1</li><li>1组：最大并行1</li><li>2组：最大并行2</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-17_22-28-59.png" alt="Snipaste_2020-12-17_22-28-59"></p><p><strong>举例说明</strong></p><p>现有3个TaskManager，每个TaskManager有3个slot。</p><p><strong>1. Parallelism=1</strong></p><p>所有的子任务都在一个slot中。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-27-06.png" alt="Snipaste_2020-12-16_23-27-06"></p><p><strong>2. Parallelism=9</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-27-42.png" alt="Snipaste_2020-12-16_23-27-42"></p><p><strong>3. 总体为9，但是单独为Sink设置为1</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-28-43.png" alt="Snipaste_2020-12-16_23-28-43"></p><hr><h3 id="资源管理器（ResourceManager）"><a href="#资源管理器（ResourceManager）" class="headerlink" title="资源管理器（ResourceManager）"></a>资源管理器（ResourceManager）</h3><ul><li>主要负责管理任务管理器（TaskManager）的插槽（slot），TaskManger 插槽是Flink中定义的处理资源单元。</li><li>Flink为不同的环境和资源管理工具提供了不同资源管理器，比如YARN、Mesos、K8s，以及standalone部署。</li><li>当JobManager申请插槽资源时，ResourceManager会将有空闲插槽的TaskManager分配给JobManager。如果ResourceManager没有足够的插槽来满足JobManager的请求，它还可以向资源提供平台发起会话，以提供启动TaskManager进程的容器。</li></ul><h3 id="分发器（Dispatcher）"><a href="#分发器（Dispatcher）" class="headerlink" title="分发器（Dispatcher）"></a>分发器（Dispatcher）</h3><ul><li><p>可以跨作业运行，它为应用提交提供了REST接口。</p></li><li><p>当一个应用被提交执行时，分发器就会启动并将应用移交给一个JobManager。</p></li><li><p>Dispatcher也会启动一个Web UI，用来方便地展示和监控作业执行的信息。</p></li><li><p>Dispatcher在架构中可能并不是必需的，这取决于应用提交运行的方式。</p></li></ul><p>在UI提交任务时的入口。</p><h2 id="任务提交流程"><a href="#任务提交流程" class="headerlink" title="任务提交流程"></a>任务提交流程</h2><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_22-58-39.png" alt="Snipaste_2020-12-16_22-58-39"></p><h3 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-00-28.png" alt="Snipaste_2020-12-16_23-00-28"></p><h2 id="任务调度原理"><a href="#任务调度原理" class="headerlink" title="任务调度原理"></a>任务调度原理</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-16_23-01-44.png" alt="Snipaste_2020-12-16_23-01-44"></p><p>keyby之后为什么没有分组[]，是逻辑分组，因为它是流处理来一个处理一个，所以只对事件进行打标标明是哪个组，然后只处理一条事件。与Spark不同，Spark是批处理，所以分组后会是key,[event]的数据</p><p>滚动聚合后会变为DataStream；滚动聚合会存放一个状态，每当数据滚动（数据流增加时）会和状态（一个key一个状态）进行计算，得出下一个状态。</p>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s集群监控、高可用以及部署自建Java项目</title>
      <link href="2020/12/06/k8s%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%E3%80%81%E9%AB%98%E5%8F%AF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%BB%BAJava%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/12/06/k8s%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%E3%80%81%E9%AB%98%E5%8F%AF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%BB%BAJava%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s集群监控"><a href="#k8s集群监控" class="headerlink" title="k8s集群监控"></a>k8s集群监控</h1><p>既然是监控k8s的集群，那么我们需要实时获取k8s集群的哪些信息呢？即我们的监控指标是什么？</p><p>想想k8s的集群中所有的概念，即我们需要监控：</p><ul><li>节点资源利用率</li><li>节点数</li><li>运行的Pod数目</li><li>各个容器的状态、资源</li><li>运行的程序等。</li></ul><p>确定好监控的指标后，就要开始决定使用的监控平台是什么，在众多的监控平台中选择了<code>prometheus</code>和<code>Grafana</code>来监控和展示内容。</p><p><code>prometheus</code>是一个<strong>开源的、以HTTP协议周期性抓取被监控组件状态的集监控、报警、数据库为一身的组件</strong>。</p><p><code>Grafana</code>是一个<strong>开源的数据分析和数据可视化工具，提供ui界面支持多种数据库源的数据。</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_09-48-11.png" alt="Snipaste_2020-12-06_09-48-11"></p><h2 id="搭建监控平台"><a href="#搭建监控平台" class="headerlink" title="搭建监控平台"></a>搭建监控平台</h2><h3 id="prometheus"><a href="#prometheus" class="headerlink" title="prometheus"></a><code>prometheus</code></h3><p><strong>0. 创建收集守护进程</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-exporter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">node-exporter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">node-exporter</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">node-exporter</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">prom/node-exporter</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">node-exporter</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9100</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">node-exporter</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-exporter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9100</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">31672</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">node-exporter</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f xxx.yaml</span><br></pre></td></tr></table></figure><p><strong>1. 权限配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes/proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">nonResourceURLs:</span> [<span class="string">&quot;/metrics&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_10-19-18.png" alt="Snipaste_2020-12-06_10-19-18"></p><p><strong>2.配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">prometheus.yml:</span> <span class="string">|</span></span><br><span class="line">    <span class="attr">global:</span></span><br><span class="line">      <span class="attr">scrape_interval:</span>     <span class="string">15s</span></span><br><span class="line">      <span class="attr">evaluation_interval:</span> <span class="string">15s</span></span><br><span class="line">    <span class="attr">scrape_configs:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-apiservers&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">tls_config:</span></span><br><span class="line">        <span class="attr">ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line">      <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_namespace</span>, <span class="string">__meta_kubernetes_service_name</span>, <span class="string">__meta_kubernetes_endpoint_port_name</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">default;kubernetes;https</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-nodes&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">node</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">tls_config:</span></span><br><span class="line">        <span class="attr">ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line">      <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_node_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">kubernetes.default.svc:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_node_name</span>]</span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">/api/v1/nodes/$&#123;1&#125;/proxy/metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-cadvisor&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">node</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">tls_config:</span></span><br><span class="line">        <span class="attr">ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line">      <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_node_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">kubernetes.default.svc:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_node_name</span>]</span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">/api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-service-endpoints&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_annotation_prometheus_io_scrape</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_annotation_prometheus_io_scheme</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__scheme__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(https?)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_annotation_prometheus_io_path</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>, <span class="string">__meta_kubernetes_service_annotation_prometheus_io_port</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">$1:$2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_service_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_namespace</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_name</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-services&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">service</span></span><br><span class="line">      <span class="attr">metrics_path:</span> <span class="string">/probe</span></span><br><span class="line">      <span class="attr">params:</span></span><br><span class="line">        <span class="attr">module:</span> [<span class="string">http_2xx</span>]</span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_annotation_prometheus_io_probe</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__param_target</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">blackbox-exporter.example.com:9115</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__param_target</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">instance</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_service_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_namespace</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_name</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-ingresses&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">ingress</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_ingress_annotation_prometheus_io_probe</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_ingress_scheme</span>,<span class="string">__address__</span>,<span class="string">__meta_kubernetes_ingress_path</span>]</span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+);(.+);(.+)</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;://$&#123;2&#125;$&#123;3&#125;</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__param_target</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">blackbox-exporter.example.com:9115</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__param_target</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">instance</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_ingress_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_namespace</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_ingress_name</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;kubernetes-pods&#x27;</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">pod</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_pod_annotation_prometheus_io_scrape</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_pod_annotation_prometheus_io_path</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>, <span class="string">__meta_kubernetes_pod_annotation_prometheus_io_port</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">$1:$2</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_pod_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_namespace</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_pod_name</span>]</span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_pod_name</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_10-20-28.png" alt="Snipaste_2020-12-06_10-20-28"></p><p><strong>3. deployment创建</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">prometheus-deployment</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">prom/prometheus:v2.0.0</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;/bin/prometheus&quot;</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;--storage.tsdb.path=/prometheus&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;--storage.tsdb.retention=24h&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9090</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/prometheus&quot;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/etc/prometheus&quot;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">2500Mi</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">prometheus</span>    </span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus-config</span>   </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_10-21-44.png" alt="Snipaste_2020-12-06_10-21-44"></p><p><strong>4. svc创建</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9090</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30003</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_10-22-46.png" alt="Snipaste_2020-12-06_10-22-46"></p><h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a><code>Grafana</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">grafana-core</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">      <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">        <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">grafana/grafana:4.2.0</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">grafana-core</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        </span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">         </span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">         </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_AUTH_BASIC_ENABLED</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_AUTH_ANONYMOUS_ENABLED</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">         </span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/login</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">         </span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grafana-persistent-storage</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grafana-persistent-storage</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">grafana</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">core</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_10-30-38.png" alt="Snipaste_2020-12-06_10-30-38"></p><hr><p>检验</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-03-38.png" alt="Snipaste_2020-12-06_11-03-38"></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>根据<code>kubectl get svc -n kube-system    </code>得到访问地址，访问之后，输入账号密码，都是admin</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-05-46.png" alt="Snipaste_2020-12-06_11-05-46"></p><p><strong>1. 配置数据源prometheus</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-33-54.png" alt="Snipaste_2020-12-06_11-33-54"></p><p>请注意，URL的ip请采用prometheus的svc的IP。</p><p><strong>2. 设置数据模板</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-36-19.png" alt="Snipaste_2020-12-06_11-36-19"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-50-06.png" alt="Snipaste_2020-12-06_11-50-06"></p><p>这里两种选择，你可以直接在上面的输入框内输入<code>315</code>，又或者在下面的JSON内输入JSON。</p><p>因为输入315他会请求一个网址来获取JSON，但是可能需要科学上网才能拉取到JSON。所以这里我手动输入JSON也可以。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;__inputs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DS_PROMETHEUS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Prometheus&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;datasource&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;pluginId&quot;</span>: <span class="string">&quot;prometheus&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;pluginName&quot;</span>: <span class="string">&quot;Prometheus&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;__requires&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;panel&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Graph&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;panel&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Singlestat&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;grafana&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;grafana&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Grafana&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;3.1.1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;datasource&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;prometheus&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Prometheus&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.3.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Kubernetes cluster monitoring (via Prometheus)&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Monitors Kubernetes cluster using Prometheus. Shows overall cluster CPU / Memory / Filesystem usage as well as individual pod, containers, systemd services statistics. Uses cAdvisor metrics only.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;kubernetes&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;dark&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;timezone&quot;</span>: <span class="string">&quot;browser&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;hideControls&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;sharedCrosshair&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;rows&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLine&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">32</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_receive_bytes_total&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m]))&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;Received&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m]))&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;Sent&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Network I/O pressure&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;transparent&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;Bps&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;Bps&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Network I/O pressure&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;percent&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;180px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) / sum (machine_memory_bytes&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) * 100&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;65, 90&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Cluster memory usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;transparent&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;80%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;percent&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;180px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) / sum (machine_cpu_cores&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) * 100&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;65, 90&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Cluster CPU usage (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;80%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;percent&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;180px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">7</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_fs_usage_bytes&#123;device=~\&quot;^/dev/[sv]d[a-z][1-9]$\&quot;,id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) / sum (container_fs_limit_bytes&#123;device=~\&quot;^/dev/[sv]d[a-z][1-9]$\&quot;,id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) * 100&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;65, 90&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Cluster filesystem usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;80%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;20%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;20%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Used&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">10</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (machine_memory_bytes&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Total&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">11</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot; cores&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;30%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m]))&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Used&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot; cores&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;30%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (machine_cpu_cores&#123;kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Total&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">13</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_fs_usage_bytes&#123;device=~\&quot;^/dev/[sv]d[a-z][1-9]$\&quot;,id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Used&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cacheTimeout&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;colorBackground&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colorValue&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;colors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;rgba(50, 172, 45, 0.97)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(237, 129, 40, 0.89)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rgba(245, 54, 54, 0.9)&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;gauge&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;maxValue&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">&quot;minValue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdLabels&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdMarkers&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;1px&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">14</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;mappingType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;mappingTypes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;value to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;range to text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;maxDataPoints&quot;</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nullText&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;postfix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;postfixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;prefixFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;rangeMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;sparkline&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fillColor&quot;</span>: <span class="string">&quot;rgba(31, 118, 189, 0.18)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;full&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;lineColor&quot;</span>: <span class="string">&quot;rgb(31, 120, 193)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_fs_limit_bytes&#123;device=~\&quot;^/dev/[sv]d[a-z][1-9]$\&quot;,id=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;thresholds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Total&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;singlestat&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueFontSize&quot;</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;valueMaps&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;op&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;null&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;valueName&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;showTitle&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Total usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">17</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; pod_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods CPU usage (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;transparent&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;cores&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;showTitle&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods CPU usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">23</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;systemd_service_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (systemd_service_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; systemd_service_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;System services CPU usage (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;cores&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;System services CPU usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">24</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;hideEmpty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;hideZero&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,container_name!=\&quot;POD\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (container_name, pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;pod: &#123;&#123; pod_name &#125;&#125; | &#123;&#123; container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;image!=\&quot;\&quot;,name!~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, name, image)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;docker: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; image &#125;&#125; (&#123;&#123; name &#125;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;rkt_container_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, rkt_container_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;rkt: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; rkt_container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers CPU usage (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;cores&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers CPU usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;500px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_cpu_usage_seconds_total&#123;id!=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (id)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; id &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_cpu&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes CPU usage (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;cores&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;repeat&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;showTitle&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes CPU usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; pod_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods memory usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods memory usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">26</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;systemd_service_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (systemd_service_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; systemd_service_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;System services memory usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;System services memory usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">27</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,container_name!=\&quot;POD\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (container_name, pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;pod: &#123;&#123; pod_name &#125;&#125; | &#123;&#123; container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;image!=\&quot;\&quot;,name!~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (kubernetes_io_hostname, name, image)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;docker: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; image &#125;&#125; (&#123;&#123; name &#125;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;rkt_container_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (kubernetes_io_hostname, rkt_container_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;rkt: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; rkt_container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers memory usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers memory usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;500px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">28</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (container_memory_working_set_bytes&#123;id!=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;) by (id)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&#123;&#123; id &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;container_memory_usage:sort_desc&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes memory usage&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes memory usage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_receive_bytes_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;-&gt; &#123;&#123; pod_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&lt;- &#123;&#123; pod_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods network I/O (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;Bps&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pods network I/O&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_receive_bytes_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (container_name, pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;-&gt; pod: &#123;&#123; pod_name &#125;&#125; | &#123;&#123; container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;image!=\&quot;\&quot;,name=~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (container_name, pod_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&lt;- pod: &#123;&#123; pod_name &#125;&#125; | &#123;&#123; container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;D&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_receive_bytes_total&#123;image!=\&quot;\&quot;,name!~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, name, image)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;-&gt; docker: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; image &#125;&#125; (&#123;&#123; name &#125;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;image!=\&quot;\&quot;,name!~\&quot;^k8s_.*\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, name, image)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&lt;- docker: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; image &#125;&#125; (&#123;&#123; name &#125;&#125;)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_transmit_bytes_total&#123;rkt_container_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, rkt_container_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;-&gt; rkt: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; rkt_container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;E&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;rkt_container_name!=\&quot;\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (kubernetes_io_hostname, rkt_container_name)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&lt;- rkt: &#123;&#123; kubernetes_io_hostname &#125;&#125; | &#123;&#123; rkt_container_name &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;F&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers network I/O (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;Bps&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Containers network I/O&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;collapse&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;500px&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;panels&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;aliasColors&quot;</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">&quot;bars&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;decimals&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;editable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;error&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;fill&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;grid&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;threshold1&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold1Color&quot;</span>: <span class="string">&quot;rgba(216, 200, 27, 0.27)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;threshold2Color&quot;</span>: <span class="string">&quot;rgba(234, 112, 112, 0.22)&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">29</span>,</span><br><span class="line">          <span class="attr">&quot;isNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;legend&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alignAsTable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;current&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;max&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;rightSide&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sideWidth&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;sortDesc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;values&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;lines&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;nullPointMode&quot;</span>: <span class="string">&quot;connected&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;percentage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;pointradius&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;points&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;renderer&quot;</span>: <span class="string">&quot;flot&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;seriesOverrides&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;span&quot;</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">&quot;stack&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;steppedLine&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;sum (rate (container_network_receive_bytes_total&#123;id!=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (id)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;-&gt; &#123;&#123; id &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;expr&quot;</span>: <span class="string">&quot;- sum (rate (container_network_transmit_bytes_total&#123;id!=\&quot;/\&quot;,kubernetes_io_hostname=~\&quot;^$Node$\&quot;&#125;[1m])) by (id)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;intervalFactor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;legendFormat&quot;</span>: <span class="string">&quot;&lt;- &#123;&#123; id &#125;&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;metric&quot;</span>: <span class="string">&quot;network&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;refId&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;timeFrom&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;timeShift&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes network I/O (1m avg)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tooltip&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;msResolution&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;shared&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;value_type&quot;</span>: <span class="string">&quot;cumulative&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;xaxis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;yaxes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;Bps&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;logBase&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;max&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;min&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;All processes network I/O&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;time&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;now-5m&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;now&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;timepicker&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;refresh_intervals&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;5s&quot;</span>,</span><br><span class="line">      <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30s&quot;</span>,</span><br><span class="line">      <span class="string">&quot;1m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;5m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;15m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;1h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;2h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;1d&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;time_options&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;5m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;15m&quot;</span>,</span><br><span class="line">      <span class="string">&quot;1h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;6h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;12h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;24h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;2d&quot;</span>,</span><br><span class="line">      <span class="string">&quot;7d&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30d&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;templating&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;allValue&quot;</span>: <span class="string">&quot;.*&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;current&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">&quot;datasource&quot;</span>: <span class="string">&quot;$&#123;DS_PROMETHEUS&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hide&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;includeAll&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Node&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;options&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;label_values(kubernetes_io_hostname)&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;refresh&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;query&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;refresh&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;schemaVersion&quot;</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="number">13</span>,</span><br><span class="line">  <span class="attr">&quot;links&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;gnetId&quot;</span>: <span class="number">315</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-06_11-50-15.png" alt="Snipaste_2020-12-06_11-50-15"></p><p>load之后还需要选择之间新增的数据源prometheus。导入模板完成。</p><blockquote><p>注意</p><p>如果最后数据统计不出来，请注意本机、Grafana、Prometheus的时区是不是一致的，要是一样的时间才可以。</p></blockquote><h1 id="搭建高可用的集群"><a href="#搭建高可用的集群" class="headerlink" title="搭建高可用的集群"></a>搭建高可用的集群</h1><p>之前1个master、2个worker的集群有一个很大的问题，这种只有1个master的集群的通用问题即单点故障，当我们的master由于某种原因宕机之后，整个集群就会停止工作了，没有人来指挥了。</p><p>要想解决这中问题，通常方案是启用多个master，然后就没有单点故障问题了，至于怎么使用多个master不同的集群有不同的逻辑，例如：</p><ul><li>Hadoop集群是active master和standby master，active master宕机之后被检测到standby master就切换为active master</li><li>k8s集群是多个master都安装了HAProxy插件，worker通过虚拟IP连接到一台master时，master的HAProxy使用负载均衡将任务随机(可设置规则)发送给任一master</li></ul><blockquote><p>k8s中的虚拟IP是通过keepalived实现的，keepalived将一虚拟IP同时绑定到所有master。但是同一时刻只有一台master存在这个虚拟IP，只有这台master宕机之后，虚拟IP才会飘向其他设置了keepalived的master节点。</p></blockquote><p><strong>k8s高可用集群调用展示：</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201209111646898.png" alt="image-20201209111646898"></p><p><strong>k8s高可用集群各角色任务展示：</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201209112543393.png" alt="image-20201209112543393"></p><p><strong>挂掉拥有vip的master，vip(是指定的一个固定IP)会自动飘向其它master，keepalived实现，此时node会自动连接vip，但此时拥有vip的节点已经是其他master：</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201209112909081.png" alt="image-20201209112909081"></p><p>若挂掉没有VIP的节点，则HAProxy不会将请求负载到此节点上，对集群功能没有影响。</p><blockquote><p>集群内实现功能的各个组件：</p><ol><li>负载均衡-&gt;HAProxy</li><li>虚拟IP-&gt;keepalived</li></ol></blockquote><h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p><ul><li>一台或多台机器，操作系统 CentOS7.x-86_x64</li><li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li><li>可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点</li><li>禁止swap分区</li></ul><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><table><thead><tr><th>角色</th><th>IP</th><th>keepalived</th><th>kubeadm init</th><th>docker</th></tr></thead><tbody><tr><td>master1</td><td>192.168.44.155</td><td>√</td><td>√</td><td>√</td></tr><tr><td>master2</td><td>192.168.44.156</td><td>√</td><td>加入</td><td>√</td></tr><tr><td>node1</td><td>192.168.44.157</td><td></td><td>加入</td><td>√</td></tr><tr><td>VIP（虚拟ip）</td><td>192.168.44.158</td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭selinux</span></span><br><span class="line">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config  # 永久</span><br><span class="line">setenforce 0  # 临时</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭swap</span></span><br><span class="line">swapoff -a  # 临时</span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab    # 永久</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据规划设置主机名</span></span><br><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在master添加hosts</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">192.168.44.158    master.k8s.io   k8s-vip</span><br><span class="line">192.168.44.155    master01.k8s.io master1</span><br><span class="line">192.168.44.156    master02.k8s.io master2</span><br><span class="line">192.168.44.157    node01.k8s.io   node1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将桥接的IPv4流量传递到iptables的链</span></span><br><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system  # 生效</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 时间同步</span></span><br><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></table></figure><blockquote><p>Linux hosts</p><p>一般情况下hosts文件的每行尾一个主机，每行由三部分组成，每个部分由空格隔开。</p><ol><li>网络IP地址</li><li>主机名或域名</li><li>主机名别名</li></ol></blockquote><h2 id="所有master节点部署keepalived"><a href="#所有master节点部署keepalived" class="headerlink" title="所有master节点部署keepalived"></a>所有master节点部署keepalived</h2><h3 id="安装相关包和keepalived"><a href="#安装相关包和keepalived" class="headerlink" title="安装相关包和keepalived"></a>安装相关包和keepalived</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y conntrack-tools libseccomp libtool-ltdl</span><br><span class="line"></span><br><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure><h3 id="配置master节点"><a href="#配置master节点" class="headerlink" title="配置master节点"></a>配置master节点</h3><p>master1节点配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF </span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id k8s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">    script &quot;killall -0 haproxy&quot;</span><br><span class="line">    interval 3</span><br><span class="line">    weight -2</span><br><span class="line">    fall 10</span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER </span><br><span class="line">    interface ens33 </span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 250</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass ceb1b3ec013d66163d6ab</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.44.158</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_haproxy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>master2节点配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF </span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id k8s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">    script &quot;killall -0 haproxy&quot;</span><br><span class="line">    interval 3</span><br><span class="line">    weight -2</span><br><span class="line">    fall 10</span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP </span><br><span class="line">    interface ens33 </span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 200</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass ceb1b3ec013d66163d6ab</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.44.158</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_haproxy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201209114249444.png" alt="image-20201209114249444"></p><p><strong>通过对比上面的命令，来说明一下配置文件的注意点</strong></p><ol><li>master2的state是backup，master1是master。所以一开始虚拟IP<code>192.168.44.158</code>会在master1上</li><li>两者的interface都要写自己节点的网卡名，一般是ens33</li><li>输入自定义的虚拟IP，要和你自己节点的IP一个网段</li></ol><h3 id="启动和检查"><a href="#启动和检查" class="headerlink" title="启动和检查"></a>启动和检查</h3><p>在两台master节点都执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动keepalived</span></span><br><span class="line">$ systemctl start keepalived.service</span><br><span class="line">设置开机启动</span><br><span class="line">$ systemctl <span class="built_in">enable</span> keepalived.service</span><br><span class="line"><span class="comment"># 查看启动状态</span></span><br><span class="line">$ systemctl status keepalived.service</span><br></pre></td></tr></table></figure><p>启动后查看master1的网卡信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a s ens33</span><br></pre></td></tr></table></figure><h2 id="部署haproxy"><a href="#部署haproxy" class="headerlink" title="部署haproxy"></a>部署haproxy</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y haproxy</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>两台master节点的配置均相同，配置中声明了后端代理的两个master节点服务器，指定了haproxy运行的端口为16443等，因此16443端口为集群的入口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/haproxy/haproxy.cfg &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># Global settings</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string">global</span></span><br><span class="line"><span class="string">    # to have these messages end up in /var/log/haproxy.log you will</span></span><br><span class="line"><span class="string">    # need to:</span></span><br><span class="line"><span class="string">    # 1) configure syslog to accept network log events.  This is done</span></span><br><span class="line"><span class="string">    #    by adding the &#x27;-r&#x27; option to the SYSLOGD_OPTIONS in</span></span><br><span class="line"><span class="string">    #    /etc/sysconfig/syslog</span></span><br><span class="line"><span class="string">    # 2) configure local2 events to go to the /var/log/haproxy.log</span></span><br><span class="line"><span class="string">    #   file. A line like the following can be added to</span></span><br><span class="line"><span class="string">    #   /etc/sysconfig/syslog</span></span><br><span class="line"><span class="string">    #</span></span><br><span class="line"><span class="string">    #    local2.*                       /var/log/haproxy.log</span></span><br><span class="line"><span class="string">    #</span></span><br><span class="line"><span class="string">    log         127.0.0.1 local2</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    chroot      /var/lib/haproxy</span></span><br><span class="line"><span class="string">    pidfile     /var/run/haproxy.pid</span></span><br><span class="line"><span class="string">    maxconn     4000</span></span><br><span class="line"><span class="string">    user        haproxy</span></span><br><span class="line"><span class="string">    group       haproxy</span></span><br><span class="line"><span class="string">    daemon </span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">    # turn on stats unix socket</span></span><br><span class="line"><span class="string">    stats socket /var/lib/haproxy/stats</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will</span></span><br><span class="line"><span class="string"># use if not designated in their block</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------  </span></span><br><span class="line"><span class="string">defaults</span></span><br><span class="line"><span class="string">    mode                    http</span></span><br><span class="line"><span class="string">    log                     global</span></span><br><span class="line"><span class="string">    option                  httplog</span></span><br><span class="line"><span class="string">    option                  dontlognull</span></span><br><span class="line"><span class="string">    option http-server-close</span></span><br><span class="line"><span class="string">    option forwardfor       except 127.0.0.0/8</span></span><br><span class="line"><span class="string">    option                  redispatch</span></span><br><span class="line"><span class="string">    retries                 3</span></span><br><span class="line"><span class="string">    timeout http-request    10s</span></span><br><span class="line"><span class="string">    timeout queue           1m</span></span><br><span class="line"><span class="string">    timeout connect         10s</span></span><br><span class="line"><span class="string">    timeout client          1m</span></span><br><span class="line"><span class="string">    timeout server          1m</span></span><br><span class="line"><span class="string">    timeout http-keep-alive 10s</span></span><br><span class="line"><span class="string">    timeout check           10s</span></span><br><span class="line"><span class="string">    maxconn                 3000</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># kubernetes apiserver frontend which proxys to the backends</span></span><br><span class="line"><span class="string">#--------------------------------------------------------------------- </span></span><br><span class="line"><span class="string">frontend kubernetes-apiserver</span></span><br><span class="line"><span class="string">    mode                 tcp</span></span><br><span class="line"><span class="string">    bind                 *:16443</span></span><br><span class="line"><span class="string">    option               tcplog</span></span><br><span class="line"><span class="string">    default_backend      kubernetes-apiserver    </span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># round robin balancing between the various backends</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string">backend kubernetes-apiserver</span></span><br><span class="line"><span class="string">    mode        tcp</span></span><br><span class="line"><span class="string">    balance     roundrobin</span></span><br><span class="line"><span class="string">    server      master01.k8s.io   192.168.44.155:6443 check</span></span><br><span class="line"><span class="string">    server      master02.k8s.io   192.168.44.156:6443 check</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># collection haproxy statistics message</span></span><br><span class="line"><span class="string">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="string">listen stats</span></span><br><span class="line"><span class="string">    bind                 *:1080</span></span><br><span class="line"><span class="string">    stats auth           admin:awesomePassword</span></span><br><span class="line"><span class="string">    stats refresh        5s</span></span><br><span class="line"><span class="string">    stats realm          HAProxy\ Statistics</span></span><br><span class="line"><span class="string">    stats uri            /admin?stats</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>注意修改文件中的主机名和IP就行</p><h3 id="启动和检查-1"><a href="#启动和检查-1" class="headerlink" title="启动和检查"></a>启动和检查</h3><p>两台master都启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> haproxy</span><br><span class="line"><span class="comment"># 开启haproxy</span></span><br><span class="line">$ systemctl start haproxy</span><br><span class="line"><span class="comment"># 查看启动状态</span></span><br><span class="line">$ systemctl status haproxy</span><br></pre></td></tr></table></figure><p>检查端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntup|grep haproxy</span><br></pre></td></tr></table></figure><h2 id="所有节点安装Docker-kubeadm-kubelet"><a href="#所有节点安装Docker-kubeadm-kubelet" class="headerlink" title="所有节点安装Docker/kubeadm/kubelet"></a>所有节点安装Docker/kubeadm/kubelet</h2><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">$ yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line">$ docker --version</span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="添加阿里云YUM软件源"><a href="#添加阿里云YUM软件源" class="headerlink" title="添加阿里云YUM软件源"></a>添加阿里云YUM软件源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="安装kubeadm，kubelet和kubectl"><a href="#安装kubeadm，kubelet和kubectl" class="headerlink" title="安装kubeadm，kubelet和kubectl"></a>安装kubeadm，kubelet和kubectl</h3><p>由于版本更新频繁，这里指定版本号部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y kubelet-1.16.3 kubeadm-1.16.3 kubectl-1.16.3</span><br><span class="line">$ systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h2 id="部署Kubernetes-Master"><a href="#部署Kubernetes-Master" class="headerlink" title="部署Kubernetes Master"></a>部署Kubernetes Master</h2><h3 id="创建kubeadm配置文件"><a href="#创建kubeadm配置文件" class="headerlink" title="创建kubeadm配置文件"></a>创建kubeadm配置文件</h3><p><strong>在具有vip的master上操作，这里为master1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /usr/<span class="built_in">local</span>/kubernetes/manifests -p</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/kubernetes/manifests/</span><br><span class="line"></span><br><span class="line">$ vi kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line">apiServer:</span><br><span class="line">  certSANs:</span><br><span class="line">    - master1</span><br><span class="line">    - master2</span><br><span class="line">    - master.k8s.io</span><br><span class="line">    - 192.168.44.158</span><br><span class="line">    - 192.168.44.155</span><br><span class="line">    - 192.168.44.156</span><br><span class="line">    - 127.0.0.1</span><br><span class="line">  extraArgs:</span><br><span class="line">    authorization-mode: Node,RBAC</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta1</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controlPlaneEndpoint: <span class="string">&quot;master.k8s.io:16443&quot;</span></span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns: </span><br><span class="line">  <span class="built_in">type</span>: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:    </span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.16.3</span><br><span class="line">networking: </span><br><span class="line">  dnsDomain: cluster.local  </span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  serviceSubnet: 10.1.0.0/16</span><br><span class="line">scheduler: &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201209142119717.png" alt="image-20201209142119717"></p><p>这里需要填master1，master2，虚拟IP的主机名和IP</p><h3 id="在master1节点执行"><a href="#在master1节点执行" class="headerlink" title="在master1节点执行"></a>在master1节点执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm init --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure><p>按照提示配置环境变量，使用kubectl工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ kubectl get nodes</span><br><span class="line">$ kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><p><strong>按照提示保存以下内容，一会要使用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join master.k8s.io:16443 --token jv5z7n.3y1zi95p952y9p65 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:403bca185c2f3a4791685013499e7ce58f9848e2213e27194b75a2e3293d8812 \</span><br><span class="line">    --control-plane </span><br></pre></td></tr></table></figure><p>查看集群状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cs</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><h2 id="master2节点加入集群"><a href="#master2节点加入集群" class="headerlink" title="master2节点加入集群"></a>master2节点加入集群</h2><h3 id="复制密钥及相关文件"><a href="#复制密钥及相关文件" class="headerlink" title="复制密钥及相关文件"></a>复制密钥及相关文件</h3><p>从master1复制密钥及相关文件到master2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh root@192.168.44.156 mkdir -p /etc/kubernetes/pki/etcd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># scp /etc/kubernetes/admin.conf root@192.168.44.156:/etc/kubernetes</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># scp /etc/kubernetes/pki/&#123;ca.*,sa.*,front-proxy-ca.*&#125; root@192.168.44.156:/etc/kubernetes/pki</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># scp /etc/kubernetes/pki/etcd/ca.* root@192.168.44.156:/etc/kubernetes/pki/etcd</span></span><br></pre></td></tr></table></figure><h3 id="master2加入集群"><a href="#master2加入集群" class="headerlink" title="master2加入集群"></a>master2加入集群</h3><p>执行在master1上init后输出的join命令,需要带上参数<code>--control-plane</code>表示把master控制节点加入集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join master.k8s.io:16443 --token ckf7bs.30576l0okocepg8b     --discovery-token-ca-cert-hash sha256:19afac8b11182f61073e254fb57b9f19ab4d798b70501036fc69ebef46094aba --control-plane</span><br></pre></td></tr></table></figure><p>检查状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line">kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure><p><strong>按照后续提示，执行相关内容</strong></p><h2 id="加入Kubernetes-Node"><a href="#加入Kubernetes-Node" class="headerlink" title="加入Kubernetes Node"></a>加入Kubernetes Node</h2><p>在node1上执行</p><p>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join master.k8s.io:16443 --token ckf7bs.30576l0okocepg8b     --discovery-token-ca-cert-hash sha256:19afac8b11182f61073e254fb57b9f19ab4d798b70501036fc69ebef46094aba</span><br></pre></td></tr></table></figure><p>检查状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line">kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure><h2 id="安装集群网络"><a href="#安装集群网络" class="headerlink" title="安装集群网络"></a>安装集群网络</h2><p>从官方地址获取到flannel的yaml，在master1上执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir flannel</span><br><span class="line"><span class="built_in">cd</span> flannel</span><br><span class="line">wget -c https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>安装flannel网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml </span><br></pre></td></tr></table></figure><p>检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><h2 id="测试kubernetes集群"><a href="#测试kubernetes集群" class="headerlink" title="测试kubernetes集群"></a>测试kubernetes集群</h2><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment nginx --image=nginx</span><br><span class="line">$ kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://NodeIP:Port">http://NodeIP:Port</a>  </p><h1 id="k8s集群部署Java项目"><a href="#k8s集群部署Java项目" class="headerlink" title="k8s集群部署Java项目"></a>k8s集群部署Java项目</h1><p>我们知道k8s集群是以Pod为基本单位的，而Pod是多个容器的组合。所以如果向部署项目到k8s集群需要首先就昂项目源代码集成为容器镜像。然后在k8s上部署容器服务。</p><h2 id="容器交付流程"><a href="#容器交付流程" class="headerlink" title="容器交付流程"></a>容器交付流程</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201210111801547.png" alt="image-20201210111801547"></p><h2 id="k8s部署项目流程"><a href="#k8s部署项目流程" class="headerlink" title="k8s部署项目流程"></a>k8s部署项目流程</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201210111902550.png" alt="image-20201210111902550"></p><h3 id="编写项目"><a href="#编写项目" class="headerlink" title="编写项目"></a>编写项目</h3><p>创建一个springboot项目</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_20-49-49.png" alt="Snipaste_2020-12-09_20-49-49"></p><p><strong>编写Dockerfile</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_20-55-52.png"></p><h3 id="创建第三方仓库"><a href="#创建第三方仓库" class="headerlink" title="创建第三方仓库"></a>创建第三方仓库</h3><p>推送数据到第三方仓库，这里选择阿里云。也可以自己搭建docker仓库</p><p><a href="https://cn.aliyun.com/product/containerservice">https://cn.aliyun.com/product/containerservice</a></p><p><strong>1. 创建命名空间</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_20-59-46.png"></p><p><strong>2. 创建仓库</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-01-01.png"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-01-09.png"></p><h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a><strong>推送镜像</strong></h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-01-50.png"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-12-11.png"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-12-27.png"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-18-17.png"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-09_21-19-00.png" alt="Snipaste_2020-12-09_21-19-00"></p><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-10_22-10-42.png" alt="Snipaste_2020-12-10_22-10-42"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-10_22-08-07.png" alt="Snipaste_2020-12-10_22-08-07"></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Https</title>
      <link href="2020/11/21/%E6%B5%85%E8%B0%88Https/"/>
      <url>2020/11/21/%E6%B5%85%E8%B0%88Https/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><p>HyperText Transfer Protocol，超文本传输协议，是互联网上使用最广泛的一种协议，所有WWW文件必须遵循的标准。HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全。</p><p>使用TCP端口为：80</p><h2 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h2><p>Hyper Text Transfer Protocol over Secure Socket Layer，安全的超文本传输协议，网景公式设计了SSL(Secure Sockets Layer)协议用于对Http协议传输的数据进行加密，保证会话过程中的安全性。</p><p>使用TCP端口默认为443</p><hr><p>HTTPS 协议栈与 HTTP 的唯一区别在于多了一个安全层（Security Layer）—— TLS/SSL，SSL 是最早的安全层协议，TLS 由 SSL 发展而来，所以下面我们统称 TLS。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/v2-29fee3e54e584905453e69c3df133e05_720w.jpg" alt="img"></p><p>原来HTTPS就是在HTTP协议的基础上加入了TLS协议。目的是保证我们的数据在网络上传输的安全性。</p><p><strong>什么是TLS？</strong></p><blockquote><p>TLS是传输层加密协议，前身是SSL协议。由网景公司于1995年发布。后改名为TLS。常用的 TLS 协议版本有：TLS1.2, TLS1.1, TLS1.0 和 SSL3.0。其中 SSL3.0 由于 POODLE 攻击已经被证明不安全。TLS1.0 也存在部分安全漏洞，比如 RC4 和 BEAST 攻击。</p></blockquote><h1 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h1><p>TLS 握手的作用之一是身份认证（authentication），被验证的一方需要提供一个身份证明，在 HTTPS 的世界里，这个身份证明就是 「TLS 证书」，或者称为 「HTTPS 证书」。</p><p>例如，我们在访问xxxx时，浏览器会得到一个 TLS 证书，这个数字证书用于证明我们正在访问的网站和证书的持有者是匹配的，否则因为身份认证无法通过，连接也就无法建立。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121091912788.png" alt="image-20201121091912788"></p><p>上例可以看出，浏览器得到的是一个证书的链表，这个链表叫证书链（Certificate Chain），我们后面会分析它的作用。</p><h2 id="证书链"><a href="#证书链" class="headerlink" title="证书链"></a>证书链</h2><p>上图的层级结构就是证书链。</p><p>当获得证书链之后，我们就可以很轻松的往上回溯到被 UA 信任的证书，虽然 UA 内置的可能是中间证书（Intermediate Certificate），但是如果一个 End-Entity 证书即使回溯到跟证书（Root Certificate）也没有在 UA 的受信列表中找到，那么这个站点就会被标记为不安全。</p><p>最上层的都是跟证书，这些证书需要存在于浏览器的受信列表中，否则链接不安全。</p><h2 id="HTTPS请求过程"><a href="#HTTPS请求过程" class="headerlink" title="HTTPS请求过程"></a>HTTPS请求过程</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1704743ced98df13"></p><h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>请查看中间人攻击原理：<a href="https://juejin.cn/post/6844904065227292685#heading-11">https://juejin.cn/post/6844904065227292685#heading-11</a></p><blockquote><p>以上总结攻击的条件：</p><ol><li>首先攻击者需要截取到你的请求，现在除了在本机使用fiddler/wireshark，我想不到其他的方式</li><li>如果采用fiddler/wireshark需要手动信任他们的证书</li><li>如果第三方能在网络中截取你的请求，我想不到方法，可能也有</li></ol></blockquote><h2 id="防范中间人攻击"><a href="#防范中间人攻击" class="headerlink" title="防范中间人攻击"></a>防范中间人攻击</h2><p>可查看：<a href="https://www.zhihu.com/question/65464646">https://www.zhihu.com/question/65464646</a></p><p>HTTPS是保护用户和服务器之间的通讯不被第三方窃取或者篡改。这个第三方攻击者才是中间人。对于用户对客户端逻辑的逆向和篡改，HTTPS是不能起到防护作用的。<strong>所以用户通过抓取请求的软件通过使自己电脑信任(手动导入DH的参数)抓取请求软件的证书还是可以解密https的</strong></p><blockquote><p>HTTPS会被抓包，HTTPS 只防止用户在不知情的情况下通信被监听，如果用户主动授信，是可以构建“中间人”网络，代理软件可以对传输内容进行解密。</p></blockquote><h1 id="使用Https访问项目"><a href="#使用Https访问项目" class="headerlink" title="使用Https访问项目"></a>使用Https访问项目</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>项目采用spring boot</p><ul><li>Java</li><li>maven</li><li>部署服务的vps一台，为了模拟真实，采用的公网IP，并将域名添加它的A记录。</li><li>证书，颁发给域名。</li></ul><p>证书申请：<a href="https://blog.walterlv.com/post/apply-for-free-ssl-certificates-using-freessl.html">https://blog.walterlv.com/post/apply-for-free-ssl-certificates-using-freessl.html</a></p><p>在创建好证书之后导出证书：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121122116308.png" alt="image-20201121122116308"></p><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p><strong>1.初始化springboot项目</strong></p><p>略</p><p><strong>2.配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问地址 重要 不加的话不能远程访问</span></span><br><span class="line"><span class="meta">server.address</span>=<span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment">#https加密端口号 443</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">443</span></span><br><span class="line"><span class="comment">#SSL证书路径 一定要加上classpath:</span></span><br><span class="line"><span class="meta">server.ssl.key-store</span>=<span class="string">classpath:t-av2ray-top-tomcat-1121122148.jks</span></span><br><span class="line"><span class="comment">#SSL证书密码</span></span><br><span class="line"><span class="meta">server.ssl.key-store-password</span>=<span class="string">1214</span></span><br><span class="line"><span class="comment">#证书类型</span></span><br><span class="line"><span class="meta">server.ssl.key-store-type</span>=<span class="string">JKS</span></span><br><span class="line"><span class="comment">#证书别名</span></span><br><span class="line"><span class="comment">#server.ssl.key-alias=alias</span></span><br></pre></td></tr></table></figure><p>项目启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http重定向到https</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TomcatServletWebServerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory tomcat = <span class="keyword">new</span> TomcatServletWebServerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint constraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                constraint.setUserConstraint(<span class="string">&quot;CONFIDENTIAL&quot;</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                constraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(constraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connector <span class="title">httpConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">        connector.setScheme(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">        <span class="comment">//Connector监听的http的端口号</span></span><br><span class="line">        connector.setPort(<span class="number">8080</span>);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//监听到http的端口号后转向到的https的端口号</span></span><br><span class="line">        connector.setRedirectPort(<span class="number">443</span>);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置80端口跳转至443端口，强制使用https。</p><p><strong>3.打包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package -DskipTests</span><br></pre></td></tr></table></figure><p><strong>4. 上传至服务器</strong></p><p><strong>4.1 服务器安装Java</strong></p><p>略</p><p><strong>4.2项目运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx</span><br></pre></td></tr></table></figure><p><a href="https://t.av2ray.top/hello%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE">https://t.av2ray.top/hello，可以访问</a></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121162646185.png" alt="image-20201121162646185"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121162701151.png" alt="image-20201121162701151"></p><hr><p>当我们直接使用ip访问时：</p><p><strong><a href="http://ip:443/hello">http://ip:443/hello</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bad Request</span><br><span class="line">This combination of host and port requires TLS.</span><br></pre></td></tr></table></figure><blockquote><p>这是因为项目配置了TLS访问，所以这时不能使用http</p></blockquote><p><strong><a href="https://ip/hello">https://ip:443/hello</a></strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121162909986.png" alt="image-20201121162909986"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201121162925128.png" alt="image-20201121162925128"></p><blockquote><p>这时因为我们通过ip访问项目时，证书不对。我们使用的是颁发给域名xxx的证书，所以只能使用此域名访问时才是安全的。</p><p>不安全时浏览器会提示，仍可以访问，但是显示不安全。</p></blockquote><blockquote><p>https项目总结</p><p>因为项目中配置了TSL，所以只有你访问时携带了证书，且携带的证书正好和项目中配置的证书匹配访问才是安全的，否则访问都不安全。 </p><p>那如何才能携带证书访问呢，看你项目中的证书是怎么生成额，例如上述项目中的证书是由域名t.av2ray.top生成的，所以只有当使用此域名访问服务时才会携带正确的证书，如果直接使用IP地址访问也不是安全的。因为证书是颁发给t.av2ray.top的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes核心技术</title>
      <link href="2020/11/17/Kubernetes%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
      <url>2020/11/17/Kubernetes%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="核心技术Pod"><a href="#核心技术Pod" class="headerlink" title="核心技术Pod"></a>核心技术Pod</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Pod 是 k8s 系统中可以创建和管理的最小单元，是资源对象模型中由用户创建或部署的最小资源对象模型，也是在 k8s 上运行容器化应用的资源对象，其他的资源对象都是用来支 撑或者扩展 Pod 对象功能的，比如控制器对象是用来管控 Pod 对象的，Service 或者 Ingress 资源对象是用来暴露 Pod 引用对象的，PersistentVolume 资源对象是用来为 Pod 提供存储等等，<font color="red">k8s 不会直接处理容器，而是 Pod，Pod 是由一个或多个 container 组成</font>，Pod 是 Kubernetes 的最重要概念，<font color="red">每一个 Pod 都有一个特殊的被称为”根容器“的 Pause容器。</font>Pause 容器对应的镜 像属于 Kubernetes 平台的一部分，除了 Pause 容器，每个 Pod 还包含一个或多个紧密相关的用户业务容器。</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201119143357674.png" alt="image-20201119143357674"></p><p><strong>为什么Pod是最小资源而不是容器？</strong></p><p><code>docker run</code>产生一个容器(进程)，一般容器中只能由一个应用，如果应用过多，无法通过容器来管理应用。当我们Pod里面要运行多个应用时是通过容器和应用一对一的运行应用的，所以Pod中能运行多个应用即Pod中能运行多个容器。</p><blockquote><p>一个 Pod 可以有多个容器，彼此间共享网络和存储资源，每个 Pod 中有一个 Pause 容器保存所有的容器状态， 通过管理 pause 容器，达到管理 pod 中所有容器的效果。</p></blockquote><h2 id="Pod特性"><a href="#Pod特性" class="headerlink" title="Pod特性"></a>Pod特性</h2><ul><li>共享网络</li><li>共享存储</li><li>生命周期短暂</li><li>平坦的网络</li></ul><h3 id="共享网络"><a href="#共享网络" class="headerlink" title="共享网络"></a>共享网络</h3><p>我们知道Docker容器之间是互相隔离的(网络、文件系统…)，它是由Docker使用了Linux Namespace(中的cgroup)来实现的。而K8s中的Pod使它内部包含的所有容器共享网络，是因为它使里面的所有容器都处于了一个Namespace中的。</p><blockquote><p> <strong>Pod的共享网络包含什么？/啥意思？</strong></p><ul><li>在一个 Pod 里的多个容器共享 Pod 的 IP：多个容器的Ip相同</li><li>以一个 Pod 内的多个容器之间可以通过 localhost 来进行通信：不同的容器可通过localhost交流</li><li>不同容器要注意不要有端口冲突即可：内所有容器端口公用，不可冲突</li><li>不同的 Pod 有不同的 IP,不同 Pod 通信要基于Pod Ip；不可通过IPC通信</li></ul></blockquote><p><strong>Docker容器的隔离</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20191121111452351.png"></p><p><strong>Pod怎么实现网络共享的</strong></p><p>通过<code>Pause</code>容器。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201119151230610.png" alt="image-20201119151230610"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20191121111837155.png"></p><p>只有一个eth0网卡只出现在了”pause容器”里面，nginx和php-fpm复用了”pause容器”的network namespace，简单理解就是使用了”pause容器”的eth0网卡与外部进行通信。</p><h3 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h3><p>一个 Pod 里的多个容器可以共享存储卷，这个存储卷会被定义为 Pod 的一部分，并且可以挂载到该 Pod 里的所有容器的文件系统上。</p><h4 id="存储卷实现共享存储"><a href="#存储卷实现共享存储" class="headerlink" title="存储卷实现共享存储"></a>存储卷实现共享存储</h4><p>大多数和数据存储相关的应用和有状态应用都是需要持久存储数据的。容器本身有生命周期，<font color="red">为了使得容器将来终结后我们可以把它删除，甚至是编排到其他节点上运行，意味着数据不能放在容器自己的名称空间中。</font></p><blockquote><p>在k8s中，<font color="red">Pod是运行在某个节点上的</font>，只要不出故障，就一直会运行在这个节点上，<strong>节点故障了才会调度到其他节点，只要节点不故障，是不会走的，无非就是重启重启而已。</strong></p><p>这里就有两个问题了，一旦这个Pod故障了被删除，或者节点故障了，此时有可能编排到其他节点上了，<strong>为了突破Pod生命周期受限这种现状，我们需要把数据放在Pod自有文件系统之外的地方。</strong></p></blockquote><p>我们此前在单独使用docker时，使用存储卷，相当于<font color="red">把容器中的某一目录与宿主机上某一目录关联起来</font>，随后容器内该目录存储的数据都存到了宿主机上了。当我们删了容器，在重建容器，只要这个存储卷不受影响，那么数据是没有问题的，在一定程度上拥有了持久功能。</p><p>但是这个问题在k8s上不能这么来操作，<strong>k8s是一个集群</strong>，由调度器负责调度，<font color="red">Pod被删掉了可能会被调度到其他节点</font>，所以这种在节点级帮忙提供存储卷的方式来持久存储数据的逻辑在k8s上，只能说只有一定程度上的持久性，不是真正意义上的持久性。<font color="red"><strong>应该使用脱离节点而存在的存储设备。</strong></font></p><p>为此，k8s提供了能应付各种不同类型的存储卷让我们来使用，没有持久、半持久、或真正意义上的持久功能。对于Pod来说，Pod内的多个容器可共享访问同一组存储卷，因为对k8s来讲，存储卷不属于容器，而属于Pod。在容器中挂载存储卷，如果Pod中两个容器都挂载了某个存储卷，就相当于两个容器共享数据了。Pod底层有个基础容器，不启动，靠一个独特的镜像来创建的，叫pause。<strong>所有的Pod，其网络名称空间、存储卷之类的都是分配给这个Pod的</strong>，Pod中运行的主容器是共享这个镜像的网络名称空间的，容器挂载存储卷其实是挂载这个容器的存储卷的。所以叫基础架构容器。</p><p>在Pod上使用存储卷，实际上也就是这个pause容器有了存储卷，而这个容器有存储卷，只不过是这个容器和宿主机目录建立了关联关系。而宿主机目录如果是节点本地的，那么它就随着宿主机而终结了，因此宿主机这个目录为了真正实现持久性，它应该也不是宿主机本地的，<strong>而是宿主机挂载的外部存储设备上的存储卷。</strong>当然如果这个宿主机的目录没挂载，那就是节点本地的了。只要节点不宕机，数据就是持久的。但是跨节点存储，只能使用脱离节点本地的网络设备。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/143.png"></p><blockquote><p>总之：</p><p>跨节点存储：Pod内容器➡Pause容器➡宿主机（非本地）挂载的外部设备</p><p>本地节点存储：Pod内容器➡Pause容器➡宿主机（本地），这样Pod重启或者迁移时节点换掉，则数据丢失！</p></blockquote><h4 id="Kubernetes存储卷分类"><a href="#Kubernetes存储卷分类" class="headerlink" title="Kubernetes存储卷分类"></a>Kubernetes存储卷分类</h4><p>上面说到k8s提供了能应付各种不同类型的存储卷让我们来使用：没有持久、半持久、或真正意义上的持久功能。</p><h5 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h5><p>给Pod分配一个存储卷，存储卷只存在Pod节点本地，<strong>当Pod被删除，节点上存储卷也会一并被删除</strong>。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201119161057269.png" alt="image-20201119161057269"></p><blockquote><p>这个不是为了持久而设计。只是用来做临时目录使用的。</p></blockquote><h5 id="hostPath"><a href="#hostPath" class="headerlink" title="hostPath"></a>hostPath</h5><p>主机路径。直接在宿主机找一个目录，与容器建立关联关系。也不具有真正意义上的持久性。如果需要真正以上的持久性，则需要连接网络连接存储。大概分3类：</p><ol><li>SAN(存储区域网络，比如iSCSI、FC协议)、NAS(网络附加存储，比如nfs协议、cifs协议以及http协议)</li><li>分布式存储：或是文件系统级别、或者块设备。<br>文件系统级别：glusterfs、cephfs<br>块级别：rbd</li><li>云存储：亚马逊的EBS(弹性块存储)、Azure Disk。</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201119161514977.png" alt="image-20201119161514977"></p><h5 id="pvc"><a href="#pvc" class="headerlink" title="pvc"></a>pvc</h5><p><strong>持久存储卷申请，简称pvc</strong>。从某种意义上来讲，它不是一个存储卷。以rbd为例，当你定义使用rbd类型的存储时，你需要定义很多相关的参数，这需要你对这个存储很熟悉。这会阻断一大部分用户来用k8s。怎么转换成傻瓜的形式来使用？pvc就是干这个事情的。<br>当需要创建一个存储卷时，你只需要告诉我，“我要来个存储卷”，所以叫存储卷创建申请。你不要管它底层存储系统是什么，你只需要说“我就需要这么多”就行。指定告诉它比如说需要个5g的存储空间，而不用管它那个存储到底放在哪个系统上。<strong>这叫存储及服务。</strong></p><p>让Pod创建和底层存储解耦。关键是和pvc建立关联关系，而pvc关键是和pv建立关联关系，而pv关键是和存储系统建立关联关系。解释如下：假如一个Pod创建调度到某个节点上，我们在Pod上定义一个pvc，它是一种存储卷类型，pvc要关联到当前这个Pod所在名称空间真正存在的pvc资源，这个pvc只是个申请，申请要与pv建立关联关系，pv是真正存储系统之上的一段存储空间，pv与后端存储建立关联关系。但是这个pvc与哪个pv建立关联关系时，怎么可能有个pv放在那等你来用呢？要做到这一步，用户在创建申请之前，先提需求，然后后端存储工程师或者k8s管理员把这些pv创建好。但是如果是公有云呢？有很多租户在上面跑着，压根不知道他们什么时候要创建pv。因此如果要做到按需创建，我们pv也不建了，我们把所有的存储空间抽象出来，抽象为一个抽象层，叫<strong>存储类</strong>。当用户创建pvc需要用到pv时，它能够向存储类申请说，“你帮我创建出来”，存储类会帮它生成刚好符合用户请求大小的pv来，并让二者建立关联关系。<strong>像这种pv由用户的请求触发而动态生成，我们称为pv的动态供给。而这里需要依赖一个前提：要定义好存储类。</strong><br><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/144.png" alt="img"><br>什么叫存储类？存储按照其综合服务质量可以分为好几个级别，有的又慢又笨，称为Bronze存储，有的速度算中间，我们对性能没有太高要求，称为Silver存储，而有些特别快，ssd之类组成的，称为Gold存储。<br><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/145.png" alt="img"><br>如果我们自己是一个对于存储系统非常了解的人，创建Pod时可直接使用存储空间，如果你不是特别了解，或者我们将来有很多用户、终端用户对于存储技术知之不多的话，那么这个时候我们就应该尽可能地给他们做成动态供给的方式，让他们使用pvc来使用。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>存储卷只是在Pod上定义的，容器中要想使用还得挂载和绑定。第一在Pod中要定义<code>volume</code>，这个volume要指明关联到哪个存储设备上去的，第二要在容器中使用<code>volumeMounts</code>，然后你才能使用。</p><h5 id="emptyDir-1"><a href="#emptyDir-1" class="headerlink" title="emptyDir"></a>emptyDir</h5><p>emptyDir不需要依赖任何外部设备。</p><p>查看定义emptyDir的相关字段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain pod.spec.volumes.emptyDir</span><br><span class="line">$ kubectl explain pod.spec.containers.volumeMounts</span><br></pre></td></tr></table></figure><p>在这个练习中，你会创建一个包含两个容器的 Pod。两个容器共享一个卷用于他们之间的通信。 Pod 的配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">two-containers</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">debian-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">debian</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/pod-data</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>]</span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the debian container &gt; /pod-data/index.html&quot;</span>]</span><br></pre></td></tr></table></figure><p>在配置文件中，你可以看到 Pod 有一个共享卷，名为 <code>shared-data</code>。</p><p>配置文件中的第一个容器运行了一个 nginx 服务器。共享卷的挂载路径是 <code>/usr/share/nginx/html</code>。 第二个容器是基于 debian 镜像的，有一个 <code>/pod-data</code> 的挂载路径。第二个容器运行了下面的命令然后终止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello from the debian container &gt; /pod-data/index.html</span><br></pre></td></tr></table></figure><p>注意，第二个容器在 nginx 服务器的根目录下写了 <code>index.html</code> 文件。</p><p>创建一个包含两个容器的 Pod：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f https://k8s.io/examples/pods/two-container-pod.yaml</span><br></pre></td></tr></table></figure><p>查看 Pod 和容器的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod two-containers --output=yaml</span><br></pre></td></tr></table></figure><p>这是输出的一部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">two-containers</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">containerStatuses:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">containerID:</span> <span class="string">docker://c1d8abd1</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">debian</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="attr">lastState:</span></span><br><span class="line">      <span class="attr">terminated:</span></span><br><span class="line">        <span class="string">...</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">debian-container</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">containerID:</span> <span class="string">docker://96c1ff2c5bb</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="attr">state:</span></span><br><span class="line">      <span class="attr">running:</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p>你可以看到 debian 容器已经被终止了，而 nginx 服务器依然在运行。</p><p>进入 nginx 容器的 shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it two-containers -c nginx-container -- /bin/bash</span><br></pre></td></tr></table></figure><p>在 shell 中，确认 nginx 还在运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@two-containers:/<span class="comment"># ps aux</span></span><br></pre></td></tr></table></figure><p>输出类似于这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER       PID  ...  STAT START   TIME COMMAND</span><br><span class="line">root         1  ...  Ss   21:12   0:00 nginx: master process nginx -g daemon off;</span><br></pre></td></tr></table></figure><p>回忆一下，debian 容器在 nginx 的根目录下创建了 <code>index.html</code> 文件。 使用 <code>curl</code> 向 nginx 服务器发送一个 GET 请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@two-containers:/<span class="comment"># apt-get update</span></span><br><span class="line">root@two-containers:/<span class="comment"># apt-get install curl</span></span><br><span class="line">root@two-containers:/<span class="comment"># curl localhost</span></span><br></pre></td></tr></table></figure><p>输出表示 nginx 提供了 debian 容器写的页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello from the debian container</span><br></pre></td></tr></table></figure><h5 id="nfs共享网络存储"><a href="#nfs共享网络存储" class="headerlink" title="nfs共享网络存储"></a>nfs共享网络存储</h5><p>这种是真正意义上的持久功能，我们<font color="red">需要一台单独的机器作为网络存储nfs的服务端</font>，然后在启动的Pod里手动指定Volume挂载到nfs的服务端，所以<font color="red">也需要k8s的集群的各个节点要安装nfs的客户端</font></p><p><strong>1. 服务端安装nfs</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br></pre></td></tr></table></figure><p>设置挂载路径（挂载路径需要存在）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/exports</span><br><span class="line">/data/nfs *(rw,no_root_squash)</span><br></pre></td></tr></table></figure><p>启动nfs服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nfs</span><br><span class="line">systemctl start nfs</span><br><span class="line">ps -ef|grep nfs</span><br></pre></td></tr></table></figure><p><strong>2. k8s集群节点安装nfs客户端</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br></pre></td></tr></table></figure><p><strong>3.  使用nfs作为pv进行持久化存储</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-dep1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">          <span class="comment"># 要更改为你自己nfs服务端的地址和目录</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.58</span><span class="number">.138</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/nfs</span></span><br></pre></td></tr></table></figure><p><code>kubectl apply -f xxx.yaml </code></p><p>我们在服务端的路径中添加一个文件index.html，然后在进入Pod容器查看是否存在此文件。</p><p>nfs服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/nfs/</span><br><span class="line">vim index.html</span><br><span class="line">hello my nfs</span><br></pre></td></tr></table></figure><p>进入容器</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_17-40-30.png" alt="Snipaste_2020-12-05_17-40-30"></p><p>可以发现我们进入了容器，发现数据已经绑定了过去，证明我们成功了</p><blockquote><p>缺点</p><p>这样我们在Pod的配置文件中声明nfs的地址和目录这样有点不太安全，接下来我们通过pv和pvc的方式来实现持久化，当然最后数据还是存放在我们的nfs服务端</p></blockquote><h5 id="pv和pvc方式"><a href="#pv和pvc方式" class="headerlink" title="pv和pvc方式"></a>pv和pvc方式</h5><p><a href="#pvc">上面说过</a>，pvc不是一个存储文件的地方，他是一个提需求的地方；pv是一个存储资源的抽象，它提供了存储资源的接口。</p><p>例如上面的nfs服务端就是存储的资源，我们需要对这个nfs服务端存储资源创建pv与其绑定，这样我们只需要指定pv来绑定数据，不需要手动指定存储资源的细节。而pvc是与pv绑定的，在使用k8s时，用户根本不考虑要把数据存储在哪个pv，他们只会提出存储多大的内容和匹配的模式，他们提的要求就可以看为是pvc。他们的关系为：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_17-48-55.png" alt="Snipaste_2020-12-05_17-48-55"></p><p>一般在真实使用中，pv的创建和pv底层的存储资源的创建都是由专门的存储工程师来做的，我们在创建服务的持久化的工程中只需要指定pvc（需求）即可。</p><p>我这里为了实现整个流程，有创建存储资源抽象pv的过程</p><p><strong>1. 创建pv</strong></p><p>此过程是已经在<a href="#nfs%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C%E5%AD%98%E5%82%A8">上一步骤</a>创建好了nfs服务端的后续。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/k8s/nfs</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.58</span><span class="number">.138</span></span><br></pre></td></tr></table></figure><p><code>kubectl apply -f pv.yaml</code></p><p><strong>2. 创建pvc并使用</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-dep1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">my-pvc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><p><code>kubectl apply -f pvc.yaml</code></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201205175846703.png" alt="image-20201205175846703"></p><blockquote><p>可以根据配置文件看到pvc的创建只需要指定大小、规则。没有与pv有关的地方。k8s会根据你的需求自动与pv绑定。</p></blockquote><p>手动进入容器，查看之前在nfs服务端添加的文件index.html是否存在</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_18-01-51.png" alt="Snipaste_2020-12-05_18-01-51"></p><p>pvc模式成功，访问一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8smaster ~]<span class="comment"># kubectl expose deploy nginx-dep1 --type=NodePort --port=80 --target-port=80</span></span><br><span class="line">service/nginx-dep1 exposed</span><br><span class="line">[root@k8smaster ~]<span class="comment"># kubectl get svc</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1     &lt;none&gt;        443/TCP        18d</span><br><span class="line">nginx-dep1   NodePort    10.108.56.3   &lt;none&gt;        80:30437/TCP   5s</span><br><span class="line">[root@k8smaster ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_18-04-12.png" alt="Snipaste_2020-12-05_18-04-12"></p><h3 id="生命周期短暂"><a href="#生命周期短暂" class="headerlink" title="生命周期短暂"></a>生命周期短暂</h3><p>Pod 属于生命周期比较短暂的组件，比如，当 Pod 所在节点发生故障，那么该节点上的 Pod会被调度到其他节点，但需要注意的是，被重新调度的 Pod 是一个全新的 Pod,跟之前的Pod 没有半毛钱关系。</p><h3 id="平坦的网络"><a href="#平坦的网络" class="headerlink" title="平坦的网络"></a><strong>平坦的网络</strong></h3><p>K8s 集群中的所有 Pod 都在同一个共享网络地址空间中，也就是说每个 Pod 都可以通过其 他 Pod 的 IP 地址来实现访问。 </p><h2 id="Pod的一些设置"><a href="#Pod的一些设置" class="headerlink" title="Pod的一些设置"></a>Pod的一些设置</h2><h3 id="镜像拉取策略"><a href="#镜像拉取策略" class="headerlink" title="镜像拉取策略"></a>镜像拉取策略</h3><ul><li><code>ifNotPresent</code>：默认值，镜像在宿主机上不存在时才拉取</li><li><code>Always</code>：每次创建都会重新拉取</li><li><code>Never</code>：从不拉取。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain pod.spec.containers.imagePullPolicy</span><br></pre></td></tr></table></figure><h3 id="生命周期和重启策略"><a href="#生命周期和重启策略" class="headerlink" title="生命周期和重启策略"></a>生命周期和重启策略</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><table><thead><tr><th>状态值</th><th>说明</th></tr></thead><tbody><tr><td>Pending</td><td>API Server已经创建了该Pod,但Pod中的一个或多个容器的镜像还没有创建,包括镜像下载过程</td></tr><tr><td>Running</td><td>Pod内所有容器已创建,且至少一个容器处于运行状态、正在启动状态或正在重启状态</td></tr><tr><td>Completed</td><td>Pod内所有容器均成功执行退出,且不会再重启</td></tr><tr><td>Failed</td><td>Pod内所有容器均已退出,但至少一个容器退出失败</td></tr><tr><td>Unknown</td><td>由于某种原因无法获取Pod状态,例如网络通信不畅</td></tr></tbody></table><h4 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h4><p>Pod 的重启策略包括 Always、OnFailure 和 Never，默认值是 Always</p><table><thead><tr><th>重启策略</th><th>说明</th></tr></thead><tbody><tr><td>Always</td><td>当容器失效时,由 kubelet自动重启该容器</td></tr><tr><td>OnFailure</td><td>当容器终止运行且退出码不为0时,由 kubele自动重启该容器</td></tr><tr><td>Never</td><td>不论容器运行状态如何, kubelet都不会重启该容器</td></tr></tbody></table><h3 id="资源限制配置"><a href="#资源限制配置" class="headerlink" title="资源限制配置"></a>资源限制配置</h3><p>每个 Pod 都可以对其能使用的服务器上的计算资源设置限额，Kubernetes 中可以设置限额的计算资源有 CPU 与 Memory 两种，其中CPU 的资源单位为 CPU 数量,是一个绝对值而非相对值。Memory 配额也是一个绝对值，它的单 位是<strong>内存字节数</strong>。 </p><p>Kubernetes 里，一个计算资源进行配额限定需要设定以下两个参数： Requests 该资源最小申请数量，系统必须满足要求 Limits 该资源最大允许使用的量，不能突破，当容器试图使用超过这个量的资源时，<strong>可能会被 Kubernetes Kill 并重启</strong> 。</p><p><strong>举例</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">env:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br></pre></td></tr></table></figure><p><strong>上述代码表明 MySQL 容器申请最少 0.25 个 CPU 以及 64MiB 内存，在运行过程中容器所能使用的资源配额为 0.5 个 CPU 以及 128MiB 内存</strong></p><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><p>Kubelet使用liveness probe（存活探针）来确定何时重启容器。例如，当应用程序处于运行状态但无法做进一步操作，liveness探针将捕获到deadlock，重启处于该状态下的容器，使应用程序在存在bug的情况下依然能够继续运行下去（谁的程序还没几个bug呢）。</p><p>Kubelet使用readiness probe（就绪探针）来确定容器是否已经就绪可以接受流量。只有当Pod中的容器都处于就绪状态时kubelet才会认定该Pod处于就绪状态。该信号的作用是控制哪些Pod应该作为service的后端。如果Pod处于非就绪状态，那么它们将会被从service的load balancer中移除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain pod.spec.containers.livenessProbe</span><br><span class="line">$ kubectl explain pod.spec.containers.readinessProbe</span><br></pre></td></tr></table></figure><h2 id="Pod创建流程"><a href="#Pod创建流程" class="headerlink" title="Pod创建流程"></a>Pod创建流程</h2><p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNkb9ibEAnRZekRbN1Kic7aicNynPBNqlCrnJeb8PqzpbO5FwtGaxo78RbfRdYRzlTE8Mjt4j6PiafVAlA/640"></p><p><strong>master端</strong></p><ol><li>用户发出命令到ApiServer，将新建pod的信息存入etcd</li><li>Scheduler观察到Api Server发出了新建Pod的指令，从Etcd那得到了要创建的Pod具体信息，它根据调度规则选中了一台节点来运行Pod，并将此信息写入etcd</li></ol><p><strong>Node端</strong></p><ol><li>被选中的节点中的kubelet观察到Scheduler绑定Pod到本机的事件，开始操控Docker运行容器，运行成功后告知api server，并修改etcd中的状态</li></ol><h2 id="Pod调度策略"><a href="#Pod调度策略" class="headerlink" title="Pod调度策略"></a>Pod调度策略</h2><h3 id="Pod资源限制"><a href="#Pod资源限制" class="headerlink" title="Pod资源限制"></a>Pod资源限制</h3><p>前面说到在Pod创建的配置中有资源配置，调度器根据此Pod所需要的资源来配置相应节点来运行此Pod，那肯定是配置足够的节点才能运行此Pod。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201120153131728.png" alt="image-20201120153131728"></p><h3 id="节点选择器-nodeSelector"><a href="#节点选择器-nodeSelector" class="headerlink" title="节点选择器(nodeSelector)"></a>节点选择器(nodeSelector)</h3><p>通过对Node节点打上不同的标签<code>Label</code>来把Pod调度到指定标签的Node。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201120154555674.png" alt="image-20201120154555674"></p><blockquote><p>对节点创建标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ kubectl label node xxx env_role=dev</span><br></pre></td></tr></table></figure><p>查看节点的标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ kubectl node xxx --show-label</span><br></pre></td></tr></table></figure><p>给 namespace 中的所有 pod 添加 label</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ kubectl label pods --all status=unhealthy</span><br></pre></td></tr></table></figure><p>删除名为“bar”的label 。（使用“ - ”减号相连）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;kubectl label pods xxx bar-</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cuda-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cuda-test</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">&quot;k8s.gcr.io/cuda-vector-add:v0.1&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">nvidia.com/gpu:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">env_role:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201120155613803.png" alt="image-20201120155613803"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201120160233595.png" alt="image-20201120160233595"></p><h3 id="亲和性调度-nodeAffinity"><a href="#亲和性调度-nodeAffinity" class="headerlink" title="亲和性调度(nodeAffinity)"></a>亲和性调度(nodeAffinity)</h3><p>和节点选择性原理一致，但功能更强大，可以对标签进行不同的操作符计算。</p><p><code>nodeAffinity</code>就是节点亲和性，相对应的是<code>Anti-Affinity</code>，就是反亲和性，这种方法比上面的<code>nodeSelector</code>更加灵活，它可以进行一些简单的逻辑组合了，不只是简单的相等匹配。 调度可以分成软策略和硬策略两种方式，软策略就是如果你没有满足调度要求的节点的话，POD 就会忽略这条规则，继续完成调度过程，说白了就是<strong>满足条件最好了，没有的话也无所谓了</strong>的策略；而硬策略就比较强硬了，如果没有满足条件的节点的话，就不断重试直到满足条件为止，简单说就是<strong>你必须满足我的要求，不然我就不干</strong>的策略。 <code>nodeAffinity</code>就有两上面两种策略：<code>preferredDuringSchedulingIgnoredDuringExecution</code>和<code>requiredDuringSchedulingIgnoredDuringExecution</code>，前面的就是软策略，后面的就是硬策略。</p><p>如下例子：（<strong>test-node-affinity.yaml</strong>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">node-affinity-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">NotIn</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.140</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.161</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">preference:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">source</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">qikqiak</span></span><br></pre></td></tr></table></figure><p>上面这个 POD 首先是要求 POD 不能运行在140和161两个节点上，如果有个节点满足<code>source=qikqiak</code>的话就优先调度到这个节点上，同样的我们可以使用<code>descirbe</code>命令查看具体的调度情况是否满足我们的要求。这里的匹配逻辑是 label 的值在某个列表中，现在<code>Kubernetes</code>提供的操作符有下面的几种：</p><ul><li>In：label 的值在某个列表中</li><li>NotIn：label 的值不在某个列表中</li><li>Gt：label 的值大于某个值</li><li>Lt：label 的值小于某个值</li><li>Exists：某个 label 存在</li><li>DoesNotExist：某个 label 不存在</li></ul><blockquote><p>注意：</p><p>如果<code>nodeSelectorTerms</code>下面有多个选项的话，满足任何一个条件就可以了；如果<code>matchExpressions</code>有多个选项的话，则必须同时满足这些条件才能正常调度 POD。</p></blockquote><h3 id="podAffinity"><a href="#podAffinity" class="headerlink" title="podAffinity"></a>podAffinity</h3><p>上面两种方式都是让 <strong>POD 去选择节点的</strong>，有的时候我们也希望能够根据 POD 之间的关系进行调度，<code>Kubernetes</code>在1.4版本引入的<code>podAffinity</code>概念就可以实现我们这个需求。</p><p>和<code>nodeAffinity</code>类似，<code>podAffinity</code>也有<code>requiredDuringSchedulingIgnoredDuringExecution</code>和 <code>preferredDuringSchedulingIgnoredDuringExecution</code>两种调度策略，唯一不同的是如果要使用互斥性，我们需要使用<code>podAntiAffinity</code>字段。 如下例子，我们希望<code>with-pod-affinity</code>和<code>busybox-pod</code>能够就近部署，而不希望和<code>node-affinity-pod</code>部署在同一个拓扑域下面：（<strong>test-pod-affinity.yaml</strong>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-pod-affinity</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pod-affinity-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-pod-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">podAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">busybox-pod</span></span><br><span class="line">        <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">    <span class="attr">podAntiAffinity:</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">podAffinityTerm:</span></span><br><span class="line">          <span class="attr">labelSelector:</span></span><br><span class="line">            <span class="attr">matchExpressions:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">              <span class="attr">values:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">node-affinity-pod</span></span><br><span class="line">          <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br></pre></td></tr></table></figure><p>上面这个例子中的 POD 需要调度到某个指定的主机上，至少有一个节点上运行了这样的 POD：这个 POD 有一个<code>app=busybox-pod</code>的 label。<code>podAntiAffinity</code>则是希望最好不要调度到这样的节点：这个节点上运行了某个 POD，而这个 POD 有<code>app=node-affinity-pod</code>的 label。</p><blockquote><p><font color="red">注意，这里匹配的是Pod的标签  不是主机的标签</font></p></blockquote><p>亲和性/反亲和性调度策略比较如下：</p><table><thead><tr><th align="left">调度策略</th><th align="left">匹配标签</th><th align="left">操作符</th><th align="left">拓扑域支持</th><th align="left">调度目标</th></tr></thead><tbody><tr><td align="left">nodeAffinity</td><td align="left"><strong>主机</strong></td><td align="left">In, NotIn, Exists, DoesNotExist, Gt, Lt</td><td align="left">否</td><td align="left">指定主机</td></tr><tr><td align="left">podAffinity</td><td align="left"><strong>POD</strong></td><td align="left">In, NotIn, Exists, DoesNotExist</td><td align="left">是</td><td align="left">POD与指定POD同一拓扑域</td></tr><tr><td align="left">podAnitAffinity</td><td align="left"><strong>POD</strong></td><td align="left">In, NotIn, Exists, DoesNotExist</td><td align="left">是</td><td align="left">POD与指定POD不在同一拓扑域</td></tr></tbody></table><h3 id="污点（Taints）与容忍（tolerations）"><a href="#污点（Taints）与容忍（tolerations）" class="headerlink" title="污点（Taints）与容忍（tolerations）"></a>污点（Taints）与容忍（tolerations）</h3><p>对于<code>nodeAffinity</code>无论是硬策略还是软策略方式，都是调度 POD 到预期节点上，<strong>而<code>Taints</code>恰好与之相反，如果一个节点标记为 Taints ，除非 POD 也被标识为可以容忍污点节点，否则该 Taints 节点不会被调度pod。</strong></p><p>污点taints是定义在节点上的键值型属性数据，用于让节点拒绝将 Pod 调度运行于其上， 除非 Pod 有接纳节点污点的容忍度容忍度 tolerations 是定义在 Pod 上的键值属性数据， 用于配置可容忍的污点，且调度器将 Pod 调度至其能容忍该节点污点的节点上或没有污点的节点上。</p><p><strong>污点是节点的属性，而容忍污点是Pod的属性。</strong></p><p>比如用户希望把 Master 节点保留给 Kubernetes 系统组件使用，或者把一组具有特殊资源预留给某些 POD，则污点就很有用了，POD 不会再被调度到 taint 标记过的节点。</p><h4 id="定义污点和容忍度"><a href="#定义污点和容忍度" class="headerlink" title="定义污点和容忍度"></a>定义污点和容忍度</h4><p>污点定义于<code>nodes.spec.taints</code>容忍度定义于<code>pods.spec.tolerations</code> </p><p><strong>语法： key=value:effect</strong></p><h4 id="effect定义排斥等级"><a href="#effect定义排斥等级" class="headerlink" title="effect定义排斥等级"></a>effect定义排斥等级</h4><p>effect 共有三个可选项，可按实际需求进行设置：</p><ol><li><code>NoSchedule</code>：不能容忍，但仅影响调度过程，已调度上去的 pod 不受影响，仅对新增加的pod 生效。 </li><li><code>PreferNoSchedule</code>：柔性约束，节点现存 Pod不受影响，如果实在是没有符合的节点，也 可以调度上来</li><li><code>NoExecute</code>：该选项意味着一旦 Taint 生效，如该节点内正在运行的 POD 没有对应 Tolerate(容忍污点) 设置，会直接被逐出。</li></ol><h4 id="Pod定义容忍度"><a href="#Pod定义容忍度" class="headerlink" title="Pod定义容忍度"></a>Pod定义容忍度</h4><blockquote><ul><li><p>等值比较容忍度与污点在 key、value、effect 三者完全匹配 </p></li><li><p>存在性判断 key、effect 完全匹配，value 使用空值 </p></li></ul><p><font color="red">一个节点可配置多个污点，一个 Pod 也可有多个容忍度</font></p></blockquote><p>如果仍然希望某个 POD 调度到 taint 节点上，则必须在 Spec 中做出<code>Toleration</code>定义，才能调度到该节点，举例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tolerations:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;your key&quot;</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">&quot;Equal&quot;</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;your value&quot;</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">&quot;NoSchedule&quot;</span></span><br></pre></td></tr></table></figure><h4 id="节点管理污点"><a href="#节点管理污点" class="headerlink" title="节点管理污点"></a>节点管理污点</h4><blockquote><p><strong>同一个键值数据，effect 不同，也属于不同的污点</strong></p><p>假如节点node2有：</p><ul><li>w1=v1:NoSchedule</li><li>s2=v2:NoSchedule</li><li>w1=v1:NoExecute</li></ul><p>则节点有三个污点。</p></blockquote><p>给节点添加污点：</p><p><code>kubectl taint node &lt;node-name&gt; &lt;key&gt;=&lt;value&gt;:&lt;effect&gt; </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 举例 k,v随便起</span></span><br><span class="line">$ kubectl taint node kube-node1 node-type=production:NoShedule</span><br></pre></td></tr></table></figure><p>查看节点污点:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes &lt;nodename&gt; -o go-template=&#123;&#123;.spec.taints&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不建议，只能输出一行，展示不全</span></span><br><span class="line">$ kubectl describe nodes &lt;nodename&gt; | grep Taint</span><br></pre></td></tr></table></figure><p>删除节点污点：</p><p><strong>语法：</strong><code>kubectl taint node &lt;node-name&gt;&lt;key&gt;[:&lt;effect&gt;]-</code></p><p>删除 key 为 node-type，effect 为 NoSchedule 的污点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl taint node kube-node1 node-type:NoSchedule-</span><br></pre></td></tr></table></figure><p>删除 key 为 node-type 的所有污点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl taint node kube-node1 node-type-</span><br></pre></td></tr></table></figure><p>删除所有污点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl patch nodes &lt;node-name&gt; -p <span class="string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;taints&quot;:[]&#125;&#125;&#x27;</span> </span><br></pre></td></tr></table></figure><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>污点用于：</p><ol><li>专用节点</li><li>配置特别硬件的节点</li><li>基于Taint驱逐Pod</li></ol><h2 id="Pod查看常用命令🔺"><a href="#Pod查看常用命令🔺" class="headerlink" title="Pod查看常用命令🔺"></a>Pod查看常用命令🔺</h2><p>查看Pod分配的节点和IP</p><p><code>kubectl get pods -o wide</code></p><h2 id="有状态与无状态Pod🔺"><a href="#有状态与无状态Pod🔺" class="headerlink" title="有状态与无状态Pod🔺"></a>有状态与无状态Pod🔺</h2><p><strong>无状态应用（Stateless Application）</strong>是指应用不会在会话中保存下次会话所需要的客户端数据。每一个会话都像首次执行一样，不会依赖之前的数据进行响应。<strong>有状态的应用（Stateful Application）</strong>是指应用会在会话中保存客户端的数据，并在客户端下一次的请求中来使用那些数据。</p><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>是指该服务运行的实例不会在本地存储需要持久化的数据，并且多个实例对于同一个请求响应的结果是完全一致的。</p><p>多个实例可以共享相同的持久化数据。例如：nginx实例，tomcat实例等</p><p>相关的k8s资源有：ReplicaSet、ReplicationController、Deployment等，由于是无状态服务，所以这些控制器创建的pod序号都是随机值。并且在缩容的时候并不会明确缩容某一个pod，而是随机的，因为所有实例得到的返回值都是一样，所以缩容任何一个pod都可以。</p><blockquote><p>总结</p><ol><li>Pod都一样，对于同一个请求响应的结果是完全一致的。</li><li>Pod之间没有启动顺序</li><li>Pod不用考虑在哪个节点上启动</li><li>随意扩容和伸缩</li></ol></blockquote><h3 id="有状态"><a href="#有状态" class="headerlink" title="有状态"></a>有状态</h3><p>上面无状态的总结都需要考虑到。有状态的Pod很需要数据卷，Pod之间是不同的每个Pod不同的Ip里面存储的资源也不尽相同，也有启动顺序的需要，例如Mysql主从Pod，肯定先主后从启动。</p><p>当Pod分配Node执行时，如果Node上没有之前的数据卷，则不行，要在之前的Node上运行Pod又或者有共享存储卷。</p><p>StatefulSet 缩容任何时候只会操作 一个 pod 实例，所以有状态应用的缩容不会很迅速。举例来说， 一个分布式存储应用若同时下线多个节点 ，则可能导致其数据丢失 。 比如说一个数据项副本数设置为 2 的数据存储应用， 若 同时有两个节点下线，一份数据记录就会丢失，如果它正好保存在这两个节点上 。 若缩容是线性的 ，则分布式存储应用就有时间把丢失的副本复制到其他节点 ，保证数据不会丢失。</p><h1 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h1><h2 id="Label-概述"><a href="#Label-概述" class="headerlink" title="Label 概述"></a><strong>Label 概述</strong></h2><p>Label 是 Kubernetes 系统中另一个核心概念。一个 Label 是一个 key=value 的键值对，其中 key 与 value 由用户自己指 定。Label 可以附加到各种资源对象上，如 Node、Pod、Service、RC，一个资源对象可以定义任意数量的 Label， 同一个 Label 也可以被添加到任意数量的资源对象上，Label 通常在资源对象定义时确定，也可以在对象创建后动态添加或删除。 </p><p>Label 的最常见的用法是使用 metadata.labels 字段，来为对象添加 Label，通过spec.selector 来引用对象 。</p><p>Label 附加到 Kubernetes 集群中各种资源对象上，目的就是对这些资源对象进行分组管理，而分组管理的核心就是 Label Selector。Label 与 Label Selector 都是不能单独定义，必须附加在一些资源对象的定义文件上，一般附加 在 RC 和 Service 的资源定义文件中。</p><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>Controller是在集群上管理和运行容器的对象。</p><p><strong>1.Pod与Controller的关系</strong></p><p>Pod是通过Controller<strong>实现应用的运维，比如伸缩、滚动升级等等</strong>。</p><p>Pod和 Controller之间通过label标签和selector选择器建立关系</p><blockquote><p>控制器有：</p><ol><li><strong>Replication Controller</strong></li><li><strong>Replica Set</strong></li><li><strong>Deployment</strong></li><li><strong>Horizontal Pod Autoscaler</strong></li></ol></blockquote><blockquote><p><strong>注意</strong></p><p><strong>Replication Controller</strong>、<strong>Replica Set</strong>、<strong>Deployment</strong>都是无状态的Pod的控制器。</p><p>statefulSet是有状态的Pod的控制器。</p></blockquote><h2 id="无状态Pod控制器"><a href="#无状态Pod控制器" class="headerlink" title="无状态Pod控制器"></a>无状态Pod控制器</h2><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Deployment是一种常用的Controller。</p><p>Deployment 是 Kubenetes v1.2 引入的新概念，引入的目的是为了更好的解决 Pod 的编排问题，Deployment 内部使用了 Replica Set 来实现。</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h4><ul><li>部署无状态应用(web、微服务)</li><li>管理Pod和ReplicaSet(Pod副本)</li><li>部署、滚动升级等功能</li></ul><h4 id="Deployment部署应用"><a href="#Deployment部署应用" class="headerlink" title="Deployment部署应用"></a>Deployment部署应用</h4><p><strong>1.使用yaml文件部署，首先导出yaml模板</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment web --image=nginx --dry-run=client -o yaml &gt; web.yaml</span><br></pre></td></tr></table></figure><p>上面说到Pod和 Controller之间通过label标签和selector选择器建立关系，下图证明了：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201123165244192.png" alt="image-20201123165244192"></p><p><strong>2.使用yaml文件部署</strong></p><p><strong>创建的是pod</strong>，通过web.yaml的内容得知，详细请看下图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f web.yaml</span><br></pre></td></tr></table></figure><p><strong>3.对外发布(暴露对外端口)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose deployment web --port 80 --<span class="built_in">type</span>=NodePort --target-port=80 --name=web1 -o yaml &gt; web1.yaml</span><br></pre></td></tr></table></figure><blockquote><p>将资源暴露为<font color="red"><strong>新的Kubernetes Service。</strong></font></p><p>指定<code>deployment</code>、<code>service</code>、<code>replica set</code>、<code>replication controller</code>或<code>pod</code>，并使用该资源的选择器作为指定端口上新服务的选择器。<strong>deployment 或 replica set只有当其选择器可转换为service支持的选择器时，即当选择器仅包含matchLabels组件时才会作为暴露新的Service。</strong></p><ul><li>–port：资源的端口（这里是deployment的端口）</li><li>–target-port：容器的端口</li><li>–type：Type for this service: ClusterIP, NodePort, or LoadBalancer. Default is ‘ClusterIP’.(该服务的类型：ClusterIP，NodePort或LoadBalancer。默认值为“ ClusterIP”)</li></ul><p>因为我们是暴露端口，所以type选择NodePort</p></blockquote><p><strong>4.重新应用yaml文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f web1.yaml</span><br></pre></td></tr></table></figure><p><strong>创建的是service</strong>，因为<code>web.yaml</code>与<code>web1.yaml</code>的区别内容为：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201124114353266.png" alt="image-20201124114353266"></p><blockquote><p>由此图得知：</p><ul><li>create时创建的是手动选择的<code>deployment</code>；而expose时，是创建了<code>Service</code></li><li><code>deployment</code>和<code>Service</code>都是通过Pod上的标签i以及通过标签选择器来寻找Pod</li><li><code>Service</code>有IP可以通过其访问到Pod，直接通过Pod访问内容不稳定。</li></ul></blockquote><hr><p><strong>上述的步骤较多。其实，最后你准备一个完整的yaml，就可以直接部署了。</strong></p><h5 id="升级回滚"><a href="#升级回滚" class="headerlink" title="升级回滚"></a>升级回滚</h5><p><strong>升级</strong></p><p>对已有deployment的资源进行以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubactl <span class="built_in">set</span> image deployment xxx nginx=nginx:xxx</span><br></pre></td></tr></table></figure><blockquote><p><strong>升级过程</strong></p><ol><li>下载最新镜像</li><li>运行容器</li><li>当最新容器运行好了后直接替换旧的容器</li></ol></blockquote><p>查看应用是否升级成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rollout status deployment xxx</span><br></pre></td></tr></table></figure><p><strong>回滚</strong></p><p>当镜像更新到最新版本后，发现了其他问题，需要回滚到之前的版本，这种场景很常见。</p><blockquote><p>查看deployment历史版本</p><p><code>kubectl rollout history deployment xxx</code></p><p>回滚到上一个版本</p><p><code>kubectl rollout undo deployment xxx</code></p><p>回滚到指定版本</p><p><code>kubectl rollout undo deployment xxx --to-revision=xx</code></p></blockquote><h5 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h5><p>当发现测服务热门，当前资源不够用时，可以扩展服务的个数：</p><p><code>kubectl scale deployment xxx --replicas=x</code></p><h3 id="Replication-Controller"><a href="#Replication-Controller" class="headerlink" title="Replication Controller"></a>Replication Controller</h3><p>Replication Controller(RC)是 Kubernetes 系统中核心概念之一，当我们定义了一个 RC并提交到 Kubernetes 集群中以后，Master 节点上的 Controller Manager 组件就得到通知，定期检查系统中存活的 Pod,并确保目标 Pod 实例的数量刚好等于 RC 的预期值，如果有过多或过少的 Pod 运行，系统就会停掉或创建一些 Pod.此外我们也可以通过修改 RC 的副本数量，来实现 Pod 的动态缩放功能。</p><p><code>kubectl scale rc nginx --replicas=5 </code></p><p>由于 Replication Controller 与 Kubernetes 代码中的模块 Replication Controller 同名，<strong>所以在 Kubernetes v1.2 时， 它就升级成了另外一个新的概念 Replica Sets,官方解释为下一代的 RC</strong>，它与 RC 区别是:Replica Sets 支援基于集合的 Label selector,而 RC 只支持基于等式的 Label Selector。我们很少单独使用 Replica Set,它主要被 Deployment 这个更高层面的资源对象所使用，从而形成一整套 Pod 创建、删除、更新的编排机制。最好不要越过 RC 直接创建 Pod， 因为 Replication Controller 会通过 RC 管理 Pod 副本，实现自动创建、补足、替换、删除 Pod 副本，这样就能提高应用的容灾能力，减少由于节点 崩溃等意外状况造成的损失。即使应用程序只有一个 Pod 副本，也强烈建议使用 RC 来 定义 Pod。</p><h3 id="Replica-Set"><a href="#Replica-Set" class="headerlink" title="Replica Set"></a>Replica Set</h3><p>ReplicaSet 跟 ReplicationController 没有本质的不同，只是名字不一样，<strong>并且ReplicaSet 支持集合式的 selector（ReplicationController 仅支持等式）</strong>。 <font color="red"><strong>Kubernetes 官方强烈建议避免直接使用 ReplicaSet</strong></font>，而应该通过 Deployment 来创建 RS 和Pod。由于 ReplicaSet 是 ReplicationController 的代替物，因此用法基本相同，唯一的区别在于 ReplicaSet 支持集合式的 selector</p><hr><h2 id="有状态的Pod的控制器"><a href="#有状态的Pod的控制器" class="headerlink" title="有状态的Pod的控制器"></a>有状态的Pod的控制器</h2><p>有状态的Pod的控制器为：<code>StatefulSet</code></p><p>Kubernetes在1.9版本中正式发布的StatefulSet控制器能支持：</p><ul><li><strong>Pod会被顺序部署和顺序终结</strong>：StatefulSet中的各个 Pod会被顺序地创建出来，每个Pod都有一个唯一的ID，在创建后续 Pod 之前，首先要等前面的 Pod 运行成功并进入到就绪状态。删除会销毁StatefulSet 中的每个 Pod，并且按照创建顺序的反序来执行，只有在成功终结后面一个之后，才会继续下一个删除操作。</li><li><strong>Pod具有唯一网络名称</strong>：Pod具有唯一的名称，而且在重启后会保持不变。通过Headless服务，基于主机名，每个 Pod 都有独立的网络地址，这个网域由一个Headless 服务所控制。这样每个Pod会保持稳定的唯一的域名，使得集群就不会将重新创建出的Pod作为新成员。</li><li><strong>Pod能有稳定的持久存储</strong>：StatefulSet中的每个Pod可以有其自己独立的PersistentVolumeClaim对象。即使Pod被重新调度到其它节点上以后，原有的持久磁盘也会被挂载到该Pod。</li><li><strong>Pod能被通过Headless服务访问到</strong>：客户端可以通过服务的域名连接到任意Pod。</li></ul><p><strong>唯一ID规则？？</strong></p><p>通过statefulSet，由于是有状态的服务，所以每个pod都有特定的名称和网络标识。比如pod名是由statefulSet名+有序的数字组成（0、1、2..）</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-02_20-15-50.png" alt="Snipaste_2020-12-02_20-15-50"></p><p>还可以通过域名对Pod形成1对1的关联关系，上面说了Pod名（主机名称）规则，下面唯一标识的规则为：</p><p><code>主机名.service名称.名称空间.svc.local</code></p><h2 id="一次性任务"><a href="#一次性任务" class="headerlink" title="一次性任务"></a>一次性任务</h2><p>Job 其实就是根据定义起一个或多个 pod 来执行任务，pod 执行完退出后，这个 Job 就完成了。所以 Job 又称为 Batch Job ，即计算业务或离线业务。</p><h3 id="Job使用方法"><a href="#Job使用方法" class="headerlink" title="Job使用方法"></a>Job使用方法</h3><p>Job 的 YAML 定义与 Deployment 十分相似。与 Deployment 不同的是，Job 不需要定义 <code>spec.selector</code> 来指定需要控制的 pod，看个例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">date</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">perl</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;perl&quot;</span>, <span class="string">&quot;-Mbignum=bpi&quot;</span>, <span class="string">&quot;-wle&quot;</span>, <span class="string">&quot;print bpi(2000)&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p>这个例子中我们计算了Pi的值。</p><p><strong>1. 启动Job</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f job.yaml</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203192035404.png" alt="image-20201203192035404"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203192057237.png" alt="image-20201203192057237"></p><p><strong>2. 查看结果</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203192136897.png" alt="image-20201203192136897"></p><p>pod 在执行完毕后，状态会变成 <code>Completed</code></p><blockquote><h3 id="pod-重启策略"><a href="#pod-重启策略" class="headerlink" title="pod 重启策略"></a>pod 重启策略</h3><p>在 Job 中，pod 的重启策略 restartPolicy 不允许被设置成 Always，只允许被设置为 Never 或 OnFailure。这是因为 Job 的 pod 执行完毕后直接退出，如果 restartPolicy=Always，pod 将不断执行计算作业，这可不是我们期望的。</p><p>Job 可以设置 pod 的最长运行时间 spec.activeDeadlineSeconds，一旦超过了这个时间，这个 Job 的所有 pod 都会被终止。</p><p>那么，如果 pod 的计算作业失败了，在不同的重启策略下会怎么办？</p><h4 id="restartPolicy-Never"><a href="#restartPolicy-Never" class="headerlink" title="restartPolicy=Never"></a>restartPolicy=Never</h4><p>如果设置了 restartPolicy=Never，那么 Job Controller 会不断的尝试创建一个新的 pod 出来，默认尝试 6 次。当然这个值可以设置，即 Job 对象的 spec.backoffLimit 字段。</p><p>需要注意的是，重新创建 Pod 的间隔是呈指数增加的。</p><h4 id="restartPolicy-OnFailure"><a href="#restartPolicy-OnFailure" class="headerlink" title="restartPolicy=OnFailure"></a>restartPolicy=OnFailure</h4><p>如果设置了 restartPolicy=Never，那么 Job Controller 会不断的重启这个 pod。</p></blockquote><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>你可以利用 CronJobs 执行基于时间调度的任务。这些自动化任务和 Linux 或者 Unix 系统的 Cron 任务类似。</p><p>CronJobs 在创建周期性以及重复性的任务时很有帮助，例如执行备份操作或者发送邮件。CronJobs 也可以在特定时间调度单个任务，例如你想调度低活跃周期的任务。</p><h3 id="CronJob使用方法"><a href="#CronJob使用方法" class="headerlink" title="CronJob使用方法"></a>CronJob使用方法</h3><p>CronJob 需要一个配置文件。 本例中 CronJob 的<code>.spec</code> 配置文件每分钟打印出当前时间和一个问好信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">            <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">date;</span> <span class="string">echo</span> <span class="string">Hello</span> <span class="string">from</span> <span class="string">the</span> <span class="string">Kubernetes</span> <span class="string">cluster</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></table></figure><p>想要运行示例的 CronJob，可以下载示例文件并执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create -f ./cronjob.yaml</span></span><br></pre></td></tr></table></figure><p><code>cronjob.batch/hello created</code></p><p>创建好 CronJob 后，使用下面的命令来获取其状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get cronjob hello</span></span><br></pre></td></tr></table></figure><p>输出类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">hello   *&#x2F;1 * * * *   False     0        50s             75s</span><br></pre></td></tr></table></figure><p>就像你从命令返回结果看到的那样，CronJob 还没有调度或执行任何任务。大约需要一分钟任务才能创建好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get jobs --watch</span><br><span class="line">NAME               COMPLETIONS   DURATION   AGE</span><br><span class="line">hello-4111706356   0/1                      0s</span><br><span class="line">hello-4111706356   0/1           0s         0s</span><br><span class="line">hello-4111706356   1/1           5s         5s</span><br></pre></td></tr></table></figure><p>现在你已经看到了一个运行中的任务被 “hello” CronJob 调度。 你可以停止监视这个任务，然后再次查看 CronJob 就能看到它调度任务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get cronjob hello</span></span><br></pre></td></tr></table></figure><p>输出类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">hello   *&#x2F;1 * * * *   False     0        50s             75s</span><br></pre></td></tr></table></figure><p>你应该能看到 “hello” CronJob 在 <code>LAST-SCHEDULE</code> 声明的时间点成功的调度了一次任务。 有 0 个活跃的任务意味着任务执行完毕或者执行失败。</p><p>现在，找到最后一次调度任务创建的 Pod 并查看一个 Pod 的标准输出。请注意任务名称和 Pod 名称是不同的。</p><blockquote><p><strong>说明：</strong> Job 名称和 Pod 名称不同。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在你的系统上将 <span class="string">&quot;hello-4111706356&quot;</span> 替换为 Job 名称</span></span><br><span class="line">pods=$(kubectl get pods --selector=job-name=hello-4111706356 --output=jsonpath=&#123;.items..metadata.name&#125;)</span><br></pre></td></tr></table></figure><p>查看 Pod 日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs $pods</span><br><span class="line">Fri Feb 22 11:02:09 UTC 2019</span><br><span class="line">Hello from the Kubernetes cluster</span><br></pre></td></tr></table></figure><p>当你不再需要 CronJob 时，可以用 <code>kubectl delete cronjob</code> 删掉它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete cronjob hello</span><br></pre></td></tr></table></figure><p>删除 CronJob 会清除它创建的所有任务和 Pod，并阻止它创建额外的任务。</p><h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p>Service 是 Kubernetes 最核心概念，通过创建 Service，<strong>可以为一组具有相同功能的容器应用提供一个统一的入口地址</strong>，并且将请求负载分发到后端的各个容器应用上。 </p><p>类似于微服务的服务注册与发现中心。</p><blockquote><p>存在意义：</p><ul><li>因为Pod的IP不断变化，Service关联Pod，防止Pod失去联系</li><li>定义一组Pod的访问规则（负载均衡）</li></ul></blockquote><p>todo kubeget get svc的图片</p><h2 id="Service与Pod关系"><a href="#Service与Pod关系" class="headerlink" title="Service与Pod关系"></a>Service与Pod关系</h2><p>上面说到Service防止与Pod失联，所以Service要与Pod建立联系，他们是用过标签和标签选择器来建立联系的。</p><p>然后说到Service定于一组访问Pod的规则，那么我们为什么不直接通过ip访问pod呢？</p><p>我们可以通过 kubectl get pods -l app=mywebapp -o yaml | grep podIP 来获取Pod 的 IP 地址和端口号来访问 Tomcat 服务，但是直接通过 Pod 的 IP 地址和端口访问应用服务是不可靠的，因为当 Pod 所在的 Node 发生故障时， Pod 将被 kubernetes 重新调度到 另一台 Node，Pod 的地址会发生改变。我们可以通过配置文件来定义 Service，再 通过kubectl create 来创建，这样可以通过 Service 地址来访问后端的 Pod.。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201124113505202.png" alt="image-20201124113505202"></p><h2 id="Service的种类"><a href="#Service的种类" class="headerlink" title="Service的种类"></a>Service的种类</h2><p><a href="#Deployment%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8">上面暴露端口时</a>有个<code>--type=xxx</code>，这里有三个选项，这其实就是Service的种类，所以<code>expose</code>操作时就是创建不同的<code>Service</code>。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-02_19-53-26.png" alt="Snipaste_2020-12-02_19-53-26"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h3><p>默认值，一般在集群内部访问时使用。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-02_19-58-04.png" alt="Snipaste_2020-12-02_19-58-04"></p><h3 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h3><p>一般用于将集群内部的Pod暴露给外网访问时采用这种模式，它可以暴露Pod内的指定端口，然后可以通过集群内任何一台机器的IP加上随机暴露的端口进行访问Pod。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-02_19-58-39.png" alt="Snipaste_2020-12-02_19-58-39"></p><p>通过查看service：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-02_19-59-38.png" alt="Snipaste_2020-12-02_19-59-38"></p><p>发现，ClusterIP的只有一个端口，只能内部访问，而NodePort有端口的映射，所以他能通过集群节点的Ip和端口访问到Pod里指定的端口。</p><h3 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h3><p>也是一般用于外网访问Pod，一般与公有云一同使用，做到负载均衡的效果。</p><h1 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h1><h2 id="Sercet"><a href="#Sercet" class="headerlink" title="Sercet"></a>Sercet</h2><p>Sercet：有密码的意思，它是将密码等敏感数据存储在etcd中。上面说过etcd是k8s的存储中心。</p><p><strong>它的作用就是将加密的数据存储在etcd中，让Pod容器以变量/Volume的方式进行访问。</strong></p><h3 id="创建Sercet"><a href="#创建Sercet" class="headerlink" title="创建Sercet"></a>创建Sercet</h3><p><strong>将 secret 数据转换为 base-64 形式</strong></p><p>假设用户想要有两条 Secret 数据：用户名 <code>my-app</code> 和密码 <code>39528$vdg7Jb</code>。 首先使用 <a href="https://www.base64encode.org/">Base64 编码</a> 将用户名和密码转化为 base-64 形式。 下面是一个使用常用的 base64 程序的示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -n &#x27;my-app&#x27; | base64</span><br><span class="line">echo -n &#x27;39528$vdg7Jb&#x27; | base64</span><br></pre></td></tr></table></figure><p>结果显示 base-64 形式的用户名为 <code>bXktYXBw</code>， base-64 形式的密码为 <code>Mzk1MjgkdmRnN0pi</code>。</p><blockquote><p><strong>注意：</strong> 使用你的操作系统所能信任的本地工具以降低使用外部工具的风险。</p></blockquote><p><strong>创建 Secret</strong></p><p>这里是一个配置文件，可以用来创建存有用户名和密码的 Secret:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-secret</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">bXktYXBw</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">Mzk1MjgkdmRnN0pi</span></span><br></pre></td></tr></table></figure><ol><li><p>创建 Secret：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f https://k8s.io/examples/pods/inject/secret.yaml</span></span><br></pre></td></tr></table></figure></li><li><p>查看 Secret 相关信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get secret test-secret</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME          TYPE      DATA      AGE</span><br><span class="line">test-secret   Opaque    2         1m</span><br></pre></td></tr></table></figure></li><li><p>查看 Secret 相关的更多详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl describe secret test-secret</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Name:       test-secret</span><br><span class="line">Namespace:  default</span><br><span class="line">Labels:     &lt;none&gt;</span><br><span class="line">Annotations:    &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Type:   Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">password:   13 bytes</span><br><span class="line">username:   7  bytes</span><br></pre></td></tr></table></figure></li></ol><h3 id="注入到容器"><a href="#注入到容器" class="headerlink" title="注入到容器"></a>注入到容器</h3><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>使用 <code>envFrom</code> 来将 Secret 中的所有数据定义为环境变量。 Secret 中的键名成为容器中的环境变量名：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">envfrom-secret</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envars-test-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">envFrom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">secretRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">test-secret</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203195838491.png" alt="image-20201203195838491"></p><p>创建 Pod：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f https://k8s.io/examples/pods/inject/pod-secret-envFrom.yaml</span><br></pre></td></tr></table></figure><p>在 Shell 中，显示环境变量 <code>username</code> 和 <code>password</code> 的内容：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203200120573.png" alt="image-20201203200120573"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -i -t envfrom-secret -- /bin/sh -c <span class="string">&#x27;echo &quot;username: $username\npassword: $password\n&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: my-app</span><br><span class="line">password: 39528$vdg7Jb</span><br></pre></td></tr></table></figure><h4 id="Volume形式"><a href="#Volume形式" class="headerlink" title="Volume形式"></a>Volume形式</h4><p>这里是一个可以用来创建 pod 的配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret-test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="comment"># name must match the volume name below</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/secret-volume</span></span><br><span class="line">  <span class="comment"># The secret data is exposed to Containers in the Pod through a Volume.</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">      <span class="attr">secret:</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">test-secret</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201203200422422.png" alt="image-20201203200422422"></p><ol><li><p>创建 Pod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f secret-pod.yaml</span><br></pre></td></tr></table></figure></li><li><p>确认 Pod 正在运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod secret-test-pod</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME              READY     STATUS    RESTARTS   AGE</span><br><span class="line">secret-test-pod   1/1       Running   0          42m</span><br></pre></td></tr></table></figure></li><li><p>获取一个 shell 进入 Pod 中运行的容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec -it secret-test-pod -- /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>Secret 数据通过挂载在 <code>/etc/secret-volume</code> 目录下的卷暴露在容器中。</p><p>在 shell 中，列举 <code>/etc/secret-volume</code> 目录下的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/secret-volume</span><br></pre></td></tr></table></figure><p>输出包含两个文件，每个对应一个 Secret 数据条目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password username</span><br></pre></td></tr></table></figure></li><li><p>在 Shell 中，显示 <code>username</code> 和 <code>password</code> 文件的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在容器中 Shell 运行下面命令</span></span><br><span class="line">echo &quot;$(cat /etc/secret-volume/username)&quot;</span><br><span class="line">echo &quot;$(cat /etc/secret-volume/password)&quot;</span><br></pre></td></tr></table></figure><p>输出为用户名和密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line"><span class="meta">39528$</span><span class="bash">vdg7Jb</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><p><strong>和Sercet的作用差不多，将配置的数据存储在etcd中，让Pod容器以变量/Volume的方式进行访问。</strong></p><p>ConfigMap 允许你将配置文件与镜像文件分离，以使容器化的应用程序具有可移植性。 本页提供了一系列使用示例，这些示例演示了如何创建 ConfigMap 以及配置 Pod 使用存储在 ConfigMap 中的数据。</p><h3 id="创建ConfigMap"><a href="#创建ConfigMap" class="headerlink" title="创建ConfigMap"></a>创建ConfigMap</h3><p>你可以使用 <code>kubectl create configmap</code> 或者在 <code>kustomization.yaml</code> 中的 ConfigMap 生成器 来创建 ConfigMap。注意，<code>kubectl</code> 从 1.14 版本开始支持 <code>kustomization.yaml</code>。</p><h4 id="基于文件创建"><a href="#基于文件创建" class="headerlink" title="基于文件创建"></a>基于文件创建</h4><p>你可以使用 <code>kubectl create configmap</code> 基于单个文件或多个文件创建 ConfigMap。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties</span><br></pre></td></tr></table></figure><p>将产生以下 ConfigMap:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe configmaps game-config-2</span><br></pre></td></tr></table></figure><p>输出类似以下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Name:         game-config-2</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">game.properties:</span><br><span class="line">----</span><br><span class="line">enemies&#x3D;aliens</span><br><span class="line">lives&#x3D;3</span><br><span class="line">enemies.cheat&#x3D;true</span><br><span class="line">enemies.cheat.level&#x3D;noGoodRotten</span><br><span class="line">secret.code.passphrase&#x3D;UUDDLRLRBABAS</span><br><span class="line">secret.code.allowed&#x3D;true</span><br><span class="line">secret.code.lives&#x3D;30</span><br></pre></td></tr></table></figure><hr><p>在使用 <code>--from-file</code> 参数时，你可以定义在 ConfigMap 的 <code>data</code> 部分出现键名， 而不是按默认行为使用文件名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create configmap game-config-3 --from-file=&lt;my-key-name&gt;=&lt;path-to-file&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;my-key-name&gt;</code> 是你要在 ConfigMap 中使用的键名，<code>&lt;path-to-file&gt;</code> 是你想要键表示数据源文件的位置。</p><p>例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create configmap game-config-3 --from-file=game-special-key=configure-pod-container/configmap/game.properties</span><br></pre></td></tr></table></figure><p>将产生以下 ConfigMap:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get configmaps game-config-3 -o yaml</span><br></pre></td></tr></table></figure><p>输出类似以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="number">2016-02-18T18:54:22Z</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">game-config-3</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;530&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/default/configmaps/game-config-3</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">05f8da22-d671-11e5-8cd0-68f728db1985</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">game-special-key:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">enemies=aliens</span></span><br><span class="line">    <span class="string">lives=3</span></span><br><span class="line">    <span class="string">enemies.cheat=true</span></span><br><span class="line">    <span class="string">enemies.cheat.level=noGoodRotten</span></span><br><span class="line">    <span class="string">secret.code.passphrase=UUDDLRLRBABAS</span></span><br><span class="line">    <span class="string">secret.code.allowed=true</span></span><br><span class="line">    <span class="string">secret.code.lives=30</span></span><br></pre></td></tr></table></figure><h4 id="基于生成器创建-ConfigMap"><a href="#基于生成器创建-ConfigMap" class="headerlink" title="基于生成器创建 ConfigMap"></a>基于生成器创建 ConfigMap</h4><p>自 1.14 开始，<code>kubectl</code> 开始支持 <code>kustomization.yaml</code>。 你还可以基于生成器创建 ConfigMap，然后将其应用于 API 服务器上创建对象。 生成器应在目录内的 <code>kustomization.yaml</code> 中指定</p><p>例如，要从 <code>configure-pod-container/configmap/kubectl/game.properties</code> 文件生成一个 ConfigMap：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建包含 ConfigMapGenerator 的 kustomization.yaml 文件</span></span><br><span class="line">cat &lt;&lt;EOF &gt;./kustomization.yaml</span><br><span class="line">configMapGenerator:</span><br><span class="line">- name: game-config-4</span><br><span class="line">  files:</span><br><span class="line">  - configure-pod-container/configmap/kubectl/game.properties</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>使用 kustomization 目录创建 ConfigMap 对象：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -k .</span><br><span class="line">configmap/game-config-4-m9dm2f92bt created</span><br></pre></td></tr></table></figure><p>你可以检查 ConfigMap 是这样创建的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">kubectl get configmap</span><br><span class="line">NAME                       DATA   AGE</span><br><span class="line">game-config-4-m9dm2f92bt   1      37s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe configmaps/game-config-4-m9dm2f92bt</span><br><span class="line">Name:         game-config-4-m9dm2f92bt</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                &#123;&quot;apiVersion&quot;:&quot;v1&quot;,&quot;data&quot;:&#123;&quot;game.properties&quot;:&quot;enemies=aliens\nlives=3\nenemies.cheat=true\nenemies.cheat.level=noGoodRotten\nsecret.code.p...</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">game.properties:</span><br><span class="line">----</span><br><span class="line">enemies=aliens</span><br><span class="line">lives=3</span><br><span class="line">enemies.cheat=true</span><br><span class="line">enemies.cheat.level=noGoodRotten</span><br><span class="line">secret.code.passphrase=UUDDLRLRBABAS</span><br><span class="line">secret.code.allowed=true</span><br><span class="line">secret.code.lives=30</span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><p>请注意，生成的 ConfigMap 名称具有通过对内容进行散列而附加的后缀， 这样可以确保每次修改内容时都会生成新的 ConfigMap。</p><hr><p>在 ConfigMap 生成器，你可以定义一个非文件名的键名。 例如，从 <code>configure-pod-container/configmap/game.properties</code> 文件生成 ConfigMap， 但使用 <code>game-special-key</code> 作为键名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建包含 ConfigMapGenerator 的 kustomization.yaml 文件</span></span><br><span class="line">cat &lt;&lt;EOF &gt;./kustomization.yaml</span><br><span class="line">configMapGenerator:</span><br><span class="line">- name: game-config-5</span><br><span class="line">  files:</span><br><span class="line">  - game-special-key=configure-pod-container/configmap/kubectl/game.properties</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>使用 Kustomization 目录创建 ConfigMap 对象。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -k .</span><br><span class="line">configmap/game-config-5-m67dt67794 created</span><br></pre></td></tr></table></figure><hr><blockquote><p>如基于文件创建 <a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-pod-configmap/#create-configmaps-from-files">ConfigMap</a> 中所述，当你使用 <code>--from-file</code> 创建 ConfigMap 时，（默认）文件名成为存储在 ConfigMap 的 <code>data</code> 部分中的键， 文件内容成为键对应的值。</p><p>所以这种创建方式，只有一个k-v。使用下述yaml创建的话一个ConfigMao多个KV</p></blockquote><h3 id="注入到容器-1"><a href="#注入到容器-1" class="headerlink" title="注入到容器"></a>注入到容器</h3><h4 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h4><ul><li><p>创建一个包含多个键值对的 ConfigMap。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">SPECIAL_LEVEL:</span> <span class="string">very</span></span><br><span class="line">  <span class="attr">SPECIAL_TYPE:</span> <span class="string">charm</span></span><br></pre></td></tr></table></figure><p>创建 ConfigMap:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://kubernetes.io/examples/configmap/configmap-multikeys.yaml</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>envFrom</code> 将所有 ConfigMap 的数据定义为容器环境变量，ConfigMap 中的键成为 Pod 中的环境变量名称。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dapi-test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/busybox</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;env&quot;</span> ]</span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p>创建 Pod:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://kubernetes.io/examples/pods/pod-configmap-envFrom.yaml</span><br></pre></td></tr></table></figure><p>现在，Pod 的输出包含环境变量 <code>SPECIAL_LEVEL=very</code> 和 <code>SPECIAL_TYPE=charm</code>。</p></li></ul><h4 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h4><p>如基于文件创建 ConfigMap 中所述，当你使用 –from-file 创建 ConfigMap 时，文件名成为存储在 ConfigMap 的 data 部分中的键， 文件内容成为键对应的值。</p><p>本节中的示例引用了一个名为 special-config 的 ConfigMap，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">SPECIAL_LEVEL:</span> <span class="string">very</span></span><br><span class="line">  <span class="attr">SPECIAL_TYPE:</span> <span class="string">charm</span></span><br></pre></td></tr></table></figure><p>创建 ConfigMap:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://kubernetes.io/examples/configmap/configmap-multikeys.yaml</span><br></pre></td></tr></table></figure><p>在 Pod 规约的 <code>volumes</code> 部分下添加 ConfigMap 名称。 这会将 ConfigMap 数据添加到指定为 <code>volumeMounts.mountPath</code> 的目录（在本例中为 <code>/etc/config</code>）。 <code>command</code> 部分引用存储在 ConfigMap 中的 <code>special.level</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dapi-test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/busybox</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;ls /etc/config/&quot;</span> ]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="comment"># Provide the name of the ConfigMap containing the files you want</span></span><br><span class="line">        <span class="comment"># to add to the container</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p><img src="E:%5CProjects%5Csync%5Cmd%5Ck8s%5Cimage-20201204100337839.png" alt="image-20201204100337839"></p><p>创建 Pod:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://kubernetes.io/examples/pods/pod-configmap-volume.yaml</span><br></pre></td></tr></table></figure><p>Pod 运行时，命令 <code>ls /etc/config/</code> 产生下面的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SPECIAL_LEVEL</span><br><span class="line">SPECIAL_TYPE</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 如果在 <code>/etc/config/</code> 目录中有一些文件，它们将被删除。</p></blockquote><blockquote><p><strong>说明：</strong> 文本数据会使用 UTF-8 字符编码的形式展现为文件。如果使用其他字符编码， 可以使用 <code>binaryData</code>。</p></blockquote><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><h2 id="Ingress的功能"><a href="#Ingress的功能" class="headerlink" title="Ingress的功能"></a>Ingress的功能</h2><p>之前创建的Nginx Deployment资源为了能让外部访问，采用<code>kubectl expose</code>操作创建了一个type=NodePort的Service，然后可以通过以下方式来访问到内部的Nginx资源：</p><ul><li>Service IP:PORT</li><li>集群内任一节点IP:Port</li></ul><p>那这样有点不方便，如果我们想访问一个应用要先查看他开放的端口，通过IP端口形式访问，但在实际的使用当中是希望通过不同域名访问到不同的服务，域名应该指向的IP是同一个。Ingress就实现了这个</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204142357121.png" alt="image-20201204142357121"></p><blockquote><p>大家可能想Ingress实现的内容不就和Nginx一致吗。其实官方提供的Ingress原理就是Nginx，做了步封装。</p></blockquote><p>通过上图得知，Ingress对访问的域名进行了规则的转发，转发至对象的ServiceIP和端口，而Servcie是一组Pod的访问规则，这样就可以根据不同的域名访问到不同的服务了。</p><h2 id="Ingress的使用"><a href="#Ingress的使用" class="headerlink" title="Ingress的使用"></a>Ingress的使用</h2><p>Ingress不是k8s集群自带的功能，需要选择Ingress的控制器安装，我们选择官方维护nginx控制器，实现部署</p><blockquote><p>步骤：</p><ol><li>部署ingress Controller</li><li>创建ingress规则</li></ol></blockquote><p><strong>1. 创建底层被访问应用，并暴露</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create deployment web --image=nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl expose deployment web --port=80 --target-port=80 --<span class="built_in">type</span>=NodePort</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204143724336.png" alt="image-20201204143724336"></p><blockquote><p>可以看到我们通过Serivce的10.106.99.78:80转发到集群任一几点的ip:32402就能访问到deployment资源</p></blockquote><p><strong>2. 部署Ingress Controller</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-configuration</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tcp-services</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">udp-services</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;extensions&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;networking.k8s.io&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;extensions&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;networking.k8s.io&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">resourceNames:</span></span><br><span class="line">      <span class="comment"># Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;</span></span><br><span class="line">      <span class="comment"># Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;</span></span><br><span class="line">      <span class="comment"># This has to be adapted if you change either parameter</span></span><br><span class="line">      <span class="comment"># when launching the nginx-ingress-controller.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ingress-controller-leader-nginx&quot;</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role-nisa-binding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole-nisa-binding</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">prometheus.io/port:</span> <span class="string">&quot;10254&quot;</span></span><br><span class="line">        <span class="attr">prometheus.io/scrape:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># wait up to five minutes for the drain of connections</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">300</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">lizhenliang/nginx-ingress-controller:0.30.0</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--configmap=$(POD_NAMESPACE)/nginx-configuration</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--udp-services-configmap=$(POD_NAMESPACE)/udp-services</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--publish-service=$(POD_NAMESPACE)/ingress-nginx</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--annotations-prefix=nginx.ingress.kubernetes.io</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">drop:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">              <span class="attr">add:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">            <span class="comment"># www-data -&gt; 101</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">101</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">lifecycle:</span></span><br><span class="line">            <span class="attr">preStop:</span></span><br><span class="line">              <span class="attr">exec:</span></span><br><span class="line">                <span class="attr">command:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="string">/wait-shutdown</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">LimitRange</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">min:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">90Mi</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Container</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204145037259.png" alt="image-20201204145037259"></p><p><strong>3. 创建ingress规则</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># http</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">example.ingredemo.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">web</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># https</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tls-example-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sslexample.ctnrs.com</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">secret-tls</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">sslexample.ctnrs.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span> <span class="string">web</span></span><br><span class="line">            <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204145348232.png" alt="image-20201204145348232"></p><p><strong>4. 添加本地域名解析</strong></p><p>因为Ingress-Controller运行在master中，所以将要使用的域名解析到master的IP。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204145635739.png" alt="image-20201204145635739"></p><p><strong>5. 访问</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201204145720268.png" alt="image-20201204145720268"></p><h1 id="核心技术Helm"><a href="#核心技术Helm" class="headerlink" title="核心技术Helm"></a>核心技术Helm</h1><h2 id="Helm的引入"><a href="#Helm的引入" class="headerlink" title="Helm的引入"></a>Helm的引入</h2><p>之前我们创建服务时，需要手动编写单个服务的Deployment、Service、Ingress的配置文件，<strong>并多次通过<code>kubectl apply</code>启动。</strong>这样单个服务没问题，但是如果部署微服务时，一个项目有很多服务，每个服务都需要手动启动多个资源才可以开启，这样很麻烦，所以Helm诞生了。</p><p>K8S 上的应用对象，都是由特定的资源描述组成，包括 deployment、service 等。都保存各自文件中或者集中写到一个配置文件。然后 kubectl apply –f 部署。如果应用只由一个或几个这样的服务组成，上面部署方式足够了。而对于一个复杂的应用，会有很多类似上面的资源描述文件，例如微服务架构应用，组成应用的服务可能多达十个，几十个。如果有更新或回滚应用的需求，可能要修改和维护所涉及的大量资源文件，而这种组织和管理应用的方式就显得力不从心了。且由于缺少对发布过的应用版本管理和控制，使Kubernetes 上的应用维护和更新等面临诸多的挑战，主要面临以下问题：</p><ol><li>如何将这些服务作为一个整体管理 </li><li>这些资源文件如何高效复用</li><li>不支持应用级别的版本管理</li></ol><h2 id="Helm介绍"><a href="#Helm介绍" class="headerlink" title="Helm介绍"></a>Helm介绍</h2><p>Helm 是一个 Kubernetes 的包管理工具，就像 Linux 下的包管理器，如 yum/apt 等，可以 很方便的将之前打包好的 yaml 文件部署到 kubernetes 上。 </p><p><strong>Helm 有 3 个重要概念：</strong> </p><ol><li>helm：一个命令行客户端工具，主要用于 Kubernetes 应用 chart 的创建、打包、发 布和管理。 </li><li>Chart：应用描述，一系列用于描述 k8s 资源相关文件(yaml配置文件)的集合。</li><li>Release：基于 Chart 的部署实体，一个 chart 被 Helm 运行后将会生成对应的一个 release；将在 k8s 中创建出真实运行的资源对象。即每运行一次服务，就会有一个Release</li></ol><p><strong>Helm可以解决的问题</strong></p><ol><li>可以把一个服务的所以配置文件yaml统一管理，通过Chart。</li><li>实现yaml高校复用，通过传递参数动态渲染模板做到。</li><li>使用helm应用界别的版本管理。</li></ol><blockquote><p> 总结来说通过Helm来管理服务，虽然配置文件也是一个也没有减少，但是通过它来管理服务，升级，启动会极大的方便</p></blockquote><h2 id="Helm-v3-变化"><a href="#Helm-v3-变化" class="headerlink" title="Helm v3 变化"></a>Helm v3 变化</h2><p>2019 年 11 月 13 日， Helm 团队发布 Helm v3 的第一个稳定版本。 该版本主要变化如下： </p><ol><li>最明显的变化是 Tiller 的删除<img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_13-15-22.png" alt="Snipaste_2020-12-05_13-15-22"></li><li>Release 名称可以在不同命名空间重用</li><li>支持将 Chart 推送至 Docker 镜像仓库中</li><li>使用 JSONSchema 验证 chart values</li></ol><h2 id="Helm客户端"><a href="#Helm客户端" class="headerlink" title="Helm客户端"></a>Helm客户端</h2><h3 id="安装和配置源"><a href="#安装和配置源" class="headerlink" title="安装和配置源"></a>安装和配置源</h3><p>因为它类似于apt、yum，所以也需要配置源，然后就可以从网上下载配置好的各个APP的Chart的配置文件，直接配置网上的应用。但是多数来说还是会自定义Chart配置，来部署自己的应用，不是公共的应用。</p><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://get.helm.sh/helm-v3.4.1-linux-amd64.tar.gz</span><br><span class="line">$ tar -zxvf helm-v3.4.1-linux-amd64.tar.gz</span><br><span class="line">$ cp linux-amd64/helm /usr/bin/</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">$ helm</span><br></pre></td></tr></table></figure><p><strong>配置国内 chart 仓库</strong></p><ul><li>微软仓库（<a href="http://mirror.azure.cn/kubernetes/charts/%EF%BC%89%E8%BF%99%E4%B8%AA%E4%BB%93%E5%BA%93%E6%8E%A8%E8%8D%90%EF%BC%8C%E5%9F%BA%E6%9C%AC">http://mirror.azure.cn/kubernetes/charts/）这个仓库推荐，基本</a> 上官网有的 chart 这里都有。 </li><li> 阿里云仓库（<a href="https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts">https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</a> ）</li><li>官方仓库（<a href="https://hub.kubeapps.com/charts/incubator%EF%BC%89%E5%AE%98%E6%96%B9">https://hub.kubeapps.com/charts/incubator）官方</a> chart 仓库，国 内有点不好使。</li></ul><p>添加存储库：<code>helm repo add 随便起Name url</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm repo add stable http://mirror.azure.cn/kubernetes/charts </span><br><span class="line">helm repo add aliyun https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts </span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure><p>查看配置的存储库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo list</span><br></pre></td></tr></table></figure><p>删除存储库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo remove aliyun</span><br></pre></td></tr></table></figure><h2 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h2><h3 id="Chart创建"><a href="#Chart创建" class="headerlink" title="Chart创建"></a>Chart创建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm create mychart</span><br><span class="line">ls mycharts/</span><br></pre></td></tr></table></figure><ul><li>Chart.yaml是当前Chart属性配置信息</li><li>templates是存放服务配置文件的文件夹</li><li>values.yaml是定义全局变量的文件</li></ul><h3 id="yaml高效复用"><a href="#yaml高效复用" class="headerlink" title="yaml高效复用"></a>yaml高效复用</h3><p>创建服务yaml通过value.yaml里的参数动态绑定模板，这样较少Yaml编写时间。因为服务资源yaml模板大体信息一致，只需要改部门参数内容即可。</p><p>下面开始定义全局变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mychart</span><br><span class="line">vim values.yaml</span><br><span class="line">replicas: 1</span><br><span class="line">image: nginx</span><br><span class="line">tag: 1.16</span><br><span class="line">label: nginx</span><br><span class="line">port: 80</span><br></pre></td></tr></table></figure><p>然后在templates文件夹中的对应的配置文件中通过变量引入：<code>&#123;&#123; .Values.xxx&#125;&#125;</code>。注意 点与大括号之间的空格。然后我们一般在name的值采用<code>&#123;&#123; .Release.Name&#125;&#125;</code>添加名称，他的值就是<code>helm install xxx chart的位置</code>中的xxx，避免多次创建name相同。</p><p>修改部分配置文件，参考下面，请结合自己实际：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_14-25-07.png" alt="Snipaste_2020-12-05_14-25-07"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_14-24-57.png" alt="Snipaste_2020-12-05_14-24-57"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install myweb ./mychart</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-12-05_14-28-42.png" alt="Snipaste_2020-12-05_14-28-42"></p><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p><code>helm upgrade myweb ./mychart/</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://jkzhao.github.io/2019/08/26/Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/">https://jkzhao.github.io/2019/08/26/Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/</a></p><p><a href="https://www.qikqiak.com/post/understand-kubernetes-affinity/">https://www.qikqiak.com/post/understand-kubernetes-affinity/</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes学习</title>
      <link href="2020/11/15/Kubernetes%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/11/15/Kubernetes%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><h2 id="Kubernetes概述"><a href="#Kubernetes概述" class="headerlink" title="Kubernetes概述"></a>Kubernetes概述</h2><p>kubernetes，简称 K8s，是用 8 代替 8 个字符“ubernete”而成的缩写。是一个开源 的，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的 应用简单并且高效（powerful）,Kubernetes 提供了应用部署，规划，更新，维护的一种 机制。</p><p>Kubernetes 是 Google 开源的一个容器编排引擎，<font color="red">它支持自动化部署、大规模可伸缩、 应用容器化管理。</font>在生产环境中部署一个应用程序时，<font color="red">通常要部署该应用的多个实例以便 对应用请求进行负载均衡。</font></p><blockquote><p>Kubernetes是容器化集群管理系统。它让部署容器化应用更加简洁和高效。</p></blockquote><blockquote><p>Kubernetes可以认为是容器的资源管理器，其他的资源管理器还有：</p><ul><li><code>Apache MESOS</code>：分布式资源管理框架，在2019-5，Twitter宣布由MESOS转为Kubernetes</li><li><code>Docker Swarm</code>：轻量、功能少，在2019-7，阿里云宣布不支持Docker Swarm</li><li><font color="red"><code>Kubernetes</code></font>：Google公司发布，采用GO语言开发<ul><li>特点：轻量级、开源、弹性伸缩、负载均衡(IPVS)</li></ul></li></ul></blockquote><h2 id="为什么需要-Kubernetes，它能做什么"><a href="#为什么需要-Kubernetes，它能做什么" class="headerlink" title="为什么需要 Kubernetes，它能做什么?"></a>为什么需要 Kubernetes，它能做什么?</h2><p><font color="red">容器是打包和运行应用程序的好方式。</font>在生产环境中，您需要管理运行应用程序的容器，<strong>并确保不会停机</strong>。例如，<font color="red">如果一个容器发生故障，则需要启动另一个容器。如果系统处理此行为，会不会更容易？</font></p><p><strong>这就是 Kubernetes 的救援方法！</strong>Kubernetes 为您提供了一个<font color="red"><strong>可弹性运行分布式系统的框架</strong></font>。Kubernetes 会满足您的扩展要求、故障转移、部署模式等。例如，Kubernetes 可以轻松管理系统的 Canary 部署。</p><hr><p><strong>Kubernetes 为您提供：</strong></p><ul><li><p><strong>服务发现和负载均衡</strong><br>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果到容器的流量很大，Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</p></li><li><p><strong>存储编排</strong><br>Kubernetes 允许您自动挂载您选择的存储系统，例如本地存储、公共云提供商等。</p></li><li><p><strong>自动部署和回滚</strong><br>您可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态更改为所需状态。例如，您可以自动化 Kubernetes 来为您的部署创建新容器，删除现有容器并将它们的所有资源用于新容器。</p></li><li><p><strong>自动二进制打包</strong><br>Kubernetes 允许您指定每个容器所需 CPU 和内存（RAM）。当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。</p></li><li><p><strong>自我修复</strong><br>Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</p></li><li><p><strong>密钥与配置管理</strong><br>Kubernetes 允许您存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。您可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</p></li></ul><h2 id="Kubernetes架构组件"><a href="#Kubernetes架构组件" class="headerlink" title="Kubernetes架构组件"></a>Kubernetes架构组件</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-15_16-52-10.png" alt="Snipaste_2020-11-15_16-52-10"></p><p><font color="red"><strong>k8s 集群的节点有两个角色，分别为 Master 节点和 Node 节点，整个 K8s 集群Master 和 Node 节点关系如下图所示：</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823181812.png"></p><h3 id="Master节点组件"><a href="#Master节点组件" class="headerlink" title="Master节点组件"></a>Master节点组件</h3><p>Master 节点也称为控制节点，每个 k8s 集群都有一个 Master 节点负责整个集群的管理控制，我们上面介绍的 k8s 三大能力都是经过 Master 节点发起的，Master 节点包含了以下几个组件：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823181408.png"></p><ul><li><code>API server</code>：集群统一入口，提供了 HTTP Rest 接口的服务进程，所有资源对象的增、删、改、查等操作的唯一入口；</li><li><code>controller-manager</code>：k8s 集群所有资源对象的自动化控制中心；<strong>一个资源对应一个控制器</strong>。</li><li><code>scheduler</code>：主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。</li><li><code>etcd</code>：是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</li></ul><h3 id="Worker节点组件"><a href="#Worker节点组件" class="headerlink" title="Worker节点组件"></a>Worker节点组件</h3><p>Node 节点的作用是承接 Master 分配的工作负载，它主要有以下几个关键组件：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823184119.png"></p><ul><li><code>Kubelet</code>：负责 Pod 对应容器的创建、启停等操作，与 Master 节点紧密协作；</li><li><code>kube-proxy</code>：提供网络代理，实现 k8s 集群通信与负载均衡的组件。</li></ul><h2 id="Kubernetes核心概念"><a href="#Kubernetes核心概念" class="headerlink" title="Kubernetes核心概念"></a>Kubernetes核心概念</h2><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>Pod 是 k8s 最重要而且是最基本的一个资源对象，它的结构如下：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200821153531.png"></p><p>从以上 Pod 的结构图可以看出，它其实是容器的一个上层包装结构，这也就是为什么 K8s 可以支持多种容器类型的原因，基于这方面，我理解 k8s 的定位就是一个编排与调度工具，而容器只是它调度的一个资源对象而已。</p><p>Pod 可包含多个容器在里面，每个 Pod 至少会有一个 Pause 容器，其它用户定义的容器都共享该 Pause 容器，Pause 容器的主要作用是用于定义 Pod 的 ip 和 volume。</p><p>Pod 在 k8s 集群中的位置如下图所示：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823185441.png"></p><p><strong>Pod特点：</strong></p><ul><li>k8s中的最小部署单元。</li><li>是一组容器的集合。</li><li>Pod中的所有容器是共享网络的</li><li>Pod的生命周期很短暂</li></ul><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><p>Label 在 k8s 中是一个非常核心的概念，我们可以将 Label 指定到对应的资源对象中，例如 Node、Pod、Replica Set、Service 等，一个资源可以绑定任意个 Label，<font color="red">k8s 通过 Label 可实现多维度的资源分组管理</font>，后续可通过 <font color="red">Label Selector 查询和筛选拥有某些 Label 的资源对象</font>，例如创建一个 Pod，给定一个 Label，workerid=123，后续可通过 workerid=123 删除拥有该标签的 Pod 资源。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823192435.png"></p><h3 id="Replica-Set"><a href="#Replica-Set" class="headerlink" title="Replica Set"></a>Replica Set</h3><p><font color="red"><strong>Replica Set 目的是为了定义一个期望的场景</strong></font>，比如定义某种 <strong>Pod 的副本数量</strong>在任意时刻都处于 Peplica Set 期望的值，假设 Replica Set 定义 Pod 的副本数目为：replicas=2，当该 Replica Set 提交给 Master 后，Master 会定期巡检该 Pod 在集群中的数目，如果发现该 Pod 挂掉了一个，Master 就会尝试依据 Replica Set 设置的 Pod 模版创建 Pod，以维持 Pod 的数量与 Replica Set 预期的 Pod 数量相同。</p><p>通过 Replica Set，k8s 集群实现了用户应用的高可用性，而且大大减少了运维工作量。<font color="red"><strong>因此生产环境一般用 Deployment 或者 Replica Set 去控制 Pod 的生命周期和期望值，而不是直接单独创建 Pod。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823193118.png"></p><p>类似 Replica Set 的还有 <code>Deployment</code>，它的内部实现也是通过 Replica Set 实现的，可以说 Deployment 是 Replica Set 的升级版，它们之间的 yaml 配置文件格式大部分都相同。</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Service 是 k8s 能够实现微服务集群的一个非常重要的概念，顾名思义，k8s 的 Service 就是我们平时所提及的微服务架构中的“微服务”，本文上面提及的 Pod、Replica Set 等都是为 Service 服务的资源， 如下图表示 Service、Pod、Replica Set 的关系：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823200632.png"></p><p>从上图可看出，Service 定义了一个服务访问的入口，客户端通过这个入口即可访问服务背后的应用集群实例，<font color="red">而 Service 则是通过 Label Selector 实现关联与对接的，Replica Set 保证服务集群资源始终处于期望值。</font></p><p>以上只是一个微服务，通常来说一个应用项目会由多个不同业务能力而又彼此独立的微服务组成，多个微服务间组成了一个强大而又高可用的应用服务集群。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823220527.png"></p><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>Namespace 顾名思义是命名空间的意思，在 k8s 中主要用于实现资源隔离的目的，用户可根据不同项目创建不同的 Namespace，通过 k8s 将资源分配到不同 Namespace 中，即可实现不同项目的资源隔离：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/20200823214534.png" alt="img"></p><h1 id="Kubernetes的搭建"><a href="#Kubernetes的搭建" class="headerlink" title="Kubernetes的搭建"></a>Kubernetes的搭建</h1><p><strong>前置知识点</strong> </p><p>目前生产部署Kubernetes 集群主要有两种方式： </p><blockquote><p><strong>kubeadm</strong> </p><p>Kubeadm 是一个 K8s 部署工具，提供 kubeadm init 和 kubeadm join，用于快速部署 Kubernetes 集群。 </p><p>官方地址：<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a> </p></blockquote><blockquote><p><strong>二进制包</strong> </p><p>从 github 下载发行版的二进制包，手动部署每个组件，组成 Kubernetes 集群。Kubeadm 降低部署门槛，但屏蔽了很多细节，遇到问题很难排查。如果想更容易可控，推荐使用二进制包部署 Kubernetes 集群，虽然手动部署麻烦点，期间可以学习很多工作原理，也利于后期维护。 </p></blockquote><hr><p><strong>集群机器须知</strong></p><ul><li>集群间机器网络互通</li><li>禁止Swap交换</li></ul><h2 id="kubeadm部署"><a href="#kubeadm部署" class="headerlink" title="kubeadm部署"></a>kubeadm部署</h2><p><code>kubeadm</code>是官方社区推出的一个用于快速部署 kubernetes 集群的工具，这个工具能通过两条指令完成一个kubernetes集群的部署：</p><ol><li>创建一个Master节点<code>kubeadm init</code></li><li>将Node节点加入到当前集群中<code>kubeadm join &lt;Master 节点的 IP 和端口 &gt;</code></li></ol><blockquote><p>详细步骤：</p></blockquote><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><table><thead><tr><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>master</td><td>192.168.58.11</td></tr><tr><td>node1</td><td>192.168.58.12</td></tr><tr><td>node2</td><td>192.168.58.13</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line">sed -i <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config  <span class="comment"># 永久</span></span><br><span class="line">setenforce 0  <span class="comment"># 临时</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭swap</span></span><br><span class="line">swapoff -a  <span class="comment"># 临时</span></span><br><span class="line">sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab    <span class="comment"># 永久</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据规划设置主机名</span></span><br><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在master添加hosts</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.58.11 k8smaster</span></span><br><span class="line"><span class="string">192.168.58.12 k8snode1</span></span><br><span class="line"><span class="string">192.168.58.13 k8snode2</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将桥接的IPv4流量传递到iptables的链</span></span><br><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl --system  <span class="comment"># 生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间同步</span></span><br><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></table></figure><h3 id="所有节点安装Docker-kubeadm-kubelet"><a href="#所有节点安装Docker-kubeadm-kubelet" class="headerlink" title="所有节点安装Docker/kubeadm/kubelet"></a>所有节点安装Docker/kubeadm/kubelet</h3><blockquote><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p></blockquote><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">$ yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line">$ docker --version</span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure><p>镜像加速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://reg-mirror.qiniu.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="kubeadm-kubelet-kubectl"><a href="#kubeadm-kubelet-kubectl" class="headerlink" title="kubeadm,kubelet,kubectl"></a>kubeadm,kubelet,kubectl</h4><p>国内镜像下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0</span><br><span class="line">$ systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h3 id="部署Kubernetes-Master"><a href="#部署Kubernetes-Master" class="headerlink" title="部署Kubernetes Master"></a>部署Kubernetes Master</h3><p>在192.168.58.11（Master）执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.58.11 \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.18.0 \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><blockquote><p>由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址。</p><p>pod-network-cidr与service-cidr设置不同的网段即可，不可与本机相冲突。</p><p><font color="red"><strong>注意</strong>，只有一个核心是不能初始化的！！！</font></p></blockquote><p>这条命令就是拉取kubernetes的各个组件的镜像：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-16_21-08-35.png" alt="Snipaste_2020-11-16_21-08-35"></p><p><strong>Master初始化完成后由此提示</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-16_21-09-38.png" alt="Snipaste_2020-11-16_21-09-38"></p><p><strong>此时，你的集群还不能使用，上图中还有提示信息</strong></p><blockquote><p>To start using your cluster, you need to run the following as a regular user:</p></blockquote><p>你需要在Master执行一下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">$ sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="加入Kubernetes-Node"><a href="#加入Kubernetes-Node" class="headerlink" title="加入Kubernetes Node"></a>加入Kubernetes Node</h3><p>由Master初始化的信息可得知，Node加入Master集群需要执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.58.11:6443 --token bpx0wc.r7m0c9sp15cfu81r \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:3dd5733fa6ed0394a98b67c57fc512d6fe6776c7cb954a96673b24c8276cb885</span><br></pre></td></tr></table></figure><blockquote><p><font color="red">注意：不要复制我的token，从你的命令行中寻找！</font></p></blockquote><p><strong>两个node节点加入完成之后，在Master查看节点</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-16_21-17-38.png" alt="Snipaste_2020-11-16_21-17-38"></p><p>发现，他们状态都是<code>NotReady</code>。是因为还没有配置最后一步：网络！</p><h3 id="部署CNI网络插件"><a href="#部署CNI网络插件" class="headerlink" title="部署CNI网络插件"></a>部署CNI网络插件</h3><p>Master节点运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>默认镜像地址无法访问，sed命令修改为docker hub镜像仓库。</p><p><strong>查看是否完成</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-16_21-25-16.png" alt="Snipaste_2020-11-16_21-25-16"></p><h3 id="测试kubernetes集群"><a href="#测试kubernetes集群" class="headerlink" title="测试kubernetes集群"></a>测试kubernetes集群</h3><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment nginx --image=nginx</span><br><span class="line">$ kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure><p>访问ip:port，我们发现三台机器的这个端口都可以访问到nginx。</p><h2 id="二进制部署"><a href="#二进制部署" class="headerlink" title="二进制部署"></a>二进制部署</h2><p>略…</p><h1 id="kubectl命令行工具"><a href="#kubectl命令行工具" class="headerlink" title="kubectl命令行工具"></a><code>kubectl</code>命令行工具</h1><p>kubectl 是 Kubernetes 集群的命令行工具，通过 kubectl 能够<font color="red">对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。</font></p><blockquote><p><strong><code>kubectl </code>命令的语法</strong></p><p><code>kubectl [command] [type] [name] [flag]</code></p><ul><li><p><strong>comand</strong>：指定要对资源执行的操作，例如 create、get、describe 和 delete</p></li><li><p><strong>TYPE</strong>：指定资源类型，资源类型是大小写敏感的，开发者能够以单数、复数和缩略的形式。例如：</p><ul><li><code>kubectl get pod</code></li><li><code>kubectl get pods</code></li><li><code>kubectl get po</code></li></ul></li><li><p><strong>NAME</strong>：指定资源的名称，名称也大小写敏感的。如果省略名称，则会显示所有的资源， 例如: <code>kubectl get pods</code></p></li><li><p><strong>flags</strong>：指定可选的参数。例如，可用-s 或者–server 参数指定 Kubernetes API </p><p>server 的地址和端口。 </p></li></ul></blockquote><p><strong>基础命令</strong></p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>create</td><td>通过文件名或标准输入创建资源</td></tr><tr><td>expose</td><td>将一个资源公开为一个新的Service</td></tr><tr><td>run</td><td>在集群中运行一个特定的镜像</td></tr><tr><td>set</td><td>在对象上设置特定的功能</td></tr><tr><td>get</td><td>显示一个/多个资源</td></tr><tr><td>explain</td><td>文档参考资料</td></tr><tr><td>edit</td><td>使用默认的编辑器编辑一个资源</td></tr><tr><td>delete</td><td>通过文件名、标准输入、资源名称或标签选择器删除资源</td></tr></tbody></table><p><strong>部署和集群管理命令</strong></p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>rollout</td><td>管理资源的发布</td></tr><tr><td>rolling-update</td><td>对给定的复制控制器滚动更新</td></tr><tr><td>scale</td><td>扩容或缩容Pod数量，Deployment、ReplicaSet、RC或Job</td></tr><tr><td>autoscale</td><td>创建一个自动选择扩容或缩容并设置Pod数量</td></tr><tr><td>certificate</td><td>修改证书资源</td></tr><tr><td>cluster-info</td><td>显示集群信息</td></tr><tr><td>top</td><td>显示资源使用</td></tr><tr><td>cordon</td><td>标记节点不可调度</td></tr><tr><td>uncordon</td><td>标记节点可调度</td></tr><tr><td>drain</td><td>驱逐节点上的应用，准备下线维护</td></tr><tr><td>taint</td><td>修改节点taint标记</td></tr></tbody></table><p><strong>故障和调试命令</strong></p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>exec</td><td>执行命令到容器</td></tr></tbody></table><h1 id="kubernetes-集群YAML文件详解"><a href="#kubernetes-集群YAML文件详解" class="headerlink" title="kubernetes 集群YAML文件详解"></a>kubernetes 集群YAML文件详解</h1><p>k8s在启动资源时有诸多配置，全写在命令行里很不方便。所以可以通过yaml文件配置，在运行时只用指定一个yaml文件即可</p><blockquote><p>yaml书写格式</p><ul><li>使用空格做为缩进</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li>低版本缩进时不允许使用 Tab 键，只允许使用空格 </li><li>使用#标识注释，从这个字符一直到行尾，都会被解释器忽略</li></ul></blockquote><hr><p>在 k8s 中，一般使用 YAML 格式的文件来创建符合我们预期期望的 pod,这样的 YAML 文件称为<strong>资源清单</strong></p><h2 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a>常用字段</h2><p><font color="red"><strong>必须存在的属性</strong></font></p><table><thead><tr><th>参数名</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>version</td><td>String</td><td>k8s的API版本，通过<code>kubectl api-version</code>查询</td></tr><tr><td>kind</td><td>String</td><td>文件定义的资源类型和角色，比如：Pod</td></tr><tr><td>metadata</td><td>Object</td><td>元数据对象，固定值为<code>metadata</code></td></tr><tr><td>metadata.name</td><td>String</td><td>元数据对象的名字，有我们编写，比如命名Pod的名字</td></tr><tr><td>metadata.namespace</td><td>String</td><td>元数据对象的命名空间，自定义</td></tr><tr><td>Spec</td><td>Object</td><td>详细定义对象，固定值写Spec</td></tr><tr><td>spec.container[]</td><td>list</td><td>容器列表定义，多个容器</td></tr><tr><td>spec.container[].name</td><td>String</td><td>容器名</td></tr><tr><td>spec.container[].image</td><td>String</td><td>容器使用的镜像</td></tr></tbody></table><p><strong>创建NameSpace</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p><strong>创建Pod</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-containers</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br></pre></td></tr></table></figure><h2 id="快速编写yaml🔺"><a href="#快速编写yaml🔺" class="headerlink" title="快速编写yaml🔺"></a>快速编写yaml🔺</h2><h3 id="从启动资源命令中导出yaml"><a href="#从启动资源命令中导出yaml" class="headerlink" title="从启动资源命令中导出yaml"></a>从启动资源命令中导出yaml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment web --image=nginx -o yaml --dry-run &gt; xxx.yaml</span><br></pre></td></tr></table></figure><blockquote><p>如果不写<code>--dry-run</code>，Pod真会运行。写了则不会运行，只是导出模板</p></blockquote><h3 id="从正在运行的资源中导出yaml"><a href="#从正在运行的资源中导出yaml" class="headerlink" title="从正在运行的资源中导出yaml"></a>从正在运行的资源中导出yaml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deploy xxx -o=yaml --<span class="built_in">export</span> &gt; xxx.yaml</span><br></pre></td></tr></table></figure><blockquote><p>此方式导出的yaml会很详细，因为是已经部署好的版本的yaml</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Compose</title>
      <link href="2020/11/14/Compose/"/>
      <url>2020/11/14/Compose/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><p><code>Compose</code> 项目是 <strong>Docker 官方的开源项目</strong>，负责实现<font color="red">对Docker 容器集群的快速编排</font>，需要额外安装。从功能上看，跟 <code>OpenStack</code> 中的 <code>Heat</code> 十分类似。</p><p>其代码目前在 <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 上开源。</p><p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p><blockquote><p>官方介绍：</p><p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see <a href="https://docs.docker.com/compose/#features">the list of features</a>.</p><p>Compose works in all environments: production, staging, development, testing, as well as CI workflows. You can learn more about each case in <a href="https://docs.docker.com/compose/#common-use-cases">Common Use Cases</a>.</p><p>Using Compose is basically a three-step process:</p><ol><li>Define your app’s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</li><li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li><li>Run <code>docker-compose up</code> and Compose starts and runs your entire app.</li></ol><p>翻译：</p><p>Compose是用于定义和运行多容器Docker应用程序的工具。通过Compose，您可以<font color="red">使用YAML文件来配置应用程序的服务</font>。然后，使用一个命令，就可以<font color="red">从配置中创建并启动所有服务</font>。要了解有关Compose的所有功能的更多信息，请参阅<a href="https://docs.docker.com/compose/#features">功能列表</a>。</p><p>Compose可在所有环境中工作：生产，登台，开发，测试以及CI工作流。您可以在“<a href="https://docs.docker.com/compose/#common-use-cases">常见用例”中</a>了解有关每种情况的更多信息。</p><p><strong>使用Compose基本上是一个三步过程</strong>：</p><ol><li>使用定义您的应用环境，<font color="red"><code>Dockerfile</code></font>以便可以在任何地方复制。</li><li>定义组成应用程序的服务，<font color="red"><code>docker-compose.yml</code></font> 以便它们可以在隔离的环境中一起运行。<ol><li>配置文件中配置多个服务(<code>Services</code>)</li></ol></li><li>Run <font color="red"><code>docker-compose up</code></font>and Compose启动并运行您的整个应用程序。</li></ol></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p><code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p><p>使用<code>DockerCompose</code>可以简化我们的操作，例如：</p><p>一个<code>docker-compose.yml</code>看起来像这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">logvolume01:/var/log</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">logvolume01:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>同时部署了<code>web</code>和<code>redis</code>服务！</p><blockquote><p>实际生产环境不会直接采用docker的，需要采用docker-compose；如果是分布式多台服务器可能需要k8s。</p></blockquote><h2 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h2><p><code>Compose</code> 支持 Linux、macOS、Windows 10 三大平台。</p><p><code>Compose</code> 可以通过 Python 的包管理工具 <code>pip</code> 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。</p><p><code>Docker Desktop for Mac/Windows</code> 自带 <code>docker-compose</code> 二进制文件，安装 Docker 之后可以直接使用。</p><p><strong>验证安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose version</span><br><span class="line">docker-compose version 1.25.5, build 8a1c60f6</span><br><span class="line">docker-py version: 4.1.0</span><br><span class="line">CPython version: 3.7.5</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span><br></pre></td></tr></table></figure><h3 id="二进制包安装"><a href="#二进制包安装" class="headerlink" title="二进制包安装"></a>二进制包安装</h3><p>在 Linux 上的也安装十分简单，从 <a href="https://github.com/docker/compose/releases">官方 GitHub Release</a> 处直接下载编译好的二进制文件即可。</p><p>例如，在 Linux 64 位系统上直接下载对应的二进制包。</p><ol><li>下载二进制包</li><li>赋予二进制包的执行权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="PIP安装"><a href="#PIP安装" class="headerlink" title="PIP安装"></a>PIP安装</h3><blockquote><p><em>注：</em> <code>x86_64</code> 架构的 Linux 建议按照上边的方法下载二进制包进行安装，如果您计算机的架构是 <code>ARM</code> (例如，树莓派)，再使用 <code>pip</code> 安装。</p></blockquote><blockquote><p>既然说到架构，这里普及一下：</p><ul><li><code>X86</code>是Intel开发的一种32位指令集，早期Intel和amd的cpu都支持这种指令集</li><li><code>amd64</code>是CPU迈向64位的时候，由ADM率先制造出了兼容X86的CPU，AMD称之为amd64</li><li><code>x64</code>：当时因为兼容x86的CPU架构被amd率先开发，所以intel选择了设计一种全新的指令集x64，但是好像被坑了，后来在不得不在时机落后的情况下也开始支持了amd64指令集，但是换了个名字叫<code>X86_64</code>；</li><li><code>arm</code>：过去称作<strong>高级精简指令集机器</strong>，ARM处理器非常适用于<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E5%8B%95%E9%80%9A%E8%A8%8A">移动通信</a>领域，符合其主要设计目标为低成本、高性能、低耗电的特性。所以常用于手机，潜入设备(树莓派)。</li></ul><p>所以，<code>amd64</code>、<code>x64</code>、<code>X86_64</code>是一种东西。</p></blockquote><p>这种方式是将 Compose 当作一个 Python 应用来从 pip 源中安装。</p><p>执行安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install -U docker-compose</span><br></pre></td></tr></table></figure><p>可以看到类似如下输出，说明安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collecting docker-compose</span><br><span class="line">  Downloading docker-compose-1.25.5.tar.gz (149kB): 149kB downloaded</span><br><span class="line">...</span><br><span class="line">Successfully installed docker-compose cached-property requests texttable websocket-client docker-py dockerpty six enum34 backports.ssl-match-hostname ipaddress</span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>如果是二进制包方式安装的，删除二进制文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果是通过 <code>pip</code> 安装的，则执行如下命令即可删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure><h2 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h2><h3 id="命令对象与格式"><a href="#命令对象与格式" class="headerlink" title="命令对象与格式"></a>命令对象与格式</h3><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p><p><code>docker-compose</code> 命令的基本的使用格式是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose [-f&#x3D;&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><ul><li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li><li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li><li><code>--verbose</code> 输出更多调试信息。</li><li><code>-v, --version</code> 打印版本并退出。</li></ul><h3 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h3><h4 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h4><p>格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p><p>构建（重新构建）项目中的服务容器。</p><p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p><p>可以随时在项目目录下运行 <code>docker-compose build</code> 来重新构建服务。</p><p>选项包括：</p><ul><li><code>--force-rm</code> 删除构建过程中的临时容器。</li><li><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</li><li><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</li></ul><h4 id="config"><a href="#config" class="headerlink" title="config"></a><code>config</code></h4><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p><h4 id="down"><a href="#down" class="headerlink" title="down"></a><code>down</code></h4><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h4><p>进入指定的容器。</p><h4 id="help"><a href="#help" class="headerlink" title="help"></a><code>help</code></h4><p>获得一个命令的帮助。</p><h4 id="images"><a href="#images" class="headerlink" title="images"></a><code>images</code></h4><p>列出 Compose 文件中包含的镜像。</p><h4 id="logs"><a href="#logs" class="headerlink" title="logs"></a><code>logs</code></h4><p>格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p><p>查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。</p><p>该命令在调试问题的时候十分有用。</p><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h4><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。</p><p>选项：</p><ul><li><code>-q</code> 只打印容器的 ID 信息。</li></ul><h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a><code>restart</code></h4><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h4><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><h4 id="start"><a href="#start" class="headerlink" title="start"></a><code>start</code></h4><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><h4 id="stop"><a href="#stop" class="headerlink" title="stop"></a><code>stop</code></h4><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h4 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h4><p>查看各个服务容器内运行的进程。</p><h4 id="up🔺"><a href="#up🔺" class="headerlink" title="up🔺"></a><code>up</code>🔺</h4><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p><p>选项：</p><ul><li><code>-d</code> 在后台运行服务容器。</li><li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</li><li><code>--no-deps</code> 不启动服务所链接的容器。</li><li><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</li><li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</li><li><code>--no-build</code> 不自动构建缺失的服务镜像。</li><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h2 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h2><p>模板文件是使用 <code>Compose</code> 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。</p><p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">examples/web</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">myweb</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/data&quot;</span></span><br></pre></td></tr></table></figure><p><font color="red">注意每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</font></p><p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</p><p>每个指令的用法：<a href="https://yeasy.gitbook.io/docker_practice/compose/compose_file">https://yeasy.gitbook.io/docker_practice/compose/compose_file</a></p><ul><li><code>depends_on</code>：<a href="https://docs.docker.com/compose/compose-file/#depends_on">https://docs.docker.com/compose/compose-file/#depends_on</a></li></ul><h2 id="Compose中的环境变量"><a href="#Compose中的环境变量" class="headerlink" title="Compose中的环境变量"></a>Compose中的环境变量</h2><h3 id="在撰写文件替换环境变量"><a href="#在撰写文件替换环境变量" class="headerlink" title="在撰写文件替换环境变量"></a>在撰写文件替换环境变量</h3><p>可以在外壳中使用环境变量来填充Compose文件中的值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">&quot;webapp:$&#123;TAG&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>如果您有多个环境变量，则可以通过提供环境变量文件的路径来替换它们。默认情况下，该<code>docker-compose</code> 命令将<code>.env</code>在您运行该命令的目录中查找一个名为的文件。通过将文件作为参数，你可以存储在任何地方，并适当命名，例如<code>.env.ci</code>，<code>.env.dev</code>，<code>.env.prod</code>。使用以下<code>--env-file</code>选项完成文件路径的传递：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --env-file ./config/.env.dev up </span><br></pre></td></tr></table></figure><h3 id="在容器中设置环境变量"><a href="#在容器中设置环境变量" class="headerlink" title="在容器中设置环境变量"></a>在容器中设置环境变量</h3><p>您可以使用environment键在服务的容器中设置环境变量 ，就像 <code>docker run -e VARIABLE=VALUE ...</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEBUG=1</span></span><br></pre></td></tr></table></figure><h2 id="Compose网络"><a href="#Compose网络" class="headerlink" title="Compose网络"></a>Compose网络</h2><p>默认情况下，Compose为您的应用设置单个网络。为服务每个容器加入默认网络。</p><blockquote><p><strong>注意</strong></p><p>为应用程序的网络提供一个基于“项目名称”的名称，该名称基于其所在目录的名称。您可以使用<code>--project-name  flag</code>覆盖项目名称。</p></blockquote><p>例如，假设您的应用程序位于名为的目录中<code>myapp</code>，并且您的<code>docker-compose.yml</code>外观如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8001:5432&quot;</span></span><br></pre></td></tr></table></figure><p>运行时<code>docker-compose up</code>，将发生以下情况：</p><ol><li><code>myapp_default</code>创建一个名为的网络。</li><li>容器是使用<code>web</code>的配置创建的。它<code>myapp_default</code>以名称<code>web</code>加入网络 。</li><li>容器是使用<code>db</code>的配置创建的。它<code>myapp_default</code>以名称<code>db</code>加入网络 。</li></ol><p>现在，每个容器都可以查找主机名<code>web</code>或<code>db</code>获取相应容器的IP地址。例如，<code>web</code>的应用程序代码可以连接到URL<code>postgres://db:5432</code>并开始使用Postgres数据库。</p><p>要注意区分是很重要的<code>HOST_PORT</code>和<code>CONTAINER_PORT</code>。在上面的示例中，对于<code>db</code>，<code>HOST_PORT</code>is是<code>8001</code>，容器端口为 <code>5432</code>（postgres默认）。联网的服务到服务通信使用<code>CONTAINER_PORT</code>。当<code>HOST_PORT</code>定义，服务以及虫群外部访问。</p><p>在<code>web</code>容器内，您的连接字符串<code>db</code>将看起来像 <code>postgres://db:5432</code>，而在主机上，连接字符串将看起来像<code>postgres://&#123;DOCKER_IP&#125;:8001</code>。</p><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><h4 id="配置默认网络"><a href="#配置默认网络" class="headerlink" title="配置默认网络"></a>配置默认网络</h4><p>除了（或同时）指定自己的网络，您还可以通过在<code>networks</code>named下定义一个条目来更改应用程序范围的默认网络的设置<code>default</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="comment"># Use a custom driver</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">custom-driver-1</span></span><br></pre></td></tr></table></figure><h4 id="使用现有网络"><a href="#使用现有网络" class="headerlink" title="使用现有网络"></a>使用现有网络</h4><p>如果您希望容器加入现有网络，请使用以下<a href="https://docs.docker.com/compose/compose-file/compose-file-v2/#network-configuration-reference"><code>external</code>选项</a>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">my-pre-existing-network</span></span><br></pre></td></tr></table></figure><p><code>[projectname]_default</code>Compose不会尝试创建一个名为的网络，而是查找一个名为的网络<code>my-pre-existing-network</code>并将您的应用程序的容器连接到该网络。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><p><code>Compose</code> 可以很便捷的让 <code>Wordpress</code> 运行在一个独立的环境中。</p><h3 id="创建空文件夹"><a href="#创建空文件夹" class="headerlink" title="创建空文件夹"></a>创建空文件夹</h3><p>假设新建一个名为 <code>wordpress</code> 的文件夹，然后进入这个文件夹。</p><h3 id="创建-docker-compose-yml-文件"><a href="#创建-docker-compose-yml-文件" class="headerlink" title="创建 docker-compose.yml 文件"></a>创建 <code>docker-compose.yml</code> 文件</h3><p><a href="https://github.com/yeasy/docker_practice/blob/master/compose/demo/wordpress/docker-compose.yml"><code>docker-compose.yml</code></a> 文件将开启一个 <code>wordpress</code> 服务和一个独立的 <code>MySQL</code> 实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">db:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">     <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default_authentication_plugin=mysql_native_password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--collation-server=utf8mb4_unicode_ci</span>     </span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">       <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">wordpress:</span></span><br><span class="line">     <span class="attr">depends_on:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;8000:80&quot;</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span></span><br></pre></td></tr></table></figure><h3 id="构建并运行项目"><a href="#构建并运行项目" class="headerlink" title="构建并运行项目"></a>构建并运行项目</h3><p>运行 <code>docker-compose up -d</code> Compose 就会拉取镜像再创建我们所需要的镜像，然后启动 <code>wordpress</code> 和数据库容器。 接着浏览器访问 <code>127.0.0.1:8000</code> 端口就能看到 <code>WordPress</code> 安装界面了。</p><p><font color="red"></font></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice/</a></p><p><a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker网络</title>
      <link href="2020/11/13/Docker%E7%BD%91%E7%BB%9C/"/>
      <url>2020/11/13/Docker%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><blockquote><p>Docker 允许通过外部访问容器或容器互联的方式来提供网络服务。</p></blockquote><h2 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h2><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射。</p><ul><li>当使用 <code>-P</code> 标记时，Docker 会随机映射一个端口到<font color="red">**内部容器开放的网络端口(EXPOSE的端口)**。</font></li><li>当使用<code>-p</code>标记时，需要同时指定宿主机端口与容器端口之间的对应关系。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P nginx</span><br></pre></td></tr></table></figure><p>使用 <code>docker container ls</code> 可以看到，本地主机的 32769被映射到了容器的 80 端口。此时访问本机的 32769端口即可访问容器内 NGINX 默认页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES</span><br><span class="line">3dda28d1a931        nginx               <span class="string">&quot;/docker-entrypoint.…&quot;</span>   24 seconds ago      Up 23 seconds       0.0.0.0:32769-&gt;80/tcp   romantic_volhard</span><br></pre></td></tr></table></figure><blockquote><p><code>-p</code> 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 :</p></blockquote><ul><li><code>ip:hostPort:containerPort </code>：映射到指定地址的指定端口</li><li><code>ip::containerPort</code>：映射所有接口地址</li><li><code>hostPort:containerPort</code>：映射到指定地址的任意端口</li></ul><h3 id="指定映射分类"><a href="#指定映射分类" class="headerlink" title="指定映射分类"></a>指定映射分类</h3><h4 id="映射所有接口地址"><a href="#映射所有接口地址" class="headerlink" title="映射所有接口地址"></a>映射所有接口地址</h4><p>使用 <code>hostPort:containerPort</code> 格式本地的 80 端口映射到容器的 80 端口，可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 80:80 nginx:alpine</span><br></pre></td></tr></table></figure><p>此时默认会绑定本地所有接口上的所有地址。</p><h4 id="映射到指定地址的指定端口"><a href="#映射到指定地址的指定端口" class="headerlink" title="映射到指定地址的指定端口"></a>映射到指定地址的指定端口</h4><p>可以使用 <code>ip:hostPort:containerPort</code> 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1:80:80 nginx:alpine</span><br></pre></td></tr></table></figure><h4 id="映射到指定地址的任意端口"><a href="#映射到指定地址的任意端口" class="headerlink" title="映射到指定地址的任意端口"></a>映射到指定地址的任意端口</h4><p>使用 <code>ip::containerPort</code> 绑定 localhost 的任意端口到容器的 80 端口，本地主机会自动分配一个端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1::80 nginx:alpine</span><br></pre></td></tr></table></figure><p>还可以使用 <code>udp</code> 标记来指定 <code>udp</code> 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1:80:80/udp nginx:alpine</span><br></pre></td></tr></table></figure><p><strong>这里提到了UDP端口号，特此说明TCP、UDP都有端口号并互不影响。</strong></p><blockquote><p> 顺便提出端口号的范围可分为三种：</p><ul><li>Well-Known Ports（即公认端口号）：知名端口号的范围是：0-1023</li><li>Registered Ports（即注册端口）：注册端口号的范围是：1024-49151</li><li>Dynamic, private or ephemeral ports（即动态、私有或临时端口号）：这一段的范围是：49152–65535</li></ul></blockquote><h3 id="查看映射端口配置"><a href="#查看映射端口配置" class="headerlink" title="查看映射端口配置"></a>查看映射端口配置</h3><p>使用 <code>docker port</code> 来查看当前映射的端口配置，也可以查看到绑定的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker port containerId</span><br><span class="line">80/tcp -&gt; 0.0.0.0:80</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>容器有自己的内部网络和 ip 地址（使用 <code>docker inspect</code> 查看，Docker 还可以有一个可变的网络配置。）</li><li><code>-p</code> 标记可以多次使用来绑定多个端口</li></ul></blockquote><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-p 443:443 \</span><br><span class="line">nginx:alpine</span><br></pre></td></tr></table></figure><h2 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h2><p>如果你之前有 <code>Docker</code> 使用经验，你可能已经习惯了使用 <code>--link</code> 参数来使容器互联。</p><p><code>--link</code>方式使容器互联需要对双方容器都做出限制，不好操作。</p><p>随着 Docker 网络的完善，强烈建议大家将容器加入<font color="red"><strong>自定义的 Docker 网络来连接多个容器</strong></font>，而不是使用 <code>--link</code> 参数。</p><h3 id="新建网络"><a href="#新建网络" class="headerlink" title="新建网络"></a>新建网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create -d bridge my-net</span><br></pre></td></tr></table></figure><p><code>-d</code> 参数指定 Docker 网络类型，有 <code>bridge</code> <code>overlay</code>。其中 <code>overlay</code> 网络类型用于 <a href="">Swarm mode</a>，在本小节中你可以忽略它。</p><h3 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h3><p>运行一个容器并连接到新建的 <code>my-net</code> 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm --name busybox1 --network my-net busybox sh</span><br></pre></td></tr></table></figure><p>打开新的终端，再运行一个容器并加入到 <code>my-net</code> 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm --name busybox2 --network my-net busybox sh</span><br></pre></td></tr></table></figure><p>再打开一个新的终端查看容器信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESb47060aca56b        busybox             <span class="string">&quot;sh&quot;</span>                11 minutes ago      Up 11 minutes                           busybox28720575823ec        busybox             <span class="string">&quot;sh&quot;</span>                16 minutes ago      Up 16 minutes                           busybox1</span><br></pre></td></tr></table></figure><p>下面通过 <code>ping</code> 来证明 <code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><p>在 <code>busybox1</code> 容器输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># ping busybox2</span></span><br><span class="line">PING busybox2 (172.19.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.19.0.3: seq=0 ttl=64 time=0.072 ms</span><br><span class="line">64 bytes from 172.19.0.3: seq=1 ttl=64 time=0.118 ms</span><br></pre></td></tr></table></figure><p>用 ping 来测试连接 <code>busybox2</code> 容器，它会解析成 <code>172.19.0.3</code>。</p><p>同理在 <code>busybox2</code> 容器执行 <code>ping busybox1</code>，也会成功连接到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># ping busybox1</span></span><br><span class="line">PING busybox1 (172.19.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.064 ms</span><br><span class="line">64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.143 ms</span><br></pre></td></tr></table></figure><p>这样，<code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>如果你有多个容器之间需要互相连接，推荐使用Docker Compose</p><hr><h1 id="高级网络配置"><a href="#高级网络配置" class="headerlink" title="高级网络配置"></a>高级网络配置</h1><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机，<font color="red">所有不指定网络的容器都会使用此网卡（默认网卡）</font>。它会在挂载到它的网口之间进行转发。</p><p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://tools.ietf.org/html/rfc1918">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1/16</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p><blockquote><p><strong>注意</strong>：默认的<code>docker0</code>网络和自定义网络有一点不同，使用<code>docker0</code>网卡的容器不能实现互联。</p></blockquote><p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/hostos.png"></p><p>接下来的部分将介绍在一些场景中，Docker 所有的网络定制配置。以及通过 Linux 命令来调整、补充、甚至替换 Docker 默认的网络配置。</p><h2 id="快速配置指南"><a href="#快速配置指南" class="headerlink" title="快速配置指南"></a>快速配置指南</h2><p>最后这些选项只有在 <code>docker run</code> 执行时使用，因为它是针对容器的特性内容。</p><ul><li><code>-h HOSTNAME</code> 或 <code>--hostname=HOSTNAME</code> 配置容器主机名</li><li><del><code>--link=CONTAINER_NAME:ALIAS</code> 添加到另一个容器的连接</del></li><li><code>--net=bridge|none|container:NAME_or_ID|host</code> 配置容器的桥接模式</li><li><code>-p SPEC</code> 或 <code>--publish=SPEC</code> 映射容器端口到宿主主机</li><li><code>-P or --publish-all=true|false</code> 映射容器所有端口到宿主主机</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>创建网络</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create -d bridge --subnet 172.11.0.0/16 --gateway 172.11.0.1 mynet</span><br><span class="line">6ca441ff474f979f493774cf0c3c7379d5da03655e4da14bb8b5d80fe3e98d37</span><br></pre></td></tr></table></figure><p><strong>创建2个使用<code>mynet</code>的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name tomcat-mynet-1 --network=mynet tomcat</span><br><span class="line">89a4b49863d4bcd4468a32105df3f8e6f0cec529bcad12264b17a18e636dc8ed</span><br><span class="line">$ docker run -d --name tomcat-mynet-2 --network=mynet tomcat</span><br><span class="line">e594cdd21b422b85306cca3389ca56610dd812a78f02b9977e6d022fcfd792e2</span><br></pre></td></tr></table></figure><p><strong>查看<code>mynet</code>网络的使用情况</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network inspect mynet</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;Containers&quot;: &#123;</span><br><span class="line">    &quot;39483e5272d244662e19aab9a5acaf4f935de7d4e123295c1a114629fbc2837b&quot;: &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;tomcat-mynet-2&quot;,</span><br><span class="line">        &quot;EndpointID&quot;: &quot;868c73cf8b7b734a65837bf6eb6ed197c98a68b416f91ce7c2e7ea8f24cbba8d&quot;,</span><br><span class="line">        &quot;MacAddress&quot;: &quot;02:42:ac:0b:00:02&quot;,</span><br><span class="line">        &quot;IPv4Address&quot;: &quot;172.11.0.2/16&quot;,</span><br><span class="line">        &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;97cf9d5c3505d68546db70b67c65923103a05818243b00b6409f462515200136&quot;: &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;tomcat-mynet-1&quot;,</span><br><span class="line">        &quot;EndpointID&quot;: &quot;bf315a5c26ab09131c88acefb291652c507b8c04d51e678d7370e108771eec55&quot;,</span><br><span class="line">        &quot;MacAddress&quot;: &quot;02:42:ac:0b:00:03&quot;,</span><br><span class="line">        &quot;IPv4Address&quot;: &quot;172.11.0.3/16&quot;,</span><br><span class="line">        &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试自定义网络的容器互联</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it tomcat-mynet-1 ping tomcat-mynet-2</span><br><span class="line">PING tomcat-mynet-2 (172.11.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-mynet-2.mynet (172.11.0.2): icmp_seq=1 ttl=64 time=0.096 ms</span><br><span class="line">64 bytes from tomcat-mynet-2.mynet (172.11.0.2): icmp_seq=2 ttl=64 time=0.094 ms</span><br><span class="line">64 bytes from tomcat-mynet-2.mynet (172.11.0.2): icmp_seq=3 ttl=64 time=0.077 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-mynet-2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 31ms</span><br><span class="line">rtt min/avg/max/mdev = 0.077/0.089/0.096/0.008 ms</span><br><span class="line">$ docker <span class="built_in">exec</span> -it tomcat-mynet-2 ping tomcat-mynet-1</span><br><span class="line">PING tomcat-mynet-1 (172.11.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-mynet-1.mynet (172.11.0.3): icmp_seq=1 ttl=64 time=0.092 ms</span><br><span class="line">64 bytes from tomcat-mynet-1.mynet (172.11.0.3): icmp_seq=2 ttl=64 time=0.080 ms</span><br><span class="line">64 bytes from tomcat-mynet-1.mynet (172.11.0.3): icmp_seq=3 ttl=64 time=0.072 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-mynet-1 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 38ms</span><br><span class="line">rtt min/avg/max/mdev = 0.072/0.081/0.092/0.011 ms</span><br></pre></td></tr></table></figure><p><strong>创建使用默认网络的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name tomcat-docker0 tomcat</span><br><span class="line">e8408dbf5c1e3ddbe0adfee16ab9c8965f9889c55299e50ce1db381401f26c2a</span><br></pre></td></tr></table></figure><p><strong>测试不同网络的容器的连通性</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it tomcat-mynet-1 ping tomcat-docker0</span><br><span class="line">ping: tomcat-docker0: Name or service not known</span><br></pre></td></tr></table></figure><p>发现不同网络内的容器并不相通。这是为什么呢，看下图：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-08_16-39-40.png" alt="Snipaste_2020-11-08_16-39-40"></p><h3 id="网络打通"><a href="#网络打通" class="headerlink" title="网络打通"></a>网络打通</h3><p>解决办法：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-08_16-41-09.png" alt="Snipaste_2020-11-08_16-41-09"></p><p>原理：假如使<code>tomcat-mynet-1</code>连接到<code>tomcat-docker0</code>，则在<code>tomcat-mynet-1</code>已有网络的基础上再次添加一个docker0网络的IP。<font color="red"><strong>即一个容器多个IP</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network  connect bridge tomcat-mynet-1</span><br></pre></td></tr></table></figure><p>此时我们查看<code>tomcat-mynet-1</code>的网络信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect tomcat-mynet-1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&quot;Networks&quot;: &#123;</span><br><span class="line">               &quot;bridge&quot;: &#123;</span><br><span class="line">                   &quot;IPAMConfig&quot;: &#123;&#125;,</span><br><span class="line">                   &quot;Links&quot;: null,</span><br><span class="line">                   &quot;Aliases&quot;: [],</span><br><span class="line">                   &quot;NetworkID&quot;: &quot;fe5399aad1b445bf0dce36a7ed705e597714226a4872986a49a70aea9443e795&quot;,</span><br><span class="line">                   &quot;EndpointID&quot;: &quot;4781b0bb8330308ba0c4d2e64c11edd29ab03cc8d0afadcca0ae3279af7b95a3&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                   &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,</span><br><span class="line">                   &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                   &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                   &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">                   &quot;DriverOpts&quot;: &#123;&#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;mynet&quot;: &#123;</span><br><span class="line">                   &quot;IPAMConfig&quot;: null,</span><br><span class="line">                   &quot;Links&quot;: null,</span><br><span class="line">                   &quot;Aliases&quot;: [</span><br><span class="line">                       &quot;97cf9d5c3505&quot;</span><br><span class="line">                   ],</span><br><span class="line">                   &quot;NetworkID&quot;: &quot;b2c091bf96ebf3ea4ff0ed3427d36b83c31632d8b52aaf2b67afda26b2c54a5f&quot;,</span><br><span class="line">                   &quot;EndpointID&quot;: &quot;bf315a5c26ab09131c88acefb291652c507b8c04d51e678d7370e108771eec55&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.11.0.1&quot;,</span><br><span class="line">                   &quot;IPAddress&quot;: &quot;172.11.0.3&quot;,</span><br><span class="line">                   &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                   &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                   &quot;MacAddress&quot;: &quot;02:42:ac:0b:00:03&quot;,</span><br><span class="line">                   &quot;DriverOpts&quot;: null</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现此容器同时有2个IP：</p><ul><li>172.11.0.3</li><li>172.17.0.3</li></ul><p><del>正因为它也在网络<code>bridge</code>中，所以它能连通<code>tomcat-docker0</code></del>，发现也连不通，才想到默认网卡docker0==bridge是容器互联不支持的。</p><p>以下新建一个网络<code>mynet1</code>，创建容器<code>tomcat-mynet1-1</code>，并将容器<code>tomcat-mynet-1</code>加入网络<code>mynet1</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create --subnet 172.13.0.0 --gateway 172.13.0.1 mynet1</span><br><span class="line">invalid subnet: invalid CIDR address: 172.13.0.0</span><br><span class="line">$ docker network create --subnet 172.13.0.0/16 --gateway 172.13.0.1 mynet1</span><br><span class="line">00e7d460e27849646a4be5fe5f2773ac698f014377391ccb3a8ea637f09c3e49</span><br><span class="line">$ docker run --name tomcat-mynet1-1 -d --network=mynet1 tomcat</span><br><span class="line">219598c82425458a509294e3efdc5d4f1ac8088ae8edbcc67297da641cfe138e</span><br><span class="line">$ docker network connect mynet1 tomcat-mynet-1</span><br></pre></td></tr></table></figure><p><font color="red"><strong>测试网络打通</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it tomcat-mynet-1 ping tomcat-mynet1-1</span><br><span class="line">PING tomcat-mynet1-1 (172.13.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-mynet1-1.mynet1 (172.13.0.2): icmp_seq=1 ttl=64 time=0.140 ms</span><br><span class="line">64 bytes from tomcat-mynet1-1.mynet1 (172.13.0.2): icmp_seq=2 ttl=64 time=0.081 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-mynet1-1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 5ms</span><br><span class="line">rtt min/avg/max/mdev = 0.081/0.110/0.140/0.031 ms</span><br><span class="line">$ docker <span class="built_in">exec</span> -it tomcat-mynet-2 ping tomcat-mynet1-1</span><br><span class="line">ping: tomcat-mynet1-1: Name or service not known</span><br></pre></td></tr></table></figure><blockquote><p>结论：发现配置了网络<code>mynet1</code>的容器<code>tomcat-mynet-1</code>能连通<code>tomcat-mynet1-1</code>，而没有打通网络的容器<code>tomcat-mynet-2</code>则不行。<font color="red">这证明了我们的配置是正确的。原理：一个容器多个IP</font></p></blockquote><blockquote><p>注意：另外不使用的网络也可以通过<code>docker network prune</code>来清除。它不像数据卷占用大量空间，也不用经常在意。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker数据卷</title>
      <link href="2020/11/13/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
      <url>2020/11/13/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要数据卷"><a href="#为什么需要数据卷" class="headerlink" title="为什么需要数据卷"></a>为什么需要数据卷</h1><p>这得从 docker 容器的文件系统说起。出于效率等一系列原因，docker 容器的文件系统在宿主机上存在的方式很复杂，这会带来下面几个问题：</p><ul><li>不能在宿主机上很方便地访问容器中的文件。</li><li>无法在多个容器之间共享数据。</li><li><font color="red">当容器删除时，容器中产生的数据将丢失。</font></li></ul><p>这样比如说你启动了一个MySQL容器，之后添加的数据全在容器中，当某天容器被删除数据随之删除，并不能做到数据的持久化。</p><hr><p>为了解决这些问题，docker 引入了<strong>数据卷(volume) 机制</strong>。数据卷是存在于一个或多个容器中的特定<font color="red"><strong>文件或文件夹</strong></font>，这个文件或文件夹以独立于 docker 文件系统的形式存在于宿主机中。数据卷的最大特定是：<font color="red"><strong>其生存周期独立于容器的生存周期</strong></font></p><h1 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h1><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></blockquote><blockquote><p>注意：挂载数据卷时，分别可以是目录或文件，它只能包含两种可能：目录:目录；文件:文件</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-12_15-10-00.png" alt="s"></p><h2 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create my-vol</span><br></pre></td></tr></table></figure><p>查看所有的 <code>数据卷</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume ls</span><br><span class="line">DRIVER              VOLUME NAMElocal               my-vol</span><br></pre></td></tr></table></figure><p>在主机里使用以下命令可以查看指定 <code>数据卷</code> 的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume inspect my-vol</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/my-vol/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-vol&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="启动一个挂载数据卷的容器"><a href="#启动一个挂载数据卷的容器" class="headerlink" title="启动一个挂载数据卷的容器"></a>启动一个挂载数据卷的容器</h2><p>我们启动一个挂在数据卷的容器时一定要参照官方文档，以实现MySQL的持久化数据为目的来实现启动一个挂载数据卷的容器。</p><p>通过连接：<a href="https://hub.docker.com/_/mysql%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%9A">https://hub.docker.com/_/mysql中的内容：</a></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/mysql.png"></p><p>以上得知MySQL的数据存放在容器中的<code>/var/lib/mysql</code>目录中，这时我们可以将宿主机的一个目录和其绑定。具体有多种挂载方式：</p><ul><li>匿名挂载</li><li>具名挂载</li><li>指定目录挂载</li></ul><p>以指定目录挂载为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><h2 id="查看数据卷的具体信息"><a href="#查看数据卷的具体信息" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect some-mysql</span><br></pre></td></tr></table></figure><p>截取到数据卷的信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/my/own/datadir&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><h2 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume rm my-vol</span><br></pre></td></tr></table></figure><p><code>数据卷</code> 是被设计用来持久化数据的，<font color="red">它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 <code>数据卷</code>，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 <code>数据卷</code>。</font>如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 <code>docker rm -v</code> 这个命令。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/volume.png"></p><hr><p><font color="red"><strong>无主的数据卷可能会占据很多空间，要清理请使用以下命令</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume prune</span><br></pre></td></tr></table></figure><h1 id="数据卷挂载种类"><a href="#数据卷挂载种类" class="headerlink" title="数据卷挂载种类"></a>数据卷挂载种类</h1><h2 id="匿名挂载"><a href="#匿名挂载" class="headerlink" title="匿名挂载"></a>匿名挂载</h2><p>匿名挂载就是在数据卷挂载时不指定名称，直接输入要挂载的容器内的路径即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql1 -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>那么此容器的数据卷挂载到宿主机的哪了？</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect some-mysql1</span><br></pre></td></tr></table></figure><p>截取到数据卷的信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;8ca6908c31d8fdfe15bd9b2abad40e602d567980501cef921ea5437ae3df7bd6&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/8ca6908c31d8fdfe15bd9b2abad40e602d567980501cef921ea5437ae3df7bd6/_data&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><p>发现数据卷名为：<code>8ca6908c31d8fdfe15bd9b2abad40e602d567980501cef921ea5437ae3df7bd6</code>，挂载到了<code>/var/lib/docker/volumes/8ca6908c31d8fdfe15bd9b2abad40e602d567980501cef921ea5437ae3df7bd6/_data</code></p><h2 id="具名挂载"><a href="#具名挂载" class="headerlink" title="具名挂载"></a>具名挂载</h2><p>匿名挂载就是在数据卷挂载时指定数据卷名称(<strong>那么此时就不能输入宿主机路径了</strong>)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql2 -v mydata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>通过数据卷查看命令得到有名称的数据卷</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               8ca6908c31d8fdfe15bd9b2abad40e602d567980501cef921ea5437ae3df7bd6</span><br><span class="line"><span class="built_in">local</span>               mydata</span><br></pre></td></tr></table></figure><h2 id="指定目录挂载"><a href="#指定目录挂载" class="headerlink" title="指定目录挂载"></a>指定目录挂载</h2><p>手动指定宿主机的目录/文件和容器的目录/文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况在使用的，不建议大家使用匿名挂载</p><p>如何确定是匿名挂载还是具名挂载呢？</p><ul><li>-v 容器内路径         #匿名挂载</li><li>-v 卷名：容器内路径      #具名挂载</li><li>-v /宿主机路径：容器内路径   #指定路径挂载</li></ul><h1 id="数据卷权限"><a href="#数据卷权限" class="headerlink" title="数据卷权限"></a>数据卷权限</h1><p><strong>通过 <code>-v </code>容器内路径:ro rw 改变读写权限</strong></p><ul><li><code>ro</code>：readonly  #只读</li><li><code>rw</code>：readwrite #可读可写</li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro  nginx</span><br></pre></td></tr></table></figure><blockquote><p>只要看到ro就说明这个路径只能通过宿主机来改变，<font color="red">容器内部是无法操作的</font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建镜像之Dockerfile</title>
      <link href="2020/11/07/%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E4%B9%8BDockerfile/"/>
      <url>2020/11/07/%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E4%B9%8BDockerfile/</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>Docker通过从一个<code>Dockerfile</code>文本文件中读取指令来自动构建映像，该 文本文件按顺序包含构建给定映像所需的所有命令。<code>Dockerfile</code>遵循特定的格式和指令集，您可以在<a href="https://docs.docker.com/engine/reference/builder/">Dockerfile参考中</a>找到。</p><p>Docker映像由只读层组成，每个只读层代表一个Dockerfile指令。这些层是堆叠的，每个层都是上一层的变化的增量。考虑一下<code>Dockerfile</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> python /app/app.py</span></span><br></pre></td></tr></table></figure><p>每条指令创建一层：</p><ul><li><code>FROM</code>从<code>ubuntu:18.04</code>Docker映像创建一个图层。</li><li><code>COPY</code> 从Docker客户端的当前目录添加文件。</li><li><code>RUN</code>使用构建您的应用程序<code>make</code>。</li><li><code>CMD</code> 指定要在容器中运行的命令。</li></ul><p>运行图像并生成容器时，可以 在基础层之上添加一个新的<em>可写层</em>（“容器层”）。对运行中的容器所做的所有更改（例如写入新文件，修改现有文件和删除文件）都将写入此薄可写容器层。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><code>docker build</code>命令从一个构建的图像<code>Dockerfile</code>和一个<em>上下文</em>。构建的上下文是指定位置<code>PATH</code>或的文件集<code>URL</code>。这<code>PATH</code>是本地文件系统上的目录。该<code>URL</code>是一个Git仓库的位置。</p><p>上下文是递归处理的。因此，<code>PATH</code>包括任何子目录，并且<code>URL</code>包括存储库及其子模块。此示例显示了一个使用当前目录作为上下文的构建命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker build .</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon  6.51 MB</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>构建是由Docker守护程序而不是CLI运行的。生成过程要做的第一件事是将整个上下文（递归）发送到守护程序。在大多数情况下，<strong>最好从空目录开始作为上下文，并将Dockerfile保留在该目录中。仅添加构建Dockerfile所需的文件。</strong></p><blockquote><p><strong>警告</strong></p><p>不要用你的根目录下，<code>/</code>作为<code>PATH</code>因为它会导致生成到您的硬盘驱动器的全部内容传输到码头工人守护进程。</p></blockquote><p>要在构建上下文中使用文件，<code>Dockerfile</code>引用是指指令（例如，<code>COPY</code>指令）中指定的文件。要提高构建的性能，请通过将<code>.dockerignore</code>文件添加到上下文目录来排除文件和目录。有关如何<a href="https://docs.docker.com/engine/reference/builder/#dockerignore-file">创建<code>.dockerignore</code> 文件的信息，</a>请参阅此页面上的文档。</p><p>传统上，<code>Dockerfile</code>称为，<code>Dockerfile</code>并且位于上下文的根中。您可以使用<code>-f</code>标志with<code>docker build</code>指向文件系统中任意位置的Dockerfile。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -f &#x2F;path&#x2F;to&#x2F;a&#x2F;Dockerfile .</span><br></pre></td></tr></table></figure><p>如果构建成功，则可以指定存储新映像的存储库和标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t shykes&#x2F;myapp .</span><br></pre></td></tr></table></figure><p>要在构建后将映像标记到多个存储库中，请在<code>-t</code>运行<code>build</code>命令时添加多个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t shykes&#x2F;myapp:1.0.2 -t shykes&#x2F;myapp:latest .</span><br></pre></td></tr></table></figure><p>在Docker守护程序运行中的指令之前<code>Dockerfile</code>，它会对进行初步验证，<code>Dockerfile</code>如果语法不正确，则返回错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t test&#x2F;myapp .</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Error response from daemon: Unknown instruction: RUNCMD</span><br></pre></td></tr></table></figure><p>Docker守护程序以<code>Dockerfile</code>一对一的方式运行指令，如有必要，将每条指令的结果提交到新映像，然后最终输出新映像的ID。Docker守护程序将自动清理您发送的上下文。</p><p><strong>请注意，每条指令都是独立运行的，并会导致创建新映像-因此<code>RUN cd /tmp</code>对下一条指令不会有任何影响。</strong></p><p>Docker将尽可能重用中间映像（缓存），以<code>docker build</code>显着加速该过程。这由<code>Using cache</code>控制台输出中的消息指示。（有关更多信息，请参见<a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/"><code>Dockerfile</code>最佳做法指南</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t svendowideit&#x2F;ambassador .</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon 15.36 kB</span><br><span class="line">Step 1&#x2F;4 : FROM alpine:3.2</span><br><span class="line"> ---&gt; 31f630c65071</span><br><span class="line">Step 2&#x2F;4 : MAINTAINER SvenDowideit@home.org.au</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 2a1c91448f5f</span><br><span class="line">Step 3&#x2F;4 : RUN apk update &amp;&amp;      apk add socat &amp;&amp;        rm -r &#x2F;var&#x2F;cache&#x2F;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 21ed6e7fbb73</span><br><span class="line">Step 4&#x2F;4 : CMD env | grep _TCP&#x3D; | (sed &#39;s&#x2F;.*_PORT_\([0-9]*\)_TCP&#x3D;tcp:\&#x2F;\&#x2F;\(.*\):\(.*\)&#x2F;socat -t 100000000 TCP4-LISTEN:\1,fork,reuseaddr TCP4:\2:\3 \&amp;&#x2F;&#39; &amp;&amp; echo wait) | sh</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 7ea8aef582cc</span><br><span class="line">Successfully built 7ea8aef582cc</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-07_11-36-19.png" alt="Snipaste_2020-11-07_11-36-19"></p><ul><li><code>CMD</code>：指定容器启动时要运行的命令，只有最后一个生效，可以被替代</li><li><code>ENTRYPOINT</code>：指定容器启动时要运行的命令，可以追加命令</li><li><code>COPY</code>：拷贝宿主机文件到镜像</li><li><code>ENV</code>：构建时设置环境变量</li></ul><hr><blockquote><p><strong><code>ENTRYPOINT</code>与<code>CMD</code></strong></p></blockquote><p><strong>CMD</strong></p><p>当Dockerfile中使用CMD时，镜像在ｒｕｎ成容器时，cmd会被执行，但是当使用docker run命令执行镜像时如果手动加入执行命令(docker run xxx ls -al)则CMD的命令会被覆盖，不会执行。</p><p>当Dockerfile中使用ENTRYPOINT时，镜像在ｒｕｎ成容器时，ENTRYPOINT会被执行，但是当使用docker run命令执行镜像时如果手动加入执行命令(docker run xxx -l)则新写的命令会被追加到ENTRYPOINT命令之后。</p><table><thead><tr><th>Dockerfile/(CMD/ENTRYPOINT)</th><th>docker run xxx -l</th><th>docker run xxx ls -al</th></tr></thead><tbody><tr><td>CMD [“ls”,”-a”]</td><td>错误</td><td>ls -al</td></tr><tr><td>ENTRYPOINT [“ls”,”-a”]</td><td>ls -al</td><td>ls -a -al（错误）</td></tr></tbody></table><h2 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h2><ol><li>编写<code>Dockerfile</code></li><li>docker build构建镜像</li><li>docker run运行</li><li>docker push到xxx</li></ol><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="jdk镜像"><a href="#jdk镜像" class="headerlink" title="jdk镜像"></a>jdk镜像</h3><p>虽然有官方的jdk，但是为了展示构建，这里在centos的基础上构建jdk：</p><p><strong>1. 创建<code>Dockerfile</code>，内容为：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> xxx&lt;xxx@xxx.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install wget</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/java &amp;&amp; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/java &amp;&amp; wget -P /usr/<span class="built_in">local</span>/java https://repo.huaweicloud.com/java/jdk/11.0.2+9/jdk-11.0.2_linux-x64_bin.tar.gz &amp;&amp; tar -zxvf *.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk-<span class="number">11.0</span>.<span class="number">2</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>2. 构建-</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myjdk:1.0 .</span><br></pre></td></tr></table></figure><p><strong>3. 运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it myjdk:1.0</span><br></pre></td></tr></table></figure><h2 id="Push-Docker-Hub"><a href="#Push-Docker-Hub" class="headerlink" title="Push Docker Hub"></a>Push Docker Hub</h2><ol><li>创建账号</li><li><code>dockr login -u xxx</code></li><li><code>docker push [OPTIONS] NAME[:TAG]  </code></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让别人访问到你的本地项目-内网穿透</title>
      <link href="2020/10/21/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%88%AB%E4%BA%BA%E8%AE%BF%E9%97%AE%E5%88%B0%E4%BD%A0%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>2020/10/21/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%88%AB%E4%BA%BA%E8%AE%BF%E9%97%AE%E5%88%B0%E4%BD%A0%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先说下原始需求。众所周知，IPv4 网络地址数量非常有限，大约只有 43 亿个地址，全球互联网发展到如今的程度，显然不可能每台设备都分配到 IPv4 地址。</p><p>那现在家庭宽带是怎么连接网络的呢？这里一般会使用 NAT（Network Address Translation，网络地址转换）在一个 IPv4 地址内部扩展出一个内部网络，使这个内部网络可以正常连接到互联网。此时内部设备可以正常访问全球 IPv4 地址（即公网地址），但是外部的设备只能找到这个内部网络共用的全球 IPv4 地址，而没法找到经过 NAT 之后的内部设备地址。</p><p>考虑到大部分用户的主要需求是获取互联网上的各种资源，并没有对外提供服务的需求，现在国内运营商在大部分城市默认已经不会给家庭宽带用户动态分配公网地址，而是换成了一层或多层 NAT 后的内网地址。并且一般用户发送数据的需求远小于获取数据的需求，所以家庭宽带的上下行带宽一般是不对等的，例如某地电信宽带 500M 下行带宽对应的上行带宽只有 30M。</p><p>此时，对于==一些有远程连接、获取 NAS 文件==，或者临时调试服务需求的用户就不太友好了。</p><p>有的电信网络是可以打客服申请公网IP的，但是家庭宽带它限制了大部分常用的端口。</p><p>内网穿透工具就是为了解决上述的没有公网 IP 的问题的。</p><p>顾名思义，就是让你在公网环境下能访问到你的本地网络(本地需联网)。</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>家里部署了一个博客地址，想从外面的网络直接访问到博客，但是由于没有公网IP，所以得另寻他路-内网穿透。虽说是内网，但是你家的网络也必须联网的。</p><h1 id="frp简介"><a href="#frp简介" class="headerlink" title="frp简介"></a>frp简介</h1><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议</p><p>名称其实就是使用了 Fast Reverse Proxy 的首字母缩写。</p><p>简单来说，就是可以随时随地通过<strong>有公网 IP 的服务器</strong>中转连接到<strong>运行 frpc 程序的任意机器的任意端口</strong>。</p><p><a href="https://gofrp.org/docs/">frp官网中文文档地址</a></p><h2 id="前置条件🔺"><a href="#前置条件🔺" class="headerlink" title="前置条件🔺"></a>前置条件🔺</h2><ul><li>具有公网IP的云服务器</li><li>家庭网络，能联网</li><li><a href="https://github.com/fatedier/frp/releases">项目frp</a></li><li>一个解析到云服务器的域名(==访问web服务需要==，其余不需要)</li></ul><h2 id="frp安装"><a href="#frp安装" class="headerlink" title="frp安装"></a>frp安装</h2><p><a href="https://gofrp.org/docs/setup/">https://gofrp.org/docs/setup/</a></p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><h5 id="通过-SSH-访问内网机器"><a href="#通过-SSH-访问内网机器" class="headerlink" title="通过 SSH 访问内网机器"></a><a href="https://gofrp.org/docs/examples/ssh/">通过 SSH 访问内网机器</a></h5><h5 id="通过自定义域名访问内网的-Web-服务"><a href="#通过自定义域名访问内网的-Web-服务" class="headerlink" title="通过自定义域名访问内网的 Web 服务"></a><a href="https://gofrp.org/docs/examples/vhost-http/">通过自定义域名访问内网的 Web 服务</a></h5><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>其他的内网穿透还有一写：</p><ul><li><a href="https://github.com/ehang-io/nps">nps</a>：Github开源</li><li><a href="http://www.ngrok.cc/">Ngfork</a>：付费，有免费版本</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狂神说ElasticSearch 7.x笔记（纯手敲）</title>
      <link href="2020/10/18/%E7%8B%82%E7%A5%9E%E8%AF%B4ElasticSearch-7-x%E7%AC%94%E8%AE%B0%EF%BC%88%E7%BA%AF%E6%89%8B%E6%95%B2%EF%BC%89/"/>
      <url>2020/10/18/%E7%8B%82%E7%A5%9E%E8%AF%B4ElasticSearch-7-x%E7%AC%94%E8%AE%B0%EF%BC%88%E7%BA%AF%E6%89%8B%E6%95%B2%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="" alt="下载"></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>此文章是up主-<strong>遇见狂神说</strong>的资料，将他的资料拉取在这是为了更好的查找资料。</p><p>这是大神的讲解视频：<a href="https://www.bilibili.com/video/BV17a4y1x7zq?p=1">https://www.bilibili.com/video/BV17a4y1x7zq?p=1</a></p><h1 id="狂神聊ElasticSearch-初级阶段"><a href="#狂神聊ElasticSearch-初级阶段" class="headerlink" title="狂神聊ElasticSearch(初级阶段)"></a>狂神聊ElasticSearch(初级阶段)</h1><p>E L K</p><p>版本:Elasticsearch7.6.1 (全网最新的)</p><p>6.X 和 7.X 区别十分大(原生API,RestFul高级)</p><blockquote><p>我们要讲解什么?</p></blockquote><p>SQL: like查询%狂神说%,如果是大数据,就十分慢!索引!</p><p>Elasticsearch:搜索(百度,github,淘宝电商!)</p><ol><li>聊一个人</li><li>货比三家</li><li>安装</li><li>生态圈</li><li>分词器 ik</li><li>RestFul操作 ES</li><li>CRUD</li><li>SpringBoot 集成 ElasticSearch(从原理分析!)</li><li>爬虫爬取数据(京东)</li><li>实战,模拟全文检索!</li></ol><blockquote><p>以后你只要需要用到搜索,就可以用ES!(大数据量的情况下使用!)</p></blockquote><p>学了这个就不需要用MySQL来查了</p><h1 id="聊聊DougCutting"><a href="#聊聊DougCutting" class="headerlink" title="聊聊DougCutting"></a>聊聊DougCutting</h1><p>为什么要讲这个人,后面要聊大数据</p><blockquote><p>本故事内容来自公众号：新枣课堂</p></blockquote><p>1998年9月4号,google公司在美国硅谷成立.正如大家所知,它是一家<strong>搜索</strong>引擎起家的公司</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610550313.png" alt="1596610550313"></p><p>无独有偶,一位名叫DougCutting的美国工程师,也迷上了搜索引擎.他做了一个用于文本搜索的函数库(姑且理解为软件的功能组件),命名为Lucene.</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610568104.png" alt="1596610568104"></p><p>Lucene使用Java写的,目标是为各种中小型应用软件加入全文检索功能.因为好用而且开源(代码公开),非常受程序员们稀罕)</p><p>在这个过程中,google确实找到了不少好的办法,并且无私地分享了出来.</p><p>开源是一种精神!</p><p>2003年,google发表了一篇技术学术论文,公开介绍了自己的谷歌文件系统GFS(google File System).这是google公司为了存储海量搜素数据而设计的专用文件系统</p><p>第二年,2004年,Doug Cutting基于google的GFS论文,实现了分布式文件存储系统,并将它命名为NDFS(Nutch Distributed File System)</p><p>还是2004年,google又发表了一篇技术学术论文,介绍自己的MapReduce编程模型.这个编程模型,用于大规模数据集(大于1TB)的并行分析运算.</p><p>2005年,Doug Cutting 又基于MapReduce,在Nutch搜索引擎实现了该功能.</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610581999.png" alt="1596610581999"></p><p>2006年,当时依然很厉害的Yahoo(雅虎)公司,招安了Doug Cutting</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610607769.png" alt="1596610607769"></p><p>截图</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610720399.png" alt="1596610720399"></p><p>我们继续往下说.</p><p>还是2006年,google有发表论文了</p><p>这次,他们介绍自己的BigTable,这是一种分布式的数据存储系统,一种用来处理海量数据的非关系型数据库.</p><p>Doug Cutting 当然没有放过,在自己的hadoop系统里面,引入了BigTable,并命名为HBase.</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610829469.png" alt="1596610829469"></p><p>好吧,反正就是紧跟Google时代步伐,你出什么,我学什么</p><p>所有,Hadoop的核心部分,基本上都有Google的影子.</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596610891867.png" alt="1596610891867"></p><p>2008年1月,Hadoop成功上位,成为Apache基金会的顶级项目.</p><p>同年2月,Yahoo宣布建成了一个拥有1W个内核的Hadoop集群,并将自己的搜索引擎产品部署在上面.</p><p>7月,Hadoop打破世界纪录,成为最快排序1TB数据的系统,用时209秒.</p><h1 id="Elasticsearch概述"><a href="#Elasticsearch概述" class="headerlink" title="Elasticsearch概述"></a>Elasticsearch概述</h1><p>elasticsearch,简称为es,es是一个开源的扩展的分布式全文检索引擎,他可以近乎实时的存储,检索数据;本身扩展性很好,可以扩展到上百台服务器,处理PB级别(大数据时代)的数据.es也使用Java并发使用Lucene作为其核心来实现所有索引和搜索的功能,但是它的目的是通过简单的RESTful API 来隐藏Lucene的复杂性,从而让全文搜索变得简单.</p><p>据国际权威的数据库产品评测机构DB Engines的统计,在2016年1月,ElasticSearch已超过Solr等,成为排名第一的搜索引擎类应用</p><blockquote><p>历史</p></blockquote><p>多年前,一个叫做shay banon的刚结婚不久的失业开发者,由于妻子要去伦敦学习厨师,他便跟着去了.在他找工作的过程中,为了给妻子构建一个食谱的搜索引擎,他开始构建一个早期版本的Lucene</p><p>直接 基于Lucene工作会比较困难,所以Shay开始抽象Lucene代码以便Java程序员可以在应用中添加搜索功能.他发布了他的第一个开源项目,叫做”compass” 后来Shay找到一份工作,这个工作处在高性能和内存数据网络的分布式环境中,因此高性能的,实时的,分布式的搜索引擎也是理所当然需要的.然后他决定重写Compass库,使其成为一个独立的服务叫做Elasticsearch.第一个公开版本出现在2010年2月,在那之后Elasticsearch已经成为Github上最受欢迎的项目之一,代码贡献者超过300人.一家主营Elasticsearch的公司就此成立,他们一边提供商业支持,一边开发新功能,不过Elasticsearch将永远开源且对所有人可用 Shay的妻子依然等待着他的食谱搜索…….</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/03-elasticsearch-%E6%A6%82%E8%BF%B0.assets/1597974189393.png" alt="1597974189393"></p><p>谁在使用</p><ol><li>维基百科(百度百科,全文高亮,排序搜素推荐,权重,百度!)</li><li>The Guardian</li><li>Stack Overflow(国外的程序异常处理网站)IT 问题,程序的报错,提交上去,有人会跟你讨论和回答</li><li>Github</li><li>电商网站 淘宝京东</li><li>日志数据分析,logstash采集日志,ES进行复杂的数据分析,ELK技术,elasticsearch+logstach+kibana</li><li>商品价格监控网站,用户设定</li></ol><h1 id="Elasticsearch和Solr差别"><a href="#Elasticsearch和Solr差别" class="headerlink" title="Elasticsearch和Solr差别"></a>Elasticsearch和Solr差别</h1><p>Elasticsearch是一个实时分布式搜索和分析引擎.它让你以前所未有的速度处理大数据成为可能. 维基百科使用它提供全文搜索并高亮关键字,以及输入实时搜索</p><p>Solr简介 Solr是Apache下的一个顶级开源项目,采用Java开发,它是基于Lucene的全文搜索服务器.solr提供了比Lucene更为丰富的查询语言,同时实现了可配置,可扩展,并对索引,搜索性能进行优化 他可以独立运行,运行在tomcat ,jety等这些Servlet容器中 solr对外提供类似于Web-server的API接口</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596613190316.png" alt="1596613190316"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596613206055.png" alt="1596613206055"></p><p>随着数据量的增加,solr的搜索</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596613233807.png" alt="1596613233807"></p><p>50倍的效率</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596613255957.png" alt="1596613255957"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597974203192.png" alt="1597974203192"></p><h2 id="ElasticSearch-vs-Solr-总结"><a href="#ElasticSearch-vs-Solr-总结" class="headerlink" title="ElasticSearch vs Solr 总结"></a>ElasticSearch vs Solr 总结</h2><ol><li>es基本是==开箱即用==(解压就可以用了!),非常简单.solr安装略微复杂一丢丢!</li><li>Solr利用Zookeeper进行分布式管理,而==Elasticsearch自身带有分布式协调管理功能==.</li><li>solr支持更多格式的数据,比如JSON,XML,CSV, 而elasticsearch仅仅支持json文件格式</li><li>Solr官网提供的功能很多,而elasticsearch本身更注重核心功能,高级功能多有第三方插件提供,例如图形化界面需要kibana友好质层支撑</li><li>Solr查询块,但更新索引时慢(即插入删除慢),用于电商等查询多的应用;<ul><li>ES建立索引块(即查询慢),即==实时性查询快==,用于facebook新浪等搜索.</li><li>Solr是传统搜索应用的有力解决方案,但Elasticsearch更适用于新兴的实时搜索应用.</li></ul></li><li>Solr比较成熟,有一个更大,更成熟的用户,开发好贡献者社区,而Elasticsearch相对开发维护者较少,更新太快,==学习使用成本较高==.</li></ol><h1 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="Elasticsearch安装"></a>Elasticsearch安装</h1><blockquote><p>声明:JDK1.8, 最低要求 , Elasticsearch客户端,界面工具!</p></blockquote><p><strong>Java开发,elasticsearch的版本和我们之后对应的Java的核心jar包! 版本对应! JDK环境是正常的</strong></p><p><strong>这里一定要保证</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596614089583.png" alt="1596614089583"></p><p>下载</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596614104028.png" alt="1596614104028"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596614119890.png" alt="1596614119890"></p><p>一定要在服务器上面搭建</p><p>下载地址:<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>官网下载巨慢,翻墙,网盘中下载即可</p><p>华为云: <a href="https://mirrors.huaweicloud.com/elasticsearch/7.6.2/">https://mirrors.huaweicloud.com/elasticsearch/7.6.2/</a></p><p>我们学习的话Window和Linux都可以学习 ==我们这里现在window下学习==</p><p>ELK三剑客,解压即用!(web项目! 前端环境! npm 下载依赖)</p><p>Node.js python2</p><blockquote><p>window下安装!</p></blockquote><ol><li>elasticSearch</li><li>elasticSearch Head：一个前端项目</li><li>kibana</li></ol><p>过程：略</p><h1 id="ES核心概念理解"><a href="#ES核心概念理解" class="headerlink" title="ES核心概念理解"></a>ES核心概念理解</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在前面的学习中,我们掌握了es是什么,同时也把es的服务已经安装启动,那么es是如何去存储数据,数据结构是什么,又是如何实现搜索的呢?我们先来聊聊Elasticsearch的相关概念吧!</p><p><strong>集群,节点,索引,类型,文档,分片,映射</strong>是什么</p><blockquote><p>elasticsearch是面向文档的,关系行数据库和elasticsearch客观的对比! 一切都是json</p></blockquote><table><thead><tr><th>RelationalDB</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库(database)</td><td>索引(indices)</td></tr><tr><td>表(tables)</td><td>types(7版本以及之后会被抛弃，默认_doc)</td></tr><tr><td>行(rows)</td><td>documents</td></tr><tr><td>字段(columns)</td><td>fields</td></tr></tbody></table><p>面向文档 面向文档 面向文档 <del>~</del></p><p>elasticsearch(集群)中可以包含多个索引(数据库),每个索引中可以包含多个类型(表),每个类型先又包含多个文档(行),每个文档中又包含多个字段(列).</p><h2 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h2><p>elasticsearch在后台吧每个<strong>索引划分成多个分片</strong>,每个分片可以在集群中的不同服务器间迁移</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/07-elasticsearch-es%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3.assets/1596629957996.png" alt="1596629957996"></p><h2 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计"></a>逻辑设计</h2><p>一个索引类型中,包含多个文档,比如所文档1,文档2.当我们索引一篇文章时,可以通过这样的一各顺序找到它:索引&gt;类型</p><p><code>&gt;</code>文档id,通过这个组合我们就能索引到某个具体的文档. 注意: id不必是整数,实际上他是一个字符串.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文档</span><br></pre></td></tr></table></figure><table><thead><tr><th>user</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>zhasna</td><td>18</td></tr><tr><td>2</td><td>kaugshen</td><td>23</td></tr><tr><td>3</td><td></td><td></td></tr></tbody></table><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597974203192.png" alt="1597974203192"></p><p>之前说elasticsearch是面向文档的,name就也为这索引和搜索数据的最小单位是文档,elasticsearch中,文档有几个重要属性:</p><ul><li><p>自我包含,一篇文档同时包含字段和对应值,也就是同时包含key:value!</p></li><li><p>可以是层次型的,一个文档中包含文档,复杂的逻辑实体就是这么来的!</p></li><li><p>灵活的结构,文档不依赖预先定义的模式,我们知道关系型数据库中,要提前定义字段才能使用,在elasticsearch中,对于字段是非常灵活的,有时候,我们可以忽略该字段,或者动态的添加一个新的字段.</p><p>尽管我们可以随意的新增或者忽略某个字段,但是,每个字段的类型非常重要,比如一个年龄字段类型,可以是字符串也可以是整型.因为elasticsearch会保存字段和类型之间的映射及其他的设置.这种映射具体到每个映射的每种类型,这也是为什么在elasticsearch中,类型有时候也称为映射类型.</p></li></ul><blockquote><p>类型</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596630612189.png" alt="1596630612189"></p><p>类型是文档的逻辑容器,就像关系型数据库一样,表格是行的容器.类型中对于字段的定义称为映射,比如name映射为字符串类型.我们说文档是无模式的,他们不需要拥有映射中所定义的所有字段,比如新增一个字段,那么elasticsearch是怎么做的呢?</p><p>elasticsearch会自动的将新的字段加入映射,但是这个字段的不确定它是什么类型,elasticsearch就开始猜,如果这个值是18,那么elasticsearch会认为他是整型.但是elasticsearch也可能猜不对,所有最安全的方式就是提前定义好所需要的映射,这点跟关系型数据库殊途同归了,先定义好字段,然后在使用,别整什么幺蛾子.</p><blockquote><p>索引</p></blockquote><p><strong>就是数据库</strong></p><p>索引是映射类型的容器,elasticsearch中的索引是一个非常大的文档集合.索引存储了映射类型字段和其他设置,然后他们呗存储到了各个分片上了.我们来研究下分片是如何工作的.</p><h3 id="物理设计-节点和分片-如何工作"><a href="#物理设计-节点和分片-如何工作" class="headerlink" title="物理设计: 节点和分片 如何工作"></a>物理设计: 节点和分片 如何工作</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596630840364.png" alt="1596630840364"></p><p>一个集群至少要有一个节点,儿一个节点就是一个elasticsearch进程,节点可以有多个索引默认的,如果你创建索引,那么索引将会有5个分片(primary shard,又称主分片) 构成的,每个主分片会有一个副本(replica shard,又称复制分片)</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/07-elasticsearch-es%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3.assets/1596630793639.png" alt="1596630793639"></p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/07-elasticsearch-es%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3.assets/1596630870602.png" alt="1596630870602"></p><blockquote><p>倒排索引</p></blockquote><p>elasticsearch使用的是一种称为倒排索引的结构,采用Lucene倒排索引作为底层.这种结构适用于快速的全文搜索,一个索引由文档中所有不重复的列表构成,对于每一个词,都有一个包含它的文档列表.例如,现在有两个文档,每个文档包含如下内容.</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/07-elasticsearch-es%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3.assets/1596631073200.png" alt="1596631073200"></p><p>为了创建倒排索引,我们首先要将每个文档拆分成独立的词(或称为词条或者tokens),然后创建一个包含所有不重复的词条的排序列表,然后列出每个词条出现在哪个文档:</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596631181270.png" alt="1596631181270"></p><p>两个文档都匹配,但是第一个文档比第二个匹配程度更高.如果没有别的条件,现在,这两个包含关键字的文档都将返回.</p><p>再来看一个示例,比如我们通过博客标签来搜索博客文章.那么倒排索引列表就是这样的一个结构:</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596631425757.png" alt="1596631425757"></p><p>如果要搜索含有python标签的文章,那相对查找所有原始数据而言,查找倒排索引后的数据将会快的多.只需要查看标签这一栏,然后获取相关文章id即可.</p><h1 id="IK分词器插件"><a href="#IK分词器插件" class="headerlink" title="IK分词器插件"></a>IK分词器插件</h1><h2 id="什么是分词器"><a href="#什么是分词器" class="headerlink" title="什么是分词器"></a><strong>什么是分词器</strong></h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596637415868.png" alt="1596637415868"></p><p>==如果使用中文,建议使用ik分词器==</p><p>IK体用了两个分词算法:<code>ik_smart</code>和,其中ik_smart为最少(ˉ▽￣～) 切~~分,ik_max_word为最细粒度划分! 一会我们测试</p><blockquote><p>安装</p></blockquote><ol><li><p><a href="https://github.com/medcl/elasticsearch-analysis-ik%EF%BC%8C%E7%89%88%E6%9C%AC%E9%9C%80%E8%A6%81%E5%92%8CElasticSearch%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94">https://github.com/medcl/elasticsearch-analysis-ik，版本需要和ElasticSearch版本对应</a></p></li><li><p>下载完毕之后,放入到我们的elasticsearch插件即可</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/08-elasticsearch-IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%8F%92%E4%BB%B6.assets/1596637767841.png" alt="1596637767841"></p><ol><li><p>重启观察ES</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596674648793.png" alt="1596674648793"></p></li><li><p>elasticsearch-plugin 可以通过这个命令来查看加载的插件</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596674703775.png" alt="1596674703775"></p></li><li><p>使用kibana测试!</p><p>查看不同的分词器效果</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596674979545.png" alt="1596674979545"></p></li></ol></li></ol><h2 id="ik分词器增加我们自己的配置"><a href="#ik分词器增加我们自己的配置" class="headerlink" title="ik分词器增加我们自己的配置"></a>ik分词器增加我们自己的配置</h2><p>这种自己需要的词,需要自己加到我们的分词器字典中!</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596675349989.png" alt="1596675349989"></p><p>重启ES,看细节</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596675426305.png" alt="1596675426305"></p><p>再次测试一下狂神说,</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1596675486318.png" alt="1596675486318"></p><p>以后的话我们需要自己配置自己的词,只需要在自定义的dic文件中进行配置即可!</p><h1 id="Rest风格说明"><a href="#Rest风格说明" class="headerlink" title="Rest风格说明"></a>Rest风格说明</h1><p>一种软件架构风格,而不是标准,只是提供了一组设计原则和约束条件.它主要用于客户端和服务器交互类的软件.基于这个风格设计的软件可以更简洁,更有层次,更易于实现缓存等机制.</p><p>基本Rest风格命令说明</p><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>127.0.01:9200/索引名称/_create/文档id</td><td>创建文档（指定id）</td></tr><tr><td>POST</td><td>127.0.01:9200/索引名称/_doc</td><td>创建文档</td></tr><tr><td>POST</td><td>127.0.01:9200/索引名称/_update/文档id</td><td>修改文档</td></tr><tr><td>DELETE</td><td>127.0.01:9200/索引名称</td><td>删除索引</td></tr><tr><td>DELETE</td><td>127.0.01:9200/索引名称/_doc/文档id</td><td>删除文档</td></tr></tbody></table><blockquote><p>基础测试</p></blockquote><h2 id="关于索引的基本操作"><a href="#关于索引的基本操作" class="headerlink" title="关于索引的基本操作"></a>关于索引的基本操作</h2><h3 id="索引indices"><a href="#索引indices" class="headerlink" title="索引indices"></a>索引indices</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># id</span><br><span class="line">PUT &#x2F;test&#x2F;_create&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;zxj1&quot;,</span><br><span class="line">  &quot;age&quot;:18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># wu id</span><br><span class="line">POST &#x2F;test&#x2F;_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;zxj1&quot;,</span><br><span class="line">  &quot;age&quot;:18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018173524585.png" alt="image-20201018173524585"></p><h3 id="映射mapping"><a href="#映射mapping" class="headerlink" title="映射mapping"></a>映射mapping</h3><p>那么name这个字段用不用指定类型呢,毕竟我们关系型数据库 是需要指定类型映射的啊</p><p><img src="http://victorfengming.gitee.io/course/elasticsearch/base/09-elasticsearch-Rest%E9%A3%8E%E6%A0%BC.assets/1596676128844.png" alt="1596676128844"></p><ol><li><p>指定字段的类型</p><p>获得这个规则! 可通过GET请求获取具体的信息</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018174140347.png" alt="image-20201018174140347"></p></li><li><p>不给索引设置mapping的话，ElasticSearch会默认匹配；如果自己的文档字段没有指定,那么ES就会给我们配置字段类型</p></li></ol><h1 id="关于文档的基本操作"><a href="#关于文档的基本操作" class="headerlink" title="关于文档的基本操作"></a>关于文档的基本操作</h1><p><a href="https://www.bilibili.com/video/BV17a4y1x7zq?p=10">https://www.bilibili.com/video/BV17a4y1x7zq?p=10</a></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a><strong>基本操作</strong></h2><ol><li><p>添加数据</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018173524585.png" alt="image-20201018173524585"></p></li><li><p>获取数据</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597891281730.png" alt="1597891281730"></p></li><li><p>更新数据 PUT，更新时是覆盖更新，没有更新的字段会被覆盖为空！</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597891378076.png" alt="1597891378076"></p></li><li><p>Post _update,==推荐使用这种更新方式!==</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597891620183.png" alt="1597891620183"></p></li></ol><h2 id="简单地搜索"><a href="#简单地搜索" class="headerlink" title="简单地搜索!"></a>简单地搜索!</h2>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test&#x2F;_doc&#x2F;2</span><br></pre></td></tr></table></figure><p>   简单的条件查询,可以根据默认的映射规则,产生基本的查询</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018175222885.png" alt="image-20201018175222885">   <img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892169142.png" alt="1597892169142"></p><blockquote></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597974203192.png" alt="1597974203192"></p><h2 id="复杂操作搜索"><a href="#复杂操作搜索" class="headerlink" title="复杂操作搜索"></a>复杂操作搜索</h2><blockquote><p>select(排序,分页,高亮,模糊查询,精准查询! )</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892352276.png" alt="1597892352276"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892367286.png" alt="1597892367286"></p><p>输出结果不想要那么多,select *</p><p>现在是select name,age</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892385326.png" alt="1597892385326"></p><p>可以指定字段</p><p>结果的过滤</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892451582.png" alt="1597892451582"></p><p>我们之后使用Java操作ES,所有的方法和对象就是这里面的key!</p><blockquote><p>排序</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892561417.png" alt="1597892561417"></p><blockquote><p>分页查询</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892615017.png" alt="1597892615017"></p><p>数据下标还是从0开始,和之前所学的数据结构都是一样的!</p><blockquote><p>布尔值查询</p></blockquote><p>must(and) ,所有条件都要符合 where id=1 and name=xxx</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892730673.png" alt="1597892730673"></p><p>should (or) ,所有条件都要符合 where id=1 or name = xxx</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892885428.png" alt="1597892885428"></p><p>must not (not)</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892928930.png" alt="1597892928930"></p><p>过滤器 filter</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597892996458.png" alt="1597892996458"></p><ul><li>gt 大于</li><li>gte 大于等于</li><li>lt 小于</li><li>lte 小于等于</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893039013.png" alt="1597893039013"></p><p>匹配多个条件</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893096034.png" alt="1597893096034"></p><p>用空格分隔也行</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893131147.png" alt="1597893131147"></p><blockquote><p>精确查询</p></blockquote><p>term 查询时直接通过倒排索引指定的词条进程精确查找的!</p><p>关于分词:</p><p>term,直接查询精确的</p><p>match,会使用分词器解析! (先分析分档,然后再通过分析的分档进行查询! )</p><p><strong>两个类型 text keyword</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893556500.png" alt="1597893556500"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893572562.png" alt="1597893572562"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597893648565.png" alt="1597893648565"></p><blockquote><p>多个值匹配精确查询</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597900914957.png" alt="1597900914957"></p><blockquote><p>高亮查询!</p></blockquote><p>搜索的高亮条件,会在HTML里面自动的加上标签</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597901143555.png" alt="1597901143555"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597905816361.png" alt="1597905816361"></p><h1 id="集成SpringBoot"><a href="#集成SpringBoot" class="headerlink" title="集成SpringBoot"></a>集成SpringBoot</h1><blockquote><p>找文档!</p></blockquote><p><a href="https://proxies.app.aidoru.net/-----https://www.elastic.co/guide/index.html">https://proxies.app.aidoru.net/-----https://www.elastic.co/guide/index.html</a></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597906806327.png" alt="1597906806327"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597906105998.png" alt="1597906105998"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597906924635.png" alt="img"></p><ol><li><p>找到原生的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>找对象</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597907115554.png" alt="1597907115554"></p></li><li><p>分析这个类中的方法即可</p><blockquote><p>配置基本的项目</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597907258818.png" alt="1597907258818"></p><blockquote><p>问题:一定要保证我们导入的依赖和我们的ES版本一致</p></blockquote><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597907493787.png" alt="1597907493787"></p></li></ol><p>按照官网的操作我们要构建一个对象</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597907737591.png" alt="1597907737591"></p><p>分析源码</p><p>狂神的Spring步骤:</p><ol><li><p>找对象</p></li><li><p>放到spring中待用</p></li><li><p>如果是springboot,那就先分析源码</p><p>xxxAutoConfiguration,xxxProperties</p></li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/1597908504743.png" alt="1597908504743"></p><p>源码中提供的对象</p><p>虽然这里导入了3个类,静态内部类,核心类就一个</p><h2 id="关于索引的API操作详解"><a href="#关于索引的API操作详解" class="headerlink" title="关于索引的API操作详解"></a>关于索引的API操作详解</h2><blockquote><p>具体的Api测试!</p></blockquote><p><code>restHighLevelClient.indices().xxx()</code></p><ol><li><p>创建索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index create</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 构建索引请求实体类 就是创建索引时的&#123;&#125;</span></span><br><span class="line">    CreateIndexRequest springboot_index = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 2.执行创建索引请求,返回响应</span></span><br><span class="line">    CreateIndexResponse createIndexResponse =</span><br><span class="line">            restHighLevelClient.indices().create(springboot_index, RequestOptions.DEFAULT);</span><br><span class="line">   </span><br><span class="line">    System.out.println(createIndexResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断索引是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">getIndices</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     <span class="comment">// 1. 创建请求体内容对象</span></span><br><span class="line">     GetIndexRequest srpingboot_index = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">   </span><br><span class="line">     <span class="comment">// 2. action</span></span><br><span class="line">     <span class="keyword">boolean</span> exists = restHighLevelClient.indices().exists(srpingboot_index,</span><br><span class="line">             RequestOptions.DEFAULT);</span><br><span class="line">     System.out.println(exists);</span><br><span class="line">     GetIndexResponse getIndexResponse = restHighLevelClient.indices().get(srpingboot_index,</span><br><span class="line">             RequestOptions.DEFAULT);</span><br><span class="line">     System.out.println(getIndexResponse);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteIndices</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建请求体内容对象,删除时索引需存在！</span></span><br><span class="line">    DeleteIndexRequest springboot_index = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 2. action</span></span><br><span class="line">    AcknowledgedResponse delete = restHighLevelClient.indices().delete(springboot_index,</span><br><span class="line">            RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// put /index/_create/id &#123;...&#125;</span></span><br><span class="line">    <span class="comment">// 1. 构建创建的文档的内容</span></span><br><span class="line">    IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">    indexRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    indexRequest.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// public IndexRequest source(String source, XContentType xContentType)</span></span><br><span class="line">    indexRequest.source(JSON.toJSONString(<span class="keyword">new</span> User(<span class="string">&quot;zxj&quot;</span>, <span class="number">18</span>)), XContentType.JSON);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 2. 开始请求</span></span><br><span class="line">    IndexResponse index = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(index.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>crud文档</p></li></ol><h2 id="关于文档的API操作详解"><a href="#关于文档的API操作详解" class="headerlink" title="关于文档的API操作详解"></a>关于文档的API操作详解</h2><blockquote><p>创建文档</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// put /index/_create/id &#123;...&#125;</span></span><br><span class="line">    <span class="comment">// 1. 构建创建的文档的内容</span></span><br><span class="line">    IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">    indexRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    indexRequest.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// public IndexRequest source(String source, XContentType xContentType)</span></span><br><span class="line">    indexRequest.source(JSON.toJSONString(<span class="keyword">new</span> User(<span class="string">&quot;zxj&quot;</span>, <span class="number">18</span>)), XContentType.JSON);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 开始请求</span></span><br><span class="line">    IndexResponse index = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(index.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p>这里的返回的全部内容和我们的命令是一样的</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018194243887.png" alt="image-20201018194243887"></p><blockquote><p>更新文档信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">updateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// post /index/_update/id &#123;&quot;doc&quot;:&#123;...&#125;&#125;</span></span><br><span class="line">       <span class="comment">// 1. 构建修改的文档的内容,String index, String id</span></span><br><span class="line">       UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;springboot_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">       updateRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">       updateRequest.doc(JSON.toJSONString(<span class="keyword">new</span> User(<span class="string">&quot;new Name&quot;</span>, <span class="number">18</span>)), XContentType.JSON);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2. 开始请求</span></span><br><span class="line">       UpdateResponse updateResponse = restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(updateResponse.status());</span><br><span class="line">       System.out.println(updateResponse.toString());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018194653575.png" alt="image-20201018194653575"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018194726197.png" alt="image-20201018194726197"></p><blockquote><p>删除文档记录</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">dropDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// delete /index/_doc/id</span></span><br><span class="line">       <span class="comment">// 1. 构建删除文档的对象,String index, String id</span></span><br><span class="line">       DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;springboot_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">       deleteRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2. 开始请求</span></span><br><span class="line">       DeleteResponse delete = restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(delete.status());</span><br><span class="line">       System.out.println(delete.toString());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018195024638.png" alt="image-20201018195024638"></p><h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><blockquote><p>特殊的,真的项目一般都会批量插入数据</p></blockquote><p>批量操作bulkRequest有很多类型：例如下述。这里只展示批量增加</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201018195851648.png" alt="image-20201018195851648"></p><p>批量添加文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bulgRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 构建批量请求体</span></span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;springboot_index&quot;</span>);</span><br><span class="line">        indexRequest.source(JSON.toJSONString(<span class="keyword">new</span> User(<span class="string">&quot;zxj&quot;</span>+i, <span class="number">18</span>)), XContentType.JSON);</span><br><span class="line">        bulkRequest.add(indexRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(!bulk.hasFailures());</span><br><span class="line">    System.out.println(bulk.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询搜索🔺"><a href="#查询搜索🔺" class="headerlink" title="查询搜索🔺"></a>查询搜索🔺</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;search/&#123;key&#125;/&#123;page&#125;/&#123;size&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; searchLists(<span class="meta">@PathVariable(&quot;key&quot;)</span> String keyword,</span><br><span class="line">                                             <span class="meta">@PathVariable(&quot;page&quot;)</span> Long page, <span class="meta">@PathVariable(</span></span><br><span class="line"><span class="meta">                                                     &quot;size&quot;)</span> Long size) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 构建搜索对象</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;jd1&quot;</span>);</span><br><span class="line">    <span class="comment">// 搜索条件构造</span></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    searchSourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">2L</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配查询</span></span><br><span class="line">    MatchQueryBuilder title = QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, keyword);</span><br><span class="line">    searchSourceBuilder.query(title);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// page</span></span><br><span class="line">    <span class="keyword">if</span> (page&lt;=<span class="number">1L</span>)&#123;</span><br><span class="line">        page = <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    searchSourceBuilder.from((<span class="keyword">int</span>) (page * size));</span><br><span class="line">    searchSourceBuilder.size(Math.toIntExact(size));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// highlight</span></span><br><span class="line">    HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">    highlightBuilder.field(<span class="string">&quot;title&quot;</span>); <span class="comment">// title字段高亮</span></span><br><span class="line">    highlightBuilder.requireFieldMatch(<span class="keyword">false</span>); <span class="comment">// 关键字高亮一次</span></span><br><span class="line">    highlightBuilder.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">    highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">    searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line"></span><br><span class="line">    searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Map&lt;String, Object&gt;&gt; objects = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        <span class="comment">// 查询结果</span></span><br><span class="line">        Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将高亮的字段覆盖查询结果的该字段</span></span><br><span class="line">        HighlightField highlightField = hit.getHighlightFields().get(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (highlightField != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Text[] fragments = highlightField.fragments();</span><br><span class="line">            StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (Text fragment : fragments) &#123;</span><br><span class="line">                s.append(fragment);</span><br><span class="line">            &#125;</span><br><span class="line">            sourceAsMap.put(<span class="string">&quot;title&quot;</span>, s.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        objects.add(sourceAsMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objects;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201020213945227.png" alt="image-20201020213945227"></p>]]></content>
      
      
      <categories>
          
          <category> 全文搜索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA打包脚本问题</title>
      <link href="2020/09/21/IDEA%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC%E9%97%AE%E9%A2%98/"/>
      <url>2020/09/21/IDEA%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><strong>shell脚本执行错误 $’\r’:command not found</strong></p><p>这是在IDEA打包的脚本中，移动到Linux，解压，执行脚本时出现的错误</p><h1 id="出现原因以及解决"><a href="#出现原因以及解决" class="headerlink" title="出现原因以及解决"></a>出现原因以及解决</h1><p>在文件中任何样式都是用字节体现的，例如换行：</p><ul><li>在window中：回车+换行 CRLF</li><li>在Linux中：换行：LF</li><li>老版Mac中：回车：CR，之后也是LF</li></ul><p>window下开发有一个大坑，就是换行默认是<code>CRLF</code>，也就是回车换行，但是Linux下只有换行<code>LF</code>，这样代码提交后，会出现编译问题，<strong>所以最好的办法是在IntelliJ下设置默认为LF</strong>。首先我们先介绍CRLF，LF和CR这三种东西，CR是MAC老版本的做法，就是回车，但是后来的MAC系统统一换成LF了，LF是Linux下的做法，就是换行，这个做法比较自然，为什么要回车换行呢，<strong>是吧。微软采用的是CRLF，看上去好像是兼容了CR和LF，但是实际完全不是那么回事，就是回车并换行，好鸡肋啊，微软一直保持这种做法</strong>，开发人员大多在Linux下，所以对于开发人员来说还是比较坑的。下面介绍设置详解：</p><h2 id="File-gt-Settings…"><a href="#File-gt-Settings…" class="headerlink" title="File-&gt;Settings…"></a>File-&gt;Settings…</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/AGPaNgg.png" alt="AGPaNgg"></p><h2 id="Editor-gt-Code-Style"><a href="#Editor-gt-Code-Style" class="headerlink" title="Editor-&gt;Code Style"></a>Editor-&gt;Code Style</h2><p>可以看到，默认是System-Dependent，这个其实还是很牛叉的，根据系统自动配置，但是你是windows系统，默认是CRLF，服务器是Linux，你就得自己换了。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/JOQ6jZ4.png" alt="JOQ6jZ4"></p><p>我们设置成下面这样，保存就好了</p><p><strong>这样设置是之后新建的文件有效果</strong></p><h2 id="之前文件有效"><a href="#之前文件有效" class="headerlink" title="之前文件有效"></a>之前文件有效</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/826328-20200409110931988-1979119311.png" alt="826328-20200409110931988-1979119311"></p><p><strong>File -&gt; Line Separators -&gt; LF</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/826328-20200409110953545-1889327721.png" alt="826328-20200409110953545-1889327721"></p><h1 id="处理方式二"><a href="#处理方式二" class="headerlink" title="处理方式二"></a>处理方式二</h1><p>通过一个Linux命令，将window换行符变为Linux换行符</p><p><code>dos2unix  脚本名</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark学习笔记-SparkCore解析</title>
      <link href="2020/08/29/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkCore%E8%A7%A3%E6%9E%90/"/>
      <url>2020/08/29/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkCore%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-内核概述"><a href="#Spark-内核概述" class="headerlink" title="Spark 内核概述"></a>Spark 内核概述</h1><p>Spark内核泛指Spark的核心运行机制，包括<strong>Spark核心组件的运行机制、Spark任务调度机制、Spark内存管理机制、Spark核心功能的运行原理</strong>等，熟练掌握Spark内核原理，能够帮助我们更好地完成Spark代码设计，并能够帮助我们准确锁定项目运行过程中出现的问题的症结所在。</p><h2 id="Spark核心组件回顾"><a href="#Spark核心组件回顾" class="headerlink" title="Spark核心组件回顾"></a>Spark核心组件回顾</h2><h3 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h3><p><strong>Spark驱动器节点</strong>，用于执行Spark任务中的<strong>main</strong>方法，负责实际代码的执行工作。Driver在Spark作业执行时主要负责：</p><ol><li>将用户程序转化为作业（job）；</li><li>在Executor之间调度任务(task)；</li><li>跟踪Executor的执行情况；</li><li>通过UI展示查询运行情况；</li></ol><h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>Spark Executor节点是一个JVM进程，负责在 Spark 作业中运行具体任务，任务彼此之间相互独立。Spark 应用启动时，Executor节点被同时启动，并且始终伴随着整个 Spark 应用的生命周期而存在。如果有Executor节点发生了故障或崩溃，Spark 应用也可以继续执行，会将出错节点上的任务调度到其他Executor节点上继续运行。</p><p>Executor有两个核心功能：</p><ol><li>负责<strong>运行组成Spark应用的任务</strong>，并将结果返回给驱动器进程；</li><li>它们通过自身的块管理器（Block Manager）为用户程序中要求缓存的 RDD 提供内存式存储。<strong>RDD 是直接缓存在Executor进程内的</strong>，因此任务可以在运行时充分利用缓存数据加速运算。</li></ol><h2 id="Spark通用运行流程概述"><a href="#Spark通用运行流程概述" class="headerlink" title="Spark通用运行流程概述"></a>Spark通用运行流程概述</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830151813147.png" alt="image-20200830151813147"></p><p>图1-1为Spark通用运行流程，<strong>不论Spark以何种模式进行部署，任务提交后，都会先启动Driver进程</strong>，随后Driver进程向集群管理器注册应用程序，之后集群管理器根据此任务的配置文件分配Executor并启动，当Driver所需的资源全部满足后，<strong>Driver开始执行main函数，Spark查询为懒执行，当执行到action算子时开始反向推算</strong>，<font color="red">根据宽依赖进行stage的划分，随后每一个stage对应一个taskset，taskset中有多个task，根据本地化原则，task会被分发到指定的Executor去执行</font>，在任务执行的过程中，Executor也会不断与Driver进行通信，报告任务运行情况。</p><h1 id="Spark部署模式"><a href="#Spark部署模式" class="headerlink" title="Spark部署模式"></a>Spark部署模式</h1><p>Spark支持3种集群管理器（Cluster Manager），分别为：</p><ol><li><code>Standalone：</code>独立模式，Spark原生的简单集群管理器，自带完整的服务，可单独部署到一个集群中，<strong>无需依赖任何其他资源管理系统</strong>，使用Standalone可以很方便地搭建一个集群；</li><li><code>Apache Mesos：</code>一个强大的分布式资源管理框架，它允许多种不同的框架部署在其上，包括yarn；</li><li><code>Hadoop YARN：</code>统一的资源管理机制，在上面可以运行多套计算框架，如map reduce、storm等，<font color="red">根据driver在集群中的位置不同，分为yarn client和yarn cluster</font>。</li></ol><p>实际上，除了上述这些通用的集群管理器外，Spark内部也提供了一些方便用户测试和学习的简单集群部署模式。<font color="red"><strong>由于在实际工厂环境下使用的绝大多数的集群管理器是Hadoop YARN，因此我们关注的重点是Hadoop YARN模式下的Spark集群部署。</strong></font></p><p>Spark的运行模式取决于传递给<code>SparkContext</code>的<font color="red"><code>MASTER</code>环境变量的值</font>，个别模式还需要辅助的程序接口来配合使用，目前支持的Master字符串及URL包括：</p><table><thead><tr><th><strong>Master URL</strong></th><th><strong>Meaning</strong></th></tr></thead><tbody><tr><td><strong>local</strong></td><td>在本地运行，只有一个工作进程，无并行计算能力。</td></tr><tr><td><strong>local[K]</strong></td><td>在本地运行，有K个工作进程，通常设置K为机器的CPU核心数量。</td></tr><tr><td><strong>local[*]</strong></td><td>在本地运行，工作进程数量等于机器的CPU核心数量。</td></tr><tr><td><strong>spark://HOST:PORT</strong></td><td>以Standalone模式运行，这是Spark自身提供的集群运行模式，默认端口号: 7077。详细文档见:Spark  standalone cluster。</td></tr><tr><td><strong>mesos://HOST:PORT</strong></td><td>在Mesos集群上运行，Driver进程和Worker进程运行在Mesos集群上，部署模式必须使用固定值:–deploy-mode cluster。详细文档见:MesosClusterDispatcher.</td></tr><tr><td><strong>yarn-client</strong></td><td>在Yarn集群上运行，Driver进程在本地，Executor进程在Yarn集群上，部署模式必须使用固定值:–deploy-mode  client。Yarn集群地址必须在HADOOP_CONF_DIR or YARN_CONF_DIR变量里定义。</td></tr><tr><td><strong>yarn-cluster</strong></td><td>在Yarn集群上运行，Driver进程在Yarn集群上，Work进程也在Yarn集群上，部署模式必须使用固定值:–deploy-mode cluster。Yarn集群地址必须在HADOOP_CONF_DIR  or YARN_CONF_DIR变量里定义。</td></tr></tbody></table><p><strong>用户在提交任务给Spark处理时，以下两个参数共同决定了Spark的运行方式。</strong></p><ul><li><code>master MASTER_URL</code> ：决定了Spark任务提交<font color="red">给哪种集群处理。</font></li><li><code>deploy-mode DEPLOY_MODE</code>：决定了Driver的运行方式，<font color="red">可选值为Client或者Cluster。</font></li></ul><h2 id="Standalone模式运行机制"><a href="#Standalone模式运行机制" class="headerlink" title="Standalone模式运行机制"></a>Standalone模式运行机制</h2><p>Standalone集群有<strong>四个重要组成部分</strong>，分别是：</p><ol><li><code>Driver</code>：是一个进程，我们<strong>编写的Spark应用程序就运行在Driver上</strong>，由Driver进程执行；</li><li><code>Master(RM)</code>：是一个进程，<strong>主要负责资源的调度和分配</strong>，并进行集群的监控等职责；</li><li><code>Worker(NM)</code>：是一个进程，一个Worker运行在集群中的一台服务器上，主要负责两个职责，一个是用自己的内存存储RDD的某个或某些partition；另一个是启动其他进程和线程（Executor），对RDD上的partition进行并行的处理和计算。</li><li><code>Executor</code>：是一个进程，一个Worker上可以运行多个Executor，Executor通过启动多个线程（task）来执行对RDD的partition进行并行计算，也就是执行我们对RDD定义的例如map、flatMap、reduce等算子操作。</li></ol><h3 id="Standalone-Client模式"><a href="#Standalone-Client模式" class="headerlink" title="Standalone Client模式"></a>Standalone Client模式</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830152737351.png" alt="image-20200830152737351"></p><p>在Standalone Client模式下，<font color="red"><strong>Driver在任务提交的本地机器上运行</strong></font>：</p><ol><li>Driver启动会向Master注册应用程序</li><li>Master根据submit脚本的资源需求找到内部资源至少可以启动一个Executor的所有Worker</li><li>Worker之间分配Executor</li><li>Executor开启完毕后向Driver反馈</li><li><font color="red">Driver开始执行main函数，之后执行到Action算子时，开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。</font></li></ol><h3 id="Standalone-Cluster模式"><a href="#Standalone-Cluster模式" class="headerlink" title="Standalone Cluster模式"></a>Standalone Cluster模式</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830154509558.png" alt="image-20200830154509558"></p><p>在Standalone Cluster模式下，<font color="red"><strong>任务提交后，Master会找到一个Worker启动Driver进程</strong></font></p><ol><li>Driver启动会向Master注册应用程序</li><li>Master根据submit脚本的资源需求找到内部资源至少可以启动一个Executor的所有Worker</li><li>Worker之间分配Executor</li><li>Executor开启完毕后向Driver反馈</li><li><font color="red">Driver开始执行main函数，之后执行到Action算子时，开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。</font></li></ol><h2 id="Yarn模式运行机制🔺"><a href="#Yarn模式运行机制🔺" class="headerlink" title="Yarn模式运行机制🔺"></a>Yarn模式运行机制🔺</h2><h3 id="YARN-Client模式"><a href="#YARN-Client模式" class="headerlink" title="YARN Client模式"></a>YARN Client模式</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830155921502.png" alt="image-20200830155921502"></p><p>在YARN Client模式下，<font color="red"><strong>Driver在任务提交的本地机器上运行</strong></font></p><ol><li>Driver启动后会和ResourceManager通讯申请启动ApplicationMaster</li><li>ResourceManager分配container，在合适的NodeManager上启动ApplicationMaster</li><li>ApplicationMaster的功能相当于一个<font color="red"><code>ExecutorLaucher</code></font>，只负责向ResourceManager申请Executor内存。</li><li>ResourceManager接到ApplicationMaster的资源申请后会分配container，然后ApplicationMaster在资源分配指定的NodeManager上启动Executor进程</li><li><font color="red">Executor进程启动后会向Driver反向注册</font></li><li>Driver开始执行main函数，之后执行到Action算子时，触发一个job，并根据宽依赖开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。</li></ol><h3 id="YARN-Cluster模式🔺"><a href="#YARN-Cluster模式🔺" class="headerlink" title="YARN Cluster模式🔺"></a>YARN Cluster模式🔺</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830160157808.png" alt="image-20200830160157808"></p><p>在YARN Cluster模式下，<font color="red"><strong>任务提交后会和ResourceManager通讯申请启动ApplicationMaster</strong></font></p><ol><li>随后ResourceManager分配container，在合适的NodeManager上启动ApplicationMaster，此时的ApplicationMaster就是Driver。</li><li>Driver启动后向ResourceManager申请Executor内存</li><li>ResourceManager接到ApplicationMaster的资源申请后会分配container，然后在合适的NodeManager上启动Executor进程</li><li>Executor进程启动后会向Driver反向注册</li><li>Driver开始执行main函数，之后执行到Action算子时，触发一个job，并根据宽依赖开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。</li></ol><h1 id="YARN-Cluster模式源代码解读🔺🔺"><a href="#YARN-Cluster模式源代码解读🔺🔺" class="headerlink" title="YARN Cluster模式源代码解读🔺🔺"></a>YARN Cluster模式源代码解读🔺🔺</h1><h2 id="Spark-Submit"><a href="#Spark-Submit" class="headerlink" title="Spark Submit"></a>Spark Submit</h2><p><strong>1. YARN Cluster的计算由命令开始：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">-- master MASTER_URL yarn\</span><br><span class="line">-- deploy-mode cluster \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p><em>调用命令的本质就是启动了SparkSubmit的进程，通过Java命令：</em></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830162407076.png" alt="image-20200830162407076"></p><p><font color="red"><em>所以，当执行后，此节点会立马开启了一个进程：<code>SparkSubmit</code></em></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830162517111.png" alt="image-20200830162517111"></p><h3 id="SparkSubmitArguments参数封装"><a href="#SparkSubmitArguments参数封装" class="headerlink" title="SparkSubmitArguments参数封装"></a>SparkSubmitArguments参数封装</h3><p>因为<code>SparkSubmit</code>是通过<code>java xxx</code>命令执行的，所以我们需要直接查看它的main方法：</p><p>图中圈出的部分是代码的参数验证，它限制了部署模式必须是<code>client</code>、<code>cluster</code>的一种</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830163439950.png" alt="image-20200830163439950"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830163544480.png" alt="image-20200830163544480"></p><h3 id="submit提交"><a href="#submit提交" class="headerlink" title="submit提交"></a>submit提交</h3><p>之后参数验证完毕后，根据提交状态，我们可以确定它执行了<code>case SparkSubmitAction.SUBMIT =&gt; submit(appArgs)</code></p><p>submit函数中分别调用了：</p><ul><li><code>prepareSubmitEnvironment</code></li><li><code>doRunMain</code></li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830164234921.png" alt="image-20200830164234921"></p><h4 id="prepareSubmitEnvironment提交环境准备"><a href="#prepareSubmitEnvironment提交环境准备" class="headerlink" title="prepareSubmitEnvironment提交环境准备"></a>prepareSubmitEnvironment提交环境准备</h4><p>在<code>prepareSubmitEnvironment</code>方法的源代码中我们找到了关键部分</p><p>发现<code>prepareSubmitEnvironment</code>的返回值<code>childMainClass</code>被赋值为了<font color="red">**<code>org.apache.spark.deploy.yarn.Client</code>**</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830164713753.png" alt="image-20200830164713753"></p><h4 id="doRunMain"><a href="#doRunMain" class="headerlink" title="doRunMain"></a>doRunMain</h4><p>在运行<code>doRunMain</code>方法内部时将<code>prepareSubmitEnvironment</code>方法的返回值<code>childMainClass</code>传入了新方法<code>runMain</code>，此时它的值是**<code>org.apache.spark.deploy.yarn.Client</code>**</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830165235145.png" alt="image-20200830165235145"></p><h5 id="runMain"><a href="#runMain" class="headerlink" title="runMain"></a>runMain</h5><p>发现此方法对传入的<code>childMainClass</code>即：**<code>org.apache.spark.deploy.yarn.Client</code><strong>进行了返回获取实体类，<font color="red">**并且判断它的main方法，并调用！！！</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830165939807.png" alt="image-20200830165939807"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830170053716.png" alt="image-20200830170053716"></p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>上面说到Spark Submit的main方法里面以反射调用了<code>org.apache.spark.deploy.yarn.Client</code>的main方法，下面开始查看<code>org.apache.spark.deploy.yarn.Client</code>的main方法。</p><p>发现：</p><ol><li>执行了参数封装</li><li>开启线程执行Client的逻辑，注意这里不是以java命令执行的，所以不会开启进程，而是以线程方式执行的，只会开启一个线程。</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830170750827.png" alt="image-20200830170750827"></p><h3 id="ClientArguments"><a href="#ClientArguments" class="headerlink" title="ClientArguments"></a>ClientArguments</h3><p>参数封装时，对我们最开始sparksubmit时指定的class进行了封装</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830170956395.png" alt="image-20200830170956395"></p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p><code>new Client(args, sparkConf).run()</code>，以线程的方式运行了Client线程的逻辑。</p><p>上面可以分为两种逻辑：</p><ol><li>new Client</li><li>client.run</li></ol><h4 id="new-Client"><a href="#new-Client" class="headerlink" title="new Client"></a>new Client</h4><p>查看它的构造方法，发现它创建了对象<code>private val yarnClient = YarnClient.createYarnClient</code></p><p>再次查看对象<code>YarnClient</code>的内容，发现它有RM，ResourceManager的地址。</p><p><font color="red"><strong>所以，Client类可以通过对象<code>yarnClient </code>来与<code>ResourceManager</code>进行交互。</strong></font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">ApplicationClientProtocol</span> rmClient;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">InetSocketAddress</span> rmAddress;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830171947757.png" alt="image-20200830171947757"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830172001381.png" alt="image-20200830172001381"></p><h4 id="client-run"><a href="#client-run" class="headerlink" title="client.run"></a><strong>client.run</strong></h4><p>发现方法<code>submitApplication</code>返回了appId，appId是Yarn中的概念，是一个唯一ID，每个执行任务唯一的对应一个。<font color="red">所以<code>submitApplication</code>是一个与Yarn交互并获取到appId的方法。</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830172804937.png" alt="image-20200830172804937"></p><p>例如，以下以spark-shell的yarn client模式运行的就有appId。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830173010937.png" alt="image-20200830173010937"></p><h5 id="submitApplication🔺"><a href="#submitApplication🔺" class="headerlink" title="submitApplication🔺"></a>submitApplication🔺</h5><p>[上述的yarnClient](#new Client)是一个保存着RM地址的对象，它在submitApplication方法中开始对RM进行了连接。</p><ol><li>同时向RM进行了资源的申请，通过RM的反馈<code>newAppResponse</code>得到了Yarn的唯一id</li><li>构建应用AM的指令</li><li>申请RM执行应用！！！</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830173429640.png" alt="image-20200830173429640"></p><h6 id="createContainerLaunchContext🔺"><a href="#createContainerLaunchContext🔺" class="headerlink" title="createContainerLaunchContext🔺"></a>createContainerLaunchContext🔺</h6><p><font color="red"><strong>AM执行封装指令，command</strong></font></p><p>此方法是<code>logInfo(&quot;Setting up container launch context for our AM&quot;)</code>，启动context for our AM的指令内容。</p><p>发现：</p><ol><li>cluster模式构建的Java命令启动的是<code>org.apache.spark.deploy.yarn.ApplicationMaster</code></li><li>client模式构建的Java命令启动的是<code>org.apache.spark.deploy.yarn.ExecutorLauncher</code></li></ol><p><font color="red"><strong>注意：因为是以Java命令通知RM启动的，RM会寻找一个NM来通过Java命令启动，所以以<code>ApplicationMaster</code>为例，它启动的应该是进程。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830174128613.png" alt="image-20200830174128613"></p><p>例如，以下以spark-shell的yarn client模式运行的启动的是<code>ExecutorLauncher</code>。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830174427258.png" alt="image-20200830174427258"></p><h2 id="ApplicationMaster🔺"><a href="#ApplicationMaster🔺" class="headerlink" title="ApplicationMaster🔺"></a>ApplicationMaster🔺</h2><p><font color="red"><strong>ApplicationMaster是以进程启动的</strong></font></p><p>上面得知，通过java命令的方法开启了一台NM执行AM，所以下面查看AM的main：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830180331230.png" alt="image-20200830180331230"></p><h3 id="master-run"><a href="#master-run" class="headerlink" title="master.run"></a>master.run</h3><p>此方法中的关键点：在AM中运行</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830180521026.png" alt="image-20200830180521026"></p><h4 id="runDriver"><a href="#runDriver" class="headerlink" title="runDriver"></a>runDriver</h4><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830180708534.png" alt="image-20200830180708534"></p><h5 id="startUserApplication：启动Driver类的main"><a href="#startUserApplication：启动Driver类的main" class="headerlink" title="startUserApplication：启动Driver类的main"></a>startUserApplication：启动Driver类的main</h5><p>此方法是启动Driver类，也就是我们自己编写的带有<code>sparkContext</code>的类，同时也是最开始spark-submit提交时class的参数的类。</p><ol><li>通过一直传递的参数，开始获取我们编写的类</li><li>获取到类后，通过反射获取到main函数</li><li>然后通过反射调用main函数</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830180856820.png" alt="image-20200830180856820"></p><h5 id="registerAM"><a href="#registerAM" class="headerlink" title="registerAM"></a>registerAM</h5><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830182105200.png" alt="image-20200830182105200"></p><h6 id="allocateResources"><a href="#allocateResources" class="headerlink" title="allocateResources"></a>allocateResources</h6><p>RM向AM申请资源：</p><p>由上面可知amClient是存储了AM地址的对象，由此对象连接AM获取可分配的资源</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830182245257.png" alt="image-20200830182245257"></p><h6 id="handleAllocatedContainers分配开启容器"><a href="#handleAllocatedContainers分配开启容器" class="headerlink" title="handleAllocatedContainers分配开启容器"></a>handleAllocatedContainers分配开启容器</h6><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830182438026.png" alt="image-20200830182438026"></p><h6 id="runAllocatedContainers"><a href="#runAllocatedContainers" class="headerlink" title="runAllocatedContainers"></a>runAllocatedContainers</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Launches executors in the allocated containers.</span><br></pre></td></tr></table></figure><p>在每个分配的容器中启动执行程序。看到启动了一个ExecutorRunnable的线程在线程池里。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830182553599.png" alt="image-20200830182553599"></p><h6 id="ExecutorRunnable"><a href="#ExecutorRunnable" class="headerlink" title="ExecutorRunnable"></a>ExecutorRunnable</h6><p>看到此线程的逻辑就是通过<code>nmClient</code>连接NM节点开始<code>container</code></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830182659297.png" alt="image-20200830182659297"></p><p><font color="red"><strong>那么，是如何开启Container容器呢</strong></font></p><h6 id="startContainer🔺"><a href="#startContainer🔺" class="headerlink" title="startContainer🔺"></a>startContainer🔺</h6><p>发现此方法中又调用了方法<code>val commands = prepareCommand()</code>来<font color="red">生成Java命令行命令来开启<code>org.apache.spark.executor.CoarseGrainedExecutorBackend</code></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830183133066.png" alt="image-20200830183133066"></p><p><font color="red"><strong>所以Container容器中开启了<code>CoarseGrainedExecutorBackend</code>，它是来计算任务的，即Executor的后台。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830183322800.png" alt="image-20200830183322800"></p><h2 id="CoarseGrainedExecutorBackend"><a href="#CoarseGrainedExecutorBackend" class="headerlink" title="CoarseGrainedExecutorBackend"></a>CoarseGrainedExecutorBackend</h2><p><font color="red"><strong>CoarseGrainedExecutorBackend是以进程启动的</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830183429858.png" alt="image-20200830183429858"></p><h3 id="run-1"><a href="#run-1" class="headerlink" title="run"></a>run</h3><p>发现它新建了一个计算<strong>终端</strong>环境，通过查看它的类时：<code>CoarseGrainedExecutorBackend</code></p><p>发现了新的属性<code>var executor: Executor = null</code>，这时发现此对象才是计算的根本！！。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830183711553.png" alt="image-20200830183711553"></p><p>发现它继承了<code>ThreadSafeRpcEndpoint</code>，而<code>ThreadSafeRpcEndpoint</code>终端有四个生命周期：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830183921529.png" alt="image-20200830183921529"></p><p>因为CoarseGrainedExecutorBackend继承了它，所以他也是个终端，且CoarseGrainedExecutorBackend开启后会执行onStart中定义的事情：在Container的CoarseGrainedExecutorBackend创建完毕后会向Driver所在的终端发送Executor启动完毕的信息</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830184011123.png" alt="image-20200830184011123"></p><p>而我们Driver的收到信息后，会反馈给CoarseGrainedExecutorBackend，CoarseGrainedExecutorBackend收到信息后执行以下内容，创建计算对象，上面讲到CoarseGrainedExecutorBackend并不是一个计算对象，有着计算作用的是它的属性<code>executor</code>，这时创建<code>executor</code>属性</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830184231615.png" alt="image-20200830184231615"></p><p>以上资源调度完事，Executor已经启动</p><h2 id="总结🔺"><a href="#总结🔺" class="headerlink" title="总结🔺"></a>总结🔺</h2><p>上面的源码已经完全的解释了下图：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830185102697.png" alt="image-20200830185102697"></p><p>由源码的流程可看出共启动了以下几种进程：</p><ol><li>spark-submit：发布任务的客户端启动</li><li>ApplicationMaster：RM随机找一台NM启动</li><li>CoarseGrainedExecutorBackend：AM申请到的NM中的Container中启动，此进程中的CoarseGrainedExecutorBackend对象的Executor属性才是计算的属性</li></ol><hr><h1 id="Spark-任务调度机制"><a href="#Spark-任务调度机制" class="headerlink" title="Spark 任务调度机制"></a>Spark 任务调度机制</h1><p>在工厂环境下，Spark集群的部署方式一般为YARN-Cluster模式，之后的内核分析内容中我们默认集群的部署方式为YARN-Cluster模式。</p><h2 id="Spark任务提交流程"><a href="#Spark任务提交流程" class="headerlink" title="Spark任务提交流程"></a>Spark任务提交流程</h2><p>在上一章中我们讲解了Spark YARN-Cluster模式下的任务提交流程</p><p>下面的时序图清晰地说明了一个Spark应用程序从提交到运行的完整流程：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830185555274.png" alt="image-20200830185555274"></p><p>提交一个Spark应用程序，首先通过Client向ResourceManager请求启动一个Application，同时检查是否有足够的资源满足Application的需求，如果资源条件满足，则准备ApplicationMaster的启动上下文，交给ResourceManager，并循环监控Application状态。</p><p>当提交的资源队列中有资源时，ResourceManager会在某个NodeManager上启动ApplicationMaster进程，<font color="red">ApplicationMaster会单独启动Driver后台线程，当Driver启动后，ApplicationMaster会通过本地的RPC连接Driver</font>，并开始向ResourceManager申请Container资源运行Executor进程（一个Executor对应与一个Container），当ResourceManager返回Container资源，ApplicationMaster则在对应的Container上启动Executor。</p><p>Driver线程主要是初始化SparkContext对象，准备运行所需的上下文，然后一方面保持与ApplicationMaster的RPC连接，通过ApplicationMaster申请资源，另一方面根据用户业务逻辑开始调度任务，将任务下发到已有的空闲Executor上。</p><p>当ResourceManager向ApplicationMaster返回Container资源时，ApplicationMaster就尝试在对应的Container上启动Executor进程，<font color="red">Executor进程起来后，会向Driver反向注册，注册成功后保持与Driver的心跳，同时等待Driver分发任务，当分发的任务执行完毕后，将任务状态上报给Driver。</font></p><p>从上述时序图可知，Client只负责提交Application并监控Application的状态。对于Spark的任务调度主要是集中在两个方面: <strong>资源申请和任务分发</strong>，其主要是通过ApplicationMaster、Driver以及Executor之间来完成。</p><h2 id="Spark任务调度概述🔺"><a href="#Spark任务调度概述🔺" class="headerlink" title="Spark任务调度概述🔺"></a>Spark任务调度概述🔺</h2><p>当Driver起来后，Driver则会根据用户程序逻辑准备任务，并根据Executor资源情况逐步分发任务。在详细阐述任务调度前，首先说明下Spark里的几个概念。一个Spark应用程序包括Job、Stage以及Task三个概念：</p><ul><li> Job是以Action方法为界，遇到一个Action方法则触发一个Job；</li><li>Stage是Job的子集，以RDD宽依赖(即Shuffle)为界，遇到Shuffle做一次划分；</li><li> Task是Stage的子集，以并行度(分区数)来衡量，分区数是多少，则有多少个task。</li></ul><p>Spark的任务调度总体来说分两路进行，<font color="red"><strong>一路是Stage级的调度，一路是Task级的调度</strong></font>，总体调度流程如下图所示：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830190028855.png" alt="image-20200830190028855"></p><p>Spark RDD通过其Transactions操作，形成了RDD血缘关系图，即DAG，最后通过Action的调用，触发Job并调度执行。</p><p><font color="red"><strong>DAGScheduler负责Stage级的调度</strong></font>，主要是将job切分成若干Stages，并将每个Stage打包成TaskSet交给TaskScheduler调度。</p><p><font color="red"><strong>TaskScheduler负责Task级的调度</strong></font>，将DAGScheduler给过来的TaskSet按照指定的调度策略分发到Executor上执行，调度过程中SchedulerBackend负责提供可用资源，其中<strong>SchedulerBackend有多种实现，分别对接不同的资源管理系统</strong>。</p><p>下面这张图描述了Spark-On-Yarn模式下在任务调度期间，ApplicationMaster、Driver以及Executor内部模块的交互过程：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830190229195.png" alt="image-20200830190229195"></p><h2 id="Spark-Stage级调度🔺"><a href="#Spark-Stage级调度🔺" class="headerlink" title="Spark Stage级调度🔺"></a>Spark Stage级调度🔺</h2><p>Spark的任务调度是从DAG切割开始，主要是由DAGScheduler来完成。当遇到一个Action操作后就会触发一个Job的计算，并交给DAGScheduler来提交，下图是涉及到Job提交的相关方法调用流程图。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830190303628.png" alt="image-20200830190303628"></p><p><font color="red">**<code>dag.submit</code>**提交stage时先提交第一个Stage，在Stage切分阶段除了最后一个Stage叫<code>ResultStage</code>只进行Shuffle Read，其余Stage均称为<code>ShuffleMapStage</code>均进行Shuffle Read和Write，除了第一个不进行Read</font></p><p>Job由最终的RDD和Action方法封装而成，SparkContext将Job交给DAGScheduler提交，它会根据RDD的血缘关系构成的DAG进行切分，将一个Job划分为若干Stages，<font color="red">具体划分策略是，由最终的RDD不断通过依赖回溯判断父依赖是否是宽依赖，即以Shuffle为界，划分Stage，窄依赖的RDD之间被划分到同一个Stage中，可以进行pipeline式的计算</font></p><p>如图紫色流程部分。划分的Stages分两类，一类叫做ResultStage，<strong>为DAG最下游的Stage</strong>，由Action方法决定，<strong>另一类叫做ShuffleMapStage，为下游Stage准备数据</strong>，下面看一个简单的例子WordCount。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830190837690.png" alt="image-20200830190837690"></p><p>Job由saveAsTextFile触发，该Job由RDD-3和saveAsTextFile方法组成，根据RDD之间的依赖关系从RDD-3开始回溯搜索，直到没有依赖的RDD-0，<strong>在回溯搜索过程中，RDD-3依赖RDD-2，并且是宽依赖</strong>，所以在RDD-2和RDD-3之间划分Stage，RDD-3被划到最后一个Stage，即ResultStage中，RDD-2依赖RDD-1，RDD-1依赖RDD-0，这些依赖都是窄依赖，所以将RDD-0、RDD-1和RDD-2划分到同一个Stage<strong>，即ShuffleMapStage中，实际执行的时候，数据记录会一气呵成地执行RDD-0到RDD-2的转化</strong>。不难看出，其本质上是一个深度优先搜索算法。</p><p><font color="red">一个Stage是否被提交，需要判断它的父Stage是否执行，只有在父Stage执行完毕才能提交当前Stage，如果一个Stage没有父Stage，那么从该Stage开始提交。Stage提交时会将Task信息（分区信息以及方法等）序列化并被打包成TaskSet交给TaskScheduler</font>，一个Partition对应一个Task，另一方面TaskScheduler会监控Stage的运行状态，只有Executor丢失或者Task由于Fetch失败才需要重新提交失败的Stage以调度运行失败的任务，其他类型的Task失败会在TaskScheduler的调度过程中重试。</p><p>相对来说DAGScheduler做的事情较为简单，仅仅是在Stage层面上划分DAG，提交Stage并监控相关状态信息。TaskScheduler则相对较为复杂，下面详细阐述其细节。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>DAGScheduler就是对整个Job进行了Stage的切分，并对每个Stage的多个Task封装为TaskSet交给TaskScheduler。</p><p>DAGScheduler在提交Stage时，从第一个往后提交，因为每个Stage之间都存在Shuffle，需要上个Stage的Shuffle Wrtire的数据</p><h2 id="Spark-Task级调度"><a href="#Spark-Task级调度" class="headerlink" title="Spark Task级调度"></a>Spark Task级调度</h2><p>Spark Task的调度是由TaskScheduler来完成，由前文可知，DAGScheduler将Stage打包到TaskSet交给TaskScheduler，TaskScheduler会将TaskSet封装为TaskSetManager到调度队列中，TaskSetManager结构如下图所示。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830191254343.png" alt="image-20200830191254343"></p><p><font color="red"><strong>TaskSetManager负责监控管理同一个Stage中的Tasks，TaskScheduler就是以TaskSetManager为单元来调度任务。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830191444090.png" alt="image-20200830191444090"></p><p>前面也提到，<font color="red">TaskScheduler初始化后会启动SchedulerBackend，它负责跟外界打交道，接收Executor的注册信息，并维护Executor的状态</font>，所以说SchedulerBackend是管“获取任务”的，同时它在启动后会定期地去“询问”TaskScheduler有没有任务要运行，TaskScheduler在SchedulerBackend“问”它的时候，会从调度队列中按照指定的调度策略选择TaskSetManager去调度运行，大致方法调用流程如下图所示：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830191635299.png" alt="image-20200830191635299"></p><p>SchedulerBackEnd收到待执行的任务后从TaskSetPool，开始联系Executor开始执行</p><h3 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h3><p>前面讲到，TaskScheduler会先把DAGScheduler给过来的TaskSet封装成TaskSetManager扔到任务队列里，然后再从任务队列里按照一定的规则把它们取出来在SchedulerBackend给过来的Executor上运行。<font color="red">这个调度过程实际上还是比较粗粒度的，是面向TaskSetManager的</font></p><p>TaskScheduler是以树的方式来管理任务队列，树中的节点类型为Schdulable，叶子节点为TaskSetManager，非叶子节点为Pool，下图是它们之间的继承关系。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200830192011398.png" alt="image-20200830192011398"></p><p>TaskScheduler支持两种调度策略，<strong>一种是FIFO，也是默认的调度策略，另一种是FAIR</strong>。在TaskScheduler初始化过程中会实例化rootPool，表示树的根节点，是Pool类型。</p><h3 id="失败重试和黑名单"><a href="#失败重试和黑名单" class="headerlink" title="失败重试和黑名单"></a>失败重试和黑名单</h3><p>除了选择合适的Task调度运行外，还需要监控Task的执行状态，前面也提到，与外部打交道的是<code>SchedulerBackend</code>，Task被提交到Executor启动执行后，Executor会将执行状态上报给SchedulerBackend，SchedulerBackend则告诉TaskScheduler，TaskScheduler找到该Task对应的TaskSetManager，并通知到该TaskSetManager，这样TaskSetManager就知道Task的失败与成功状态，<font color="red">对于失败的Task，会记录它失败的次数，如果失败次数还没有超过最大重试次数，那么就把它放回待调度的Task池子中，否则整个Application失败。</font></p><p><font color="red">在记录Task失败次数过程中，会记录它上一次失败所在的Executor Id和Host，这样下次再调度这个Task时，会使用黑名单机制，避免它被调度到上一次失败的节点上，起到一定的容错作用。</font>黑名单记录Task上一次失败所在的Executor Id和Host，以及其对应的“拉黑”时间，“拉黑”时间是指这段时间内不要再往这个节点上调度这个Task了。</p><h1 id="Spark-Shuffle解析"><a href="#Spark-Shuffle解析" class="headerlink" title="Spark Shuffle解析"></a>Spark Shuffle解析</h1><h2 id="Shuffle要点"><a href="#Shuffle要点" class="headerlink" title="Shuffle要点"></a>Shuffle要点</h2><h3 id="ShuffleMapStage与ResultStage"><a href="#ShuffleMapStage与ResultStage" class="headerlink" title="ShuffleMapStage与ResultStage"></a>ShuffleMapStage与ResultStage</h3><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831205831081.png" alt="image-20200831205831081"></p><p>在划分stage时，最后一个stage称为finalStage，它本质上是一个ResultStage对象，前面的所有stage被称为ShuffleMapStage。</p><p>ShuffleMapStage的结束伴随着shuffle文件的写磁盘。除了第一个ShuffleMapStage，剩余的也都会读读盘。</p><p>ResultStage基本上对应代码中的action算子，即将一个函数应用在RDD的各个partition的数据集上，意味着一个job的运行结束。</p><h3 id="Shuffle中任务个数"><a href="#Shuffle中任务个数" class="headerlink" title="Shuffle中任务个数"></a>Shuffle中任务个数</h3><p>我们知道，Spark Shuffle分为map阶段和reduce阶段，或者称之为<code>ShuffleRead</code>阶段和<code>ShuffleWrite</code>阶段，那么对于一次Shuffle，map过程和reduce过程都会由若干个task来执行，那么map task和reduce task的数量是如何确定的呢？</p><p>假设Spark任务从HDFS中读取数据，<font color="red">那么初始RDD分区个数由该文件的split个数决定</font>，也就是一个split对应生成的RDD的一个partition，我们假设初始partition个数为N。</p><p>初始RDD经过一系列算子计算后（<strong>假设没有执行repartition和coalesce算子进行重分区</strong>，则分区个数不变，仍为N，如果经过重分区算子，那么分区个数变为M），我们假设分区个数不变，<font color="red">当执行到Shuffle操作时，map端的task个数和partition个数一致，即map task为N个。</font></p><p><font color="red"><strong>reduce端的stage默认取spark.default.parallelism这个配置项的值作为分区数，如果没有配置，则以map端的最后一个RDD的分区数作为其分区数（也就是N），那么分区数就决定了reduce端的task的个数。</strong></font></p><h3 id="Reduce端数据的读取"><a href="#Reduce端数据的读取" class="headerlink" title="Reduce端数据的读取"></a>Reduce端数据的读取</h3><p>根据stage的划分我们知道，map端task和reduce端task不在相同的stage中，map task位于ShuffleMapStage，reduce task位于ResultStage，map task会先执行，那么后执行的reduce task如何知道从哪里去拉取map task落盘后的数据呢？</p><p>reduce端的数据拉取过程如下：</p><ol><li>map task 执行完毕后会将计算状态以及磁盘小文件位置等信息封装到MapStatus对象中，然后由本进程中的MapOutPutTrackerWorker对象将mapStatus对象发送给Driver进程的MapOutPutTrackerMaster对象；</li><li>在reduce task开始执行之前会先让本进程中的MapOutputTrackerWorker向Driver进程中的MapoutPutTrakcerMaster发动请求，请求磁盘小文件位置信息；</li><li> 当所有的Map task执行完毕后，Driver进程中的MapOutPutTrackerMaster就掌握了所有的磁盘小文件的位置信息。此时MapOutPutTrackerMaster会告诉MapOutPutTrackerWorker磁盘小文件的位置信息；</li><li>完成之前的操作之后，由BlockTransforService去Executor0所在的节点拉数据，默认会启动五个子线程。每次拉取的数据量不能超过48M（reduce task每次最多拉取48M数据，将拉来的数据存储到Executor内存的20%内存中）。</li></ol><h2 id="HashShuffle"><a href="#HashShuffle" class="headerlink" title="HashShuffle"></a>HashShuffle</h2><p>以下的讨论都假设每个Executor有1个CPU core。</p><h3 id="未经优化的HashShuffleManager"><a href="#未经优化的HashShuffleManager" class="headerlink" title="未经优化的HashShuffleManager"></a>未经优化的HashShuffleManager</h3><p>默认shuffle前后分区是不变的，所以没有优化后的HashShuffleManager每个Task任务都会生成n个文件，n是分区数，但是这样生成的文件太多，效率太慢</p><p>shuffle write阶段，主要就是在一个stage结束计算之后，为了下一个stage可以执行shuffle类的算子（比如reduceByKey），而将每个task处理的数据按key进行“划分”。<font color="red">所谓“划分”，就是对相同的key执行hash算法，从而将相同key都写入同一个磁盘文件中，而每一个磁盘文件都只属于下游stage的一个task。</font>在将数据写入磁盘之前，会先将数据写入内存缓冲中，当内存缓冲填满之后，才会溢写到磁盘文件中去。</p><p><font color="red"><strong>下一个stage的task有多少个，当前stage的每个task就要创建多少份磁盘文件。</strong></font>比如下一个stage总共有100个task，那么当前stage的每个task都要创建100份磁盘文件。如果当前stage有50个task，总共有10个Executor，每个Executor执行5个task，那么每个Executor上总共就要创建500个磁盘文件，所有Executor上会创建5000个磁盘文件。由此可见，未经优化的shuffle write操作所产生的磁盘文件的数量是极其惊人的。</p><p>shuffle read阶段，通常就是一个stage刚开始时要做的事情。<font color="red">此时该stage的每一个task就需要将上一个stage的计算结果中的所有相同key，从各个节点上通过网络都拉取到自己所在的节点上，然后进行key的聚合或连接等操作。</font>由于shuffle write的过程中，map task给下游stage的每个reduce task都创建了一个磁盘文件，因此shuffle read的过程中，每个reduce task只要从上游stage的所有map task所在节点上，拉取属于自己的那一个磁盘文件即可。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831213230836.png" alt="image-20200831213230836"></p><h3 id="优化后的HashShuffleManager"><a href="#优化后的HashShuffleManager" class="headerlink" title="优化后的HashShuffleManager"></a>优化后的HashShuffleManager</h3><p>为了优化HashShuffleManager我们可以设置一个参数，spark.shuffle. consolidateFiles，该参数默认值为false，将其设置为true即可开启优化机制，通常来说，如果我们使用HashShuffleManager，那么都建议开启这个选项。</p><p>开启consolidate机制之后，在shuffle write过程中，task就不是为下游stage的每个task创建一个磁盘文件了，此时会出现<strong>shuffleFileGroup</strong>的概念，<font color="red">每个shuffleFileGroup会对应一批磁盘文件，磁盘文件的数量与下游stage的task数量是相同的。</font>一个Executor上有多少个CPU core，就可以并行执行多少个task。而第一批并行执行的每个task都会创建一个shuffleFileGroup，并将数据写入对应的磁盘文件内。</p><p>当Executor的CPU core执行完一批task，<font color="red">接着执行下一批task时，下一批task就会复用之前已有的shuffleFileGroup，包括其中的磁盘文件，</font>也就是说，此时task会将数据写入已有的磁盘文件中，而不会写入新的磁盘文件中。因此，consolidate机制允许不同的task复用同一批磁盘文件，这样就可以有效将多个task的磁盘文件进行一定程度上的合并，从而大幅度减少磁盘文件的数量，进而提升shuffle write的性能。</p><p>也就是Executor的每个核core会创建n个文件，n是下个stage的并行度。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831213702651.png" alt="image-20200831213702651"></p><h2 id="SortShuffle解析🔺"><a href="#SortShuffle解析🔺" class="headerlink" title="SortShuffle解析🔺"></a>SortShuffle解析🔺</h2><p>SortShuffleManager的运行机制主要分成两种，<strong>一种是普通运行机制，另一种是bypass运行机制。</strong><font color="red">当shuffle read task的数量小于等于spark.shuffle.sort. bypassMergeThreshold参数的值时（默认为200），就会启用bypass机制。</font></p><h3 id="普通运行机制"><a href="#普通运行机制" class="headerlink" title="普通运行机制"></a>普通运行机制</h3><p>在该模式下，<font color="red">数据会先写入一个内存数据结构中，</font>此时根据不同的shuffle算子，可能选用不同的数据结构。<strong>如果是reduceByKey这种聚合类的shuffle算子，那么会选用Map数据结构</strong>，一边通过Map进行聚合，一边写入内存；<strong>如果是join这种普通的shuffle算子，那么会选用Array数据结构</strong>，直接写入内存。接着，每写一条数据进入内存数据结构之后，就会判断一下，是否达到了某个临界阈值。<strong>如果达到临界阈值的话，那么就会尝试将内存数据结构中的数据溢写到磁盘，然后清空内存数据结构。</strong></p><p><font color="red">在溢写到磁盘文件之前，会先根据key对内存数据结构中已有的数据进行排序。排序过后，会分批将数据写入磁盘文件。</font>默认的batch数量是10000条，也就是说，排序好的数据，会以每批1万条数据的形式分批写入磁盘文件。写入磁盘文件是通过Java的BufferedOutputStream实现的。BufferedOutputStream是Java的缓冲输出流，首先会将数据缓冲在内存中，当内存缓冲满溢之后再一次写入磁盘文件中，这样可以减少磁盘IO次数，提升性能。</p><p><font color="red">一个task将所有数据写入内存数据结构的过程中，会发生多次磁盘溢写操作，也就会产生多个临时文件。最后会将之前所有的临时磁盘文件都进行合并，这就是merge过程，此时会将之前所有临时磁盘文件中的数据读取出来，然后依次写入最终的磁盘文件之中。</font>此外，由于一个task就只对应一个磁盘文件，<strong>也就意味着该task为下游stage的task准备的数据都在这一个文件中，因此还会单独写一份索引文件</strong>，其中标识了下游各个task的数据在文件中的start offset与end offset。</p><p>这与Kafka中的Partition的索引文件、日志文件思想类似，通过索引来使文件读取加快</p><p>普通运行机制的SortShuffleManager工作原理如图所示：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831214716757.png" alt="image-20200831214716757"></p><p><font color="red">*<em>总结来说，有几个并行任务就有几个文件，相对于优化后的HashShuffleManager，它是有几个核心，既有几个核心</em>并行度（主要取决于并行度）的文件。**</font></p><h3 id="ByPass机制"><a href="#ByPass机制" class="headerlink" title="ByPass机制"></a>ByPass机制</h3><p>bypass运行机制的触发条件如下：</p><ul><li>shuffle map task数量小于spark.shuffle.sort.bypassMergeThreshold参数的值。</li><li>不是聚合类的shuffle算子。</li></ul><p>此时，每个task会为每个下游task都创建一个临时磁盘文件，并将数据按key进行hash然后根据key的hash值，将key写入对应的磁盘文件之中。当然，写入磁盘文件时也是先写入内存缓冲，缓冲写满之后再溢写到磁盘文件的。最后，同样会将所有临时磁盘文件都合并成一个磁盘文件，并创建一个单独的索引文件。</p><p><font color="red">该过程的磁盘写机制其实跟未经优化的HashShuffleManager是一模一样的，因为都要创建数量惊人的磁盘文件，只是在最后会做一个磁盘文件的合并而已。</font>因此少量的最终磁盘文件，也让该机制相对未经优化的HashShuffleManager来说，shuffle read的性能会更好。</p><p>而该机制与普通SortShuffleManager运行机制的不同在于：</p><ol><li>第一，<strong>磁盘写机制不同；</strong></li><li>第二，<strong>不会进行排序。也就是说，启用该机制的最大好处在于，shuffle write过程中，不需要进行数据的排序操作，也就节省掉了这部分的性能开销。</strong></li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831214852355.png" alt="image-20200831214852355"></p><h1 id="Spark内存管理"><a href="#Spark内存管理" class="headerlink" title="Spark内存管理"></a>Spark内存管理</h1><p>在执行Spark 的应用程序时，Spark 集群会启动 Driver 和 Executor 两种 JVM 进程，前者为主控进程，负责创建 Spark 上下文，提交 Spark 作业（Job），并将作业转化为计算任务（Task），在各个 Executor 进程间协调任务的调度，后者负责在工作节点上执行具体的计算任务，并将结果返回给 Driver，同时为需要持久化的 RDD 提供存储功能。由于 Driver 的内存管理相对来说较为简单，本节主要对 Executor 的内存管理进行分析，下文中的 Spark 内存均特指 Executor 的内存。</p><h2 id="内存空间分配"><a href="#内存空间分配" class="headerlink" title="内存空间分配"></a>内存空间分配</h2><h3 id="统一内存管理"><a href="#统一内存管理" class="headerlink" title="统一内存管理"></a>统一内存管理</h3><p>Spark 1.6 之后引入的统一内存管理机制，存储内存和执行内存共享同一块空间，可以动态占用对方的空闲区域，统一内存管理的堆内内存结构如图所示：</p><p><strong>堆外内存</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831215139324.png" alt="image-20200831215139324"></p><p><strong>堆内内存</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831215144277.png" alt="image-20200831215144277"></p><ul><li>storage：存储RDD缓存</li><li>Executor：进行计算需要的内存</li><li>Other：用户自定义的数据结构和未缓存的RDD</li></ul><p><font color="red">其中最重要的优化在于动态占用机制，其规则如下：</font></p><ol><li>   设定基本的存储内存和执行内存区域（spark.storage.storageFraction 参数），该设定确定了双方各自拥有的空间的范围；</li><li>   双方的空间都不足时，则存储到硬盘；若己方空间不足而对方空余时，可借用对方的空间;（存储空间不足是指不足以放下一个完整的 Block）</li><li>   <strong>执行内存的空间被对方占用后，可让对方将占用的部分转存到硬盘，然后”归还”借用的空间；</strong></li><li>   <strong>存储内存的空间被对方占用后，无法让对方”归还”，因为需要考虑 Shuffle 过程中的很多因素，实现起来较为复杂。</strong></li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200831215719557.png" alt="image-20200831215719557"></p><p><font color="red"></font></p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark学习笔记-SparkStreaming</title>
      <link href="2020/08/26/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkStreaming/"/>
      <url>2020/08/26/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkStreaming/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-Streaming概述"><a href="#Spark-Streaming概述" class="headerlink" title="Spark Streaming概述"></a>Spark Streaming概述</h1><h2 id="Spark-Streaming是什么"><a href="#Spark-Streaming是什么" class="headerlink" title="Spark Streaming是什么"></a>Spark Streaming是什么</h2><p>Spark Streaming用于流式数据的处理。Spark Streaming支持的数据输入源很多，<font color="red">例如：Kafka、Flume、Twitter、ZeroMQ和简单的TCP套接字等等</font>。数据输入后可以用Spark的高度抽象原语如：<strong>map、reduce、join、window等进行运算</strong>。而结果也能保存在很多地方，<strong>如HDFS，数据库</strong>等。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200828193447365.png" alt="image-20200828193447365"></p><p>和Spark基于RDD的概念很相似，Spark Streaming使用<font color="red">离散化流(discretized stream)</font>作为抽象表示，叫作DStream。DStream 是随时间推移而收到的数据的序列。在内部，<strong>每个时间区间收到的数据都作为 RDD 存在</strong>，而DStream是由这些RDD所组成的序列(因此得名“<strong>离散化</strong>”)。</p><p><font color="red"><strong>注意</strong>：离散化的反义词就是连续，这证明SparkStreaming并不是真正的实时处理(来一条计算一条)，而是每次计算小批量的数据，小批量的数据值得就是一定采集周期之内的数据。</font></p><h1 id="DStream入门"><a href="#DStream入门" class="headerlink" title="DStream入门"></a>DStream入门</h1><p><code>DStream</code>是SparkStreaming计算的抽象。例如：Spark Core计算中的RDD，SparkSQL中的DS、DF。</p><h2 id="无状态的WordCount案例实操"><a href="#无状态的WordCount案例实操" class="headerlink" title="无状态的WordCount案例实操"></a>无状态的WordCount案例实操</h2><p>需求：使用netcat工具向9999端口不断的发送数据，通过SparkStreaming读取端口数据并统计不同单词出现的次数</p><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>scala</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建SparkConf并设置App名称</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WC&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化SparkStreamingContext</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.通过监控端口创建DStream，读进来的数据为一行行</span></span><br><span class="line">    <span class="keyword">val</span> lineStreams: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">&quot;192.168.0.201&quot;</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将每一行数据做切分，形成一个个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordStreams: <span class="type">DStream</span>[<span class="type">String</span>] = lineStreams.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将单词映射成元组（word,1）</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOneStreams: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordStreams.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将相同的单词次数做统计</span></span><br><span class="line">    <span class="keyword">val</span> wordAndCountStreams: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOneStreams.reduceByKey(_+_)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    wordAndCountStreams.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动SparkStreamingContext的收集器，收集器必须一直开启，才能收集到数据</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    <span class="comment">// 主程序等待收集器关闭，然后主程序关闭</span></span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200828195052616.png" alt="image-20200828195052616"></p><p><font color="red">注意：如果程序运行时，log日志太多，可以将spark conf目录下的log4j文件里面的日志级别改成WARN。并加入到项目中</font></p><hr><p><strong>程序解析</strong></p><p><code>Discretized Stream</code>是Spark Streaming的基础抽象，代表持续性的数据流和经过各种Spark原语操作后的结果数据流。在内部实现上，<strong>DStream是一系列连续的RDD来表示</strong>。每个RDD含有一段时间间隔内的数据，如下图：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200828195323123.png" alt="image-20200828195323123"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200828195402058.png" alt="image-20200828195402058"></p><h1 id="DStream创建"><a href="#DStream创建" class="headerlink" title="DStream创建"></a>DStream创建</h1><p>Spark Streaming原生支持一些不同的数据源。一些“核心”数据源已经被打包到<code>Spark Streaming </code>的 Maven 工件中，而其他的一些则可以通过<code>spark-streaming-kafka</code>等附加工件获取。每个接收器都以 Spark 执行器程序中<font color="red"><strong>一个长期运行的任务的形式运行，因此会占据分配给应用的 CPU 核心。</strong>此外，我们还需要有可用的 CPU 核心来处理数据。</font>这意味着如果要运行多个接收器，<strong>就必须至少有和接收器数目相同的核心数</strong>，还要加上用来完成计算所需要的核心数。</p><p><font color="bule">例如，如果我们想要在流计算应用中运行 10 个接收器，那么至少需要为应用分配 11 个 CPU 核心。所以如果在本地模式运行，**不要使用local[1]**。</font>因为1个核心无法同时满足接收器和计算的任务。</p><h2 id="文件数据源"><a href="#文件数据源" class="headerlink" title="文件数据源"></a>文件数据源</h2><h3 id="用法及说明"><a href="#用法及说明" class="headerlink" title="用法及说明"></a>用法及说明</h3><p>文件数据流：能够读取所有HDFS API兼容的文件系统文件，通过fileStream方法进行读取，Spark Streaming 将会监控 dataDirectory 目录并不断处理移动进来的文件，。<font color="red"><strong>记住目前不支持嵌套目录</strong></font></p><p>一般不会使用，因为FLume是一套处理文件日志的收集系统，用它会好，但是它又没有Kafka好，因为Flume是推数据，不考虑计算节点的处理能力，有可能造成计算节点中数据的堆积，而Kafka不会，是计算节点主动读取Kafka数据，计算能力多大，读取多少数据。</p><p><code>streamingContext.textFileStream(dataDirectory)</code></p><p><font color="red"><strong>注意事项</strong></font></p><ol><li>文件需要有相同的数据格式；</li><li>文件进入 <code>dataDirectory</code>的方式需要通过移动或者重命名来实现；</li><li>一旦文件移动进目录，则不能再修改，即便修改了也不会读取新数据；</li></ol><h2 id="自定义数据源"><a href="#自定义数据源" class="headerlink" title="自定义数据源"></a>自定义数据源</h2><h3 id="用法及说明-1"><a href="#用法及说明-1" class="headerlink" title="用法及说明"></a>用法及说明</h3><p>需要继承<code>Receiver</code>，并实现<code>onStart</code>、<code>onStop</code>方法来自定义数据源采集。</p><h3 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h3><p>我们已上面的读取某个套接字的数据的数据源为例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">BufferedReader</span>, <span class="type">InputStreamReader</span>&#125;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">Socket</span></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.<span class="type">StandardCharsets</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.receiver.<span class="type">Receiver</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerReceiver</span>(<span class="params">host: <span class="type">String</span>, port: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Receiver</span>[<span class="type">String</span>](<span class="params"><span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最初启动的时候，调用该方法，作用为：读数据并将数据发送给Spark</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onStart</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Thread</span>(<span class="string">&quot;Socket Receiver&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() &#123;</span><br><span class="line">        receive()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;.start()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//读数据并将数据发送给Spark</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个Socket</span></span><br><span class="line">    <span class="keyword">var</span> socket: <span class="type">Socket</span> = <span class="keyword">new</span> <span class="type">Socket</span>(host, port)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个变量，用来接收端口传过来的数据</span></span><br><span class="line">    <span class="keyword">var</span> input: <span class="type">String</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个BufferedReader用于读取端口传来的数据</span></span><br><span class="line">    <span class="keyword">val</span> reader = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">InputStreamReader</span>(socket.getInputStream, <span class="type">StandardCharsets</span>.<span class="type">UTF_8</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据</span></span><br><span class="line">    input = reader.readLine()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当receiver没有关闭并且输入数据不为空，则循环发送数据给Spark</span></span><br><span class="line">    <span class="keyword">while</span> (!isStopped() &amp;&amp; input != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 将读到的数据加入数据源中存储</span></span><br><span class="line">      store(input)</span><br><span class="line">      input = reader.readLine()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳出循环则关闭资源</span></span><br><span class="line">    reader.close()</span><br><span class="line">    socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重启任务</span></span><br><span class="line">    restart(<span class="string">&quot;restart&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onStop</span></span>(): <span class="type">Unit</span> = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用自定义的数据源采集数据</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.<span class="type">DStream</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FileStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.初始化Spark配置信息</span></span><br><span class="line"><span class="type">Val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">.setAppName(<span class="string">&quot;StreamWordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化SparkStreamingContext</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.创建自定义receiver的Streaming</span></span><br><span class="line"><span class="keyword">val</span> lineStream = ssc.receiverStream(<span class="keyword">new</span> <span class="type">CustomerReceiver</span>(<span class="string">&quot;hadoop102&quot;</span>, <span class="number">9999</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.将每一行数据做切分，形成一个个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordStreams = lineStream.flatMap(_.split(<span class="string">&quot;\t&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.将单词映射成元组（word,1）</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOneStreams = wordStreams.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.将相同的单词次数做统计</span></span><br><span class="line">    <span class="keyword">val</span> wordAndCountStreams] = wordAndOneStreams.reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.打印</span></span><br><span class="line">    wordAndCountStreams.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.启动SparkStreamingContext</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Kafka数据源🔺"><a href="#Kafka数据源🔺" class="headerlink" title="Kafka数据源🔺"></a>Kafka数据源🔺</h2><h3 id="用法及说明-2"><a href="#用法及说明-2" class="headerlink" title="用法及说明"></a>用法及说明</h3><p><font color="red">在工程中需要引入 Maven 工件· spark- streaming-kafka_2.10 ·来使用它</font>。包内提供的 <code>KafkaUtils </code>对象可以在 <code>StreamingContext</code> 和<code>JavaStreamingContext</code>中以你的 Kafka 消息创建出 DStream。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming-kafka-0-8_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于 <code>KafkaUtils</code> 可以订阅多个主题，因此它创建出的 DStream 由成对的主题和消息组成。要创建出一个流数据，需要使用 ：</p><ol><li><code>StreamingContext </code>实例</li><li>一个由逗号隔开的<code>ZooKeeper</code>主机列表字符串</li><li>消费者组的名字(唯一名字)</li><li>以及一个从主题到针对这个主题的接收器线程数的映射表来调用<code>createStream()</code>方法。</li></ol><p>因为Kafka的topic有分区数的概念，所有分区的数据合起来便是整个topic的数据，而topic的分区至多被一个消费者消费<font color="red">，所以启动的消费者的线程应该&lt;=topic的分区数。</font></p><p><code>// Map of (topic_name to numPartitions) to consume. Each partition is consumed in its own thread   </code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//3.通过监控端口创建DStream，读进来的数据为一行行</span></span><br><span class="line"><span class="comment">//    lineStreams = k-v  value才是kafka输入的数据</span></span><br><span class="line">    <span class="keyword">val</span> lineStreams: <span class="type">ReceiverInputDStream</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">KafkaUtils</span>.createStream(</span><br><span class="line">      ssc,</span><br><span class="line">      <span class="string">&quot;192.168.0.201:2181&quot;</span>,</span><br><span class="line">      <span class="string">&quot;group1&quot;</span>,</span><br><span class="line">      <span class="type">Map</span>((<span class="string">&quot;myTopic&quot;</span>, <span class="number">3</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="comment">// Map of (topic_name to numPartitions) to consume. Each partition is consumed in its own thread              </span></span><br></pre></td></tr></table></figure><h3 id="WC无状态的案例实操"><a href="#WC无状态的案例实操" class="headerlink" title="WC无状态的案例实操"></a>WC无状态的案例实操</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Kafka</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.创建SparkConf并设置App名称</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WC&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化SparkStreamingContext</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.通过监控端口创建DStream，读进来的数据为一行行</span></span><br><span class="line"><span class="comment">//    lineStreams = k-v  value才是kafka输入的数据</span></span><br><span class="line">    <span class="keyword">val</span> lineStreams: <span class="type">ReceiverInputDStream</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">KafkaUtils</span>.createStream(</span><br><span class="line">      ssc,</span><br><span class="line">      <span class="string">&quot;192.168.0.201:2181&quot;</span>,</span><br><span class="line">      <span class="string">&quot;group1&quot;</span>,</span><br><span class="line">      <span class="type">Map</span>((<span class="string">&quot;myTopic&quot;</span>, <span class="number">3</span>))</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将每一行数据做切分，形成一个个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordStreams: <span class="type">DStream</span>[<span class="type">String</span>] = lineStreams.flatMap(_._2.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将单词映射成元组（word,1）</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOneStreams: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordStreams.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将相同的单词次数做统计</span></span><br><span class="line">    <span class="keyword">val</span> wordAndCountStreams: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOneStreams.reduceByKey(_+_)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    wordAndCountStreams.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动SparkStreamingContext的收集器，收集器必须一直开启，才能收集到数据</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    <span class="comment">// 主程序等待收集器关闭，然后主程序关闭</span></span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>Kafka</code>的操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop201 kafka]$ bin/kafka-topics.sh --zookeeper hadoop201:2181 --create --replication-factor 3 --partitions 3 --topic myTopic</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop201 kafka]$ bin/kafka-console-producer.sh --broker-list hadoop202:9092 --topic myTopic</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>idea程序执行</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200828203819133.png" alt="image-20200828203819133"></p><p><font color="red"><strong>注意</strong>：上面所有的程序都是无状态的计算，即每个采集周期之间的数据互不影响，但这是不合理的，流式处理应该汇总所有的数据进行统计计算。这称为<strong>有状态的计算</strong>，下面开始有状态的计算</font></p><h1 id="DStream的转换"><a href="#DStream的转换" class="headerlink" title="DStream的转换"></a>DStream的转换</h1><h2 id="无状态的转换"><a href="#无状态的转换" class="headerlink" title="无状态的转换"></a>无状态的转换</h2><p>无状态转化操作就是把简单的RDD转化操作应用到每个批次上，也就是转化DStream中的每一个RDD。部分无状态转化操作列在了下表中。</p><p><font color="red"><strong>注意</strong>，针对键值对的DStream转化操作(比如 reduceByKey())要添加import StreamingContext._才能在Scala中使用。</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200829144132973.png" alt="image-20200829144132973"></p><p>需要记住的是，尽管这些函数看起来像作用在整个流上一样，但事实上每个DStream在内部是由许多RDD(批次)组成，且无状态转化操作是分别<strong>应用到每个RDD上的</strong>。<strong>例如，reduceByKey()会归约每个时间区间中的数据，<font color="red">但不会归约不同区间之间的数据</font>。</strong> </p><p>举个例子，在之前的wordcount程序中，我们只会统计5秒内接收到的数据的单词个数，而不会累加。 </p><h2 id="有状态的转换🔺"><a href="#有状态的转换🔺" class="headerlink" title="有状态的转换🔺"></a>有状态的转换🔺</h2><h3 id="UpdateStateByKey"><a href="#UpdateStateByKey" class="headerlink" title="UpdateStateByKey"></a>UpdateStateByKey</h3><p>UpdateStateByKey原语用于记录历史记录，<font color="red">有时，我们需要在 DStream 中跨批次维护状态(例如流计算中累加wordcount)。</font>针对这种情况，updateStateByKey() 为我们提供了对一个状态变量的访问，<font color="red"><strong>用于键值对形式的 DStream。</strong></font></p><p>updateStateByKey() 的结果会是一个新的 DStream，其内部的 RDD 序列是由每个时间区间对应的(键，状态)对组成的。</p><p>updateStateByKey操作使得我们可以在用新信息进行更新时保持任意的状态。为使用这个功能，你需要： </p><ol><li>指定检查点目录，因为每次计算时会用到之前的数据，而不断累加的之前的数据是不能放入内存的，所以要设置目录存放这些数据。</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateStateByKey</span></span>[<span class="type">S</span>: <span class="type">ClassTag</span>](updateFunc: (<span class="type">Seq</span>[<span class="type">V</span>], <span class="type">Option</span>[<span class="type">S</span>]) =&gt; <span class="type">Option</span>[<span class="type">S</span>])</span><br></pre></td></tr></table></figure><ol><li>可以看到泛型和参数，其中泛型是之前的数据的此KEY的Value的类型</li><li>参数中：Seq序列是最新的采集周期的数据相同key的集合</li><li>Option{S}是之前计算好的此KEY对应的最后Value，为什么是Option，如果是第一次计算，则他是空</li></ol><p><strong>改良的WC</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Kafka</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.创建SparkConf并设置App名称</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WC&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化SparkStreamingContext  Seconds(5)采集周期，5S生成一个DStream即RDD</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">    ssc.sparkContext.setCheckpointDir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.通过监控端口创建DStream，读进来的数据为一行行</span></span><br><span class="line">    <span class="comment">//    lineStreams = k-v  value才是kafka输入的数据</span></span><br><span class="line">    <span class="keyword">val</span> lineStreams: <span class="type">ReceiverInputDStream</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">KafkaUtils</span>.createStream(</span><br><span class="line">      ssc,</span><br><span class="line">      <span class="string">&quot;192.168.0.201:2181&quot;</span>,</span><br><span class="line">      <span class="string">&quot;group1&quot;</span>,</span><br><span class="line">      <span class="type">Map</span>((<span class="string">&quot;myTopic&quot;</span>, <span class="number">3</span>))</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将每一行数据做切分，形成一个个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordStreams: <span class="type">DStream</span>[<span class="type">String</span>] = lineStreams.flatMap(_._2.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将单词映射成元组（word,1）</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOneStreams: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordStreams.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    def updateStateByKey[S: ClassTag](updateFunc: (Seq[V], Option[S]) =&gt; Option[S])</span></span><br><span class="line">    <span class="comment">//  可以看到泛型和参数，其中泛型是之前的数据的此KEY的Value的类型，其中</span></span><br><span class="line">    <span class="comment">// 参数中：Seq序列是最新的采集周期的数据相同key的集合，Option&#123;S&#125;是之前计算好的此KEY对应的最后Value，为什么是Option，如果是第一次计算，则他是空</span></span><br><span class="line">    <span class="comment">// 定义更新状态方法，参数values为当前批次单词频度，state为以往批次单词频度</span></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOneStreams.updateStateByKey &#123;</span><br><span class="line">      <span class="keyword">case</span> (seq, buffer) =&gt;</span><br><span class="line">        <span class="type">Some</span>(seq.sum + buffer.getOrElse(<span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动SparkStreamingContext的收集器，收集器必须一直开启，才能收集到数据</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    <span class="comment">// 主程序等待收集器关闭，然后主程序关闭</span></span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200829152850299.png" alt="image-20200829152850299"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200829153242722.png" alt="image-20200829153242722"></p><p>可以发现数值一直在变大</p><h3 id="Window-Operations"><a href="#Window-Operations" class="headerlink" title="Window Operations"></a>Window Operations</h3><p><code>Window Operations</code>可以设<strong>置窗口的大小</strong>和<strong>滑动窗口的间隔</strong>来动态的获取当前Steaming的允许状态。基于窗口的操作会在一个比 StreamingContext 的批次间隔更长的时间范围内，通过整合多个批次的结果，计算出整个窗口的结果。</p><p><strong>其中：</strong></p><ol><li>窗口的大小必须是采集周期的整数倍</li><li>滑动窗口的间隔必须是采集周期的整数倍</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200829153601198.png" alt="image-20200829153601198"></p><p>例如：上图窗口大小就是采集周期的三倍；滑动窗口的间隔则是采集周期的两倍</p><p><font color="red"><strong>注意：所有基于窗口的操作都需要两个参数，分别为窗口时长以及滑动步长，两者都必须是 StreamContext 的批次间隔的整数倍</strong></font></p><p><code>window(windowLength, slideInterval)</code>: 基于对源DStream窗化的批次进行计算返回一个新的Dstream</p><h2 id="其他重要操作🔺"><a href="#其他重要操作🔺" class="headerlink" title="其他重要操作🔺"></a>其他重要操作🔺</h2><h3 id="Transform🔺"><a href="#Transform🔺" class="headerlink" title="Transform🔺"></a>Transform🔺</h3><p>Transform原语允许DStream上执行任意的RDD-to-RDD函数。即使这些函数并没有在DStream的API中暴露出来，通过该函数可以方便的扩展Spark API。<strong>该函数每一批次调度一次</strong>。其实也就是对DStream中的RDD应用转换。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200829154426732.png" alt="image-20200829154426732"></p><h1 id="DStream输出"><a href="#DStream输出" class="headerlink" title="DStream输出"></a>DStream输出</h1><p>输出操作指定了对流数据经转化操作得到的数据所要执行的操作(例如把结果推入外部数据库或输出到屏幕上)。与RDD中的惰性求值类似，如果一个DStream及其派生出的DStream都没有被执行输出操作，那么这些DStream就都不会被求值。 <font color="red">如果StreamingContext中没有设定输出操作，整个context就都不会启动。</font></p><p>输出操作如下：</p><ol><li>print()：在运行流程序的驱动结点上打印DStream中每一批次数据的最开始10个元素。这用于开发和调试。在Python API中，同样的操作叫print()。</li><li>saveAsTextFiles(prefix, [suffix])：以text文件形式存储这个DStream的内容。每一批次的存储文件名基于参数中的prefix和suffix。”prefix-Time_IN_MS[.suffix]”. </li><li>saveAsObjectFiles(prefix, [suffix])：以Java对象序列化的方式将Stream中的数据保存为 SequenceFiles . 每一批次的存储文件名基于参数中的为”prefix-TIME_IN_MS[.suffix]”. Python中目前不可用。</li><li>saveAsHadoopFiles(prefix, [suffix])：将Stream中的数据保存为 Hadoop files. 每一批次的存储文件名基于参数中的为”prefix-TIME_IN_MS[.suffix]”。<br>Python API Python中目前不可用。</li><li>foreachRDD(func)：<strong>这是最通用的输出操作</strong>，即将函数 func 用于产生于 stream的每一个RDD。其中参数传入的函数func应该实现将每一个RDD中数据推送到外部系统，如将RDD存入文件或者通过网络将其写入数据库。注意：函数func在运行流应用的驱动中被执行，同时其中一般函数RDD操作从而强制其对于流RDD的运算。</li></ol><p><font color="red"></font></p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark学习笔记-SparkSQL</title>
      <link href="2020/08/24/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkSQL/"/>
      <url>2020/08/24/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-SQL概述"><a href="#Spark-SQL概述" class="headerlink" title="Spark SQL概述"></a>Spark SQL概述</h1><h2 id="什么是Spark-SQL"><a href="#什么是Spark-SQL" class="headerlink" title="什么是Spark SQL"></a>什么是Spark SQL</h2><p>park SQL是Spark用来处理结构化数据的一个模块，它提供了2个编程抽象：<font color="red">DataFrame和DataSet</font>，并且作为分布式SQL查询引擎的作用。</p><p>将Spark SQL转换成RDD，然后提交到集群执行，执行效率非常快！</p><h2 id="Spark-SQL的特点"><a href="#Spark-SQL的特点" class="headerlink" title="Spark SQL的特点"></a>Spark SQL的特点</h2><ul><li>易整合</li><li>统一的数据访问方式</li><li>兼容Hive</li><li>标准的数据连接</li></ul><h2 id="什么是DataFrame"><a href="#什么是DataFrame" class="headerlink" title="什么是DataFrame"></a>什么是DataFrame</h2><p>与RDD类似，DataFrame也是一个分布式数据容器。然而DataFrame更像传统数据库的二维表格，除了数据以外，<strong>还记录数据的结构信息，即schema</strong>。同时，与Hive类似，DataFrame也支持嵌套数据类型（struct、array和map）。从API易用性的角度上看，DataFrame API提供的是一套高层的关系操作，比函数式的RDD API要更加友好，门槛更低。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200824211402757.png" alt="image-20200824211402757"></p><p>上图直观地体现了DataFrame和RDD的区别。左侧的RDD[Person]虽然以Person为类型参数，但Spark框架本身不了解Person类的内部结构。而右侧的DataFrame却提供了详细的结构信息，使得Spark SQL可以清楚地知道该数据集中包含哪些列，每列的名称和类型各是什么。DataFrame是为数据提供了Schema的视图。可以把它当做数据库中的一张表来对待，DataFrame也是懒执行的。性能上比RDD要高，主要原因：</p><p><font color="red">优化的执行计划：查询计划通过Spark catalyst optimiser进行优化。</font></p><p><font color="red">但是DataFrame只存储了结构信息，即在每一行中，只能通过索引来访问元素，并不能通过类型访问。因为DataFrame不保存类型信息。</font></p><h2 id="什么是DataSet"><a href="#什么是DataSet" class="headerlink" title="什么是DataSet"></a>什么是DataSet</h2><ol><li>是Dataframe API的一个扩展，是Spark最新的数据抽象。</li><li>用户友好的API风格，既具有类型安全检查也具有Dataframe的查询优化特性。</li><li>Dataset支持编解码器，当需要访问非堆上的数据时可以避免反序列化整个对象，提高了效率。</li><li><font color="red">样例类被用来在Dataset中定义数据的结构信息，样例类中每个属性的名称直接映射到DataSet中的字段名称。</font></li><li>Dataframe是Dataset的特列，DataFrame=Dataset[Row] ，所以可以通过as方法将Dataframe转换为Dataset。Row是一个类型，跟Car、Person这些的类型一样，所有的表结构信息我都用Row来表示。</li><li><font color="red"><strong>DataSet是强类型的</strong>。比如可以有Dataset[Car]，Dataset[Person].</font></li><li><font color="red">DataFrame只是知道字段，但是不知道字段的类型，所以在执行这些操作的时候是没办法在编译的时候检查是否类型失败的，比如你可以对一个String进行减法操作，在执行的时候才报错</font>，而DataSet不仅仅知道字段，<strong>而且知道字段类型，所以有更严格的错误检查。就跟JSON对象和类对象之间的类比</strong>。</li></ol><h2 id="RDD、DataFrame、DataSet🔺"><a href="#RDD、DataFrame、DataSet🔺" class="headerlink" title="RDD、DataFrame、DataSet🔺"></a>RDD、DataFrame、DataSet🔺</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200824213514197.png" alt="image-20200824213514197"></p><ul><li>RDD：没有结构和类型</li><li>DataFrame：有结构没类型。所以由DF变为RDD时，RDD存储的是ROW对象，此时只能通过索引获取值，因为它不存储类型</li><li>DataSet：有结构和类型。所以DS变RDD时，RDD存储的是确定的类，可以通过类访问确定类型的属性</li></ul><p>由于上述三者的关系，我们可以确定：</p><ol><li>RDD转换DF时，需要说明结构</li><li>RDD转换DS时，需要说明结构和类型。(类同时包含结构和类型)</li><li>DF转RDD时，直接转换，RDD存储ROW</li><li>DS转RDD时，直接转换，RDD存储具体的类</li></ol><h1 id="SparkSQL编程"><a href="#SparkSQL编程" class="headerlink" title="SparkSQL编程"></a>SparkSQL编程</h1><h2 id="SparkSession新的起始点"><a href="#SparkSession新的起始点" class="headerlink" title="SparkSession新的起始点"></a>SparkSession新的起始点</h2><p>在老的版本中，SparkSQL提供两种SQL查询起始点：一个叫<code>SQLContext</code>，用于Spark自己提供的SQL查询；一个叫<code>HiveContext</code>，用于连接Hive的查询。</p><p>SparkSession是Spark最新的SQL查询起始点，实质上是SQLContext和HiveContext的组合，所以在SQLContext和HiveContext上可用的API在SparkSession上同样是可以使用的。<font color="red">**<code>SparkSession</code>内部封装了<code>sparkContext</code>，所以计算实际上是由sparkContext完成的。**</font></p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>DataFrame只会知道数据的整体结构，当你查询一个列名<code>name</code>时<strong>，此时它并不知道它的类型，如果你进行操作编译时不会出错，当运行时才有可能出错。</strong></p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>在Spark SQL中<code>SparkSession</code>是创建<code>DataFrame</code>和执行SQL<strong>的入口</strong>，创建DataFrame有三种方式：</p><ul><li>通过Spark的数据源进行创建；</li><li>从一个存在的RDD进行转换；</li><li>还可以从Hive Table进行查询返回。</li></ul><h4 id="Spark数据源创建"><a href="#Spark数据源创建" class="headerlink" title="Spark数据源创建"></a><strong>Spark数据源创建</strong></h4><p>查看Spark数据源进行创建的文件格式</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.read.</span><br><span class="line">csv   format   jdbc   json   load   option   options   orc   parquet   schema   table   text   textFile</span><br></pre></td></tr></table></figure><p><strong>读取json文件创建DataFrame</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">&quot;file:///home/hadoop/test.json&quot;</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint, name: string]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+---+--------+</span><br><span class="line">|age|    name|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">| <span class="number">40</span>|    lisi|</span><br><span class="line">+---+--------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h4 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h4><p><a href="#RDD%E8%BD%ACDataFrame">点击跳转</a></p><h3 id="SQL风格语法🔺"><a href="#SQL风格语法🔺" class="headerlink" title="SQL风格语法🔺"></a>SQL风格语法🔺</h3><p>如果想以SQL形式读取数据，就必须有表，上面我们创建的对象<code>df</code>并不是表明，我们需要通过这个对象来创建一个临时视图<font color="red">，既然是视图，必然只可以查询。</font>然后就可以通过视图名来编写SQL来查询了！！</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.create</span><br><span class="line">createGlobalTempView   createOrReplaceTempView   createTempView</span><br><span class="line"></span><br><span class="line">scala&gt; df.createTempView(<span class="string">&quot;table&quot;</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; spark.sql(<span class="string">&quot;select * from table where age=40&quot;</span>).show</span><br><span class="line">+---+----+</span><br><span class="line">|age|name|</span><br><span class="line">+---+----+</span><br><span class="line">| <span class="number">40</span>|lisi|</span><br><span class="line">+---+----+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意</strong>：临时表是Session范围内的，Session退出后，表就失效了。</font>如果想应用范围内有效，可以使用全局表。注意使用全局表时需要全路径访问，如：global_temp.people</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.newSession.sql(<span class="string">&quot;select * from table where age=40&quot;</span>).show <span class="comment">// 错误</span></span><br><span class="line">scala&gt; df.createGlobalTempView(<span class="string">&quot;tmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; spark.newSession.sql(<span class="string">&quot;select * from global_temp.tmp&quot;</span>).show</span><br><span class="line">+---+--------+</span><br><span class="line">|age|    name|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">| <span class="number">40</span>|    lisi|</span><br><span class="line">+---+--------+</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果使用全局表的话，无论哪个Session环境都必须使用<code>global_temp.xxx</code>形式访问。</p><h3 id="DSL风格语法"><a href="#DSL风格语法" class="headerlink" title="DSL风格语法"></a>DSL风格语法</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.select(<span class="string">&quot;name&quot;</span>).show</span><br><span class="line">+--------+</span><br><span class="line">|    name|</span><br><span class="line">+--------+</span><br><span class="line">|zhangsan|</span><br><span class="line">|    lisi|</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt; df.select($<span class="string">&quot;age&quot;</span>+<span class="number">1</span>).show</span><br><span class="line">+---------+</span><br><span class="line">|(age + <span class="number">1</span>)|</span><br><span class="line">+---------+</span><br><span class="line">|       <span class="number">21</span>|</span><br><span class="line">|       <span class="number">41</span>|</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><ul><li><code>select</code>：只查看指定列数据</li><li><code>select($&quot;&quot;)</code>：以此列为变量进行其他计算</li></ul><h3 id="RDD转DataFrame"><a href="#RDD转DataFrame" class="headerlink" title="RDD转DataFrame"></a>RDD转DataFrame</h3><p>注意：如果需要RDD与DF或者DS之间操作，<font color="red">那么都需要引入<code> import spark.implicits._</code> <strong>【spark不是包名，而是sparkSession对象的名称】</strong></font></p><p><strong>前置条件：<font color="red">导入隐式转换并创建一个RDD</font></strong></p><p><strong>1. 通过手动指定结构</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> spark.implicits._</span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.makeRDD(<span class="number">1</span> to <span class="number">10</span>)</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">20</span>] at makeRDD at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = rdd.toDF(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [id: int]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+---+</span><br><span class="line">| id|</span><br><span class="line">+---+</span><br><span class="line">|  <span class="number">1</span>|</span><br><span class="line">|  <span class="number">2</span>|</span><br><span class="line">|  <span class="number">3</span>|</span><br><span class="line">|  <span class="number">4</span>|</span><br><span class="line">|  <span class="number">5</span>|</span><br><span class="line">|  <span class="number">6</span>|</span><br><span class="line">|  <span class="number">7</span>|</span><br><span class="line">|  <span class="number">8</span>|</span><br><span class="line">|  <span class="number">9</span>|</span><br><span class="line">| <span class="number">10</span>|</span><br><span class="line">+---+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><strong>2. 通过样例类指定结构，类同时包含结构和类型</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> spark.implicits._</span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>), (<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>)))</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">24</span>] at makeRDD at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">user</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">mapRdd</span> </span>= rdd.map(x=&gt;&#123;user(x._1, x._2)&#125;)</span><br><span class="line">mapRdd: org.apache.spark.rdd.<span class="type">RDD</span>[user] = <span class="type">MapPartitionsRDD</span>[<span class="number">25</span>] at map at &lt;console&gt;:<span class="number">31</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = mapRdd.toDF</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+--------+---+</span><br><span class="line">|    name|age|</span><br><span class="line">+--------+---+</span><br><span class="line">|zhangsan| <span class="number">20</span>|</span><br><span class="line">|    lisi| <span class="number">20</span>|</span><br><span class="line">+--------+---+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h3 id="DataFrame转RDD"><a href="#DataFrame转RDD" class="headerlink" title="DataFrame转RDD"></a>DataFrame转RDD</h3><p>DataFrame：有结构没类型。所以由DF变为RDD时，RDD存储的是ROW对象，此时只能通过索引获取值，因为它不存储类型</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> dfToRDD = df.rdd</span><br><span class="line">dfToRDD: org.apache.spark.rdd.<span class="type">RDD</span>[org.apache.spark.sql.<span class="type">Row</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">35</span>] at rdd at &lt;console&gt;:<span class="number">35</span></span><br><span class="line"></span><br><span class="line">scala&gt; dfToRDD.collect</span><br><span class="line">res11: <span class="type">Array</span>[org.apache.spark.sql.<span class="type">Row</span>] = <span class="type">Array</span>([zhangsan,<span class="number">20</span>], [lisi,<span class="number">20</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>请注意<code>Row</code>对象，它只能索引访问元素，而且它不知道字段的类型</p><h2 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><p><font color="red">因为<code>DataSet</code>创建时同时需要结构和类型，这时就需要使用到样例类了，因为类既有结构又有类型。</font>通过类创建DataSet很方便。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> spark.implicits._</span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span>  <span class="title">val</span> <span class="title">caseClassDS</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">&quot;Andy&quot;</span>, <span class="number">32</span>)).toDS()</span><br><span class="line">caseClassDS: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h3 id="RDD转DataSet"><a href="#RDD转DataSet" class="headerlink" title="RDD转DataSet"></a>RDD转DataSet</h3><p>SparkSQL能够自动将包含有<code>case</code>类的RDD转换成DataFrame，<code>case</code>类定义了table的结构，<font color="red"><strong>case类属性通过反射变成了表的列名。</strong></font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> spark.implicits._</span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>), (<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>)))</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">24</span>] at makeRDD at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">user</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">mapRdd</span> </span>= rdd.map(x=&gt;&#123;user(x._1, x._2)&#125;)</span><br><span class="line">mapRdd: org.apache.spark.rdd.<span class="type">RDD</span>[user] = <span class="type">MapPartitionsRDD</span>[<span class="number">25</span>] at map at &lt;console&gt;:<span class="number">31</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> ds = mapRdd.toDS</span><br></pre></td></tr></table></figure><h3 id="DataSet转RDD"><a href="#DataSet转RDD" class="headerlink" title="DataSet转RDD"></a>DataSet转RDD</h3><p>调用rdd方法即可。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span>  <span class="title">val</span> <span class="title">caseClassDS</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">&quot;Andy&quot;</span>, <span class="number">32</span>)).toDS()</span><br><span class="line">caseClassDS: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = caseClassDS.rdd</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Person</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">39</span>] at rdd at &lt;console&gt;:<span class="number">30</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h2 id="DataSet与DataFrame的互操作"><a href="#DataSet与DataFrame的互操作" class="headerlink" title="DataSet与DataFrame的互操作"></a>DataSet与DataFrame的互操作</h2><ol><li>DataFrame与DataSet相比的话少了类型，所以将DF的结构添加类型即可，可以通过<font color="red"><strong>case类属性通过反射变成了表的列名。</strong></font>主要操作<code>df.as[类]</code></li><li>DataSet与DataFrame相比的话，啥也不缺，直接转换即可：<code>ds.toDF</code></li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span>  <span class="title">val</span> <span class="title">caseClassDS</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">&quot;Andy&quot;</span>, <span class="number">32</span>)).toDS()</span><br><span class="line">caseClassDS: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = caseClassDS.toDF</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> ds = df.as[<span class="type">Person</span>]</span><br><span class="line">ds: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h1 id="Idea创建Spark-SQL程序"><a href="#Idea创建Spark-SQL程序" class="headerlink" title="Idea创建Spark SQL程序"></a>Idea创建Spark SQL程序</h1><p>IDEA中程序的打包和运行方式都和<code>SparkCore</code>类似，需要注意<code>Spark SQL</code>程序需要引入以下包，<font color="red"><code>SparkCore</code>的包中是没有<code>SparkSQL</code>的开发环境的</font></p><p><strong>Maven依赖中需要添加新的依赖项：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>程序环境三部曲</strong></p><ol><li>环境配置对象<code>sparkConfig</code></li><li>SparkSQL环境<code>sparkSession</code></li><li>DF与DS的相互隐式转换导入<code>import spark.implicits._</code></li></ol><p>注意：如果需要RDD与DF或者DS之间操作，<font color="red">那么都需要引入<code> import spark.implicits._</code> <strong>【spark不是包名，而是sparkSession对象的名称】</strong></font></p><p><strong>程序如下</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSql</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建配置对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;sql&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SparkSQL环境</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(config).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// SparkSession包含了SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>), (<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = initRDD.map(x =&gt; person(x._1, x._2)).toDF()</span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[person] = initRDD.map(x =&gt; person(x._1, x._2)).toDS()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Row</span>] = df.rdd</span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[person] = ds.rdd</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br></pre></td></tr></table></figure><p><font color="red"></font></p><h1 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h1><h2 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h2><p>一对一。</p><p>很简单，直接采用匿名函数即可。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSql</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建配置对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;udf&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SparkSQL环境</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(config).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SparkSession包含了SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>), (<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = initRDD.map(x =&gt; person(x._1, x._2)).toDF()</span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[person] = initRDD.map(x =&gt; person(x._1, x._2)).toDS()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------df与ds使用方法一致 --------------</span></span><br><span class="line">    ds.createTempView(<span class="string">&quot;ds_table&quot;</span>)</span><br><span class="line">    spark.udf.register(<span class="string">&quot;addName&quot;</span>, (x:<span class="type">String</span>)=&gt; <span class="string">&quot;Name:&quot;</span>+x)</span><br><span class="line">    spark.sql(<span class="string">&quot;select addName(name) from ds_table&quot;</span>).show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br></pre></td></tr></table></figure><h2 id="UDAF"><a href="#UDAF" class="headerlink" title="UDAF"></a>UDAF</h2><p>用户自定义聚合函数</p><p><code>强类型的Dataset</code>和<code>弱类型的DataFrame</code>都提供了相关的聚合函数， 如 count()，countDistinct()，avg()，max()，min()。除此之外，用户可以设定<strong>自己的自定义聚合函数</strong>。</p><h3 id="弱类型自定义函数"><a href="#弱类型自定义函数" class="headerlink" title="弱类型自定义函数"></a>弱类型自定义函数</h3><p>弱类型用户自定义聚合函数：通过继承<code>UserDefinedAggregateFunction</code>来实现用户自定义聚合函数。下面展示一个求平均工资的自定义聚合函数。</p><p>缺点：需要自己手动输入各种类型，在编写逻辑时只能通过索引拿到值，必须和设置类型时顺序一致，否则运行时后出现问题。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSql</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建配置对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;udf&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SparkSQL环境</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(config).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SparkSession包含了SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>), (<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = initRDD.map(x =&gt; person(x._1, x._2)).toDF()</span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[person] = initRDD.map(x =&gt; person(x._1, x._2)).toDS()</span><br><span class="line"></span><br><span class="line">    ds.createTempView(<span class="string">&quot;ds_table&quot;</span>)</span><br><span class="line">    <span class="comment">// 注册聚合函数</span></span><br><span class="line">    <span class="keyword">val</span> avg = <span class="keyword">new</span> myAvg</span><br><span class="line">    spark.udf.register(<span class="string">&quot;myavg&quot;</span>, avg)</span><br><span class="line">    <span class="comment">// 弱类型可以通过sql或者DSL两种模式查询，通过SQL因为它的输入只是一个值而已</span></span><br><span class="line">    spark.sql(<span class="string">&quot;select myavg(age) from ds_table&quot;</span>).show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">myAvg</span> <span class="keyword">extends</span> <span class="title">UserDefinedAggregateFunction</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 输入值的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">inputSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;age&quot;</span>, <span class="type">LongType</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户自定义处理函数内部使用的变量的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="comment">// 记住顺序，后面的操作全是有序的</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;sum&quot;</span>, <span class="type">LongType</span>).add(<span class="string">&quot;count&quot;</span>, <span class="type">LongType</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">dataType</span></span>: <span class="type">DataType</span> = <span class="type">DoubleType</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对于相同的输入是否一直返回相同的输出；函数的稳定性</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">deterministic</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 看到buffer就是工作区，函数内部变量的初始化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer(<span class="number">0</span>) = <span class="number">0</span>L <span class="comment">// sum</span></span><br><span class="line">    buffer(<span class="number">1</span>) = <span class="number">0</span>L <span class="comment">// count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// buffer是工作区，input是函数的输入。这个函数就是每次来新的输入值时，函数内部变量的变化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>, input: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer(<span class="number">0</span>) = buffer.getLong(<span class="number">0</span>) + input.getLong(<span class="number">0</span>) <span class="comment">// sum</span></span><br><span class="line">    buffer(<span class="number">1</span>) = buffer.getLong(<span class="number">1</span>) + <span class="number">1</span> <span class="comment">// count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多个Executor执行后，形成多个buffer  最后合并到一起</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buffer1: <span class="type">MutableAggregationBuffer</span>, buffer2: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer1(<span class="number">0</span>) = buffer1.getLong(<span class="number">0</span>) + buffer2.getLong(<span class="number">0</span>)</span><br><span class="line">    buffer1(<span class="number">1</span>) = buffer1.getLong(<span class="number">1</span>) + buffer2.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后的结果</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span></span>(buffer: <span class="type">Row</span>): <span class="type">Any</span> = &#123;</span><br><span class="line">    buffer.getLong(<span class="number">0</span>).toDouble / buffer.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <font color="red"><strong>弱类型可以通过sql或者DSL两种模式查询，通过SQL因为它的输入只是一个值而已</strong></font></p><h3 id="强类型自定义函数"><a href="#强类型自定义函数" class="headerlink" title="强类型自定义函数"></a>强类型自定义函数</h3><p>强类型用户自定义聚合函数：通过继承<code>Aggregator</code>来实现强类型自定义聚合函数。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSql</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建配置对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;udf&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SparkSQL环境</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(config).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SparkSession包含了SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>), (<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = initRDD.map(x =&gt; person(x._1, x._2)).toDF()</span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[person] = initRDD.map(x =&gt; person(x._1, x._2)).toDS()</span><br><span class="line"></span><br><span class="line">    ds.createTempView(<span class="string">&quot;ds_table&quot;</span>)</span><br><span class="line">    <span class="comment">// 注册聚合函数</span></span><br><span class="line">    <span class="keyword">val</span> avg = <span class="keyword">new</span> <span class="type">StrongAvg</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 但是不能使用SQL形式，因为我们强类型输入的值是一个类，用sql编写如何传送给函数结构加类型，那么通过有结构和类型的只有DS</span></span><br><span class="line">    <span class="comment">// 所以我们需要使用DS的DSL方式查询</span></span><br><span class="line">    <span class="comment">// 将聚合函数转换为查询列</span></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">TypedColumn</span>[person, <span class="type">Double</span>] = avg.toColumn.name(<span class="string">&quot;avg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ds.select(value).show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// !!!因为样例类属性默认val，需要手动设置为var</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">dealwith</span>(<span class="params">var sum: <span class="type">Long</span>, var count: <span class="type">Long</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myAvg</span> <span class="keyword">extends</span> <span class="title">UserDefinedAggregateFunction</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 输入值的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">inputSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;age&quot;</span>, <span class="type">LongType</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户自定义处理函数内部使用的变量的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="comment">// 记住顺序，后面的操作全是有序的</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;sum&quot;</span>, <span class="type">LongType</span>).add(<span class="string">&quot;count&quot;</span>, <span class="type">LongType</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回的类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">dataType</span></span>: <span class="type">DataType</span> = <span class="type">DoubleType</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对于相同的输入是否一直返回相同的输出；函数的稳定性</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">deterministic</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 看到buffer就是工作区，函数内部变量的初始化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer(<span class="number">0</span>) = <span class="number">0</span>L <span class="comment">// sum</span></span><br><span class="line">    buffer(<span class="number">1</span>) = <span class="number">0</span>L <span class="comment">// count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// buffer是工作区，input是函数的输入。这个函数就是每次来新的输入值时，函数内部变量的变化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>, input: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer(<span class="number">0</span>) = buffer.getLong(<span class="number">0</span>) + input.getLong(<span class="number">0</span>) <span class="comment">// sum</span></span><br><span class="line">    buffer(<span class="number">1</span>) = buffer.getLong(<span class="number">1</span>) + <span class="number">1</span> <span class="comment">// count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多个Executor执行后，形成多个buffer  最后合并到一起</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buffer1: <span class="type">MutableAggregationBuffer</span>, buffer2: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer1(<span class="number">0</span>) = buffer1.getLong(<span class="number">0</span>) + buffer2.getLong(<span class="number">0</span>)</span><br><span class="line">    buffer1(<span class="number">1</span>) = buffer1.getLong(<span class="number">1</span>) + buffer2.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后的结果</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span></span>(buffer: <span class="type">Row</span>): <span class="type">Any</span> = &#123;</span><br><span class="line">    buffer.getLong(<span class="number">0</span>).toDouble / buffer.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Aggregator[-IN, BUF, OUT]</span></span><br><span class="line"><span class="comment">// 泛型分别为输入类型，处理类型，输出类型。因为强类型所以需要指定类型，这样就能直接通过对象访问到每个值，不是通过索引</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrongAvg</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[person, dealwith, <span class="type">Double</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始值，因为返回dealwith，所以是处理逻辑类的初始化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: dealwith = dealwith(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个函数就是每次来新的输入值时，函数内部变量的变化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(b: dealwith, a: person): dealwith = &#123;</span><br><span class="line">    b.sum = b.sum + a.age</span><br><span class="line">    b.count = b.count + <span class="number">1</span></span><br><span class="line">    b</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多个Executor执行后，形成多个dealwith  最后合并到一起</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(b1: dealwith, b2: dealwith): dealwith = &#123;</span><br><span class="line">    b1.sum = b1.sum + b2.sum</span><br><span class="line">    b1.count = b1.count + b2.count</span><br><span class="line">    b1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(reduction: dealwith): <span class="type">Double</span> = &#123;</span><br><span class="line">    reduction.sum.toDouble / reduction.count</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转码对象设置，固定套路，第三方使用 Encoders.product!!!</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[dealwith] = <span class="type">Encoders</span>.product</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转码对象设置</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Double</span>] = <span class="type">Encoders</span>.scalaDouble</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spark-SQL数据源"><a href="#Spark-SQL数据源" class="headerlink" title="Spark SQL数据源"></a>Spark SQL数据源</h1><h2 id="通用加载-保存方法"><a href="#通用加载-保存方法" class="headerlink" title="通用加载/保存方法"></a>通用加载/保存方法</h2><h3 id="手动指定选项"><a href="#手动指定选项" class="headerlink" title="手动指定选项"></a>手动指定选项</h3><p>park SQL的DataFrame接口支持多种数据源的操作。一个DataFrame可以进行RDDs方式的操作，也可以被注册为临时表。<strong>把DataFrame注册为临时表之后，就可以对该DataFrame执行SQL查询。</strong>\</p><p>Spark SQL的<font color="red"><strong>默认数据源为Parquet格式</strong></font>。数据源为Parquet文件时，Spark SQL可以方便的执行所有的操作。修改配置项<code>spark.sql.sources.default</code>，可修改默认数据源格式。</p><p><font color="red">当数据源格式不是<code>parquet</code>格式文件时，需要手动指定数据源的格式</font>。数据源格式需要指定全名（例如：org.apache.spark.sql.parquet），如果数据源格式为内置格式，则只需要指定简称定json, parquet, jdbc, orc, libsvm, csv, text来指定数据的格式。</p><p><strong>两种方式：</strong></p><ol><li>可以通过SparkSession提供的read.load方法用于通用加载数据，使用write和save保存数据</li><li>read.xxx()</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    spark.read.csv()</span></span><br><span class="line"><span class="comment">//    spark.read.json()</span></span><br><span class="line">    </span><br><span class="line">    spark.read.format(<span class="string">&quot;csv&quot;</span>).load()</span><br><span class="line">    spark.read.format(<span class="string">&quot;json&quot;</span>).load()</span><br></pre></td></tr></table></figure><h3 id="文件保存选项"><a href="#文件保存选项" class="headerlink" title="文件保存选项"></a>文件保存选项</h3><p>可以采用<code>SaveMode</code>执行存储操作，<code>SaveMode</code>定义了对数据的处理模式。需要注意的是，这些保存模式不使用任何锁定，不是原子操作。此外，当使用<code>Overwrite</code>方式执行时，在输出新数据之前原数据就已经被删除。SaveMode详细介绍如下表：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200826201904989.png" alt="image-20200826201904989"></p><h2 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h2><p>Spark SQL 能够自动推测 JSON数据集的结构，并将它加载为一个Dataset[Row]. 可以通过SparkSession.read.json()去加载一个 一个JSON 文件。</p><p><font color="red"><strong>注意：这个JSON文件不是一个传统的JSON文件，每一行都得是一个JSON串。</strong></font></p><p><code>spark.read.format(&quot;json&quot;).load()</code></p><h2 id="Parquet文件"><a href="#Parquet文件" class="headerlink" title="Parquet文件"></a>Parquet文件</h2><p><code>Parquet</code>是一种流行的列式存储格式，可以高效地存储具有嵌套字段的记录。Parquet格式经常在Hadoop生态圈中被使用，它也支持Spark SQL的全部数据类型。<font color="red">Spark SQL 提供了直接读取和存储 Parquet 格式文件的方法。 (默认)</font></p><p><code>spark.read.load(xxx)</code>，不用指定类型，默认<code>Parquet</code></p><p><code>peopleDF.write.mode.parquet(&quot;hdfs://hadoop102:9000/people.parquet&quot;)</code></p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>Spark SQL可以通过JDBC从关系型数据库中读取数据的方式创建DataFrame，通过对DataFrame一系列的计算后，还可以将数据再写回关系型数据库中。</p><p><font color="red">注意:需要将相关的数据库驱动放到spark的类路径下。如果使用Spark-Shell的话</font></p><h3 id="读方式一"><a href="#读方式一" class="headerlink" title="读方式一"></a>读方式一</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> jdbcDF = spark.read</span><br><span class="line">.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://hadoop102:3306/rdd&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;rddtable&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;000000&quot;</span>)</span><br><span class="line">.load()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读方式二"><a href="#读方式二" class="headerlink" title="读方式二"></a>读方式二</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> connectionProperties = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">connectionProperties.put(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">connectionProperties.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;000000&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> jdbcDF2 = spark.read.jdbc(<span class="string">&quot;jdbc:mysql://hadoop102:3306/rdd&quot;</span>, <span class="string">&quot;rddtable&quot;</span>,connectionProperties)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="写方式一"><a href="#写方式一" class="headerlink" title="写方式一"></a>写方式一</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jdbcDF.write.mode(xxx)</span><br><span class="line">.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://hadoop102:3306/rdd&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;dftable&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;000000&quot;</span>)</span><br><span class="line">.save()</span><br></pre></td></tr></table></figure><h3 id="写方式二"><a href="#写方式二" class="headerlink" title="写方式二"></a>写方式二</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbcDF2.write.jdbc(<span class="string">&quot;jdbc:mysql://hadoop102:3306/rdd&quot;</span>, <span class="string">&quot;db&quot;</span>, connectionProperties)</span><br></pre></td></tr></table></figure><h2 id="Hive数据仓库"><a href="#Hive数据仓库" class="headerlink" title="Hive数据仓库"></a>Hive数据仓库</h2><p>Apache Hive是Hadoop上的SQL引擎，<strong>Spark SQL编译时可以包含Hive支持，也可以不包含</strong>。包含Hive支持的Spark SQL可以<strong>支持Hive表访问、UDF(用户自定义函数)以及 Hive 查询语言(HiveQL/HQL)等</strong>。需要强调的一点是，如果要在Spark SQL中包含Hive的库，并不需要事先安装Hive。一般来说，最好还是在编译Spark SQL时引入Hive支持，这样就可以使用这些特性了。如果你下载的是二进制版本的 Spark，它应该已经在编译时添加了 Hive 支持。 </p><p><font color="red">若要把Spark SQL连接到一个部署好的Hive上，你必须把hive-site.xml复制到 Spark的配置文件目录中($SPARK_HOME/conf)</font>。即使没有部署好Hive，Spark SQL也可以运行。<font color="red"> 需要注意的是，如果你没有部署好Hive，Spark SQL会在当前的工作目录中创建出自己的Hive 元数据仓库，叫作 metastore_db。</font>此外，如果你尝试使用 HiveQL 中的 CREATE TABLE (并非 CREATE EXTERNAL TABLE)语句来创建表，这些表会被放在你默认的文件系统中的 /user/hive/warehouse 目录中(如果你的 classpath 中有配好的 hdfs-site.xml，默认的文件系统就是 HDFS，否则就是本地文件系统)。</p><h3 id="内嵌的Hive应用"><a href="#内嵌的Hive应用" class="headerlink" title="内嵌的Hive应用"></a>内嵌的Hive应用</h3><p>如果要使用内嵌的Hive，什么都不用做，直接用就可以了。 </p><p>可以通过添加参数初次指定数据仓库地址：–conf </p><p><font color="red"><strong>注意：</strong>如果你使用的是内部的Hive，在Spark2.0之后，spark.sql.warehouse.dir用于指定数据仓库的地址，如果你需要是用HDFS作为路径，那么需要将core-site.xml和hdfs-site.xml 加入到Spark conf目录，否则只会创建master节点上的warehouse目录，查询时会出现文件找不到的问题，这是需要使用HDFS，则需要将metastore删除，重启集群。</font></p><h3 id="外部的Hive应用"><a href="#外部的Hive应用" class="headerlink" title="外部的Hive应用"></a>外部的Hive应用</h3><p>如果想连接外部已经部署好的Hive，需要通过以下几个步骤。</p><ol><li>将Hive中的hive-site.xml拷贝或者软连接到Spark安装目录下的conf目录下。</li><li>打开spark shell，注意带上访问Hive元数据库的JDBC客户端</li></ol><p><code>bin/spark-shell --jars mysql-connector-java-5.1.27-bin.jar</code></p><p>又或者将此jar包放入spark的依赖目录</p><h3 id="Spark-SQL-CLI"><a href="#Spark-SQL-CLI" class="headerlink" title="Spark SQL CLI"></a>Spark SQL CLI</h3><p>Spark SQL CLI可以很方便的在本地运行Hive元数据服务以及从命令行执行查询任务。在Spark目录下执行如下命令启动Spark SQL CLI：</p><p><code>./bin/spark-sql</code></p><h3 id="代码中使用Hive"><a href="#代码中使用Hive" class="headerlink" title="代码中使用Hive"></a>代码中使用Hive</h3><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-hive --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-hive_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hive/hive-exec --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建SparkSession时需要添加hive支持</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> warehouseLocation: <span class="type">String</span> = <span class="keyword">new</span> <span class="type">File</span>(<span class="string">&quot;spark-warehouse&quot;</span>).getAbsolutePath</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">.builder()</span><br><span class="line">.appName(<span class="string">&quot;Spark Hive Example&quot;</span>)</span><br><span class="line">.config(<span class="string">&quot;spark.sql.warehouse.dir&quot;</span>, warehouseLocation)</span><br><span class="line">.enableHiveSupport() <span class="comment">// 添加hive支持</span></span><br><span class="line">.getOrCreate()</span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意：</strong>蓝色部分为使用内置Hive需要指定一个Hive仓库地址。若使用的是外部Hive，则需要<strong>将hive-site.xml添加到ClassPath下</strong>。</font></p><p><font color="red"></font></p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark学习笔记-广播变量及累加器</title>
      <link href="2020/08/23/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%BF%E6%92%AD%E5%8F%98%E9%87%8F%E5%8F%8A%E7%B4%AF%E5%8A%A0%E5%99%A8/"/>
      <url>2020/08/23/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%BF%E6%92%AD%E5%8F%98%E9%87%8F%E5%8F%8A%E7%B4%AF%E5%8A%A0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spark由三大数据结构：</p><ul><li>RDD：分布式数据集</li><li>广播变量：分布式只读变量</li><li>累加器：分布式只写变量</li></ul><h1 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h1><p>累加器用来对信息进行聚合，通常在向 Spark传递函数时，比如使用 map() 函数或者用 filter() 传条件时，可以使用驱动器程序中定义的变量，但是集群中运行的每个任务都会得到这些变量的一份新的副本，更新这些副本的值也不会影响驱动器中的对应变量。如果我们想实现所有分片处理时更新共享变量的功能，那么累加器可以实现我们想要的效果。</p><p>假设一段逻辑，实现累加操作，我们一般<code>rdd.reduce(_+_)</code>，那我们如果用中间值保存的话怎么做呢？</p><p>代码展示：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ACC</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    sc.makeRDD(<span class="number">1</span> to <span class="number">10</span>).foreach(x=&gt;&#123;sum=sum+x&#125;)</span><br><span class="line">    println(sum)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>发现Sum依旧是0，没有改变。 原因如下：</strong></font></p><p>如下图：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823203514400.png" alt="image-20200823203514400"></p><ol><li>在Driver端创建了变量sum</li><li>将Sum变量写入Executor的计算逻辑，Sum会被序列到各个Executor中</li><li>Executor中执行完毕后，它们各自中的sum被修改。</li><li>但是它们没有传回Driver，如果Driver打印sum的话，依旧是声明时的的0.</li></ol><p><strong>解决办法</strong></p><p>使用累加器。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ACC</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    var sum = 0</span></span><br><span class="line">    <span class="comment">// 创建累加器</span></span><br><span class="line">    <span class="keyword">val</span> accumulator: <span class="type">LongAccumulator</span> = sc.longAccumulator</span><br><span class="line">    sc.makeRDD(<span class="number">1</span> to <span class="number">10</span>).foreach &#123;</span><br><span class="line">      i =&gt; &#123;</span><br><span class="line">        accumulator.add(i.toLong)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(accumulator.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">这样当我们在Driver端获取值的时候，各个分区的的累加的值会被拉到Driver端最后进行一次累加操作后，展示。</font></p><p>累加器的用法如下所示。</p><p>通过在驱动器中调用SparkContext.accumulator(initialValue)方法，创建出存有初始值的累加器。返回值为 org.apache.spark.Accumulator[T] 对象，其中 T 是初始值 initialValue 的类型。Spark闭包里的执行器代码可以使用累加器的 += 方法(在Java中是 add)增加累加器的值。 驱动器程序可以调用累加器的value属性(在Java中使用value()或setValue())来访问累加器的值。 </p><p><font color="red">注意：工作节点上的任务不应该访问累加器的值。从这些任务的角度来看，累加器是一个只写变量。</font></p><p>对于要在行动操作中使用的累加器，Spark只会把每个任务对各累加器的修改应用一次。因此，如果想要一个无论在失败还是重复计算时都绝对可靠的累加器，我们必须把它放在 foreach() 这样的行动操作中。转化操作中累加器可能会发生不止一次更新</p><h2 id="自定义累加器"><a href="#自定义累加器" class="headerlink" title="自定义累加器"></a>自定义累加器</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.util.<span class="type">AccumulatorV2</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> scala.collection.<span class="type">JavaConversions</span>._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogAccumulator</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">spark</span>.<span class="title">util</span>.<span class="title">AccumulatorV2</span>[<span class="type">String</span>, java.util.<span class="type">Set</span>[<span class="type">String</span>]] </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> _logArray: java.util.<span class="type">Set</span>[<span class="type">String</span>] = <span class="keyword">new</span> java.util.<span class="type">HashSet</span>[<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断此累加器是否是初始化状态</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>: <span class="type">Boolean</span> = &#123;</span><br><span class="line">    _logArray.isEmpty</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 累加器清零</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    _logArray.clear()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 累加元素</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(v: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    _logArray.add(v)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个分区中的数据向Driver端汇总时，最后的合并</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(other: org.apache.spark.util.<span class="type">AccumulatorV2</span>[<span class="type">String</span>, java.util.<span class="type">Set</span>[<span class="type">String</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    other <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> o: <span class="type">LogAccumulator</span> =&gt; _logArray.addAll(o.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取值</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: java.util.<span class="type">Set</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    java.util.<span class="type">Collections</span>.unmodifiableSet(_logArray)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>():org.apache.spark.util.<span class="type">AccumulatorV2</span>[<span class="type">String</span>, java.util.<span class="type">Set</span>[<span class="type">String</span>]] = &#123;</span><br><span class="line">    <span class="keyword">val</span> newAcc = <span class="keyword">new</span> <span class="type">LogAccumulator</span>()</span><br><span class="line">    _logArray.synchronized&#123;</span><br><span class="line">      newAcc._logArray.addAll(_logArray)</span><br><span class="line">    &#125;</span><br><span class="line">    newAcc</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤掉带字母的</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">LogAccumulator</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> conf=<span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;LogAccumulator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc=<span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> accum = <span class="keyword">new</span> <span class="type">LogAccumulator</span></span><br><span class="line">      <span class="comment">// 需要手动注册</span></span><br><span class="line">    sc.register(accum, <span class="string">&quot;logAccum&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sum = sc.parallelize(<span class="type">Array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2a&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4b&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7cd&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>), <span class="number">2</span>).filter(line =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> pattern = <span class="string">&quot;&quot;</span><span class="string">&quot;^-?(\d+)&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="keyword">val</span> flag = line.matches(pattern)</span><br><span class="line">      <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        accum.add(line)</span><br><span class="line">      &#125;</span><br><span class="line">      flag</span><br><span class="line">    &#125;).map(_.toInt).reduce(_ + _)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;sum: &quot;</span> + sum)</span><br><span class="line">    <span class="keyword">for</span> (v &lt;- accum.value) print(v + <span class="string">&quot;&quot;</span>)</span><br><span class="line">    println()</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义累加器需要继承<code>org.apache.spark.util.AccumulatorV2[IN, OUT]</code>，其中：</p><ul><li><code>IN</code>：是累加的元素</li><li><code>OUT</code>：是最后获取的元素</li></ul><h1 id="广播变量-调优策略"><a href="#广播变量-调优策略" class="headerlink" title="广播变量(调优策略)"></a>广播变量(调优策略)</h1><p>其实广播变量有没有都可以实现相同的功能，但是效率会比较低。如果一份数据需要发送给Executor端来进行计算。</p><ul><li>不使用广播变量的话，数据会同时发送给多个Executor，每个一份，效率低</li><li>使用广播变量的话，多个Executor读取的是同一份的数据</li></ul><p>广播变量用来高效分发较大的对象。向所有工作节点发送一个较大的只读值，以供一个或多个Spark操作使用。比如，如果你的应用需要向所有节点发送一个较大的只读查询表，甚至是机器学习算法中的一个很大的特征向量，广播变量用起来都很顺手。 在多个并行操作中使用同一个变量，但是 Spark会为每个任务分别发送。</p><p>使用广播变量的过程如下：</p><ol><li>通过对一个类型 T 的对象调用 <code>SparkContext.broadcast</code> 创建出一个<code>Broadcast[T]</code>对象。 <strong>任何可序列化的类型都可以这么实现。</strong> </li><li> 通过 <code>value </code>属性访问该对象的值(在 Java 中为 value() 方法)。 </li><li>变量只会被发到各个节点一次，。<font color="red"><strong>应作为只读值处理(修改这个值不会影响到别的节点)</strong></font></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark学习笔记-RDD</title>
      <link href="2020/08/22/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-RDD/"/>
      <url>2020/08/22/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-RDD/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由<code>Java IO</code>引申出<code>Spark RDD</code>。</p><h2 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java IO"></a>Java IO</h2><p>Java IO和RDD的相同点：</p><ul><li>装饰者模式</li><li>延时计算</li></ul><p>Java IO涉及到的名词：</p><ul><li>输入：<code>input</code></li><li>输出：<code>output</code></li><li>字节流：所有都可以使用字节流读取，一般图片、视频、压缩包之类的只能使用字节流读取</li><li>字符流：文本文件使用字符流读取</li></ul><br/><h3 id="Java-IO的装饰者模式"><a href="#Java-IO的装饰者模式" class="headerlink" title="Java IO的装饰者模式"></a>Java IO的装饰者模式</h3><p><strong>1.  我们一般读取文件使用以下的操作：文件输入流</strong></p><p><code>InputStream inputStream = new FileInputStream(new File(&quot;&quot;));</code></p><p>效率不高，读一字节传一字节。</p><p><strong>2.  文件输入流，效率不高；所以可以使用缓冲流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>));</span><br><span class="line">InputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br></pre></td></tr></table></figure><p>可以看到<strong>缓冲流的参数是一个文件输入流的对象</strong>，这是因为Java IO体现了一种<font color="red"><strong>装饰者模式</strong>：</font></p><ul><li><p>它表示者功能的扩展，原来的文件输入流没有缓冲的功能，但是对文件输入流包装了一层之后，就有了缓冲的功能。</p></li><li><p>这样读文件的还是文件输入流，而<strong>做到缓冲功能的是缓冲流</strong></p></li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822120437040.png" alt="装饰者扩展功能"></p><p><strong>3. 使用字符流来快速读取文本</strong></p><p>上面的两个都是字节流：</p><ul><li>文件输入流没有缓冲，效率慢</li><li>缓冲流对文件输入流做了缓存，好一点；但是如果读取的是文本文件时，想一次性读取一行数据，它做不到，它读取的还是字节</li><li>可以使用字符流来读取文本文件</li></ul><p>根据Java IO的装饰者模式，字符流创建时的参数也是文件输入流吗？</p><p>答案是错误的，因为文件输入流读取的是字节，而我们字符流需要的是字符；。<font color="red">在不同的编码格式下字节和字符的转换规则不一致的</font>。所以字符流的参数应该是将<strong>字节变为字符的转换器</strong>，<strong>转换器的参数是字节流</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>))));</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822121143811.png" alt="image-20200822121143811"></p><h3 id="Java-IO的读取"><a href="#Java-IO的读取" class="headerlink" title="Java IO的读取"></a>Java IO的读取</h3><p>如上述字符流，当我们创建对象时并没有读取数据。当我们进行<code>readLine</code>时才会触发读取操作。逐级向上读取。</p><h1 id="RDD概述"><a href="#RDD概述" class="headerlink" title="RDD概述"></a>RDD概述</h1><h2 id="RDD的简介"><a href="#RDD的简介" class="headerlink" title="RDD的简介"></a>RDD的简介</h2><p><code>RDD(Resilient Distributed Dataset)</code>叫做弹性分布式数据集，是Spark中最基本的数据抽象。</p><p><code>RDD</code>代码中是一个抽象类，它代表一个<strong>不可变、可分区</strong>、里面的元素<strong>可并行计算</strong>的集合。</p><p><font color="red"><strong>RDD不存储数据，存储的是计算的逻辑。只有进行行动算子时，RDD才会开始以管道形式计算</strong></font></p><h2 id="RDD的属性"><a href="#RDD的属性" class="headerlink" title="RDD的属性"></a>RDD的属性</h2><ol><li>一组分区（Partition），即数据集的基本组成单位;(RDD中的多个分区)</li><li>一个计算每个分区的函数;</li><li>RDD之间的依赖关系;</li><li>一个Partitioner，即RDD的分片函数;</li><li>一个列表，存储存取每个Partition的优先位置（preferred location）。(位置优先为有数据的节点)</li></ol><h2 id="RDD特点"><a href="#RDD特点" class="headerlink" title="RDD特点"></a>RDD特点</h2><p>RDD表示只读的分区的数据集，对RDD进行改动，只能通过RDD的转换操作，由一个RDD得到一个新的RDD，新的RDD包含了从其他RDD衍生所必需的信息。</p><p>RDDs之间存在依赖，RDD的执行是按照血缘关系延时计算的。如果血缘关系较长，可以通过持久化RDD来切断血缘关系。</p><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>RDD逻辑上是分区的，每个分区的数据是抽象存在的。计算时每个分区的计算逻辑会交给一个<code>Task</code>来执行，也就是分区可以理解为RDD执行是的并行度。</p><h3 id="不可变-只读"><a href="#不可变-只读" class="headerlink" title="不可变(只读)"></a>不可变(只读)</h3><p>如下图所示，RDD是只读的，要想改变RDD中的数据，只能在现有的RDD基础上创建新的RDD。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822122537700.png" alt="RDD不可变"></p><p> 由一个RDD转换到另一个RDD，可以通过丰富的操作算子实现，不再像MapReduce那样只能写map和reduce了，如下图所示。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822122611888.png" alt="image-20200822122611888"></p><p> <strong>RDD的操作算子包括两类：</strong></p><ul><li>一类叫做<code>transformations</code>，它是用来将RDD进行转化，构建RDD的血缘关系</li><li>另一类叫做<code>actions</code>，它是用来触发RDD的计算，得到RDD的相关计算结果或者将RDD保存的文件系统中。</li></ul><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>RDDs通过操作算子进行转换，转换得到的新RDD包含了从其他RDDs衍生所必需的信息，RDDs之间维护着这种血缘关系，也称之为依赖。如以下程序：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建上下文对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;toDebugString&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="number">1</span> to <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = initRDD.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    println(mapRDD.toDebugString)</span><br><span class="line">    println(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822123851822.png" alt="image-20200822123851822"></p><p><font color="red"><strong>我们打印了<code>mapRDD</code>的依赖关系，发现它会保存它依赖的所有RDD包含行数，参数等…</strong></font></p><hr><p>依赖包括两种，一种是窄依赖，RDDs之间分区是一一对应的，另一种是宽依赖，下游RDD的每个分区与上游RDD(也称之为父RDD)的每个分区都有关，是多对多的关系。</p><ul><li>窄依赖：父子RDD的分区是一一对应的</li><li>宽依赖：父RDD的分区内数据被打乱重组到子RDD的不同分区中，同时涉及<code>shuffle</code></li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822124530978.png" alt="image-20200822124530978"></p><p><strong>依赖还有个作用就是保证容错性</strong>，因为RDD是在内存中的，假设有这个RDD链：<code>a-&gt;b-&gt;c</code>，如果b丢失了，是不是程序就失败了，正是因为有RDD的依赖关系存在我们可以通过c的数据反推出来b。保证了程序的容错性，不会因为小错误而导致整个程序失败。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>如果在应用程序中多次使用同一个RDD，可以将该RDD缓存起来，该RDD只有在第一次计算的时候会根据血缘关系得到分区的数据，在后续其他地方用到该RDD的时候，<strong>会直接从缓存处取而不用再根据血缘关系计算</strong>，这样就加速后期的重用。</p><p>如下图所示，RDD-1经过一系列的转换后得到RDD-n并保存到hdfs，RDD-1在这一过程中会有个中间结果，如果将其缓存到内存，那么在随后的RDD-1转换到RDD-m这一过程中，就不会计算其之前的RDD-0了。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822125241010.png" alt="image-20200822125241010"></p><h1 id="RDD编程"><a href="#RDD编程" class="headerlink" title="RDD编程"></a>RDD编程</h1><p>Spark中的所有RDD方法都称为之<font color="red"><strong>算子</strong></font>，但是分为2大类：</p><ol><li><code>Transformation</code>：转换算子</li><li><code>Action</code>：行为算子</li></ol><h2 id="RDD编程模型"><a href="#RDD编程模型" class="headerlink" title="RDD编程模型"></a>RDD编程模型</h2><p>在Spark中，RDD被表示为对象，通过对象上的方法调用来对RDD进行转换。经过一系列的transformations定义RDD之后，就可以调用actions触发RDD的计算，action可以是向应用程序返回结果(count, collect等)，或者是向存储系统保存数据(saveAsTextFile等)。在Spark中，只有遇到action，才会执行RDD的计算(即延迟计算)，这样在运行时可以通过管道的方式传输多个转换。</p><p>  要使用Spark，开发者需要编写一个Driver程序，它被提交到集群以调度运行Worker，如下图所示。Driver中定义了一个或多个RDD，并调用RDD上的action，Worker则执行RDD分区计算任务。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822130931511.png" alt="image-20200822130931511"></p><h2 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h2><p>在Spark中创建RDD的创建方式可以分为三种：<strong>从集合中创建RDD；从外部存储创建RDD；从其他RDD创建</strong>。</p><h3 id="集合中创建"><a href="#集合中创建" class="headerlink" title="集合中创建"></a>集合中创建</h3><h4 id="makeRDD"><a href="#makeRDD" class="headerlink" title="makeRDD"></a>makeRDD</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建上下文对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;toDebugString&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="number">1</span> to <span class="number">10</span>)</span><br><span class="line">    initRDD.collect().foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们查看一下<code>makeRDD</code>的代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeRDD</span></span>[<span class="type">T</span>: <span class="type">ClassTag</span>](</span><br><span class="line">     seq: <span class="type">Seq</span>[<span class="type">T</span>],</span><br><span class="line">     numSlices: <span class="type">Int</span> = defaultParallelism): <span class="type">RDD</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line">   parallelize(seq, numSlices)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>发现它调用的就是<code>parallelize</code>方法</p><h4 id="parallelize"><a href="#parallelize" class="headerlink" title="parallelize"></a>parallelize</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建上下文对象</span></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;toDebugString&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> initRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.parallelize(<span class="number">1</span> to <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    println(initRDD.partitions.length)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们查看一下<code>parallelize</code>的代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parallelize</span></span>[<span class="type">T</span>: <span class="type">ClassTag</span>](</span><br><span class="line">    seq: <span class="type">Seq</span>[<span class="type">T</span>],</span><br><span class="line">    numSlices: <span class="type">Int</span> = defaultParallelism): <span class="type">RDD</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line">  assertNotStopped()</span><br><span class="line">  <span class="keyword">new</span> <span class="type">ParallelCollectionRDD</span>[<span class="type">T</span>](<span class="keyword">this</span>, seq, numSlices, <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Seq</span>[<span class="type">String</span>]]())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现这两个方法都有默认参数：<code>numSlices</code>。它是设置RDD的分区数。</p><p>通过一系列的追踪，发现本地模式下，这个默认参数是这样设置的：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">defaultParallelism</span></span>(): <span class="type">Int</span> =</span><br><span class="line">    scheduler.conf.getInt(<span class="string">&quot;jiuzspark.default.parallelism&quot;</span>, totalCores)</span><br></pre></td></tr></table></figure><p>如果能读取到<code>jiuzspark.default.parallelism</code>，就是用它的值，否则使用当前被分到的所有的核。</p><hr><p><font color="red">当我们手动指定分区数时，指定多少它就开启多少。</font></p><h3 id="由外部存储系统的数据集创建"><a href="#由外部存储系统的数据集创建" class="headerlink" title="由外部存储系统的数据集创建"></a>由外部存储系统的数据集创建</h3><h4 id="textFile"><a href="#textFile" class="headerlink" title="textFile"></a>textFile</h4><p>包括本地的文件系统，还有所有Hadoop支持的数据集，比如HDFS、Cassandra、HBase等</p><p><code>sc.textFile(&quot;hdfs://hadoop102:9000/RELEASE&quot;)</code></p><p><font color="red"><code>textFile</code>也支持输入分区数，但是它的参数名为<strong>最小分区数</strong>，这个值不是最终的分区数，但是最终的分区数一定大于等于它。</font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">textFile</span></span>(</span><br><span class="line">      path: <span class="type">String</span>,</span><br><span class="line">      minPartitions: <span class="type">Int</span> = defaultMinPartitions): <span class="type">RDD</span>[<span class="type">String</span>] = withScope &#123;</span><br><span class="line">    assertNotStopped()</span><br><span class="line">    hadoopFile(path, classOf[<span class="type">TextInputFormat</span>], classOf[<span class="type">LongWritable</span>], classOf[<span class="type">Text</span>],</span><br><span class="line">      minPartitions).map(pair =&gt; pair._2.toString).setName(path)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>因为Spark没有自己的读取 文件方式，它直接采用了Hadoop的读取方式，这就导致了Hadoop的规则进行分片，所以有可能大于你指定的值。</p><h2 id="RDD的转换算子🔺"><a href="#RDD的转换算子🔺" class="headerlink" title="RDD的转换算子🔺"></a>RDD的转换算子🔺</h2><h3 id="Value类型"><a href="#Value类型" class="headerlink" title="Value类型"></a>Value类型</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><code>map(func)</code></p><p>返回一个新的RDD，该RDD由每一个输入元素经过func函数转换后组成</p><p>创建一个1-10数组的RDD，将所有元素*2形成新的RDD</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt;  <span class="keyword">var</span> source  = sc.parallelize(<span class="number">1</span> to <span class="number">10</span>)</span><br><span class="line">source: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">0</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> mapadd = source.map(_ * <span class="number">2</span>)</span><br><span class="line">mapadd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">1</span>] at map at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"></span><br><span class="line">scala&gt; mapadd.collect()</span><br><span class="line">res0: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mapPartitions"><a href="#mapPartitions" class="headerlink" title="mapPartitions"></a>mapPartitions</h4><p><code>mapPartitions(func) </code></p><p>类似于map，但独立地在RDD的每一个分片上运行，因此在类型为T的RDD上运行时，func的函数类型必须是Iterator[T] =&gt; Iterator[U]。<strong>假设有N个元素，有M个分区，那么map的函数的将被调用N次,而mapPartitions被调用M次,一个函数一次处理所有分区。</strong></p><p><strong>对比map函数</strong></p><ul><li>mapPartitions对一个RDD中所有的分区进行遍历，效率优于map算子，减少了发送到执行器执行交互次数</li><li>但是它在计算单一分区数据时是不释放内存的，可能会出现OOM</li></ul><p>所以内存足够时，为了保证效率，可以使用mapPartitions方法</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822135907128.png" alt="image-20200822135907128"></p><p>创建一个RDD，使每个元素*2组成新的RDD</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.parallelize(<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">4</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; rdd.mapPartitions(x=&gt;x.map(_*<span class="number">2</span>))</span><br><span class="line">res3: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">6</span>] at mapPartitions at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"></span><br><span class="line">scala&gt; res3.collect</span><br><span class="line">res4: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><h4 id="mapPartitionsWithIndex"><a href="#mapPartitionsWithIndex" class="headerlink" title="mapPartitionsWithIndex"></a>mapPartitionsWithIndex</h4><p><code>mapPartitionsWithIndex(func) </code></p><p>类似于mapPartitions，但func带有一个整数参数表示分片的索引值，因此在类型为T的RDD上运行时，func的函数类型必须是<code>(Int, Interator[T]) =&gt; Iterator[U]；</code>。Int就是此分区分区号</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822135919944.png" alt="image-20200822135919944"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.parallelize(<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">4</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> indexRdd = rdd.mapPartitionsWithIndex((index,items)=&gt;(items.map((index,_))))</span><br><span class="line">indexRdd: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">MapPartitionsRDD</span>[<span class="number">5</span>] at mapPartitionsWithIndex at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"></span><br><span class="line">scala&gt; indexRdd.collect</span><br><span class="line">res2: <span class="type">Array</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((<span class="number">0</span>,<span class="number">1</span>), (<span class="number">0</span>,<span class="number">2</span>), (<span class="number">1</span>,<span class="number">3</span>), (<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p><code>flatMap(func) </code></p><p>类似于map，但是每一个输入元素可以被映射为0或多个输出元素（所以func应该返回一个序列，而不是单一元素）</p><p>创建一个元素为1-5的RDD，运用flatMap创建一个新的RDD，新的RDD为原RDD的每个元素的2倍（2，4，6，8，10）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> sourceFlat = sc.parallelize(<span class="number">1</span> to <span class="number">5</span>)</span><br><span class="line">sourceFlat: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">12</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; sourceFlat.collect()</span><br><span class="line">res11: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> flatMap = sourceFlat.flatMap(<span class="number">1</span> to _)</span><br><span class="line">flatMap: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">13</span>] at flatMap at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"></span><br><span class="line">scala&gt; flatMap.collect()</span><br><span class="line">res12: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="glom"><a href="#glom" class="headerlink" title="glom"></a>glom</h4><p>将每一个分区形成一个数组，形成新的RDD类型时RDD[Array[T]]</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.parallelize(<span class="number">1</span> to <span class="number">16</span>,<span class="number">4</span>)</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">65</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; rdd.glom().collect()</span><br><span class="line">res25: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), <span class="type">Array</span>(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>), <span class="type">Array</span>(<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>), <span class="type">Array</span>(<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h4><p><code>groupBy(func)</code></p><p>分组，按照传入函数的返回值进行分组。将相同的key对应的值放入一个迭代器。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.parallelize(<span class="number">1</span> to <span class="number">4</span>)</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">65</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> group = rdd.groupBy(_%<span class="number">2</span>)</span><br><span class="line">group: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = <span class="type">ShuffledRDD</span>[<span class="number">2</span>] at groupBy at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"></span><br><span class="line">scala&gt; group.collect</span><br><span class="line">res0: <span class="type">Array</span>[(<span class="type">Int</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = <span class="type">Array</span>((<span class="number">0</span>,<span class="type">CompactBuffer</span>(<span class="number">2</span>, <span class="number">4</span>)), (<span class="number">1</span>,<span class="type">CompactBuffer</span>(<span class="number">1</span>, <span class="number">3</span>)))</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p><code>filter(func) </code></p><p>过滤。返回一个新的RDD，该RDD由经过func函数计算后返回值为true的输入元素组成。</p><p>需求：创建一个RDD（由字符串组成），过滤出一个新RDD（包含”xiao”子串）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> sourceFilter = sc.parallelize(<span class="type">Array</span>(<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;xiaojiang&quot;</span>,<span class="string">&quot;xiaohe&quot;</span>,<span class="string">&quot;dazhi&quot;</span>))</span><br><span class="line">sourceFilter: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">10</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; sourceFilter.collect()</span><br><span class="line">res9: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(xiaoming, xiaojiang, xiaohe, dazhi)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> filter = sourceFilter.filter(_.contains(<span class="string">&quot;xiao&quot;</span>))</span><br><span class="line">filter: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">11</span>] at filter at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"></span><br><span class="line">scala&gt; filter.collect()</span><br><span class="line">res10: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(xiaoming, xiaojiang, xiaohe)</span><br></pre></td></tr></table></figure><h4 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h4><p><code>sample(withReplacement, fraction, seed) </code></p><p>以指定的随机种子随机抽样出数量为fraction的数据，withReplacement表示是抽出的数据是否放回，true为有放回的抽样，false为无放回的抽样，seed用于指定随机数生成器种子。</p><p>需求：创建一个RDD（1-10），从中选择放回和不放回抽样</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建RDD</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.parallelize(<span class="number">1</span> to <span class="number">10</span>)</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">20</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"><span class="comment">//（2）打印</span></span><br><span class="line">scala&gt; rdd.collect()</span><br><span class="line">res15: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//（3）放回抽样</span></span><br><span class="line">scala&gt; <span class="keyword">var</span> sample1 = rdd.sample(<span class="literal">true</span>,<span class="number">0.4</span>,<span class="number">2</span>)</span><br><span class="line">sample1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">PartitionwiseSampledRDD</span>[<span class="number">21</span>] at sample at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"><span class="comment">//（4）打印放回抽样结果</span></span><br><span class="line">scala&gt; sample1.collect()</span><br><span class="line">res16: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"><span class="comment">//（5）不放回抽样</span></span><br><span class="line">scala&gt; <span class="keyword">var</span> sample2 = rdd.sample(<span class="literal">false</span>,<span class="number">0.2</span>,<span class="number">3</span>)</span><br><span class="line">sample2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">PartitionwiseSampledRDD</span>[<span class="number">22</span>] at sample at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"><span class="comment">//（6）打印不放回抽样结果</span></span><br><span class="line">scala&gt; sample2.collect()</span><br><span class="line">res17: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><p><code>distinct([numTasks])) </code></p><p>对源RDD进行去重后返回一个新的RDD。默认情况下，只有8个并行任务来操作，但是可以传入一个可选的numTasks参数改变它。</p><p>会导致shuffle</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822140853713.png" alt="image-20200822140853713"></p><h4 id="coalesce"><a href="#coalesce" class="headerlink" title="coalesce"></a>coalesce</h4><p><code>coalesce(numPartitions) </code></p><p>缩减分区数，用于大数据集过滤后，提高小数据集的执行效率。</p><ul><li>第二个参数默认：false，只合并分区没有shuffle</li><li>第二个参数设置为true，重分区，有shuffle</li></ul><h4 id="repartition"><a href="#repartition" class="headerlink" title="repartition"></a>repartition</h4><p>根据分区数，重新通过网络随机洗牌所有数据。shuffle</p><p>底层原理：<code>coalesce(n, true)</code></p><h4 id="sortBy"><a href="#sortBy" class="headerlink" title="sortBy"></a>sortBy</h4><p><code>sortBy(func,[ascending], [numTasks])</code></p><p>使用func先对数据进行处理，按照处理后的数据比较结果排序，默认为正序。</p><p>ascending:</p><ul><li>true：正序</li><li>false：倒序</li></ul><h3 id="双V类型"><a href="#双V类型" class="headerlink" title="双V类型"></a>双V类型</h3><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><p><code>union(otherDataset)</code></p><p>对源RDD和参数RDD求并集后返回一个新的RDD</p><h4 id="subtract"><a href="#subtract" class="headerlink" title="subtract"></a>subtract</h4><p><code>subtract (otherDataset)</code></p><p>计算差的一种函数，去除两个RDD中相同的元素，不同的RDD将保留下来</p><h4 id="intersection"><a href="#intersection" class="headerlink" title="intersection"></a>intersection</h4><p><code> intersection(otherDataset)</code></p><p>对源RDD和参数RDD求交集后返回一个新的RDD</p><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p><code>zip(otherDataset)</code></p><p>将两个RDD组合成Key/Value形式的RDD,这里默认两个RDD的partition数量以及元素数量都相同，否则会抛出异常。</p><p><strong>需要保证</strong></p><ul><li>两个RDD的分区相同</li><li>RDD每个分区中的数据量相同</li></ul><h3 id="KV类型"><a href="#KV类型" class="headerlink" title="KV类型"></a>KV类型</h3><h4 id="partitionBy"><a href="#partitionBy" class="headerlink" title="partitionBy"></a>partitionBy</h4><p>对pairRDD进行分区操作，如果原有的partionRDD和现有的partionRDD是一致的话就不进行分区， <strong>否则会生成ShuffleRDD，即会产生shuffle过程。</strong></p><p>参数是一个分区器，例如：<code>org.apache.spark.HashPartitioner</code>。用户可以自定义分区器，照着它抄就可以</p><p><code>rdd.partitionBy(new org.apache.spark.HashPartitioner(2))</code></p><h4 id="groupByKey"><a href="#groupByKey" class="headerlink" title="groupByKey"></a>groupByKey</h4><p>groupByKey也是对每个key进行操作，但只生成一个sequence</p><h4 id="reduceByKey"><a href="#reduceByKey" class="headerlink" title="reduceByKey"></a>reduceByKey</h4><p><code>reduceByKey(func, [numTasks])</code></p><p>在一个(K,V)的RDD上调用，返回一个(K,V)的RDD，使用指定的reduce函数，将相同key的值聚合到一起，reduce任务的个数可以通过第二个可选的参数来设置</p><p><strong>对比groupByKey</strong></p><ol><li>reduceByKey：按照key进行聚合，在shuffle之前有combine（预聚合）操作，返回结果是RDD[k,v].</li><li>groupByKey：按照key进行分组，直接进行shuffle。</li><li>开发指导：reduceByKey比groupByKey，建议使用。但是需要注意是否会影响业务逻辑。</li></ol><h4 id="aggregateByKey🔺"><a href="#aggregateByKey🔺" class="headerlink" title="aggregateByKey🔺"></a>aggregateByKey🔺</h4><p>reduceByKey的操作只能确保分区内数据操作的逻辑和分区间的操作逻辑一致，但若使分区内的数据计算逻辑和分区间的计算逻辑不同的话，此函数就无法实现了。这时就用到了aggregateByKey</p><p>参数：<code>(zeroValue:U,[partitioner: Partitioner]) (seqOp: (U, V) =&gt; U,combOp: (U, U) =&gt; U)</code></p><ul><li><code>zeroValue</code>：分区内数据计算的初始值</li><li><code>seqOp</code>：分区内数据计算逻辑</li><li><code>combOp</code>：分区间数据计算逻辑</li></ul><p>在kv对的RDD中，，按key将value进行分组合并，合并时，将每个value和初始值作为seq函数的参数，进行计算，返回的结果作为一个新的kv对，然后再将结果按照key进行合并，最后将每个分组的value传递给combine函数进行计算（先将前两个value进行计算，将返回结果和下一个value传给combine函数，以此类推），将key与计算结果作为一个新的kv对输出。</p><p><strong>需求</strong></p><p>创建一个pairRDD，取出每个分区相同key对应值的最大值，然后相加</p><p><strong>分析</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822142711127.png" alt="image-20200822142711127"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.parallelize(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">6</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">8</span>)),<span class="number">2</span>)</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">0</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"><span class="comment">//（2）取出每个分区相同key对应值的最大值，然后相加</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> agg = rdd.aggregateByKey(<span class="number">0</span>)(math.max(_,_),_+_)</span><br><span class="line">agg: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ShuffledRDD</span>[<span class="number">1</span>] at aggregateByKey at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"><span class="comment">//（3）打印结果</span></span><br><span class="line">scala&gt; agg.collect()</span><br><span class="line">res0: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((b,<span class="number">3</span>), (a,<span class="number">3</span>), (c,<span class="number">12</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果用此函数使用reduceByKey的功能的话：<code>aggregateByKey(0)(_+_)</code></p><h4 id="foldByKey🔺"><a href="#foldByKey🔺" class="headerlink" title="foldByKey🔺"></a>foldByKey🔺</h4><p>参数：<code>(zeroValue: V)(func: (V, V) =&gt; V): RDD[(K, V)]</code></p><p><code>aggregateByKey</code>的简化版本，与它的区别就是：<code>seqop和combop相同</code>。即分区内和分区间的计算逻辑相同</p><h4 id="combineByKey-C-🔺"><a href="#combineByKey-C-🔺" class="headerlink" title="combineByKey[C]🔺"></a>combineByKey[C]🔺</h4><p>参数：<code>(createCombiner: V =&gt; C, mergeValue: (C, V) =&gt; C, mergeCombiners: (C, C) =&gt; C)</code></p><p><code>aggregateByKey</code>的困难版本，区别：第一个参数不是初始值，而是根据V中数据形成新的数据类型C，后面的计算全是基于新的数据类型C计算。</p><p><strong>需求</strong></p><p>创建一个pairRDD，根据key计算每种key的均值。（先计算每个key出现的次数以及可以对应值的总和，再相除得到结果）</p><p><strong>需求分析</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200822143200358.png" alt="image-20200822143200358"></p><h4 id="sortByKey"><a href="#sortByKey" class="headerlink" title="sortByKey"></a>sortByKey</h4><p><code>sortByKey([ascending], [numTasks]) </code></p><p>在一个(K,V)的RDD上调用，<strong>K必须实现Ordered接口</strong>，返回一个按照key进行排序的(K,V)的RDD</p><ul><li>true：正序</li><li>false：倒序</li></ul><h4 id="mapValues"><a href="#mapValues" class="headerlink" title="mapValues"></a>mapValues</h4><p>针对于(K,V)形式的类型只对V进行操作</p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p><code> join(otherDataset, [numTasks])</code></p><p>在类型为(K,V)和(K,W)的RDD上调用，返回一个相同key对应的所有元素对在一起的(K,(V,W))的RDD</p><p><font color="red">没有相同的key，join之后此key就不存在了。</font></p><h4 id="cogroup"><a href="#cogroup" class="headerlink" title="cogroup"></a>cogroup</h4><p><code>cogroup(otherDataset, [numTasks]) </code></p><p>在类型为(K,V)和(K,W)的RDD上调用，返回一个(K,(Iterable<V>,Iterable<W>))类型的RDD</p><p><font color="red">没有相同的key，cogroup之后还存在。</font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.parallelize(<span class="type">Array</span>((<span class="number">1</span>,<span class="string">&quot;a&quot;</span>),(<span class="number">2</span>,<span class="string">&quot;b&quot;</span>),(<span class="number">3</span>,<span class="string">&quot;c&quot;</span>)))</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">37</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"><span class="comment">//（2）创建第二个pairRDD</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">Array</span>((<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">6</span>)))</span><br><span class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">38</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"><span class="comment">//（3）cogroup两个RDD并打印结果</span></span><br><span class="line">scala&gt; rdd.cogroup(rdd1).collect()</span><br><span class="line">res14: <span class="type">Array</span>[(<span class="type">Int</span>, (<span class="type">Iterable</span>[<span class="type">String</span>], <span class="type">Iterable</span>[<span class="type">Int</span>]))] = <span class="type">Array</span>((<span class="number">1</span>,(<span class="type">CompactBuffer</span>(a),<span class="type">CompactBuffer</span>(<span class="number">4</span>))), (<span class="number">2</span>,(<span class="type">CompactBuffer</span>(b),<span class="type">CompactBuffer</span>(<span class="number">5</span>))), (<span class="number">3</span>,(<span class="type">CompactBuffer</span>(c),<span class="type">CompactBuffer</span>(<span class="number">6</span>))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Action算子🔺"><a href="#Action算子🔺" class="headerlink" title="Action算子🔺"></a>Action算子🔺</h2><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><code>reduce(func)</code></p><p>通过func函数聚集RDD中的所有元素，先聚合分区内数据，再聚合分区间数据。</p><h3 id="collect"><a href="#collect" class="headerlink" title="collect()"></a>collect()</h3><p>在驱动程序中，以数组的形式返回数据集的所有元素</p><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>返回RDD中元素的个数</p><h3 id="取固定值"><a href="#取固定值" class="headerlink" title="取固定值"></a>取固定值</h3><ul><li>first()：返回RDD中的第一个元素</li><li>take(n)：返回一个由RDD的前n个元素组成的数组</li><li>takeOrdered(n)：返回该RDD排序后的前n个元素组成的数组</li></ul><h3 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a>aggregate</h3><p>参数：(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U)</p><p>和KV中的aggregateByKey一个用法，不过不对Key分组了</p><h3 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h3><p><code>fold(num)(func)</code></p><p>同上</p><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><ul><li><code>saveAsTextFile(path)</code>：将数据集的元素以textfile的形式保存到HDFS文件系统或者其他支持的文件系统，对于每个元素，Spark将会调用toString方法，将它装换为文件中的文本</li><li><code>saveAsSequenceFile(path)</code>：将数据集中的元素以Hadoop sequencefile的格式保存到指定的目录下，可以使HDFS或者其他Hadoop支持的文件系统</li><li><code>saveAsObjectFile(path)</code>：用于将RDD中的元素序列化成对象，存储到文件中。</li></ul><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p><code>foreach(func)</code></p><p>在数据集的每一个元素上，运行函数func进行更新.</p><p><font color="red">此运行方法是在Executor中执行的，如果你打印一些数据，这将无意义。因为Driver端看不到</font></p><h2 id="RDD函数传递"><a href="#RDD函数传递" class="headerlink" title="RDD函数传递"></a>RDD函数传递</h2><p>在实际开发中我们往往需要自己定义一些对于RDD的操作，那么此时需要主要的是，<font color="red">初始化工作是在Driver端进行的，而实际运行程序是在Executor端进行的，这就涉及到了跨进程通信，是需要序列化的</font>。下面我们看几个例子：</p><h3 id="传递一个方法"><a href="#传递一个方法" class="headerlink" title="传递一个方法"></a>传递一个方法</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Search</span>(<span class="params">query:<span class="type">String</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//过滤出包含字符串的数据</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    s.contains(query)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//过滤出包含字符串的RDD</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getMatch1</span> </span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    rdd.filter(isMatch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//过滤出包含字符串的RDD</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getMatche2</span></span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    rdd.filter(x =&gt; x.contains(query))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.初始化配置信息及SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WordCount&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建一个RDD</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.parallelize(<span class="type">Array</span>(<span class="string">&quot;hadoop&quot;</span>, <span class="string">&quot;spark&quot;</span>, <span class="string">&quot;hive&quot;</span>, <span class="string">&quot;atguigu&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.创建一个Search对象</span></span><br><span class="line">    <span class="keyword">val</span> search = <span class="keyword">new</span> <span class="type">Search</span>(<span class="string">&quot;h&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.运用第一个过滤函数并打印结果</span></span><br><span class="line">    <span class="keyword">val</span> match1: <span class="type">RDD</span>[<span class="type">String</span>] = search.getMatch1(rdd)</span><br><span class="line">    match1.collect().foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生错误：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; org.apache.spark.SparkException: Task not serializable</span><br><span class="line">    at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:298)</span><br><span class="line">    at org.apache.spark.util.ClosureCleaner$.org$apache$spark$util$ClosureCleaner$$clean(ClosureCleaner.scala:288)</span><br><span class="line">    at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:108)</span><br><span class="line">    at org.apache.spark.SparkContext.clean(SparkContext.scala:2101)</span><br><span class="line">    at org.apache.spark.rdd.RDD$$anonfun$filter$1.apply(RDD.scala:387)</span><br><span class="line">    at org.apache.spark.rdd.RDD$$anonfun$filter$1.apply(RDD.scala:386)</span><br><span class="line">    at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)</span><br><span class="line">    at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)</span><br><span class="line">    at org.apache.spark.rdd.RDD.withScope(RDD.scala:362)</span><br><span class="line">    at org.apache.spark.rdd.RDD.filter(RDD.scala:386)</span><br><span class="line">    at com.atguigu.Search.getMatche1(SeriTest.scala:39)</span><br><span class="line">    at com.atguigu.SeriTest$.main(SeriTest.scala:18)</span><br><span class="line">    at com.atguigu.SeriTest.main(SeriTest.scala)</span><br><span class="line">Caused by: java.io.NotSerializableException: com.atguigu.Search</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="red">java.io.NotSerializableException: com.atguigu.Search</font></p><p><strong>错误原因</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过滤出包含字符串的RDD</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getMatch1</span> </span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    rdd.filter(isMatch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个方法中所调用的方法isMatch()是定义在Search这个类中的，实际上调用的是this. isMatch()，this表示Search这个类的对象，程序在运行过程中需要将Search对象序列化以后传递到Executor端。</p><p><strong>解决方案</strong></p><p>使类继承scala.Serializable即可。</p><p><code>class Search() extends Serializable&#123;...&#125;</code></p><h3 id="传递一个属性"><a href="#传递一个属性" class="headerlink" title="传递一个属性"></a>传递一个属性</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Search</span>(<span class="params">query:<span class="type">String</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//过滤出包含字符串的数据</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    s.contains(query)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//过滤出包含字符串的RDD</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getMatch1</span> </span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    rdd.filter(isMatch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//过滤出包含字符串的RDD</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getMatche2</span></span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    rdd.filter(x =&gt; x.contains(query))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.初始化配置信息及SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WordCount&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建一个RDD</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.parallelize(<span class="type">Array</span>(<span class="string">&quot;hadoop&quot;</span>, <span class="string">&quot;spark&quot;</span>, <span class="string">&quot;hive&quot;</span>, <span class="string">&quot;atguigu&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.创建一个Search对象</span></span><br><span class="line">    <span class="keyword">val</span> search = <span class="keyword">new</span> <span class="type">Search</span>(<span class="string">&quot;h&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.运用第一个过滤函数并打印结果</span></span><br><span class="line">    <span class="keyword">val</span> match1: <span class="type">RDD</span>[<span class="type">String</span>] = search.getMatche2(rdd)</span><br><span class="line">    match1.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>发现出现了同样的错误，错误原因</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过滤出包含字符串的RDD</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">getMatche2</span></span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">   rdd.filter(x =&gt; x.contains(query))</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个方法中所调用的方法query是定义在<strong>Search这个类中的字段</strong>，实际上调用的是this. query，this表示Search这个类的对象，程序在运行过程中需要将Search对象序列化以后传递到Executor端。</p><p><strong>解决办法</strong></p><ol><li>将query变为变量，撇开与Search类的关系</li><li><code>class Search() extends Serializable&#123;...&#125;</code></li></ol><br/><h2 id="RDD依赖关系"><a href="#RDD依赖关系" class="headerlink" title="RDD依赖关系"></a>RDD依赖关系</h2><h3 id="血缘Lineage"><a href="#血缘Lineage" class="headerlink" title="血缘Lineage"></a>血缘Lineage</h3><p>RDD只支持粗粒度转换，即在大量记录上执行的单个操作。将创建RDD的一系列Lineage（血统）记录下来，以便恢复丢失的分区。RDD的Lineage会记录RDD的元数据信息和转换行为，当该RDD的部分分区数据丢失时，它可以根据这些信息来重新运算和恢复丢失的数据分区。</p><p><strong>查看RDD存储的血缘</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; sc.makeRDD(<span class="number">10</span> to <span class="number">15</span>).map((_,<span class="number">1</span>)).reduceByKey(_+_).toDebugString</span><br><span class="line">res0: <span class="type">String</span> =</span><br><span class="line">(<span class="number">2</span>) <span class="type">ShuffledRDD</span>[<span class="number">2</span>] at reduceByKey at &lt;console&gt;:<span class="number">25</span> []</span><br><span class="line"> +-(<span class="number">2</span>) <span class="type">MapPartitionsRDD</span>[<span class="number">1</span>] at map at &lt;console&gt;:<span class="number">25</span> []</span><br><span class="line">    |  <span class="type">ParallelCollectionRDD</span>[<span class="number">0</span>] at makeRDD at &lt;console&gt;:<span class="number">25</span> []</span><br><span class="line"></span><br><span class="line">scala&gt; sc.makeRDD(<span class="number">10</span> to <span class="number">15</span>).map((_,<span class="number">1</span>)).toDebugString</span><br><span class="line">res1: <span class="type">String</span> =</span><br><span class="line">(<span class="number">2</span>) <span class="type">MapPartitionsRDD</span>[<span class="number">4</span>] at map at &lt;console&gt;:<span class="number">25</span> []</span><br><span class="line"> |  <span class="type">ParallelCollectionRDD</span>[<span class="number">3</span>] at makeRDD at &lt;console&gt;:<span class="number">25</span> []</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>我们可以清除的看到不同的RDD存储的血缘关系。</p><p> <font color="red">注意：RDD和它依赖的父RDD（s）的关系有两种不同的类型，即窄依赖（narrow dependency）和宽依赖（wide dependency）。</font></p><h3 id="窄依赖"><a href="#窄依赖" class="headerlink" title="窄依赖"></a>窄依赖</h3><p>窄依赖指的是<strong>每一个父RDD的Partition最多被子RDD的一个Partition使用</strong>,窄依赖我们形象的比喻为独生子女</p><p><font color="red">父RDD的一个Partition只会有一个分支流到子类RDD</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823185106507.png" alt="image-20200823185106507"></p><h3 id="宽依赖"><a href="#宽依赖" class="headerlink" title="宽依赖"></a>宽依赖</h3><p>宽依赖指的是<strong>多个子RDD的Partition会依赖同一个父RDD的Partition</strong>，会引起shuffle,总结：宽依赖我们形象的比喻为超生</p><p><font color="red">父RDD的一个Partition会有多个分支流到子类RDD</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823185145355.png" alt="image-20200823185145355"></p><h3 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h3><p><code>DAG(Directed Acyclic Graph)</code>叫做有向无环图。有向无环图是一种拓扑图，而拓扑图就是由点和线组成的图形。而DAG被称为有向无环图，是它的图形不允许形成环结构。</p><p>原始的RDD通过一系列的转换就就形成了DAG，<strong>根据RDD之间的依赖关系的不同将DAG划分成不同的Stage</strong>。</p><ul><li>对于窄依赖，<strong>partition的转换处理在Stage中完成计算。</strong></li><li>对于宽依赖，由于有Shuffle的存在，只能在parent RDD处理完成后，才能开始接下来的计算，<font color="red">因此<strong>宽依赖是划分Stage的依据</strong>。</font></li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823185734662.png" alt="image-20200823185734662"></p><h3 id="任务划分🔺"><a href="#任务划分🔺" class="headerlink" title="任务划分🔺"></a>任务划分🔺</h3><p>RDD任务切分中间分为：</p><ol><li><code>Application</code>：初始化一个<code>SparkContext</code>即生成一个<code>Application</code></li><li><code>Job</code>：一个<code>Action</code>算子就会生成一个Job</li><li><code>Stage</code>：根据RDD之间的依赖关系的不同将<code>Job</code>划分成不同的Stage，<strong>遇到一个宽依赖则划分一个Stage。</strong></li><li><code>Task</code>：在集群运行时最小的执行单元(Thread)</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823185925589.png" alt="image-20200823185925589"></p><p>task0:这条线所贯穿的所有的partition中的计算逻辑，并且以递归函数的形式整合在一起，例如：fun2(fun1(textFile(blcok1))),这个计算最好发送到block1或者它的副本节点上去计算</p><p><font color="red">注意：Application-&gt;Job-&gt;Stage-&gt; Task每一层都是1对n的关系。</font></p><h2 id="RDD缓存"><a href="#RDD缓存" class="headerlink" title="RDD缓存"></a>RDD缓存</h2><p>RDD通过<code>persist</code>方法或<code>cache</code>方法可以将前面的计算结果缓存，默认情况下 <code>persist() </code>会把数据以序列化的形式缓存在 <strong>JVM 的堆空间中。</strong> </p><p><strong>但是并不是这两个方法被调用时立即缓存，而是触发后面的action时</strong>，该RDD将会被缓存在计算节点的内存中，并供后面重用。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823190053597.png" alt="image-20200823190053597"></p><p>通过查看源码发现<code>cache</code>最终也是调用了<code>persist</code>方法，<font color="red">默认的存储级别都是仅在内存存储一份</font>，Spark的存储级别还有好多种，存储级别在<code>object StorageLevel</code>中定义的。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823190209111.png" alt="image-20200823190209111"></p><p><strong>在存储级别的末尾加上“_2”来把持久化数据存为两份</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823190444179.png" alt="image-20200823190444179"></p><p>缓存有可能丢失，或者存储存储于内存的数据由于内存不足而被删除，<strong>RDD的缓存容错机制保证了即使缓存丢失也能保证计算的正确执行</strong>。通过基于RDD的一系列转换，丢失的数据会被重算，由于RDD的各个Partition是相对独立的，因此只需要计算丢失的部分即可，并不需要重算全部Partition。</p><p><strong>例如：</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823191051834.png" alt="image-20200823191051834"></p><ul><li>缓存的RDD每次内容一致</li><li>没有被缓存的RDD每次内容不一致，证明是每次都重新计算</li></ul><p><font color="red"><strong>注意：</strong>但是并不是这两个方法被调用时立即缓存，而是触发后面的action时<strong>，该RDD将会被缓存在计算节点的内存中，后面再次使用被缓存的RDD才是用缓存中拿取，不是重新计算。被缓存的RDD必须由第一个action算子来触发。</strong></font></p><h2 id="RDD-CheckPoint"><a href="#RDD-CheckPoint" class="headerlink" title="RDD CheckPoint"></a>RDD CheckPoint</h2><p>Spark中对于数据的保存除了持久化操作之外，<strong>还提供了一种检查点的机制，检查点（本质是通过将RDD写入Disk做检查点）是为了通过lineage做容错的辅助</strong>，lineage过长会造成容错成本过高，这样就不如在中间阶段做检查点容错，<strong>如果之后有节点出现问题而丢失分区，从做检查点的RDD开始重做Lineage，就会减少开销</strong>。检查点通过将数据写入到HDFS文件系统实现了RDD的检查点功能。</p><p>为当前RDD设置检查点。该函数将会创建一个二进制的文件，并存储到checkpoint目录中，该目录是用<code>SparkContext.setCheckpointDir()</code>设置的。在checkpoint的过程中，<font color="red"><strong>该RDD的所有依赖于父RDD中的信息将全部被移除。对RDD进行checkpoint操作并不会马上被执行，必须执行Action操作才能触发</strong>。</font></p><p>必须设置检查点的路径：</p><p><code>sc.setCheckpointDir(&quot;hdfs://hadoop102:9000/checkpoint&quot;)</code></p><h1 id="RDD分区"><a href="#RDD分区" class="headerlink" title="RDD分区"></a>RDD分区</h1><p>Spark目前支持<code>Hash分区</code>和<code>Range分区</code>，用户也可以自定义分区，<strong>Hash分区为当前的默认分区</strong>，Spark中分区器直接决定了RDD中分区的个数、RDD中每条数据经过Shuffle过程属于哪个分区和Reduce的个数</p><p>注意：</p><ol><li>只有Key-Value类型的RDD才有分区器的，非Key-Value类型的RDD分区器的值是None</li><li>每个RDD的分区ID范围：0~numPartitions-1，决定这个值是属于那个分区的。</li></ol><h2 id="Hash分区"><a href="#Hash分区" class="headerlink" title="Hash分区"></a>Hash分区</h2><p><a href="#partitionBy">查看</a></p><h2 id="自定义分区"><a href="#自定义分区" class="headerlink" title="自定义分区"></a>自定义分区</h2><ol><li>继承<code>org.apache.spark.Partitioner</code></li><li>实现<code>numPartitions: Int</code>:返回创建出来的分区数</li><li>实现<code>getPartition(key: Any): Int</code>:返回给定键的分区编号(0到numPartitions-1)</li><li><code>equals():Java</code> 判断相等性的标准方法。这个方法的实现非常重要，Spark 需要用这个方法来检查你的分区器对象是否和其他分区器实例相同，这样 Spark 才可以判断两个 RDD 的分区方式是否相同。</li></ol><h1 id="数据读取与保存🔺"><a href="#数据读取与保存🔺" class="headerlink" title="数据读取与保存🔺"></a>数据读取与保存🔺</h1><p>Spark的数据读取及数据保存可以从两个维度来作区分：<font color="red"><strong>文件格式以及文件系统。</strong></font></p><p>文件格式分为：<strong>Text文件、Json文件</strong>、Csv文件、Sequence文件以及Object文件；</p><p>文件系统分为：本地文件系统<strong>、HDFS、HBASE</strong>以及数据库。</p><h2 id="文件格式数据读取与保存"><a href="#文件格式数据读取与保存" class="headerlink" title="文件格式数据读取与保存"></a>文件格式数据读取与保存</h2><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><p><code>val hdfsFile = sc.textFile(&quot;hdfs://hadoop102:9000/fruit.txt&quot;)</code></p><h4 id="保存-1"><a href="#保存-1" class="headerlink" title="保存"></a>保存</h4><p><code>hdfsFile.saveAsTextFile(&quot;/fruitOut&quot;)</code></p><h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><p><font color="red">Spark读取的Json文件其实并不符合Json文件的规范，它的原理是每行是一个完整的Json但是整个文件并不是Json。他按照每行读取，然后利用相关的JSON库对每一条数据进行JSON解析</font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.util.parsing.json.<span class="type">JSON</span></span><br><span class="line"></span><br><span class="line">sc.textFile(<span class="string">&quot;/people.json&quot;</span>).map(<span class="type">JSON</span>.parseFull) <span class="comment">// 形成Map</span></span><br></pre></td></tr></table></figure><h3 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h3><p> SequenceFile文件是Hadoop用来存储二进制形式的key-value对而设计的一种平面文件(Flat File)。Spark 有专门用来读取 SequenceFile 的接口。<br><font color="red"><strong>注意：SequenceFile文件只针对PairRDD</strong></font></p><h4 id="读取-1"><a href="#读取-1" class="headerlink" title="读取"></a>读取</h4><p><code>val seq = sc.sequenceFile[Int,Int](&quot;file:///opt/module/spark/seqFile&quot;)</code></p><h4 id="保存-2"><a href="#保存-2" class="headerlink" title="保存"></a>保存</h4><p><code>rdd.saveAsSequenceFile(&quot;file:///opt/module/spark/seqFile&quot;)</code></p><h3 id="对象文件"><a href="#对象文件" class="headerlink" title="对象文件"></a>对象文件</h3><p>对象文件是将对象序列化后保存的文件，采用Java的序列化机制。可以通过objectFile<a href="path">k,v</a> 函数接收一个路径，读取对象文件，返回对应的 RDD，也可以通过调用saveAsObjectFile() 实现对对象文件的输出。因为是序列化所以要指定类型。</p><h4 id="读取-2"><a href="#读取-2" class="headerlink" title="读取"></a>读取</h4><p><code> val objFile = sc.objectFile[Int](&quot;file:///opt/module/spark/objectFile&quot;)</code></p><h4 id="保存-3"><a href="#保存-3" class="headerlink" title="保存"></a>保存</h4><p><code>rdd.saveAsObjectFile(&quot;file:///opt/module/spark/objectFile&quot;)</code></p><h2 id="文件系统类数据读取与保存"><a href="#文件系统类数据读取与保存" class="headerlink" title="文件系统类数据读取与保存"></a>文件系统类数据读取与保存</h2><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><p><a href="#Text">文件格式数据读取与保存/Text</a>中相同的操作，读取与保存时输入：<code>hdfs://主机/xxx</code></p><h3 id="MYSQL数据库连接"><a href="#MYSQL数据库连接" class="headerlink" title="MYSQL数据库连接"></a>MYSQL数据库连接</h3><p>支持通过Java JDBC访问关系型数据库。需要通过JdbcRDD进行，示例如下:</p><p><strong>pom依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="读取-3"><a href="#读取-3" class="headerlink" title="读取"></a>读取</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">object</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建spark配置信息</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;JdbcRDD&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.定义连接mysql的参数</span></span><br><span class="line">    <span class="keyword">val</span> driver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">    <span class="keyword">val</span> url = <span class="string">&quot;jdbc:mysql://192.168.0.201:3306/zxj&quot;</span></span><br><span class="line">    <span class="keyword">val</span> userName = <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="keyword">val</span> passWd = <span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建JdbcRDD</span></span><br><span class="line">    <span class="keyword">val</span> rdd = <span class="keyword">new</span> <span class="type">JdbcRDD</span>(sc, () =&gt; &#123;</span><br><span class="line">      <span class="type">Class</span>.forName(driver)</span><br><span class="line">      <span class="type">DriverManager</span>.getConnection(url, userName, passWd)</span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="string">&quot;select * from `test` where `id`&gt;=?;&quot;</span>,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="number">10</span>,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      r =&gt; (r.getInt(<span class="number">1</span>), r.getString(<span class="number">2</span>))</span><br><span class="line">    )</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="写"><a href="#写" class="headerlink" title="写"></a>写</h4><p><strong>错误实例</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Write</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[2]&quot;</span>).setAppName(<span class="string">&quot;HBaseApp&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    <span class="keyword">val</span> data = sc.parallelize(<span class="type">List</span>(<span class="string">&quot;Female&quot;</span>, <span class="string">&quot;Male&quot;</span>,<span class="string">&quot;Female&quot;</span>))</span><br><span class="line"></span><br><span class="line">    data.foreach(insertData)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insertData</span></span>(iterator: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="type">Class</span>.forName (<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>).newInstance()</span><br><span class="line">    <span class="keyword">val</span> conn: <span class="type">Connection</span> = java.sql.<span class="type">DriverManager</span>.getConnection(<span class="string">&quot;jdbc:mysql://192.168.0.201:3306/zxj&quot;</span>, <span class="string">&quot;root&quot;</span>, </span><br><span class="line">      <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">   </span><br><span class="line">      <span class="keyword">val</span> ps: <span class="type">PreparedStatement</span> = conn.prepareStatement(<span class="string">&quot;insert into rddtable(name) values (?)&quot;</span>)</span><br><span class="line">      ps.setString(<span class="number">1</span>, iterator)</span><br><span class="line">      ps.executeUpdate()</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>这样每个分区中的每条数据都会创建一个连接对象，这是极其不好的，因为大数据动辄前万条数据，这样创建那么多数据库连接对象会拖垮数据库。</strong></font></p><p>这样我们可以提出两种解决方法：</p><ol><li>将数据库连接创建提出，放入Driver端代码。但是这样报错，数据库连接对象没有序列化，这条路封死了，因为我们无法序列化第三方提供的类</li><li>使用foreachPartition方法，使每个分区创建一个连接对象，分区内数据共用一个连接对象，这样也能大大减少连接对象的创建。</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Write</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[2]&quot;</span>).setAppName(<span class="string">&quot;HBaseApp&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    <span class="keyword">val</span> data = sc.parallelize(<span class="type">List</span>(<span class="string">&quot;Female&quot;</span>, <span class="string">&quot;Male&quot;</span>,<span class="string">&quot;Female&quot;</span>))</span><br><span class="line"></span><br><span class="line">    data.foreachPartition(insertData)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insertData</span></span>(iterator: <span class="type">Iterator</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="type">Class</span>.forName (<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>).newInstance()</span><br><span class="line">    <span class="keyword">val</span> conn: <span class="type">Connection</span> = java.sql.<span class="type">DriverManager</span>.getConnection(<span class="string">&quot;jdbc:mysql://192.168.0.201:3306/zxj&quot;</span>, <span class="string">&quot;root&quot;</span>,</span><br><span class="line">      <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">    iterator.foreach(data =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> ps: <span class="type">PreparedStatement</span> = conn.prepareStatement(<span class="string">&quot;insert into rddtable(name) values (?)&quot;</span>)</span><br><span class="line">      ps.setString(<span class="number">1</span>, data)</span><br><span class="line">      ps.executeUpdate()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><p>由于<code>org.apache.hadoop.hbase.mapreduce.TableInputFormat </code>类的实现，Spark 可以通过Hadoop输入格式访问HBase。这个输入格式会返回键值对数据，其中键的类型为<code>org. apache.hadoop.hbase.io.ImmutableBytesWritable</code>，而值的类型为<code>org.apache.hadoop.hbase.client.Result</code>。</p><ul><li><code>org. apache.hadoop.hbase.io.ImmutableBytesWritable</code>指的是Rowkey</li><li><code>org.apache.hadoop.hbase.client.Result</code>指得是查询结果</li><li><code>put</code>需要插入的数据</li></ul><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.<span class="type">Configuration</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.<span class="type">HBaseConfiguration</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.<span class="type">Result</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.io.<span class="type">ImmutableBytesWritable</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.<span class="type">TableInputFormat</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.<span class="type">Bytes</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HBaseSpark</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建spark配置信息</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;JdbcRDD&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建HBase配置信息</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">Configuration</span> = <span class="type">HBaseConfiguration</span>.create()</span><br><span class="line">      <span class="comment">// 使用配置文件或者在代码中编写</span></span><br><span class="line">    conf.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="string">&quot;hadoop102,hadoop103,hadoop104&quot;</span>)</span><br><span class="line">      <span class="comment">// 声明要读取的表，然后传入读取函数</span></span><br><span class="line">    conf.set(<span class="type">TableInputFormat</span>.<span class="type">INPUT_TABLE</span>, <span class="string">&quot;rddtable&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从HBase读取数据形成RDD</span></span><br><span class="line">    <span class="keyword">val</span> hbaseRDD: <span class="type">RDD</span>[(<span class="type">ImmutableBytesWritable</span>, <span class="type">Result</span>)] = sc.newAPIHadoopRDD(</span><br><span class="line">      conf,</span><br><span class="line">      classOf[<span class="type">TableInputFormat</span>],</span><br><span class="line">      classOf[<span class="type">ImmutableBytesWritable</span>],</span><br><span class="line">      classOf[<span class="type">Result</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> count: <span class="type">Long</span> = hbaseRDD.count()</span><br><span class="line">    println(count)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对hbaseRDD进行处理</span></span><br><span class="line">    hbaseRDD.foreach &#123;</span><br><span class="line">      <span class="keyword">case</span> (_, result) =&gt;</span><br><span class="line">        <span class="keyword">val</span> key: <span class="type">String</span> = <span class="type">Bytes</span>.toString(result.getRow)</span><br><span class="line">        <span class="keyword">val</span> name: <span class="type">String</span> = <span class="type">Bytes</span>.toString(result.getValue(<span class="type">Bytes</span>.toBytes(<span class="string">&quot;info&quot;</span>), <span class="type">Bytes</span>.toBytes(<span class="string">&quot;name&quot;</span>)))</span><br><span class="line">        <span class="keyword">val</span> color: <span class="type">String</span> = <span class="type">Bytes</span>.toString(result.getValue(<span class="type">Bytes</span>.toBytes(<span class="string">&quot;info&quot;</span>), <span class="type">Bytes</span>.toBytes(<span class="string">&quot;color&quot;</span>)))</span><br><span class="line">        println(<span class="string">&quot;RowKey:&quot;</span> + key + <span class="string">&quot;,Name:&quot;</span> + name + <span class="string">&quot;,Color:&quot;</span> + color)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数据保存"><a href="#数据保存" class="headerlink" title="数据保存"></a>数据保存</h4><p>我们只需要构建rowkey,put类型对象即可</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line"><span class="comment">//获取Spark配置信息并创建与spark的连接</span></span><br><span class="line">  <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;HBaseApp&quot;</span>)</span><br><span class="line">  <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建HBaseConf</span></span><br><span class="line">  <span class="keyword">val</span> conf = <span class="type">HBaseConfiguration</span>.create()</span><br><span class="line">  <span class="keyword">val</span> jobConf = <span class="keyword">new</span> <span class="type">JobConf</span>(conf)</span><br><span class="line">  jobConf.setOutputFormat(classOf[<span class="type">TableOutputFormat</span>])</span><br><span class="line">  jobConf.set(<span class="type">TableOutputFormat</span>.<span class="type">OUTPUT_TABLE</span>, <span class="string">&quot;fruit_spark&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建Hbase表描述器</span></span><br><span class="line">  <span class="keyword">val</span> fruitTable = <span class="type">TableName</span>.valueOf(<span class="string">&quot;fruit_spark&quot;</span>)</span><br><span class="line">  <span class="keyword">val</span> tableDescr = <span class="keyword">new</span> <span class="type">HTableDescriptor</span>(fruitTable)</span><br><span class="line">  tableDescr.addFamily(<span class="keyword">new</span> <span class="type">HColumnDescriptor</span>(<span class="string">&quot;info&quot;</span>.getBytes))</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Hbase表</span></span><br><span class="line">  <span class="keyword">val</span> admin = <span class="keyword">new</span> <span class="type">HBaseAdmin</span>(conf)</span><br><span class="line">  <span class="keyword">if</span> (admin.tableExists(fruitTable)) &#123;</span><br><span class="line">    admin.disableTable(fruitTable)</span><br><span class="line">    admin.deleteTable(fruitTable)</span><br><span class="line">  &#125;</span><br><span class="line">  admin.createTable(tableDescr)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义往Hbase插入数据的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">convert</span></span>(triple: (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>)) = &#123;</span><br><span class="line">    <span class="keyword">val</span> put = <span class="keyword">new</span> <span class="type">Put</span>(<span class="type">Bytes</span>.toBytes(triple._1))</span><br><span class="line">    put.addImmutable(<span class="type">Bytes</span>.toBytes(<span class="string">&quot;info&quot;</span>), <span class="type">Bytes</span>.toBytes(<span class="string">&quot;name&quot;</span>), <span class="type">Bytes</span>.toBytes(triple._2))</span><br><span class="line">    put.addImmutable(<span class="type">Bytes</span>.toBytes(<span class="string">&quot;info&quot;</span>), <span class="type">Bytes</span>.toBytes(<span class="string">&quot;price&quot;</span>), <span class="type">Bytes</span>.toBytes(triple._3))</span><br><span class="line">    (<span class="keyword">new</span> <span class="type">ImmutableBytesWritable</span>, put)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个RDD</span></span><br><span class="line">  <span class="keyword">val</span> initialRDD = sc.parallelize(<span class="type">List</span>((<span class="number">1</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">11</span>), (<span class="number">2</span>,<span class="string">&quot;banana&quot;</span>,<span class="number">12</span>), (<span class="number">3</span>,<span class="string">&quot;pear&quot;</span>,<span class="number">13</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">//将RDD内容写到HBase</span></span><br><span class="line">  <span class="keyword">val</span> localData = initialRDD.map(convert)</span><br><span class="line"></span><br><span class="line">  localData.saveAsHadoopDataset(jobConf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200823202947430.png" alt="image-20200823202947430"></p><p>输入可能以多个文件的形式存储在HDFS上，每个File都包含了很多块，称为Block。当Spark读取这些文件作为输入时，会根据具体数据格式对应的InputFormat进行解析，一般是将若干个Block合并成一个输入分片，称为InputSplit，注意InputSplit不能跨越文件。随后将为这些输入分片生成具体的Task。InputSplit与Task是一一对应的关系。随后这些具体的Task每个都会被分配到集群上的某个节点的某个Executor去执行。</p><ol><li>每个节点可以起一个或多个Executor。</li><li>每个Executor由若干core组成，每个Executor的每个core一次只能执行一个Task。</li><li>每个Task执行的结果就是生成了目标RDD的一个partiton。</li></ol><p>注意: 这里的core是虚拟的core而不是机器的物理CPU核，可以理解为就是Executor的一个工作线程。而 Task被执行的并发度 = Executor数目 * 每个Executor核数</p><p>至于partition的数目：</p><ol><li>对于数据读入阶段，例如sc.textFile，输入文件被划分为多少InputSplit就会需要多少初始Task。</li><li>在Map阶段partition数目保持不变。</li><li>在Reduce阶段，RDD的聚合会触发shuffle操作，聚合后的RDD的partition数目跟具体操作有关，例如repartition操作会聚合成指定分区数，还有一些算子是可配置的。</li></ol><p>RDD在计算的时候，每个分区都会起一个task，所以rdd的分区数目决定了总的的task数目。申请的计算节点（Executor）数目和每个计算节点核数，决定了你同一时刻可以并行执行的task。</p><p>比如的RDD有100个分区，那么计算的时候就会生成100个task，你的资源配置为10个计算节点，每个两2个核，同一时刻可以并行的task数目为20，计算这个RDD就需要5个轮次。如果计算资源不变，你有101个task的话，就需要6个轮次，在最后一轮中，只有一个task在执行，其余核都在空转。如果资源不变，你的RDD只有2个分区，那么同一时刻只有2个task运行，其余18个核空转，造成资源浪费。这就是在spark调优中，增大RDD分区数目，增大任务并行度的做法。</p><h2 id="Spark中的各个数量"><a href="#Spark中的各个数量" class="headerlink" title="Spark中的各个数量"></a>Spark中的各个数量</h2><h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>可以在运行参数中设置，设置每个Executor的core，或者总共的core。这里的core并不是指物理核数，而是Executor的Task并行度</p><h3 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h3><ul><li>默认情况下，读取文件采用的是Hadoop的切片规则，如果读取内存中的数据，可以根据特定的算法进行设定,</li><li>可以通过其他算子进行改变。</li><li>多个阶段的场合，下一个阶段的分区数量取决于上一个阶段最后RDD的分区数,但是可以在相应的算子中进行修改</li></ul><h3 id="Stage"><a href="#Stage" class="headerlink" title="Stage"></a>Stage</h3><p>（ResultStage）  + Shuffle依赖的数量( ShuffleMapStage )<br>    划分阶段的目的就是为了任务执行的等待，因为Shuffle的过程需要落盘</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Task：原则上一个分区就是一个任务，但是实际应用中，可以动态调整</p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark学习笔记-简单了解</title>
      <link href="2020/08/19/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/"/>
      <url>2020/08/19/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark概述"><a href="#Spark概述" class="headerlink" title="Spark概述"></a>Spark概述</h1><h2 id="什么是Spark"><a href="#什么是Spark" class="headerlink" title="什么是Spark"></a>什么是Spark</h2><p>Spark是一种基于<font color="red">内存</font>的快速、通用、可扩展的大数据分析引擎(MR也是)。</p><h2 id="为什么提出Spark"><a href="#为什么提出Spark" class="headerlink" title="为什么提出Spark"></a>为什么提出Spark</h2><p><strong>2011年Hadoop1.x被提出，但是MR计算很慢且不可替换，扩展性差</strong></p><p>且MR程序之间都是独立的，迭代计算需要通过文件中间存储；而spark天生支持迭代计算，一个行动算子就是一个job，多个job在内存中，可进行复杂运算</p><p><strong>2013年6月，Spark的提出，可以使用HDFS存储，然后使用Spark计算</strong></p><p><strong>2013年10月，Hadoop2.x提出yarn的框架，使资源调度和任务调度分离开，可以使用第三方计算框架</strong></p><h2 id="Spark内置模块"><a href="#Spark内置模块" class="headerlink" title="Spark内置模块"></a>Spark内置模块</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200819204142191.png" alt="image-20200819204142191"></p><ul><li>Spark Core：实现了Spark的基本功能，包含任务调度、内存管理、错误恢复、与存储系统交互等模块。Spark Core中还包含了对弹性分布式数据集(Resilient Distributed DataSet，简称RDD)的API定义。 </li><li>Spark SQL：是Spark用来操作结构化数据的程序包。通过Spark SQL，我们可以使用 SQL或者Apache Hive版本的SQL方言(HQL)来查询数据。Spark SQL支持多种数据源，比如Hive表、Parquet以及JSON等。 </li><li>Spark Streaming：是Spark提供的对实时数据进行流式计算的组件。提供了用来操作数据流的API，并且与Spark Core中的 RDD API高度对应。 </li><li>Spark MLlib：提供常见的机器学习(ML)功能的程序库。包括分类、回归、聚类、协同过滤等，还提供了模型评估、数据 导入等额外的支持功能。 </li><li>集群管理器：Spark 设计为可以高效地在一个计算节点到数千个计算节点之间伸缩计 算。为了实现这样的要求，同时获得最大灵活性，Spark支持在各种集群管理器(Cluster Manager)上运行，包括<code>Hadoop YARN</code>、<code>Apache Mesos</code>，以及Spark自带的一个简易调度 器，叫作独立调度器。 </li></ul><p> Spark得到了众多大数据公司的支持，这些公司包括Hortonworks、IBM、Intel、Cloudera、MapR、Pivotal、百度、阿里、腾讯、京东、携程、优酷土豆。当前百度的Spark已应用于大搜索、直达号、百度大数据等业务；阿里利用GraphX构建了大规模的图计算和图挖掘系统，实现了很多生产系统的推荐算法；腾讯Spark集群达到8000台的规模，是当前已知的世界上最大的Spark集群。</p><h1 id="Spark运行模式"><a href="#Spark运行模式" class="headerlink" title="Spark运行模式"></a>Spark运行模式</h1><a href="/2020/08/29/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkCore%E8%A7%A3%E6%9E%90/" title="查看更详细的不同环境不同模式的运行原理请查看">查看更详细的不同环境不同模式的运行原理请查看</a><h2 id="Spark安装地址"><a href="#Spark安装地址" class="headerlink" title="Spark安装地址"></a>Spark安装地址</h2><ul><li>官网地址<br><a href="http://spark.apache.org/">http://spark.apache.org/</a></li><li>文档查看地址<br><a href="https://spark.apache.org/docs/2.1.1/">https://spark.apache.org/docs/2.1.1/</a></li><li>下载地址<br><a href="https://spark.apache.org/downloads.html">https://spark.apache.org/downloads.html</a></li></ul><h2 id="重要角色"><a href="#重要角色" class="headerlink" title="重要角色"></a>重要角色</h2><p>因为Spark自身提供了一套资源调度的方案，所以它有一些过程中的必要角色。</p><h3 id="Driver（驱动器）"><a href="#Driver（驱动器）" class="headerlink" title="Driver（驱动器）"></a>Driver（驱动器）</h3><p><font color="red">含有<code>SparkContext</code>对象的类就称为驱动类</font></p><p>Spark的驱动器是执行开发程序中的main方法的进程。它负责开发人员编写的用来创建<code>SparkContext</code>、创建RDD，以及进行RDD的转化操作和行动操作代码的执行。如果你是用<code>spark shell</code>，那么当你启动<code>Spark shell</code>的时候，系统后台自启了一个Spark驱动器程序，就是在Spark shell中预加载的一个叫作<code> sc</code>的<code>SparkContext</code>对象。如果驱动器程序终止，那么Spark应用也就结束了。主要负责：</p><ol><li>把用户程序转为作业（JOB）</li><li>跟踪Executor的运行状况</li><li>为执行器节点调度任务</li><li>UI展示应用运行状况</li></ol><h3 id="Executor（执行器）"><a href="#Executor（执行器）" class="headerlink" title="Executor（执行器）"></a>Executor（执行器）</h3><p><code>Spark Executor</code>是一个工作进程，负责在 Spark 作业中运行任务，任务间相互独立。Spark 应用启动时，Executor节点被同时启动，并且始终伴随着整个 Spark 应用的生命周期而存在。如果有Executor节点发生了故障或崩溃，Spark 应用也可以继续执行，会将出错节点上的任务调度到其他Executor节点上继续运行。主要负责：</p><ol><li>负责运行组成 Spark 应用的任务，并将结果返回给驱动器进程；</li><li>通过自身的块管理器（Block Manager）为用户程序中要求缓存的RDD提供内存式存储。RDD是直接缓存在Executor进程内的，因此任务可以在运行时充分利用缓存数据加速运算。</li></ol><h2 id="Local模式"><a href="#Local模式" class="headerlink" title="Local模式"></a>Local模式</h2><p>特点：<font color="red">不需要任何配置，直接就可以运行计算代码。！！！</font></p><p>Local模式就是运行在一台计算机上的模式，通常就是用于本机练手和测试，它可以通过以下几种方式设置<code>Master</code>：</p><ul><li><code>local</code>：所有计算都运行在一个线程当中，没有任何并行计算，通常我们在本机执行一些测试代码，或者练手，就用这种模式;</li><li><code>local[k]</code>：指定使用几个线程来运行计算，比如local[4]就是运行4个Worker线程。通常我们的Cpu有几个Core，就指定几个线程，最大化利用Cpu的计算能力;</li><li><code>local[*]</code>：这种模式直接帮你按照Cpu最多Cores来设置线程数了。</li></ul><hr><h3 id="安装并使用"><a href="#安装并使用" class="headerlink" title="安装并使用"></a>安装并使用</h3><p><strong>1. 上传并解压spark安装包</strong></p><p><strong>2. 官方求PI案例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf spark-2.1.1-bin-hadoop2.7.tgz -C /opt/module/</span><br><span class="line">mv spark-2.1.1-bin-hadoop2.7 spark</span><br><span class="line"></span><br><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p><strong>命令语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class &lt;main-class&gt;</span><br><span class="line">--master &lt;master-url&gt; \</span><br><span class="line">--deploy-mode &lt;deploy-mode&gt; \</span><br><span class="line">--conf &lt;key&gt;=&lt;value&gt; \</span><br><span class="line">... # other options</span><br><span class="line">&lt;application-jar&gt; \</span><br><span class="line">[application-arguments]</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200820215032978.png" alt="image-20200820215032978"></p><p><strong>参数说明</strong></p><ul><li><code>--master</code> 指定Master的地址，默认为Local</li><li><code>--class</code>: 你的应用的启动类 (如 org.apache.spark.examples.SparkPi)</li><li><code>--deploy-mode</code>: 是否发布你的驱动到worker节点(cluster) 或者作为一个本地客户端 (client) (default: client)*</li><li><code>--conf</code>: 任意的Spark配置属性， 格式key=value. 如果值包含空格，可以加引号“key=value”</li><li><code>application-jar</code>: 打包好的应用jar,包含依赖. 这个URL在集群中全局可见。 比如hdfs:// 共享存储系统， 如果是 file:// path， 那么所有的节点的path都包含同样的jar</li><li><code>application-arguments</code>: 传给main()方法的参数</li><li><code>--executor-memory 1G</code> 指定每个executor可用内存为1G</li><li><code>--total-executor-cores 2</code> 指定每个executor使用的cup核数为2个</li></ul><h3 id="安装验证"><a href="#安装验证" class="headerlink" title="安装验证"></a>安装验证</h3><p>启动<code>spark-shell</code>，因为<code>sprak-shell</code>模式使用本地模式，它只能使用client提交模式。</p><p><code>bin/spark-shell</code></p><p><font color="red">spark shell 模式是以<code>client</code>提交的(第一种)，所以不能加入<code>--deploy-mode cluster</code>的(第二种) client方式用于测试环境，用于方便查看结果，因为 spark shell 模式以client方式提交，所以 spark shell 模式不支持–deploy-mode cluster提交</font></p><p>可登录UI</p><p><code>ip:4040</code></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200820215131016.png" alt="image-20200820215131016"></p><h2 id="yarn资源调度模式🔺"><a href="#yarn资源调度模式🔺" class="headerlink" title="yarn资源调度模式🔺"></a>yarn资源调度模式🔺</h2><p>特点：使用Yarn资源调度的话，就要使用到角色<code>RM</code>、<code>NM</code>，<font color="red">所以必须开启HDFS和Yarn集群</font>。因为使用了Yarn集群的资源调度，所以就不会使用Spark自带的资源调度角色：<code>Master</code>、<code>Worker</code>。</p><p>因为使用Yarn的资源调度，所以和Yarn调度MR程序的流程十分相似，区别就是任务执行时，是在Spark的任务执行器<code>Executor</code>中执行的。</p><h3 id="yarn的提交模式"><a href="#yarn的提交模式" class="headerlink" title="yarn的提交模式"></a>yarn的提交模式</h3><p>Spark客户端直接连接<code>Yarn</code>，不需要额外构建Spark集群。有<code>yarn-client</code>和<code>yarn-cluster</code>两种模式，主要区别在于：<font color="red">Driver程序的运行节点。</font></p><ul><li><code>yarn-client</code>：<strong>Driver程序运行在客户端</strong>，适用于交互、调试，<strong>希望立即看到app的输出</strong>，在Driver端可以看到task执行的情况。生产环境下不能使用client模式</li><li><code>yarn-cluster</code>：Driver程序运行在由RM（ResourceManager）<strong>启动的AP（APPMaster）适用于生产环境</strong>。</li></ul><p><strong><code>yarn-client</code>的缺点</strong></p><p>假设要提交100个application到集群运行，Driver每次都会在client端启动，客户端就会启动100个Driver，并且一个Driver要占用一个端口，那么就会导致客户端100次网卡流量暴增的问题。客户端网卡通信，都被task监控信息占用。</p><p><strong><code>yarn-cluster</code>的缺点</strong></p><p>在客户端看不到task执行情况和结果。要去webui中看。</p><hr><h3 id="yarn-cluster模式"><a href="#yarn-cluster模式" class="headerlink" title="yarn-cluster模式"></a><strong>yarn-cluster模式</strong></h3><a href="/2020/08/29/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SparkCore%E8%A7%A3%E6%9E%90/" title="具体请查看">具体请查看</a><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200819211953670.png" alt="image-20200819211953670"></p><ol><li>客户端任务提交</li><li>RM选择一个合适的NM节点运行<code>ApplicationMaster</code>节点，并启动<code>Driver</code>角色</li><li>AM向RM申请资源</li><li>RM返回资源列表</li><li>AM向资源列表中的节点发送创建Spark执行器对象<code>Executor</code>的命令</li><li>NM上启动<code>container</code>，并在其中开启了<code>Executor</code>。并向AM反向注册</li><li>AM中的Driver开始分解任务，并调度任务</li></ol><h3 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h3><p><strong>1. 修改yarn的配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi yarn-site.xml</span><br><span class="line">   &lt;!--是否启动一个线程检查每个任务正使用的物理内存量，如果任务超出分配值，则直接将其杀掉，默认是<span class="literal">true</span> --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.nodemanager.pmem-check-enabled&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--是否启动一个线程检查每个任务正使用的虚拟内存量，如果任务超出分配值，则直接将其杀掉，默认是<span class="literal">true</span> --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.修改spark-env.sh，添加如下配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi spark-env.sh</span><br><span class="line">YARN_CONF_DIR=/opt/modules/hadoop-2.7.2/etc/hadoop</span><br></pre></td></tr></table></figure><p><strong>3. 分发配置文件：yarn和spark</strong></p><p><strong>4. 程序执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode client \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意：在提交任务之前需启动HDFS以及YARN集群。</strong></font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200820215724579.png" alt="image-20200820215724579"></p><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><p><strong>1. 修改配置文件spark-defaults.conf，添加如下内容：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spark.yarn.historyServer.address=hadoop102:18080</span><br><span class="line">spark.history.ui.port=18080</span><br></pre></td></tr></table></figure><p><strong>2. 重启spark历史服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sbin/stop-history-server.sh </span><br><span class="line">sbin/start-history-server.sh </span><br></pre></td></tr></table></figure><br/><h2 id="Standalone资源调度模式"><a href="#Standalone资源调度模式" class="headerlink" title="Standalone资源调度模式"></a>Standalone资源调度模式</h2><p>构建一个由Master+Slave构成的Spark集群，Spark运行在集群中。</p><p><font color="red">Standalone是Spark内部独有的资源调度模式，使用后不惜开启其他内容，直接就可以运算</font></p><p>Standalone集群中没有ApplicationMaster的概念，这是Yarn之中的概念，Standalone的Driver替代了ApplicationMaster。</p><p><font color="red">ps：yarn和Stand alone都是资源管理的，同时开启会造成资源隔离和资源抢夺</font></p><h3 id="client提交模式"><a href="#client提交模式" class="headerlink" title="client提交模式"></a>client提交模式</h3><p><code>--deploy-mode client</code></p><p><img src="https://img-blog.csdnimg.cn/20181102101600944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTMxNzc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>执行流程</strong></p><ol><li>client模式提交任务后，会在客户端启动Driver进程。</li><li>Driver会向Master申请启动Application启动的资源。</li><li>资源申请成功，Driver端将task发送到worker端执行。</li><li>worker将task执行结果返回到Driver端。(由代码设置)</li></ol><p><strong>总结</strong></p><p>client模式适用于测试调试程序。Driver进程是在客户端启动的，这里的客户端就是指提交应用程序的当前节点。<strong>在Driver端可以看到task执行的情况。生产环境下不能使用client模式</strong>，是因为：<font color="red">假设要提交100个application到集群运行，Driver每次都会在client端启动，那么就会导致客户端100次网卡流量暴增的问题。（因为要监控task的运行情况，会占用很多端口，如上图的结果图）客户端网卡通信，都被task监控信息占用。</font></p><h3 id="cluster提交模式"><a href="#cluster提交模式" class="headerlink" title="cluster提交模式"></a>cluster提交模式</h3><p><font color="red"><strong>注意：Standalone-cluster提交方式，应用程序使用的所有jar包和文件，必须保证所有的worker节点都要有，因为此种方式，spark不会自动上传包。</strong></font></p><p><code>--deploy-mode cluster</code></p><p><img src="https://img-blog.csdnimg.cn/20181030113953642.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTMxNzc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>执行流程</strong></p><ol><li>客户端使用命令<code>spark-submit --deploy-mode cluster</code> 后会启动spark-submit进程</li><li>此进程为Driver向Master申请资源，Driver进程默认需要<code>1G内存</code>和<code>1Core</code></li><li>Master会随机在一台Worker节点来启动<code>Driver</code>进程</li><li>Driver启动成功后，<code>spark-submit</code>关闭，然后Driver向Master申请资源</li><li>Master接收到请求后，会在资源充足的worker节点上启动<code>Executor</code>进程</li><li>Driver分发<code>Task</code>到Executor中执行</li></ol><h3 id="安装和使用-1"><a href="#安装和使用-1" class="headerlink" title="安装和使用"></a>安装和使用</h3><p><font color="red">ps：因为调度和执行全是使用Spark本身，所以需要搭建Spark集群，并且关闭Yarn集群，以防资源抢占</font></p><p><strong>1. 把spark中yarn的配置取消掉</strong></p><p><strong>2. spark conf文件修改</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mv slaves.template slaves</span><br><span class="line">mv spark-env.sh.template spark-env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改slave文件，添加work节点</span></span><br><span class="line">vim slaves</span><br><span class="line">hadoop201</span><br><span class="line">hadoop202</span><br><span class="line">hadoop203</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改spark-env.sh文件，添加如下配置</span></span><br><span class="line">SPARK_MASTER_HOST=hadoop201</span><br><span class="line">SPARK_MASTER_PORT=7077</span><br></pre></td></tr></table></figure><p><strong>3. spark包分发</strong></p><p><strong>4. 启动<code>sbin/start-all.sh</code></strong></p><p>网页查看：<code>hadoop201:8080</code></p><p><font color="red">注意：如果遇到<code> “JAVA_HOME not set”</code> 异常，可以在sbin目录下的<code>spark-config.sh</code> 文件中加入如下配置：</font></p><p><code>export JAVA_HOME=/opt/modules/jdk1.8.0_152</code></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200820220727921.png" alt="image-20200820220727921"></p><p><strong>4. 官方求PI案例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark://hadoop201:7077 \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200820220922587.png" alt="image-20200820220922587"></p><p><strong>5. 启动使用standalone的spark-shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/opt/module/spark/bin/spark-shell \</span><br><span class="line">--master spark://hadoop201:7077 \</span><br><span class="line">--executor-memory 1g \</span><br><span class="line">--total-executor-cores 2</span><br></pre></td></tr></table></figure><h3 id="JobHistoryServer配置"><a href="#JobHistoryServer配置" class="headerlink" title="JobHistoryServer配置"></a>JobHistoryServer配置</h3><p><strong>1. 修改<code>spark-default.conf</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi spark-defaults.conf</span><br><span class="line">spark.eventLog.enabled           <span class="literal">true</span></span><br><span class="line">spark.eventLog.dir               hdfs://hadoop201:9000/directory</span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意：HDFS上的目录需要提前存在</strong></font></p><p><strong>2. 修改<code>spark-env.sh</code>文件，添加如下配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi spark-env.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> SPARK_HISTORY_OPTS=<span class="string">&quot;-Dspark.history.ui.port=18080 </span></span><br><span class="line"><span class="string">-Dspark.history.retainedApplications=30 </span></span><br><span class="line"><span class="string">-Dspark.history.fs.logDirectory=hdfs://hadoop201:9000/directory&quot;</span></span><br></pre></td></tr></table></figure><p>参数描述：</p><ul><li><code>spark.eventLog.dir</code>：Application在运行过程中所有的信息均记录在该属性指定的路径下； </li><li><code>spark.history.ui.port</code>=18080 WEBUI访问的端口号为18080</li><li><code>spark.history.fs.logDirectory</code>=hdfs://hadoop102:9000/directory 配置了该属性后，在start-history-server.sh时就无需再显式的指定路径，Spark History Server页面只展示该指定路径下的信息</li><li><code>spark.history.retainedApplications=30</code>指定保存Application历史记录的个数，如果超过这个值，旧的应用程序信息将被删除，这个是内存中的应用数，而不是页面上显示的应用数。</li></ul><p><strong>3. 配置文件分发</strong></p><p><strong>4. 启动</strong></p><p><code>sbin/start-history-server.sh</code></p><p><strong>5.再次执行任务，查看结果</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200820221921401.png" alt="image-20200820221921401"></p><h3 id="Standalone模式的优点"><a href="#Standalone模式的优点" class="headerlink" title="Standalone模式的优点"></a>Standalone模式的优点</h3><ol><li>不需要开启HDFS，但保证需要执行的Application的包，每个节点都有</li><li>都需要spark的包</li><li>不用且不能开启yarn集群</li></ol><p>yarn和Stand alone都是资源管理的，同时开启会造成资源隔离和资源抢夺·</p><h2 id="Mesos模式-了解"><a href="#Mesos模式-了解" class="headerlink" title="Mesos模式(了解)"></a>Mesos模式(了解)</h2><p>Spark客户端直接连接Mesos；不需要额外构建Spark集群。国内应用比较少，更多的是运用yarn调度。</p><h2 id="几种模式对比"><a href="#几种模式对比" class="headerlink" title="几种模式对比"></a>几种模式对比</h2><table><thead><tr><th>模式</th><th>Spark安装机器数</th><th>需启动的进程</th><th>所属者</th></tr></thead><tbody><tr><td>Local</td><td>1</td><td>无</td><td>Spark</td></tr><tr><td>Standalone</td><td>3</td><td>Master及Worker</td><td>Spark</td></tr><tr><td>Yarn</td><td>1</td><td>Yarn及HDFS</td><td>Hadoop</td></tr></tbody></table><h1 id="WC示例"><a href="#WC示例" class="headerlink" title="WC示例"></a>WC示例</h1><h2 id="集群执行"><a href="#集群执行" class="headerlink" title="集群执行"></a>集群执行</h2><p><strong>1. pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-wc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>WordCount<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            scala程序支持插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            打包插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>WordCount<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2. object</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建SparkConf并设置App名称</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WC&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建SparkContext，该对象是提交Spark App的入口</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.使用sc创建RDD并执行相应的transformation和action</span></span><br><span class="line">    sc.textFile(args(<span class="number">0</span>)).flatMap(_.split(<span class="string">&quot; &quot;</span>)).map((_, <span class="number">1</span>)).reduceByKey(_+_, <span class="number">1</span>).sortBy(_._2, <span class="literal">false</span>).saveAsTextFile(args(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.打包到集群运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class WordCount \</span><br><span class="line">--master spark://hadoop201:7077 \</span><br><span class="line">WordCount.jar \</span><br><span class="line">/word.txt \</span><br><span class="line">/out</span><br></pre></td></tr></table></figure><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p>本地Spark程序调试需要使用local提交模式，即将本机当做运行环境，Master和Worker都为本机。运行时直接加断点调试即可。如下：</p><p>创建SparkConf的时候设置额外属性，表明本地执行：</p><p><code>val conf = new SparkConf().setAppName(&quot;WC&quot;).setMaster(&quot;local[*]&quot;)</code></p><h2 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h2><ol><li>创建<code>SparkContext</code>对象，只有创建了此对象的类就称为<code>Driver</code></li><li>创建<code>SparkContext</code>对象需要配置类，我们可以在配置类中设置运行模式及任务名之类的操作</li><li>创建RDD</li><li>转换RDD</li><li>执行算子执行，job开始运行。前面的逻辑只有等行动算子执行时，剩余的才会执行</li></ol><p><font color="red"></font></p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala模式匹配及泛型</title>
      <link href="2020/08/18/Scala%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%8F%8A%E6%B3%9B%E5%9E%8B/"/>
      <url>2020/08/18/Scala%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%8F%8A%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><a href="/2020/07/26/Scala%E6%A6%82%E8%BF%B0/" title="Scala概述">Scala概述</a></li><li><a href="/2020/07/30/Scala%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8F%8A%E5%87%BD%E6%95%B0-%E4%BA%8C/" title="Scala流程控制及函数">Scala流程控制及函数</a></li><li><a href="/2020/08/12/Scala%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E4%B8%89/" title="Scala面对对象编程">Scala面对对象编程</a></li><li><a href="/2020/08/14/Scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%8F%8A%E9%9B%86%E5%90%88-%E5%9B%9B/" title="Scala隐式转换及集合">Scala隐式转换及集合</a></li></ul><h1 id="模式匹配🔺"><a href="#模式匹配🔺" class="headerlink" title="模式匹配🔺"></a>模式匹配🔺</h1><p>Scala中的<strong>模式匹配</strong>类似于Java中的switch语法，但是<font color="red"><strong>更加强大</strong></font>。</p><p>模式匹配语法中，采用<code>match</code>关键字声明，每个分支采用<code>case</code>关键字进行声明，当需要匹配时，会从第一个case分支开始，如果匹配成功，那么执行对应的逻辑代码，如果匹配不成功，继续执行下一个分支进行判断。<strong>如果所有case都不匹配</strong>，那么会执行<code>case _ </code>分支，类似于Java中default语句。</p><p>scala的模式匹配不和Java一样要每个分支都要写<code>break</code>，<strong>在匹配到内容后就会退出</strong>。</p><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><p><strong>match的细节和注意事项</strong></p><ol><li>如果所有<code>case</code>都不匹配，那么执行<code>case _ </code>分支，类似于Java中default语句</li><li>如果所有<code>case</code>都不匹配，又没有写<code>case _ </code>分支，<font color="red">那么会抛出MatchError</font></li><li>每个<code>case</code>中，<font color="red">不用break语句，自动中断case</font></li><li>可以在<code>match</code>中使用其它类型，<strong>而不仅仅是字符,可以是表达式</strong></li><li><code>=&gt;</code> 类似于 java swtich 的 <code>:</code></li><li><code>=&gt; </code>后面的代码块到下一个<code>case</code>, 是作为一个整体执行，<strong>如果多行可以使用{} 括起来</strong>。 </li></ol><p><strong>代码验证</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> oper = &#x27;#&#x27;</span><br><span class="line">    <span class="keyword">val</span> n1 = <span class="number">20</span></span><br><span class="line">    <span class="keyword">val</span> n2 = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span></span><br><span class="line">    oper <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &#x27;+&#x27; =&gt; res = n1 + n2</span><br><span class="line">      <span class="keyword">case</span> &#x27;-&#x27; =&gt; res = n1 - n2</span><br><span class="line">      <span class="keyword">case</span> &#x27;*&#x27; =&gt; res = n1 * n2</span><br><span class="line">      <span class="keyword">case</span> &#x27;/&#x27; =&gt; res = n1 / n2</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;oper error&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;res=&quot;</span> + res)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="守卫"><a href="#守卫" class="headerlink" title="守卫"></a>守卫</h2><p>如果想要表达<strong>匹配某个范围的数据</strong>，就需要在模式匹配中增加条件守卫</p><p><font color="red">ps：请注意各个<code>case</code>的摆放位置是可以改变的，在使用中不要将匹配范围最大(<code>case _</code>)的放上面，这样会导致匹配范围小的永远匹配不到。</font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (ch &lt;- <span class="string">&quot;+-3!&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> sign = <span class="number">0</span></span><br><span class="line">      <span class="keyword">var</span> digit = <span class="number">0</span></span><br><span class="line">      ch <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &#x27;+&#x27; =&gt; sign = <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> &#x27;-&#x27; =&gt; sign = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">case</span> _ <span class="keyword">if</span> ch.toString.equals(<span class="string">&quot;3&quot;</span>) =&gt; digit = <span class="number">3</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt; sign = <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">      println(ch + <span class="string">&quot; &quot;</span> + sign + <span class="string">&quot; &quot;</span> + digit)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述代码中，在匹配除了<code>+</code>、<code>-</code>的任意字符时添加了个守卫，如果等于3，则赋值。</p><h2 id="模式中的变量"><a href="#模式中的变量" class="headerlink" title="模式中的变量"></a>模式中的变量</h2><p>如果在case关键字后跟变量名，那么match前<strong>表达式的值会赋给那个变量</strong></p><p>例如:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> ch = &#x27;<span class="type">V</span>&#x27;</span><br><span class="line">ch <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &#x27;+&#x27; =&gt; println(<span class="string">&quot;ok~&quot;</span>)</span><br><span class="line">    <span class="comment">// match前ch的值赋值给了mychar</span></span><br><span class="line">    <span class="keyword">case</span> mychar =&gt; println(<span class="string">&quot;ok~&quot;</span> + mychar)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println (<span class="string">&quot;ok~~&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类型匹配"><a href="#类型匹配" class="headerlink" title="类型匹配"></a>类型匹配</h2><p><font color="red">可以匹配对象的任意类型</font>，这样做避免了使用<code>isInstanceOf</code>和<code>asInstanceOf</code>方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 类型匹配, obj 可能有如下的类型</span></span><br><span class="line">    <span class="keyword">val</span> a = <span class="number">7</span></span><br><span class="line">    <span class="keyword">val</span> obj = <span class="keyword">if</span>(a == <span class="number">1</span>) <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">3</span>) <span class="type">BigInt</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">4</span>) <span class="type">Map</span>(<span class="string">&quot;aa&quot;</span> -&gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">5</span>) <span class="type">Map</span>(<span class="number">1</span> -&gt; <span class="string">&quot;aa&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">6</span>) <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">7</span>) <span class="type">Array</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">8</span>) <span class="type">Array</span>(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line">    println(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> result = obj <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> a : <span class="type">Int</span> =&gt; a</span><br><span class="line">      <span class="keyword">case</span> b : <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] =&gt; <span class="string">&quot;对象是一个字符串-数字的Map集合&quot;</span></span><br><span class="line">      <span class="keyword">case</span> c : <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] =&gt; <span class="string">&quot;对象是一个数字-字符串的Map集合&quot;</span></span><br><span class="line">      <span class="keyword">case</span> d : <span class="type">Array</span>[<span class="type">String</span>] =&gt; <span class="string">&quot;对象是一个字符串数组&quot;</span></span><br><span class="line">      <span class="keyword">case</span> e : <span class="type">Array</span>[<span class="type">Int</span>] =&gt; <span class="string">&quot;对象是一个数字数组&quot;</span></span><br><span class="line">      <span class="keyword">case</span> f : <span class="type">BigInt</span> =&gt; <span class="type">Int</span>.<span class="type">MaxValue</span></span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="string">&quot;啥也不是&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类型匹配注意事项</strong></p><ul><li><p>Map[String, Int] 和Map[Int, String]是两种不同的类型，其它类推。</p></li><li><p>在进行类型匹配时，编译器会预先检测是否有可能的匹配，如果没有则报错.</p></li><li><p><strong>val</strong> result = obj <strong>match</strong> {<br>   <strong>case</strong> i : Int =&gt; i<br> }  //case i : Int =&gt; i 表示 将 <strong>i</strong> <strong>=</strong> <strong>obj</strong> (其它类推)，然后再判断类型</p></li><li><p>如果<code> case _</code> 出现如下情况(忽略匹配的变量值)，<font color="red">则表示隐藏变量名，即不使用,而不是表示默认匹配</font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> result = obj <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> a : <span class="type">Int</span> =&gt; a</span><br><span class="line">    <span class="keyword">case</span> _ : <span class="type">BigInt</span> =&gt; <span class="type">Int</span>.<span class="type">MaxValue</span> </span><br><span class="line">    <span class="keyword">case</span> b : <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] =&gt; <span class="string">&quot;一个字符串-数字的Map集合&quot;</span></span><br><span class="line">    <span class="keyword">case</span> c : <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] =&gt; <span class="string">&quot;一个数字-字符串的Map集合&quot;</span></span><br><span class="line">    <span class="keyword">case</span> d : <span class="type">Array</span>[<span class="type">String</span>] =&gt; <span class="string">&quot;一个字符串数组&quot;</span></span><br><span class="line">    <span class="keyword">case</span> e : <span class="type">Array</span>[<span class="type">Int</span>] =&gt; <span class="string">&quot;一个数字数组&quot;</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;啥也不是&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">println(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="数组匹配"><a href="#数组匹配" class="headerlink" title="数组匹配"></a>数组匹配</h2><ol><li><code>Array(0)</code> 匹配只有一个元素且为0的数组。</li><li><code>Array(x,y) </code>匹配数组有两个元素，并将两个元素赋值为x和y。当然可以依次类推Array(x,y,z) 匹配数组有3个元素的等等….</li><li><code>Array(0,_*)</code> 匹配数组以0开始  </li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (arr &lt;- <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">0</span>), <span class="type">Array</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line"><span class="type">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>))) &#123;</span><br><span class="line">    <span class="keyword">val</span> result = arr <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>) =&gt; <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Array</span>(x, y) =&gt; x + <span class="string">&quot;=&quot;</span> + y</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>, _*) =&gt; <span class="string">&quot;以0开头和数组&quot;</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="string">&quot;什么集合都不是&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;result = &quot;</span> + result)</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="元组匹配"><a href="#元组匹配" class="headerlink" title="元组匹配"></a>元组匹配</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (pair &lt;- <span class="type">Array</span>((<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>),(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>))) &#123;</span><br><span class="line">    <span class="keyword">val</span> result = pair <span class="keyword">match</span> &#123; </span><br><span class="line">        <span class="keyword">case</span> (<span class="number">0</span>, _) =&gt; <span class="string">&quot;0 ...&quot;</span> </span><br><span class="line">        <span class="keyword">case</span> (y, <span class="number">0</span>) =&gt; y </span><br><span class="line">        <span class="keyword">case</span> (a,b) =&gt; (b,a)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="string">&quot;other&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对象匹配"><a href="#对象匹配" class="headerlink" title="对象匹配"></a>对象匹配</h2><p>对象匹配，什么才算是匹配呢？，规则如下:</p><ol><li>case中对象的unapply方法(对象提取器)返回Some集合则为匹配成功</li><li>返回none集合则为匹配失败</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(z: <span class="type">Double</span>): <span class="type">Option</span>[<span class="type">Double</span>] = <span class="type">Some</span>(math.sqrt(z))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(z: <span class="type">Double</span>): <span class="type">Double</span> = z * z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模式匹配使用：</span></span><br><span class="line"><span class="keyword">val</span> number: <span class="type">Double</span> = <span class="number">36.0</span></span><br><span class="line">number <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Square</span>(n) =&gt; println(n)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;nothing matched&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>构建对象时apply会被调用 ，比如 val n1 = Square(5)</li><li>当将 Square(n) 写在 case 后时[case Square(n) =&gt; xxx]，会默认调用unapply 方法(对象提取器)</li><li>number 会被 传递给def unapply(z: Double) 的 z 形参</li><li>如果返回的是Some集合，则unapply提取器返回的结果会返回给n这个形参</li><li>case中对象的unapply方法(提取器)返回some集合则为匹配成功</li><li>返回none集合则为匹配失败</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>如果<code>case</code>后面有变量会把表达式的值赋予给变量</li><li>如果<code>case</code>后面有类型，会对表达式匹配该类型，正确才会执行</li></ol><h1 id="模式匹配的使用🔺"><a href="#模式匹配的使用🔺" class="headerlink" title="模式匹配的使用🔺"></a>模式匹配的使用🔺</h1><h2 id="变量中使用"><a href="#变量中使用" class="headerlink" title="变量中使用"></a>变量中使用</h2><p>match中每一个case都可以单独提取出来，意思是一样的.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> (x, y) = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> (q, r) = <span class="type">BigInt</span>(<span class="number">10</span>) /% <span class="number">3</span>  <span class="comment">// 包含了2个连续的运算符</span></span><br><span class="line">println(“q = “ + q)</span><br><span class="line">println(“r = “ + r)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="for中的"><a href="#for中的" class="headerlink" title="for中的"></a>for中的</h2><p>for循环也可以进行模式匹配</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> map = <span class="type">Map</span>(<span class="string">&quot;A&quot;</span>-&gt;<span class="number">1</span>, <span class="string">&quot;B&quot;</span>-&gt;<span class="number">0</span>, <span class="string">&quot;C&quot;</span>-&gt;<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> ( (k, v) &lt;- map ) &#123;</span><br><span class="line">    println(k + <span class="string">&quot; -&gt; &quot;</span> + v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((k, <span class="number">0</span>) &lt;- map) &#123;</span><br><span class="line">    println(k + <span class="string">&quot; --&gt; &quot;</span> + <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((k, v) &lt;- map <span class="keyword">if</span> v == <span class="number">0</span>) &#123;</span><br><span class="line">    println(k + <span class="string">&quot; ---&gt; &quot;</span> + v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="样例类"><a href="#样例类" class="headerlink" title="样例类"></a>样例类</h2><p><strong>什么是样例类？</strong></p><ol><li>样例类仍然是类</li><li>样例类用<code>case</code>关键字进行声明。</li><li>样例类是<font color="red">为模式匹配(对象)而优化的类</font></li><li>构造器中的<font color="red">每一个参数都成为val</font>——除非它被显式地声明为var</li><li>在<font color="red">样例类对应的伴生对象中提供apply方法</font>让你不用new关键字就能构造出相应的对象</li><li><font color="red">提供unapply方法让模式匹配可以工作</font></li><li>将<strong>自动生成toString、equals、hashCode和copy方法</strong>(有点类似模板类，直接给生成，供程序员使用)</li><li>除上述外，样例类和其他类完全一样。你可以添加方法和字段，扩展它们</li></ol><hr><p>当我们有一个类型为Amount的对象时，可以用模式匹配来匹配他的类型，并将属性值绑定到变量(即：<strong>把样例类对象的属性值提取到某个变量</strong>)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Amount</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Dollar</span>(<span class="params">value: <span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">Amount</span> </span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Currency</span>(<span class="params">value: <span class="type">Double</span>, unit: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Amount</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">NoAmount</span> <span class="keyword">extends</span> <span class="title">Amount</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">for</span> (<span class="params">amt &lt;- <span class="type">Array</span>(<span class="type">Dollar</span>(1000.0</span>), <span class="title">Currency</span>(<span class="params">1000.0, &quot;<span class="type">RMB</span>&quot;</span>), <span class="title">NoAmount</span>)) </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> result = amt <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Dollar</span>(v) =&gt; <span class="string">&quot;$&quot;</span> + v</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Currency</span>(v, u) =&gt; v + <span class="string">&quot; &quot;</span> + u</span><br><span class="line">        <span class="keyword">case</span> <span class="type">NoAmount</span> =&gt; <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(amt + <span class="string">&quot;: &quot;</span> + result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>对一个集合中的数据不处理所有数据，<font color="red">只处理部分需要处理的数据</font>的函数为偏函数</p><ol><li>在对<strong>符合某个条件</strong>，而不是所有情况进行逻辑操作时，使用偏函数是一个不错的选择</li><li><font color="red">将包在大括号内的一组case语句封装为函数，我们称之为偏函数</font>，它只对会作用于指定类型的参数或指定范围值的参数实施计算，超出范围的值会忽略.</li><li>偏函数在Scala中是一个特质PartialFunction</li></ol><p>例如：对于集合<code>val list = List(1,2,3,&quot;abc&quot;)</code>将数字+1，忽略非数字，用偏函数的解决为：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="keyword">val</span> addOne3= <span class="keyword">new</span> <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] &#123;</span><br><span class="line">      <span class="comment">// 定义什么数据处理什么数据不处理</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">isDefinedAt</span></span>(any: <span class="type">Any</span>) = &#123;</span><br><span class="line">        <span class="keyword">if</span> (any.isInstanceOf[<span class="type">Int</span>]) <span class="literal">true</span></span><br><span class="line">        <span class="keyword">else</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 定义需要处理的数据的处理逻辑</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(any: <span class="type">Any</span>) = any.asInstanceOf[<span class="type">Int</span>] + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> list3 = list.collect(addOne3)</span><br><span class="line">    println(<span class="string">&quot;list3=&quot;</span> + list3)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用case优化后</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;abc&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list3 = list.collect&#123;<span class="keyword">case</span> i:<span class="type">Int</span>=&gt;i+<span class="number">1</span>&#125;</span><br><span class="line">    println(<span class="string">&quot;list3=&quot;</span> + list3)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><ol><li>如果我们要求函数的参数可以接受任意类型。可以使用泛型，这个类型可以代表任意的数据类型。 </li><li>例如 List，在创建 List 时，可以传入整型、字符串、浮点数等等任意类型。那是因为 List 在 类定义时引用了泛型。比如在Java中：<code>public interface List&lt;E&gt; extends Collection&lt;E&gt;</code></li></ol><h2 id="泛型的特性"><a href="#泛型的特性" class="headerlink" title="泛型的特性"></a>泛型的特性</h2><p>我们通过几个Java例子来证明泛型的特性</p><p><strong>1. 约定时泛型不可变</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        List&lt;Father&gt; list = <span class="keyword">new</span> ArrayList&lt;Father&gt;();</span><br><span class="line">        <span class="comment">// 下面的执行错误，声明时泛型不能被字父类代替</span></span><br><span class="line"><span class="comment">//        List&lt;Father&gt; list1 = new ArrayList&lt;Son&gt;(); </span></span><br><span class="line"><span class="comment">//        List&lt;Son&gt; list2 = new ArrayList&lt;Father&gt;();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加元素时可以用子类代替父类</span></span><br><span class="line">        list.add(<span class="keyword">new</span> Son());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 泛型参数</strong></p><p>有时函数的参数不一定是特定的类，可以是它的父类或子类。</p><p>在 Java 泛型里表示某个类型是 A 类型的子类型，使用 extends 关键字，这种形式叫 upper bounds(上限或上界)，语法如下：</p><T extends A>//或用通配符的形式：<? extends A><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TClass</span> </span>&#123;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        test(<span class="type">Son</span>.<span class="keyword">class</span>);</span><br><span class="line">        test1(<span class="type">Object</span>.<span class="keyword">class</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Father及它的子类可以使用</span></span><br><span class="line">    public static void test(<span class="type">Class</span>&lt;? <span class="keyword">extends</span> <span class="type">Father</span>&gt; c)&#123;</span><br><span class="line">        <span class="type">System</span>.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Father及它的父类可以使用</span></span><br><span class="line">    public static void test1(<span class="type">Class</span>&lt;? <span class="keyword">super</span> <span class="type">Father</span>&gt; c)&#123;</span><br><span class="line">        <span class="type">System</span>.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="scala泛型"><a href="#scala泛型" class="headerlink" title="scala泛型"></a>scala泛型</h2><h2 id="上界"><a href="#上界" class="headerlink" title="上界"></a>上界</h2><p>在 scala 里表示某个类型是 A 类型的子类型，也称上界或上限，使用 <strong>&lt;:</strong> 关键字，语法如下：</p><ul><li><p>[T &lt;: A]</p></li><li><p>[_ &lt;: A]</p></li></ul><h2 id="下界"><a href="#下界" class="headerlink" title="下界"></a>下界</h2><p>Scala中暂不起作用</p><ul><li><p>[T &gt;: A]</p></li><li><p>[_ &gt;: A]</p></li></ul><h2 id="协变、逆变"><a href="#协变、逆变" class="headerlink" title="协变、逆变"></a>协变、逆变</h2><p>上面说到Java的泛型具有约定时不变，但Scala可以不是。<font color="red">Scala可以通过设置支持泛型约定时变化。</font></p><p>Scala为了丰富泛型功能，提供了协变、逆变：</p><ul><li>协变：协助变化，扩展功能(+)</li><li>逆变：往回推，可以使用父类(-)</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型中可以使用此类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>[+类]</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型中可以使用此类的父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>[-类]</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><font color="red"></font></p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala隐式转换及集合(四)</title>
      <link href="2020/08/14/Scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%8F%8A%E9%9B%86%E5%90%88-%E5%9B%9B/"/>
      <url>2020/08/14/Scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%8F%8A%E9%9B%86%E5%90%88-%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><a href="/2020/07/26/Scala%E6%A6%82%E8%BF%B0/" title="Scala概述">Scala概述</a></li><li><a href="/2020/07/30/Scala%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8F%8A%E5%87%BD%E6%95%B0-%E4%BA%8C/" title="Scala流程控制及函数">Scala流程控制及函数</a></li><li><a href="/2020/08/12/Scala%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E4%B8%89/" title="Scala面对对象编程">Scala面对对象编程</a></li><li><a href="/2020/08/18/Scala%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%8F%8A%E6%B3%9B%E5%9E%8B/" title="Scala模式匹配及泛型">Scala模式匹配及泛型</a></li></ul><h1 id="隐式操作"><a href="#隐式操作" class="headerlink" title="隐式操作"></a>隐式操作</h1><h2 id="隐式转换🔺"><a href="#隐式转换🔺" class="headerlink" title="隐式转换🔺"></a>隐式转换🔺</h2><p>在Java、Scala中都有默认的隐式转换规则，例如：<strong>当低精度数字作为形参被传入高精度数字时，会自动转换为高精度</strong>，而高精度转换为低精度数字就必须强制转换。例如以下Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Convert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 传入int，由于默认的隐式转换转换为double</span></span><br><span class="line">        test(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> t = (<span class="keyword">int</span>) <span class="number">10.0f</span>; <span class="comment">//高精度转换低精度必须强制</span></span><br><span class="line"><span class="comment">//        int t1 =  10.0f; 编译不通过</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 形参为double</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><font color="red"><strong>而Scala中的隐式转换就是通过编程手段实现2个不相关类型的相互转换。</strong></font></p><h3 id="隐式转换基本介绍"><a href="#隐式转换基本介绍" class="headerlink" title="隐式转换基本介绍"></a>隐式转换基本介绍</h3><p>隐式转换函数是以<code>implicit</code>关键字声明的带有<strong>单个参数的函数</strong>。这种函数将会<strong>自动</strong>应用，将值从一种类型转换为另一种类型</p><p>使用隐式函数可以优雅的解决数据类型转换。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">im</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> d: <span class="type">Int</span> = <span class="number">10.0</span>f</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">convert</span></span>(d: <span class="type">Double</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    d.toInt</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果删除此函数的话，代码出错。</p><h3 id="隐式转换的注意事项和细节"><a href="#隐式转换的注意事项和细节" class="headerlink" title="隐式转换的注意事项和细节"></a>隐式转换的注意事项和细节</h3><ul><li>隐式转换函数的函数名可以是任意的，隐式转换与函数名称无关，<font color="red">只与函数<strong>签名</strong></font>（函数参数类型和返回值类型）有关。</li><li>同一作用域下不能有多个函数签名相同的隐式转换函数</li></ul><h3 id="隐式转换的作用"><a href="#隐式转换的作用" class="headerlink" title="隐式转换的作用"></a>隐式转换的作用</h3><p><strong>1. 动态扩展功能</strong></p><p>如果需要为一个类增加一个方法，可以通过隐式转换来实现。（动态增加功能）比如想为MySQL类增加一个delete方法</p><p>在当前程序中，如果想要给MySQL类增加功能是非常简单的，但是在实际项目中，<font color="red">如果想要增加新的功能就会需要<strong>改变源代码</strong>，这是很难接受的。而且违背了软件开发的OCP开发原则</font> (开闭原则 open close priceple)</p><p>在这种情况下，可以通过<strong>隐式转换函数给类动态添加功能</strong>。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delete</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">delete</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MySQL</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> l = <span class="keyword">new</span> <span class="type">MySQL</span></span><br><span class="line">    l.insert()</span><br><span class="line">    l.delete() <span class="comment">// 因为隐式转换，Mysql的对象l可以调用Delete的方法</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">convert</span></span>(d: <span class="type">MySQL</span>): <span class="type">Delete</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Delete</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="隐式值🔺"><a href="#隐式值🔺" class="headerlink" title="隐式值🔺"></a>隐式值🔺</h2><p>隐式值也叫<strong>隐式变量</strong>，将某个形参变量标记为<code>implicit</code>，所以编译器会在方法省略隐式参数的情况下去搜索作用域内的隐式值作为缺省参数</p><hr><p>当你想无参调用有参的函数值，可以使用函数的的默认参数。但是随着业务变化，发现此默认参数不合适，但是不能对其修改，因为不符合对修改关闭原则。</p><p>这时我们可以将函数的参数上加上<code>implicit</code>关键字，<font color="red">**并且调用函数时不能加()**，</font>加上()后不会使用隐式值。如果作用域内有此的隐式值，隐式值会作为参数。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MySQL</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> st: <span class="type">String</span> = <span class="string">&quot;zxj&quot;</span></span><br><span class="line">    test  <span class="comment">// 使用隐式值</span></span><br><span class="line">    test() <span class="comment">// 使用默认值</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(<span class="keyword">implicit</span> s:<span class="type">String</span>=<span class="string">&quot;123&quot;</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(s)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="隐式类🔺"><a href="#隐式类🔺" class="headerlink" title="隐式类🔺"></a>隐式类🔺</h2><p><strong>在scala2.10后提供了隐式类</strong>，可以使用<code>implicit</code>声明类，隐式类的非常强大，同样可以扩展类的功能，比前面使用隐式转换丰富类库功能更加的方便，在集合中隐式类会发挥重要的作用。</p><p>隐式类可以发挥和隐式转换中扩展方法一样的功能。</p><p><strong>隐式类特点</strong>：</p><ol><li>其所带的构造参数有且只能有一个，主构造方法。主构造方法是什么类会被隐式转会为此类</li><li>隐式类必须被定义在“类”或“伴生对象”或“包对象”里，即<strong>隐式类不能是</strong> 顶级的(top-level objects)。</li><li>隐式类不能是case class</li><li>作用域内不能有与之相同名称的标识符</li></ol><p><strong>使用隐式类完成功能扩展</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MySQL</span> </span>&#123;</span><br><span class="line">  <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">Delete</span>(<span class="params">s:<span class="type">MySQL</span></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> l = <span class="keyword">new</span> <span class="type">MySQL</span></span><br><span class="line">    l.insert()</span><br><span class="line">    l.delete() <span class="comment">// 因为隐式转换，Mysql的对象l可以调用Delete的方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="不可变数组"><a href="#不可变数组" class="headerlink" title="不可变数组"></a>不可变数组</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>Scala数组即<code>Array</code>是<strong>不可变的</strong>。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>这里的数组等同于Java中的数组,中括号的类型就是数组的类型</p><p><strong>声明</strong></p><p><code>val ints = new Array[Int](10)</code></p><p>类比Java：<code>int[] ints = new int[10];</code></p><p><strong>声明和初始化</strong></p><p><code>val array: Array[Int] = Array(1, 2, 3)</code></p><p>类比Java：<code>int[] test = &#123;1, 2, 3&#125;;</code></p><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> ints = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    println(array(<span class="number">2</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p><font color="red"><strong>ps：不可变的数组添加元素的操作都是返回新的集合，不改变原集合！！！</strong></font></p><ol><li><code>+:</code>、<code>:+</code>添加元素</li><li><code>++</code>添加集合</li><li>修改原数组内容</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> array1: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右加</span></span><br><span class="line">    <span class="keyword">val</span> ints: <span class="type">Array</span>[<span class="type">Int</span>] = array :+ <span class="number">10</span></span><br><span class="line">    println(ints.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左加</span></span><br><span class="line">    <span class="keyword">val</span> ints1: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="number">0</span> +: array</span><br><span class="line">    println(ints1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加集合</span></span><br><span class="line">    <span class="keyword">val</span> ints2: <span class="type">Array</span>[<span class="type">Int</span>] = array ++ array1</span><br><span class="line">    println(ints2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    array.update(<span class="number">0</span>, <span class="number">999</span>)</span><br><span class="line">    println(array.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可变数组"><a href="#可变数组" class="headerlink" title="可变数组"></a>可变数组</h2><h3 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h3><p>ArrayBuffer是变长数组</p><ol><li>ArrayBuffer是变长数组，类似java的ArrayList</li><li>每append一次，arr在底层会重新分配空间，进行扩容，arr2的内存地址会发生变化，也就成为新的ArrayBuffer</li></ol><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p><code>val arr2 = ArrayBuffer[Int]()</code></p><h4 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h4><ul><li>arr2(0) = 7 重新赋值</li><li>arr2(n) 访问</li></ul><h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><ol><li><code>append</code>添加元素</li><li><code>:+</code></li><li><code>+=</code></li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> arrayBuffer: <span class="type">ArrayBuffer</span>[<span class="type">Int</span>] = <span class="type">ArrayBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add</span></span><br><span class="line">    arrayBuffer.append(<span class="number">4</span>)</span><br><span class="line">    arrayBuffer:+<span class="number">5</span></span><br><span class="line">    arrayBuffer+=<span class="number">6</span></span><br><span class="line"></span><br><span class="line">    println(arrayBuffer.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组转换"><a href="#数组转换" class="headerlink" title="数组转换"></a>数组转换</h2><h3 id="Scala转Java"><a href="#Scala转Java" class="headerlink" title="Scala转Java"></a>Scala转Java</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scala集合和Java集合互相转换</span></span><br><span class="line"><span class="keyword">val</span> arr = <span class="type">ArrayBuffer</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.<span class="type">JavaConversions</span>.bufferAsJavaList</span><br><span class="line"><span class="keyword">val</span> javaArr = <span class="keyword">new</span> <span class="type">ProcessBuilder</span>(arr)</span><br><span class="line"><span class="keyword">val</span> arrList = javaArr.command()</span><br><span class="line"></span><br><span class="line">println(arrList)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Java转Scala"><a href="#Java转Scala" class="headerlink" title="Java转Scala"></a>Java转Scala</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.<span class="type">JavaConversions</span>.asScalaBuffer</span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.util.List ==&gt; Buffer</span></span><br><span class="line"><span class="keyword">val</span> scalaArr: mutable.<span class="type">Buffer</span>[<span class="type">String</span>] = arrList</span><br><span class="line"></span><br><span class="line">scalaArr.append(<span class="string">&quot;jack&quot;</span>)</span><br><span class="line">println(scalaArr)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ul><li>Scala同时支持<font color="red">不可变集合</font>和<font color="red">可变集合 </font></li><li>两个主要的包：<ul><li>不可变集合：<code>scala.collection.immutable</code></li><li>可变集合： <code> scala.collection.mutable</code></li></ul></li><li>Scala默认<font color="red">采用不可变集合</font>，对于几乎所有的集合类，Scala都同时提供了可变(mutable)和不可变(immutable)的版本</li><li>Scala的集合有三大类：<font color="red">序列Seq、集Set、映射Map</font>。所有的集合都扩展自Iterable特质(可迭代)，在Scala中集合有可变（mutable）和不可变（immutable）两种类型。</li></ul><hr><p><strong>可变集合和不可变集合举例</strong></p><ul><li><p>不可变集合：scala不可变集合，就是这个集合本身<font color="red">不能动态变化(一般定长，不扩容)</font>。**(类似java的数组，是不可以动态增长的)**</p></li><li><p>可变集合：就是这个集合本身<font color="red">可以动态变化的</font>。(比如:ArrayList , 是可以动态增长的)</p></li></ul><h2 id="序列Seq"><a href="#序列Seq" class="headerlink" title="序列Seq"></a>序列Seq</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>Scala中的List 和Java List 不一样，在Java中List是一个接口，真正存放数据是<code>ArrayList</code>，<font color="red"><strong>而Scala的List可以直接存放数据，就是一个object</strong></font>，默认情况下Scala的<font color="red"><strong>List是不可变的，List属于序列Seq。</strong></font></p><ul><li>List 在 scala包对象声明的,因此不需要引入其它包也可以使用</li><li><code>val List = scala.collection.immutable.List</code></li><li>List 中可以放<strong>任何数据类型</strong>，比如 arr1的类型为 List[Any]</li><li>如果希望得到一个空列表，可以使用<strong>Nil**</strong>对象**, 在 scala包对象声明的,因此不需要引入其它包也可以使用</li></ul><h4 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h4><p><strong>创建</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> ints = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> ints1: <span class="type">List</span>[<span class="type">Int</span>] = <span class="number">1</span> :: <span class="number">2</span> :: <span class="number">3</span> :: <span class="type">Nil</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加元素</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> ints1: <span class="type">List</span>[<span class="type">Int</span>] = <span class="number">1</span> :: <span class="number">2</span> :: <span class="number">3</span> :: <span class="type">Nil</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ints: <span class="type">List</span>[<span class="type">Int</span>] = ints1.::(<span class="number">9</span>)</span><br><span class="line">    <span class="keyword">val</span> ints2: <span class="type">List</span>[<span class="type">Int</span>] = ints1 :+ (<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">val</span> ints3: <span class="type">List</span>[<span class="type">Int</span>] = ints1 ++ ints</span><br><span class="line">    <span class="keyword">val</span> ints4: <span class="type">List</span>[<span class="type">Int</span>] = <span class="number">8</span> :: <span class="number">9</span> :: <span class="number">110</span> :: ints1</span><br><span class="line">    <span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Any</span>] = <span class="number">8</span> :: <span class="number">9</span> :: <span class="number">110</span> :: ints1 ::: ints4 <span class="comment">// 集合间连接要用:::</span></span><br><span class="line"></span><br><span class="line">    println(list.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>:</code>运算符的运算顺序从右到左</li><li>集合间要使用三个<code>:</code>,否则会造成最终造成的数据：<code>x,x,x,(x,x),x,x</code></li></ul><p><strong>遍历</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> ints1: <span class="type">List</span>[<span class="type">Int</span>] = <span class="number">1</span> :: <span class="number">2</span> :: <span class="number">3</span> :: <span class="type">Nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- ints1) &#123;</span><br><span class="line">      println(elem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ints1.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ListBuffer"><a href="#ListBuffer" class="headerlink" title="ListBuffer"></a>ListBuffer</h3><p><font color="red"><strong>ListBuffer是可变的list集合</strong></font>，可以添加，删除元素，ListBuffer属于序列</p><p>和上述不可变的List操作一致，不同的是元素增加时时，不会产生新的，因为它是可变序列！！！</p><h2 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h2><p>Set集合和Java一致，无序；不可重复。</p><hr><ul><li>默认Scala提供的set集合就是不可变的(immutable)</li><li>set集合可变的(mutable)</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">mySet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 不可变集合</span></span><br><span class="line">    <span class="keyword">val</span> ints = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> ints1: <span class="type">Set</span>[<span class="type">Int</span>] = ints + <span class="number">5</span></span><br><span class="line">    println(ints == ints1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可变集合</span></span><br><span class="line">    <span class="keyword">val</span> set: mutable.<span class="type">Set</span>[<span class="type">Int</span>] = mutable.<span class="type">Set</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    set.add(<span class="number">5</span>)</span><br><span class="line">    println(set)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li>Scala中的Map 和Java类似，也是一个散列表，它存储的内容也是键值对(key-value)映射，Scala中不可变的Map是有序的，可变的Map是无序的。</li><li>Scala中，有可变Map (<code>scala.collection.mutable.Map</code>) 和 不可变Map(<code>scala.collection.immutable.Map</code>) </li></ul><p><strong>创建</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">myMap</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 键值对创建Map</span></span><br><span class="line">    <span class="keyword">val</span> intToString: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] = <span class="type">Map</span>(<span class="number">1</span> -&gt; <span class="string">&quot;a&quot;</span>, <span class="number">2</span> -&gt; <span class="string">&quot;b&quot;</span>, <span class="number">3</span> -&gt; <span class="string">&quot;c&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元组创建Map</span></span><br><span class="line">    <span class="keyword">val</span> intToString1: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] = <span class="type">Map</span>((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;b&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只创建Map</span></span><br><span class="line">    <span class="keyword">val</span> map = <span class="keyword">new</span> mutable.<span class="type">HashMap</span>[<span class="type">Int</span>, <span class="type">String</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不可变操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">myMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 元组创建Map</span></span><br><span class="line">    <span class="keyword">val</span> intToString1: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] = <span class="type">Map</span>((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;b&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">val</span> intToString2: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] = intToString1 + ((<span class="number">5</span>, <span class="string">&quot;d&quot;</span>))</span><br><span class="line">    println(intToString2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 减元素</span></span><br><span class="line">    <span class="keyword">val</span> intToString: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] = intToString1 - (<span class="number">1</span>) - (<span class="number">2</span>)</span><br><span class="line">    println(intToString.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>可变操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">myMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 元组创建Map</span></span><br><span class="line">    <span class="keyword">val</span> intToString1: mutable.<span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] =  mutable.<span class="type">Map</span>((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;b&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    intToString1.put(<span class="number">5</span>,<span class="string">&quot;d&quot;</span>)</span><br><span class="line">    println(intToString1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 减元素</span></span><br><span class="line">    intToString1.remove(<span class="number">1</span>)</span><br><span class="line">    println(intToString1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>遍历🔺</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">myMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 元组创建Map</span></span><br><span class="line">    <span class="keyword">val</span> intToString1: mutable.<span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] = mutable.<span class="type">Map</span>((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;b&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. for</span></span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- intToString1) &#123;</span><br><span class="line">      println(<span class="string">s&quot;<span class="subst">$&#123;elem._1&#125;</span>==<span class="subst">$&#123;elem._2&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. foreach + 匿名函数</span></span><br><span class="line">    intToString1.foreach((tuple: (<span class="type">Int</span>, <span class="type">String</span>)) =&gt;&#123;println(<span class="string">s&quot;<span class="subst">$&#123;tuple._1&#125;</span>==<span class="subst">$&#123;tuple._2&#125;</span>&quot;</span>)&#125;)</span><br><span class="line">    println()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for 加 模式匹配元组</span></span><br><span class="line">    <span class="keyword">for</span> ((x,y) &lt;- intToString1) &#123;</span><br><span class="line">      println(<span class="string">s&quot;<span class="subst">$&#123;x&#125;</span>==<span class="subst">$&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>map取值🔺</strong></p><p>注意map返回值不是value而是Option，这是为了以防返回值为空的情况</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">myTuple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 元组创建Map</span></span><br><span class="line">    <span class="keyword">val</span> intToString1: mutable.<span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] = mutable.<span class="type">Map</span>((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;b&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意map返回值不是value而是Option，这是为了以防返回值为空的情况</span></span><br><span class="line">    <span class="keyword">val</span> maybeString: <span class="type">Option</span>[<span class="type">String</span>] = intToString1.get(<span class="number">1</span>)</span><br><span class="line">    println(maybeString.get) <span class="comment">// 使用get来获取值，如果为空直接异常，所以一般用get</span></span><br><span class="line">    println(maybeString.getOrElse(<span class="number">0</span>)) <span class="comment">// 使用get来获取值，如果为空直接异常，所以一般用getOrElse</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h2><p>元组也是可以理解为一个<strong>容器</strong>，可以存放各种相同或不同类型的数据。说的简单点，<font color="red"><strong>就是将多个无关的数据封装为一个整体，称为元组</strong></font>, 最大的特点灵活,对数据没有过多的约束。 </p><p><font color="red"><strong>注意：元组中最大只能有22个元素</strong></font></p><p><strong>创建、访问、遍历</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">myTuple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> tuple: (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>) = (<span class="number">1</span>, <span class="string">&quot;str&quot;</span>, <span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// case  特殊的模式匹配，将元组内元素赋予变量xyc</span></span><br><span class="line">    <span class="keyword">val</span> (x,y,c): (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>) = (<span class="number">1</span>, <span class="string">&quot;str&quot;</span>, <span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问</span></span><br><span class="line">    tuple._1</span><br><span class="line">    tuple._2</span><br><span class="line">    tuple._3</span><br><span class="line">    x</span><br><span class="line">    y</span><br><span class="line">    c</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- tuple.productIterator) &#123;</span><br><span class="line">      println(elem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列Queue🔺"><a href="#队列Queue🔺" class="headerlink" title="队列Queue🔺"></a>队列Queue🔺</h2><p><font color="red"><strong>队列是可变的</strong>，先入先出</font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> queue = <span class="keyword">new</span> mutable.<span class="type">Queue</span>[<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add</span></span><br><span class="line">    queue.enqueue(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取最先应该出去的值</span></span><br><span class="line">    <span class="keyword">val</span> i: <span class="type">Int</span> = queue.dequeue()</span><br><span class="line"></span><br><span class="line">    println(i)</span><br><span class="line">    println(queue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="集合通用常用的方法🔺"><a href="#集合通用常用的方法🔺" class="headerlink" title="集合通用常用的方法🔺"></a>集合通用常用的方法🔺</h1><p>以不可变序列List为例展示：</p><p><strong>单集合：</strong></p><ol><li><a href="#%E7%89%B9%E6%AE%8A%E5%80%BC%E5%87%BD%E6%95%B0">sum</a>：求和<a href="#%E7%89%B9%E6%AE%8A%E5%80%BC%E5%87%BD%E6%95%B0"></a></li><li><a href="#%E7%89%B9%E6%AE%8A%E5%80%BC%E5%87%BD%E6%95%B0">product</a>：乘积</li><li><a href="#%E7%89%B9%E6%AE%8A%E5%80%BC%E5%87%BD%E6%95%B0">max</a>：最大值</li><li><a href="#%E7%89%B9%E6%AE%8A%E5%80%BC%E5%87%BD%E6%95%B0">min</a>：最小值</li><li><a href="#%E7%89%B9%E6%AE%8A%E5%80%BC%E5%87%BD%E6%95%B0">head</a>：首元素</li><li><a href="#%E7%89%B9%E6%AE%8A%E5%80%BC%E5%87%BD%E6%95%B0">tail</a>：首元素之外的集合</li><li><a href="#%E7%89%B9%E6%AE%8A%E5%80%BC%E5%87%BD%E6%95%B0">last</a>：尾元素</li><li><a href="#%E7%89%B9%E6%AE%8A%E5%80%BC%E5%87%BD%E6%95%B0">reverse</a>：集合反转</li><li><a href="#%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0">groupBy</a>🔺：分组函数</li><li><a href="#%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%E6%8E%92%E5%BA%8F">sortBy</a>🔺：指定字段排序</li><li><a href="#%E6%8C%87%E5%AE%9A%E9%80%BB%E8%BE%91%E6%8E%92%E5%BA%8F">sortWith</a>🔺：指定逻辑排序</li><li>iterator：生成可迭代的对象，一般用于while之类的代码</li><li><a href="#%E9%9B%86%E5%90%88%E5%85%83%E7%B4%A0%E6%98%A0%E5%B0%84%F0%9F%94%BA">map</a>🔺：<font color="red"><strong>集合元素映射</strong></font></li><li><a href="#%E8%8E%B7%E5%8F%96/%E5%88%A0%E9%99%A4%E5%87%BD%E6%95%B0">take</a>：获取前n个元素的集合</li><li><a href="#%E8%8E%B7%E5%8F%96/%E5%88%A0%E9%99%A4%E5%87%BD%E6%95%B0">drop</a>：删除前n个元素</li><li><a href="#%E9%9B%86%E5%90%88%E5%85%83%E7%B4%A0%E6%89%81%E5%B9%B3%E5%8C%96%E5%A4%84%E7%90%86%F0%9F%94%BA">flatmap</a>🔺<font color="red"><strong>集合元素扁平化处理</strong></font></li><li><a href="#%E8%BF%87%E6%BB%A4%E5%87%BD%E6%95%B0">filter</a>🔺</li><li><a href="#%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%F0%9F%94%BA">reduce</a>🔺</li><li><a href="#%E6%8A%98%E5%8F%A0%E5%87%BD%E6%95%B0%F0%9F%94%BA">fold</a>🔺：函数折叠</li></ol><hr><p><strong>多集合：</strong></p><ol><li><a href="#%E6%8B%89%E9%93%BE%E5%87%BD%E6%95%B0">zip</a>🔺：拉链函数</li><li><a href="#%E4%BA%A4%E5%B9%B6%E9%9B%86%E5%87%BD%E6%95%B0">union</a>🔺：并集</li><li><a href="#%E4%BA%A4%E5%B9%B6%E9%9B%86%E5%87%BD%E6%95%B0">intersect</a>🔺：交集</li><li><a href="#%E5%B7%AE%E9%9B%86%E5%87%BD%E6%95%B0">diff</a>🔺：差集</li></ol><h2 id="特殊值函数"><a href="#特殊值函数" class="headerlink" title="特殊值函数"></a>特殊值函数</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    println(list.head) <span class="comment">// list首元素</span></span><br><span class="line">    println(list.tail) <span class="comment">// 除了首元素外的剩下的元素</span></span><br><span class="line">    println(list.last) <span class="comment">// 尾元素</span></span><br><span class="line"></span><br><span class="line">    println(list.sum) <span class="comment">// 和</span></span><br><span class="line">    println(list.max) <span class="comment">// 最大值</span></span><br><span class="line">    println(list.min) <span class="comment">// 最小值</span></span><br><span class="line">    println(list.product) <span class="comment">// 乘积</span></span><br><span class="line"></span><br><span class="line">    println(list.reverse)<span class="comment">// 集合反转</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><p><code>def groupBy[K](f : scala.Function1[A, K])</code></p><p>传入按照什么分组的匿名函数的逻辑。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据列表中的元素分组</span></span><br><span class="line">    <span class="keyword">val</span> map: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">List</span>[<span class="type">Int</span>]] = list.groupBy((x: <span class="type">Int</span>) =&gt; x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ((x,y) &lt;- map) &#123;</span><br><span class="line">      println(<span class="string">s&quot;<span class="subst">$&#123;x&#125;</span>==<span class="subst">$&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照奇偶</span></span><br><span class="line">    <span class="keyword">val</span> map1: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">List</span>[<span class="type">Int</span>]] = list.groupBy((_: <span class="type">Int</span>) &amp; <span class="number">1</span>)</span><br><span class="line">    map1.foreach((x: (<span class="type">Int</span>, <span class="type">List</span>[<span class="type">Int</span>])) =&gt;&#123;println(<span class="string">s&quot;<span class="subst">$&#123;x._1&#125;</span>==<span class="subst">$&#123;x._2&#125;</span>&quot;</span>)&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序函数"><a href="#排序函数" class="headerlink" title="排序函数"></a>排序函数</h2><h3 id="指定字段排序"><a href="#指定字段排序" class="headerlink" title="指定字段排序"></a>指定字段排序</h3><p><font color="red">ps:此方法并不能指定升序、降序</font></p><p>但可以通过以下方法改变：</p><ul><li>可以通过<code>reverse</code>反转数组</li><li><a href="#%E6%8C%87%E5%AE%9A%E9%80%BB%E8%BE%91%E6%8E%92%E5%BA%8F">sortWith</a>方法</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照数组的元素本身排序，此方法并不能指定升序、降序。</span></span><br><span class="line">    <span class="keyword">val</span> list1: <span class="type">List</span>[<span class="type">Int</span>] = list.sortBy(x =&gt; x)</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.可以通过reverse设置升序、降序。</span></span><br><span class="line">    println(list1.reverse.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.通过sortWith方法</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定逻辑排序"><a href="#指定逻辑排序" class="headerlink" title="指定逻辑排序"></a>指定逻辑排序</h3><p>有点类似于冒泡排序，<strong>定义列表中相邻的元素之间的比较规则</strong>，返回true时，不交换位置。返回false时，交换位置</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照数组的元素本身排序，此方法并不能指定升序、降序。</span></span><br><span class="line">    <span class="keyword">val</span> list1: <span class="type">List</span>[<span class="type">Int</span>] = list.sortBy(x =&gt; x)</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.可以通过reverse设置升序、降序。</span></span><br><span class="line">    println(list1.reverse.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.通过sortWith方法</span></span><br><span class="line">    <span class="comment">// 有点类似于冒泡排序，定义列表中相邻的元素之间的比较规则，返回true时，不交换位置。返回false时，交换位置</span></span><br><span class="line">    <span class="comment">// 2.1 降序</span></span><br><span class="line">    println(list.sortWith((x, y) =&gt; x &gt; y).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">// 2.2 升序</span></span><br><span class="line">    println(list.sortWith((x, y) =&gt; x &lt; y).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ol><li>sortBy适合集合中存储复杂的元素，通过元素的一部分来排序</li><li>sortWith适合集合中元素为简单元素，可以快速地指定升降序</li></ol><h2 id="集合元素映射🔺"><a href="#集合元素映射🔺" class="headerlink" title="集合元素映射🔺"></a>集合元素映射🔺</h2><p><code>map</code>函数特点：</p><ol><li>输入个数=输出个数</li><li>对于需要处理的集合的每个元素的输入输出都是1对1</li><li>可以改变集合内元素映射的类型</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将集合内每个元素映射为需要的数据</span></span><br><span class="line">    println(list.map(math.pow(_, <span class="number">2</span>)).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    map函数的特点：</span></span><br><span class="line"><span class="comment">    1. 输入个数=输出个数</span></span><br><span class="line"><span class="comment">    2. 对于需要处理的集合的每个元素都是1对1</span></span><br><span class="line"><span class="comment">    3. 可以改变集合内元素映射的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">toDouble</span></span>(x:<span class="type">Int</span>) : <span class="type">Double</span>=&#123;</span><br><span class="line">    x.toDouble</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取-删除函数"><a href="#获取-删除函数" class="headerlink" title="获取/删除函数"></a>获取/删除函数</h2><p>参数：</p><ol><li>参数在0-集合长度-1：正常</li><li>大于集合长度：分别删除完所有的元素、获取到所有的元素</li><li> 小于0：分别为没有删除元素、没有获取元素</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    两个函数的参数都可以：</span></span><br><span class="line"><span class="comment">    1. 参数在0-集合长度-1：正常</span></span><br><span class="line"><span class="comment">    2. 大于集合长度：分别删除完所有的元素、获取到所有的元素</span></span><br><span class="line"><span class="comment">    3. 小于0：分别为没有删除元素、没有获取元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除前n个元素后的集合</span></span><br><span class="line">    <span class="keyword">val</span> list1: <span class="type">List</span>[<span class="type">Int</span>] = list.drop(<span class="number">3</span>)</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取前n个元素的集合</span></span><br><span class="line">    <span class="keyword">val</span> list2: <span class="type">List</span>[<span class="type">Int</span>] = list.take(<span class="number">3</span>)</span><br><span class="line">    println(list2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合元素扁平化处理🔺"><a href="#集合元素扁平化处理🔺" class="headerlink" title="集合元素扁平化处理🔺"></a>集合元素扁平化处理🔺</h2><p>flatMap集合元素的扁平化处理：将类型如<code>list(1,2,3,list(3,4))</code>形式的数据变为<code>list(1,2,3,4,4)</code></p><p>参数：它是对每个集合中的元素生成一个集合，然后由函数特性将集合压为多个的单个元素</p><p>特点：</p><pre><code>1. 输入个数&lt;=输出个数2. 对于需要处理的集合的每个元素的输入输出都是1对&gt;=13. 可以改变集合内元素映射的类型</code></pre><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="string">&quot;hello zxj&quot;</span>, <span class="string">&quot;hello ddd&quot;</span>, <span class="string">&quot;hello scala&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    flatMap集合元素的扁平化处理：将类型如list(1,2,3,list(3,4))形式的数据变为list(1,2,3,4,4)</span></span><br><span class="line"><span class="comment">    参数：它是对每个集合中的元素生成一个集合，然后由函数特性将集合压为多个的单个元素</span></span><br><span class="line"><span class="comment">    1. 输入个数&lt;=输出个数</span></span><br><span class="line"><span class="comment">    2. 对于需要处理的集合的每个元素的输入输出都是1对&gt;=1</span></span><br><span class="line"><span class="comment">    3. 可以改变集合内元素映射的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    println(list.flatMap(_.split(<span class="string">&quot; &quot;</span>)).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤函数"><a href="#过滤函数" class="headerlink" title="过滤函数"></a>过滤函数</h2><p>filter过滤函数，参数为一个函数，返回值为Boolean类型；</p><ul><li>true时元素保留</li><li>false时元素被过滤</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    filter过滤函数，参数为一个函数，返回值为Boolean类型；true时元素保留，false时元素被过滤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤大于5的元素</span></span><br><span class="line">    println(list.filter(x =&gt; !(x &gt; <span class="number">5</span>)).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="聚合函数🔺"><a href="#聚合函数🔺" class="headerlink" title="聚合函数🔺"></a>聚合函数🔺</h2><p><code>reduce</code>聚合函数，将集合中的多个元素按照参数中函数的逻辑聚合为一个值！！！</p><p>参数为一个逻辑，对集合中所有元素的计算逻辑。</p><p>逻辑的内容是传入两个值，代表着<font color="red">每次只处理两个元素，然后这两个元素的结果和第三个元素继续相同的逻辑运算，一直到集合元素全部计算完毕</font>，如下图：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200817221428725.png" alt="image-20200817221428725"></p><hr><p><code>def reduce[A1 &gt;: A](op: (A1, A1) =&gt; A1): A1 = reduceLeft(op)</code></p><p>如<code>reduce</code>的声明可知，<code>reduce</code>函数默认调用的是左侧开始聚合，那么有左侧开始聚合必有从右侧开始聚合</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200817221757509.png" alt="image-20200817221757509"></p><ul><li>左侧的计算逻辑是：<code>1-2）-3）-4</code></li><li>右侧的计算逻辑是：<code>1-(2-(3-4</code></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    reduce聚合函数，将集合中中的多个元素按照参数中函数的逻辑聚合为一个值！！！</span></span><br><span class="line"><span class="comment">    参数为一个逻辑，对集合中所有元素的计算逻辑。</span></span><br><span class="line"><span class="comment">    逻辑的内容是传入两个值，代表着每次只处理两个元素，然后这两个元素的结果和第三个元素继续相同的逻辑运算，一直到集合元素全部计算完毕</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    println(list.reduceLeft(_ - _))</span><br><span class="line">    println(list.reduceRight(_ - _))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感兴趣的话可以看一下<code>reduceRight</code>是怎么实现的，其实它就是基于<code>reduceLeft</code>也即<code>reduce</code>实现的：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduceLeft</span></span>[<span class="type">B</span> &gt;: <span class="type">A</span>](op: (<span class="type">B</span>, <span class="type">A</span>) =&gt; <span class="type">B</span>): <span class="type">B</span> = &#123;</span><br><span class="line">   <span class="keyword">if</span> (isEmpty)</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">UnsupportedOperationException</span>(<span class="string">&quot;empty.reduceLeft&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> first = <span class="literal">true</span></span><br><span class="line">   <span class="keyword">var</span> acc: <span class="type">B</span> = <span class="number">0.</span>asInstanceOf[<span class="type">B</span>]</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (x &lt;- self) &#123;</span><br><span class="line">     <span class="keyword">if</span> (first) &#123;</span><br><span class="line">       acc = x</span><br><span class="line">       first = <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> acc = op(acc, x)</span><br><span class="line">   &#125;</span><br><span class="line">   acc</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">reduceRight</span></span>[<span class="type">B</span> &gt;: <span class="type">A</span>](op: (<span class="type">A</span>, <span class="type">B</span>) =&gt; <span class="type">B</span>): <span class="type">B</span> = &#123;</span><br><span class="line">   <span class="keyword">if</span> (isEmpty)</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">UnsupportedOperationException</span>(<span class="string">&quot;empty.reduceRight&quot;</span>)</span><br><span class="line"></span><br><span class="line">   reversed.reduceLeft[<span class="type">B</span>]((x, y) =&gt; op(y, x))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>reduceRight</code>注意点</p><ol><li>将原集合反转后左侧开始聚合</li><li><font color="red"><strong>这时元素的前后计算顺序不同</strong></font>，例如原：<code>1,2,3,4</code>；反转后：<code>4,3,2,1</code>。这时左侧聚合的话就是4-3，但是正常来说原集合右侧聚合应该是3-4；<font color="red"><strong>所以这里调用时参数对调了。！！！</strong></font></li></ol><h2 id="折叠函数🔺"><a href="#折叠函数🔺" class="headerlink" title="折叠函数🔺"></a>折叠函数🔺</h2><p>和<code>Reduce</code>函数相似，但是它<font color="red">可以设置一个集合外的值</font>，来与集合内的元素进行聚合运算。</p><p>函数的声明：<code>def fold[A1 &gt;: A](z: A1)(op: (A1, A1) =&gt; A1): A1 = foldLeft(z)(op)</code></p><p>发现它是一个函数柯里化，有两个参数：</p><ul><li>一个是集合外的值</li><li>一个是计算的逻辑</li></ul><p>同理，<code>fold</code>函数也分左右聚合。</p><h3 id="foldLeft"><a href="#foldLeft" class="headerlink" title="foldLeft"></a>foldLeft</h3><p><code>def foldLeft[B](z: B)(op: (B, A) =&gt; B): B</code></p><ul><li>B是集合外参数的类型</li><li><font color="red">op是传入的逻辑，此函数要传入B类型，返回B类型。意思是逻辑中接收上次2个值的运算结果B与集合中最新需要计算的值，计算结果为下次计算的上次2个值的运算结果。</font></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    println(list.foldLeft(<span class="number">10</span>)(_ - _))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算逻辑为：</p><p>10-1)-2)-3)-4</p><h3 id="foldRight"><a href="#foldRight" class="headerlink" title="foldRight"></a>foldRight</h3><p>同理</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    println(list.foldRight(<span class="number">10</span>)(_ - _))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算逻辑为：</p><p>1-(2-(3-(4-10</p><h2 id="拉链函数"><a href="#拉链函数" class="headerlink" title="拉链函数"></a>拉链函数</h2><p>此函数是集合调用且参数为集合的函数。。<font color="red">既然取名为拉链所以两个集合的元素个数需要对应上，否则拉链拉不上，就不会出现在结果中</font></p><p><strong>需注意</strong></p><ol><li>参数左右互换结果不同，拉链分左右</li><li>元素个数对应不上，拉链拉不上，结果不显示</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数左右互换结果不同，拉链分左右</span></span><br><span class="line">    println(list.zip(list1).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    println(list1.zip(list).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素个数对应不上，拉链拉不上，结果不显示</span></span><br><span class="line">    <span class="keyword">val</span> list2 = <span class="type">List</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    println(list.zip(list2).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交并集函数"><a href="#交并集函数" class="headerlink" title="交并集函数"></a>交并集函数</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并集</span></span><br><span class="line">    <span class="comment">// 左右集合呼唤不影响结果，如果不考虑顺序的话</span></span><br><span class="line">    println(list.union(list1).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    println(list1.union(list).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交集</span></span><br><span class="line">    <span class="comment">// 左右集合呼唤不影响结果</span></span><br><span class="line">    println(list.intersect(list1).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    println(list1.intersect(list).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="差集函数"><a href="#差集函数" class="headerlink" title="差集函数"></a>差集函数</h2><p>左右集合互换，结果会截然不同</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    println(list.diff(list1).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"></font></p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala面向对象编程(三)</title>
      <link href="2020/08/12/Scala%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E4%B8%89/"/>
      <url>2020/08/12/Scala%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><a href="/2020/07/26/Scala%E6%A6%82%E8%BF%B0/" title="Scala概述">Scala概述</a></li><li><a href="/2020/07/30/Scala%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8F%8A%E5%87%BD%E6%95%B0-%E4%BA%8C/" title="Scala流程控制及函数">Scala流程控制及函数</a></li><li><a href="/2020/08/14/Scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%8F%8A%E9%9B%86%E5%90%88-%E5%9B%9B/" title="Scala隐式转换及集合">Scala隐式转换及集合</a></li><li><a href="/2020/08/18/Scala%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%8F%8A%E6%B3%9B%E5%9E%8B/" title="Scala模式匹配及泛型">Scala模式匹配及泛型</a></li></ul><h1 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h1><p>Scala类特点：</p><ol><li>Scala代码中的属性必须显式的赋值其初始值，如果不确定赋予什么值用<code>_</code>代替，由JVM操作</li><li>var代表变量，val代表常量</li><li>属性，方法默认都是<code>public</code>权限，但是Scala没有<code>public</code>关键字</li><li>如果依据Java Bean代码规范形成Setter、Getter；则需要对属性加上注解<code>@BeanProperty </code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CL</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span> = _</span><br><span class="line">  <span class="keyword">var</span> age: <span class="type">Int</span> = _</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此段Scala代码对应的class字节码为：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200812201010845.png" alt="image-20200812201010845"></p><p>可得知：</p><ol><li>由底层代码得知，public关键字和Java的不同。生成的代码属性还是私有，但是它们有公用的访问属性的方法，所以在外部访问的不是这个类的属性，<font color="red"><strong>而是通过这个类的方法来访问属性。</strong></font></li></ol><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>Scala包的作用和Java一致：</p><ul><li>区分相同名字的类</li><li>当类很多时,可以很好的管理类</li><li>控制访问范围</li></ul><p><font color="red">但是，Scala的包能实现如下操作，而Java不可：</font></p><ol><li><p>Scala中包名和源码所在的系统文件目录结构要<strong>可以不一致</strong>，但是编译后的字节码文件路径和包名会保持一致(这个工作<strong>由编译器完成</strong>)。</p></li><li><p>Package可以在同一源码中使用多次，如果类内容没有放在package块中，则类在最后的那个包中</p></li><li><p><font color="red">包有作用域，子包可以直接使用父包的内容</font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> p1&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">C1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">object</span> <span class="title">C1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// C1和C2的包路径不同</span></span><br><span class="line">        <span class="comment">// 包P1作为子包，可以直接访问父包的类而不必导入</span></span><br><span class="line">      <span class="keyword">val</span> c = <span class="keyword">new</span> <span class="type">C1</span></span><br><span class="line">      <span class="keyword">val</span> c2 = <span class="keyword">new</span> <span class="type">C2</span></span><br><span class="line">      println(c)</span><br><span class="line">      println(c2)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Package可以是对象，此时能在其中放入除了伴生类/伴生对象之外的方法/变量</p></li><li><p>包名可以相对路径也可以绝对路径</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.awslzhang.scala.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> <span class="class"><span class="keyword">object</span> <span class="title">pobejct</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> test = <span class="string">&quot;zx&quot;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">u1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> t&#123;</span><br><span class="line">  <span class="class"><span class="keyword">object</span> <span class="title">c</span></span>&#123;</span><br><span class="line">      <span class="comment">// 通过相对路径访问到对象包中的属性</span></span><br><span class="line">      <span class="comment">// 如果包没有加入object关键字，则只能添加伴生对象与伴生类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(pobejct.test)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="import"><a href="#import" class="headerlink" title="import"></a>import</h1><ol><li><p>import用于导入类</p></li><li><p>import可以用在任意的地方</p></li><li><p>import导入一个包的所有类<code>import java.util._</code></p></li><li><p>import导入相同包的多个类，不必像Java那样写很多行<code>import java.util.&#123;List,Set&#125;</code></p></li><li><p>给类起别名，如果别名为<code>_</code>的话，是忽略这个类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">HashMap</span>=&gt;javaMap, <span class="type">Set</span> =&gt; _&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">C1</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> kToV = <span class="keyword">new</span> javaMap[<span class="type">String</span>, <span class="type">String</span>]()</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>import可以直接导入包</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">C1</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> kToV = <span class="keyword">new</span> util.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">String</span>]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果包名冲突，可以使用<code>_root_</code>通过全路径来找到自带类</p></li></ol><h1 id="类属性访问权限"><a href="#类属性访问权限" class="headerlink" title="类属性访问权限"></a>类属性访问权限</h1><p><strong>public</strong></p><p><code>public</code>是默认的访问权限，但是Scala并没有<code>public</code>关键字</p><p><strong>protected</strong></p><p>访问权限只能子类访问，和Java不同；同包也不能访问</p><p><strong>private</strong></p><p>私有访问权限只能在类内部访问或者此类的伴生对象内访问</p><p><strong>default</strong></p><p>没有<code>default</code>关键字，通过<code>private[包]</code>设置能被访问到的包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> p1&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// public 谁都可以访问</span></span><br><span class="line">    <span class="keyword">var</span> name: String = _</span><br><span class="line">    <span class="comment">// protected 只有子类可以访问，和Java不同</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">var</span> sex: String = _</span><br><span class="line">    <span class="comment">// private 只有伴生对象/类中可以访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> age: Int = _</span><br><span class="line">    <span class="comment">// default 只有声明的包的内容可以访问，包访问权限</span></span><br><span class="line">    <span class="keyword">private</span>[p1] <span class="keyword">var</span> email:String=_</span><br><span class="line"></span><br><span class="line">    val firstName: String = <span class="string">&quot;zxj&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  object MyClass &#123;</span><br><span class="line">    def apply: MyClass = <span class="keyword">new</span> MyClass()</span><br><span class="line"></span><br><span class="line">    <span class="function">def <span class="title">main</span><span class="params">(args: Array[String])</span>: Unit </span>= &#123;</span><br><span class="line">     <span class="comment">// 伴生对象中可以调用所有属性</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  object test&#123;</span><br><span class="line">    <span class="function">def <span class="title">main</span><span class="params">(args: Array[String])</span>: Unit </span>= &#123;</span><br><span class="line">      val clazz = <span class="keyword">new</span> MyClass</span><br><span class="line">      println(clazz.email) <span class="comment">// 由于包权限，可以调用到</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> p2&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> top.awslzhang.scala.p1.MyClass</span><br><span class="line"></span><br><span class="line">  object oo&#123;</span><br><span class="line">    <span class="function">def <span class="title">main</span><span class="params">(args: Array[String])</span>: Unit </span>= &#123;</span><br><span class="line">      val clazz = <span class="keyword">new</span> MyClass</span><br><span class="line">      <span class="comment">// 外包的只能访问public权限</span></span><br><span class="line">      println(clazz.firstName)</span><br><span class="line">      println(clazz.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h1><p>类的方法和函数只有唯一的区别，<font color="red">方法的调用必须基于对象。</font></p><h2 id="通过伴生对象来构建伴生类的对象"><a href="#通过伴生对象来构建伴生类的对象" class="headerlink" title="通过伴生对象来构建伴生类的对象"></a>通过伴生对象来构建伴生类的对象</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>: <span class="type">User</span> = <span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> user = <span class="type">User</span></span><br><span class="line">    println(user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构造方法🔺"><a href="#构造方法🔺" class="headerlink" title="构造方法🔺"></a>构造方法🔺</h2><p><font color="red">Scala的构造方法有两种：主构造方法和辅助构造方法。</font></p><ul><li>Scala构造对象可以通过辅助构造方法创建，但是<strong>必须首先调用主构造方法</strong></li><li>主构造方法是声明类时就要指定参数，没有可以不写。<code>class User</code>、<code>class User(s:String)</code></li><li>Java中构造方法名就是类的名字；但Scala中主构造方法直接在类名后写就行，<font color="red"><strong>辅助构造方法全是使用<code>this</code>关键字</strong></font></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">s: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span> = _</span><br><span class="line">  println(<span class="string">&quot;主构造方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;无参辅助构造方法&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(s:<span class="type">String</span>, c:<span class="type">String</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>()</span><br><span class="line">    println(<span class="string">&quot;2参辅助构造方法&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;主构造函数构建&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> user = <span class="keyword">new</span> <span class="type">User</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;=================&quot;</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;无参造函数构建&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> user1 = <span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">    println(<span class="string">&quot;=================&quot;</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;2参造函数构建&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> user2 = <span class="keyword">new</span> <span class="type">User</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;=================&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类、继承、抽象"><a href="#类、继承、抽象" class="headerlink" title="类、继承、抽象"></a>类、继承、抽象</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>和Java一样，使用<code>extends</code>；不可多继承</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><code>abstract</code>修饰，抽象类和普通类的区别 有：</p><ul><li>属性可以不必显式赋值，<font color="red">这时属性是抽象的</font></li><li>抽象方法只需要声明即可，不必实现</li><li>子类必须实现抽象父类的抽象方法，补全父类的方法即可。此时可加可不加<font color="red"><code>overwrite</code>关键字</font>，IDEA会默认加上</li><li><font color="red">子类如果想重写父类方法/属性，必须加入<code>overwrite</code>关键字</font>，不加入报错</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 抽象属性</span></span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正常属性</span></span><br><span class="line">  <span class="keyword">var</span> age:<span class="type">Int</span>=_</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 抽象方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">testAbstract</span></span>()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">testFun</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;这是父类的正常方法！&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span> <span class="keyword">extends</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="comment">// 实现父类的抽象属性，override可加可不加</span></span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span> = _</span><br><span class="line">  <span class="comment">// 实现父类的抽象方法，override可加可不加</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">testAbstract</span></span>(): <span class="type">Unit</span> = ???</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写父类的正常方法，override必加</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">testFun</span></span>(): <span class="type">Unit</span> = <span class="keyword">super</span>.testFun()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java的方法动态绑定🔺"><a href="#Java的方法动态绑定🔺" class="headerlink" title="Java的方法动态绑定🔺"></a>Java的方法动态绑定🔺</h2><p>父子类的重写方法执行，子类执行方法时</p><ul><li>首先查找子类内存中是否有此方法</li><li>没有的话寻找父类是否由此方法，这时执行的是父类的方法</li><li>参数没有动态绑定机制，他函数内的方法<strong>就是它类中的不是子类</strong></li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200813211908598.png" alt="image-20200813211908598"></p><h2 id="父类的构造方法"><a href="#父类的构造方法" class="headerlink" title="父类的构造方法"></a>父类的构造方法</h2><p><font color="red"><strong>如果父类的构造方法有参数，那么实现父类的子类必须显式的传递参数</strong></font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">s: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> <span class="keyword">extends</span> <span class="title">User</span>(<span class="params">&quot;123&quot;</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUser1</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">User</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="trait特质"><a href="#trait特质" class="headerlink" title="trait特质"></a>trait特质</h1><p><strong>Scala没有接口的概念，有特质的概念(trait)，类似于接口</strong></p><p><strong>特质声明</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">test</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>特质可以继承</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果类继承多个特质，用<code>with</code>连接</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">test1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">test</span> <span class="keyword">with</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果类同时存在父类和特质，依赖采取继承方法，但继承的是父类，连接的是特质</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">test1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">with</span> <span class="title">test</span> <span class="keyword">with</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong></p><ol><li>特质无法构建对象</li><li>特质可以执行代码</li></ol><p>特质不深入了解了….</p><p><font color="red"></font></p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala流程控制及函数(二)</title>
      <link href="2020/07/30/Scala%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8F%8A%E5%87%BD%E6%95%B0-%E4%BA%8C/"/>
      <url>2020/07/30/Scala%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8F%8A%E5%87%BD%E6%95%B0-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><a href="/2020/07/26/Scala%E6%A6%82%E8%BF%B0/" title="Scala概述">Scala概述</a></li><li><a href="/2020/08/12/Scala%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E4%B8%89/" title="Scala面对对象编程">Scala面对对象编程</a></li><li><a href="/2020/08/14/Scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%8F%8A%E9%9B%86%E5%90%88-%E5%9B%9B/" title="Scala隐式转换及集合">Scala隐式转换及集合</a></li><li><a href="/2020/08/18/Scala%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%8F%8A%E6%B3%9B%E5%9E%8B/" title="Scala模式匹配及泛型">Scala模式匹配及泛型</a></li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>与Java算术运算符大致相同。</p><p><strong>不同</strong></p><ul><li>Scala没有<code>++</code>、<code>--</code>操作</li></ul><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>与Java关系运算符大致相同。</p><p><strong>不同</strong></p><ul><li>Scala没有三目运算符；可用<code>val result = if (true) 1 else 0</code>替代</li></ul><p>因为Scala任何代码都有返回值，并且最后一行代码的输出就是返回，所以使用if代替三目运算</p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="分支控制if-else"><a href="#分支控制if-else" class="headerlink" title="分支控制if-else"></a>分支控制if-else</h2><p>与Java一致。</p><p>值得一提的是，<font color="red"><strong>Scala中的任何代码都有输出</strong></font>，同样<code>if</code>语句也有。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="string">&quot;31&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述代码输出的是一个字符串。如果没有else，返回的就是Any。</p><p>在Java中这种写法是不行的，<font color="red"><strong>Scala中会返回最后一行代码的输出。</strong></font></p><h2 id="循环控制for"><a href="#循环控制for" class="headerlink" title="循环控制for"></a>循环控制for</h2><p>Java中的for有两种：</p><ul><li><code>for (int i = 0; i &lt; 10; i++) &#123;&#125;</code></li><li><code>for (String str : lists)&#123;&#125;</code></li></ul><p>Scala中只有一种for，它却融合了上面的两种for：</p><p><font color="red"><strong>Scala的循环控制没有：<code>break</code>与<code>continue</code></strong></font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to <span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until <span class="number">10</span>) &#123;</span><br><span class="line">     </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步长的涨幅  until的实质就是调用了Range(x,x,1)</span></span><br><span class="line"><span class="keyword">for</span> (i &lt;- <span class="type">Range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)) &#123;</span><br><span class="line">     </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><code>to</code>：[1, 10]</li><li><code>until</code>：[1,10)</li></ul><p>因为Scala是完全面向对象的语言所以</p><ul><li><code>1 to 10</code>原理上是<code>1.to(10)</code></li><li><code>1 until 10</code>原理上是<code>1.until(10)</code></li></ul><h3 id="替代break与continue"><a href="#替代break与continue" class="headerlink" title="替代break与continue"></a>替代<code>break</code>与<code>continue</code></h3><p><strong>循环守卫代替continue</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i &lt;- <span class="type">Range</span>(<span class="number">0</span>, <span class="number">10</span>) <span class="keyword">if</span> i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">      println(i)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于Scala中没有<code>continue</code>关键字，所以它只能通过上述代码来实现循环的控制。</p><p><strong>循环守卫，即循环保护式（也称条件判断式，守卫）。</strong><font color="red">保护式为true则进入循环体内部，为false则跳过，类似于continue</font></p><hr><p><strong>Breaks类代替break关键字</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i &lt;- <span class="type">Range</span>(<span class="number">0</span>, <span class="number">10</span>))&#123;</span><br><span class="line">     <span class="keyword">if</span> (i==<span class="number">2</span>)&#123;</span><br><span class="line">       println(<span class="string">&quot;break&quot;</span>)</span><br><span class="line">       <span class="type">Breaks</span>.<span class="keyword">break</span>()</span><br><span class="line">     &#125;</span><br><span class="line">     println(i)</span><br><span class="line">   &#125;</span><br><span class="line">   println(<span class="string">&quot;finised&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200731094947153.png" alt="image-20200731094947153"></p><ul><li>发现代码抛出了异常</li><li>然后执行break后整个代码的执行被中断了</li><li>后续的操作没有执行</li></ul><p><strong>这种情况是如何出发的呢，我们看<code>Breaks.break()</code>的代码</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200731095204977.png" alt="image-20200731095204977"></p><p>可以得知此方法返回的是<code>Nothing</code>，就是返回的不是正常的值(异常)。那么break语句应该这么写</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">   breakable&#123;</span><br><span class="line">     <span class="keyword">for</span> (i &lt;- <span class="type">Range</span>(<span class="number">0</span>, <span class="number">10</span>))&#123;</span><br><span class="line">       <span class="keyword">if</span> (i==<span class="number">2</span>)&#123;</span><br><span class="line">         println(<span class="string">&quot;break&quot;</span>)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">       println(i)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   println(<span class="string">&quot;finised&quot;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>写在<code>breakable</code>内部即可！</strong></font></p><p>本来应该写<code>Breaks.breakable()</code>，但是我静态导入了这个类的所有方法，所以可以直接调用方法，括号也可省略。<code>import scala.util.control.Breaks._</code></p><h3 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a>yield关键字</h3><p>众所周知，Scala中任何语句都有输出。所以for，while之类的也有输出，但是他们的输出都是<code>Unit</code>；除非循环后面使用了<code>yield</code>关键字，它会将for中的值组合成一个集合。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> ints = <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to <span class="number">10</span>) <span class="keyword">yield</span> i * i</span><br><span class="line">println(ints)</span><br></pre></td></tr></table></figure><p>这和python的列表解析一个意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls_2 = [value ** <span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><hr><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><ol><li>“函数式编程”是一种”编程范式”（programming paradigm）。</li><li>它属于”结构化编程”的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。</li><li>函数式编程中，将函数也当做数据类型，<font color="red">因此可以接受函数当作输入（参数）和输出（返回值）</font>。（增强了编程的粒度）</li><li><font color="red">函数式编程中，最重要的就是函数</font></li></ol><hr><p>Java中的方法必须和类/对象绑定(成员方法、静态方法)；而Scala中的函数可<font color="red">以独立存在且可以嵌套使用</font></p><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">函数名</span> </span>([参数名: 参数类型], ...)[[: 返回值类型] =] &#123;</span><br><span class="line">    语句... <span class="comment">//完成某个功能</span></span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数特点🔺"><a href="#函数特点🔺" class="headerlink" title="函数特点🔺"></a>函数特点🔺</h2><ol><li><p>Scala语法特别灵活，<font color="red">在任意的语法中可以声明其他语法规则</font>。因此可以函数中声明函数：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">For</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">      println(<span class="string">&quot;function&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    test()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="red">Scala没有函数重载，</font>在同一作用域中，函数不能重名</p></li><li><p><font color="red">Scala没有<code>throws</code>关键字</font>，函数中如果有异常发送，也不需要在函数声明时抛出异常</p></li><li><p>Scala函数可以<font color="red"><strong>采用自动推断功能</strong></font>来简化函数的声明。</p><ul><li><p>如果函数声明时的返回类型和函数体内的返回类型不一致，以声明时的返回类型有效。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>():<span class="type">Unit</span>=&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">   &#125;</span><br><span class="line">     </span><br><span class="line">   println(test()) <span class="comment">// ()</span></span><br><span class="line"><span class="comment">// 最后返回的是声明的Unit</span></span><br></pre></td></tr></table></figure></li><li><p>如果函数体的最后一行代码进行返回，<code>return</code>关键字可以省略</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>():<span class="type">String</span>=&#123;</span><br><span class="line">  <span class="string">&quot;123&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果可以根据函数最后一行代码推断类型，那么函数的返回类型可以省略</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>() = &#123;</span><br><span class="line">       <span class="number">123</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果函数体只有一行代码，<code>&#123;&#125;</code>可以省略</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>() = <span class="number">123</span></span><br></pre></td></tr></table></figure></li><li><p>如果函数没有参数，<code>()</code>可以省略，<font color="red">但调用时也得省略；如果没有省略，调用时可有可无。</font></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>() = <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span> </span>= <span class="number">312</span></span><br><span class="line">println(test)</span><br><span class="line">println(test())</span><br><span class="line">     </span><br><span class="line">println(test1)</span><br><span class="line">println(test1()) <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li><li><p>如果明确函数没有返回值，<code>=</code>可以省略，此时Return也没有用</p></li></ul></li><li><p>匿名函数的参数在函数体内只被使用一次的话可以用<code>_</code>代替。</p></li></ol><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">params</span><span class="params">(String... param)</span> </span>&#123;</span><br><span class="line">    String[] param1 = param;</span><br><span class="line">    System.out.println(param1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">param</span></span>(string: <span class="type">String</span>*)= println(string)</span><br><span class="line">param(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>Java没有</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(name:<span class="type">String</span>, age:<span class="type">Int</span>=<span class="number">20</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  println(<span class="string">s&quot;name=<span class="subst">$name</span>\tage=<span class="subst">$age</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"> test(<span class="string">&quot;zxf&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数作为函数返回值🔺"><a href="#函数作为函数返回值🔺" class="headerlink" title="函数作为函数返回值🔺"></a>函数作为函数返回值🔺</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(): <span class="type">Unit</span> =println(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">f0</span></span>(): ()=&gt;<span class="type">Unit</span> =&#123;</span><br><span class="line">     f</span><br><span class="line">   &#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>() =&#123;</span><br><span class="line">     f _</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   println(f0()())</span><br></pre></td></tr></table></figure><ul><li>f0函数等价于f1函数，当声明返回值为函数时，可以直接返回f函数</li><li><font color="red">当让Scala自动推断返回值时，如果返回值是函数的话，需要加入<code> _</code>证明返回的是函数</font>，否则上面的代码就会直接运行f，返回的是Unit</li></ul><h3 id="函数的柯里化"><a href="#函数的柯里化" class="headerlink" title="函数的柯里化"></a>函数的柯里化</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>(test: <span class="type">Int</span>): (<span class="type">Int</span>) =&gt; <span class="type">Int</span> = &#123;</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">f2</span></span>(test1: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">       test * test1</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     f2</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   println(f1(<span class="number">2</span>)(<span class="number">3</span>))</span><br><span class="line"><span class="comment">// 柯里化</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">f3</span></span>(t1: <span class="type">Int</span>)(t2: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">     t1 * t2</span><br><span class="line">   &#125;</span><br><span class="line">   println(f3(<span class="number">2</span>)(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>只要有柯里化，就涉及到函数的闭包：</p><ul><li>如上面f1函数中的f2函数，它使用了f1函数的变量test。</li><li>当调用f1函数返回f2函数时，f2函数中的变量test还在被使用</li></ul><p><font color="red"><strong>函数实现逻辑时，将外部的变量引入到函数的内容，改变了这个变量的生命周期，称之为闭包。</strong></font></p><h2 id="函数作为函数参数🔺"><a href="#函数作为函数参数🔺" class="headerlink" title="函数作为函数参数🔺"></a>函数作为函数参数🔺</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(fun: () =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  fun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">  println(<span class="string">&quot;函数参数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(t _)    <span class="comment">// 如果传入t/t()会直接运行t函数，所以要加入t _证明传入的是函数本身</span></span><br></pre></td></tr></table></figure><p>但是麻烦，所以一般函数作为参数的函数一般是匿名函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(fun: () =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  fun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(()=&gt;&#123;println(<span class="string">&quot;123&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure><p><font color="red"></font></p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala概述(一)</title>
      <link href="2020/07/26/Scala%E6%A6%82%E8%BF%B0/"/>
      <url>2020/07/26/Scala%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><a href="/2020/07/30/Scala%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8F%8A%E5%87%BD%E6%95%B0-%E4%BA%8C/" title="Scala流程控制及函数">Scala流程控制及函数</a></li><li><a href="/2020/08/12/Scala%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E4%B8%89/" title="Scala面对对象编程">Scala面对对象编程</a></li><li><a href="/2020/08/14/Scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%8F%8A%E9%9B%86%E5%90%88-%E5%9B%9B/" title="Scala隐式转换及集合">Scala隐式转换及集合</a></li><li><a href="/2020/08/18/Scala%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%8F%8A%E6%B3%9B%E5%9E%8B/" title="Scala模式匹配及泛型">Scala模式匹配及泛型</a></li></ul><h1 id="Scala概述"><a href="#Scala概述" class="headerlink" title="Scala概述"></a>Scala概述</h1><p>Scala 是一门多范式（multi-paradigm）的编程语言，设计初衷是要集成<font color="red">面向对象编程</font>和<font color="red">函数式编程</font>的各种特性。</p><p>Scala 运行在Java虚拟机上，并兼容现有的Java程序。</p><p>Scala 源代码被编译成Java字节码，所以它可以运行于JVM之上，并可以调用现有的Java类库。</p><h2 id="Scala特点"><a href="#Scala特点" class="headerlink" title="Scala特点"></a>Scala特点</h2><p>Scala是一门以java虚拟机（JVM）为目标运行环境并将<font color="red">面向对象编程</font>和<font color="red">函数式编程</font>的最佳特性结合在一起的<strong>静态类型编程语言</strong>。</p><p><strong>静态编程语言</strong>指的是：每个变量都有固定的类型声明时指定，之后不可更改。又称强类型语言。</p><ul><li>Scala 是一门多范式 (multi-paradigm) 的编程语言，Scala支持<font color="red">面向对象编程</font>和<font color="red">函数式编程</font></li><li>Scala源代码(.scala)会被编译成Java字节码(.class)，<font color="red">然后运行于JVM之上</font>，并可以调用现有的Java类库，<font color="red">实现两种语言的无缝对接。</font></li><li>Scala 单作为一门语言来看， 非常的简洁高效</li></ul><h2 id="Scala环境"><a href="#Scala环境" class="headerlink" title="Scala环境"></a>Scala环境</h2><ol><li>Scala需要Java运行时库，安装Scala需要首先安装JVM虚拟机并配置好，推荐安装<code>JDK1.8</code></li><li>在 <a href="http://www.scala-lang.org/">http</a><a href="http://www.scala-lang.org/">://www.scala-lang.org/</a>   下载<code>Scala2.11.8</code>程序安装包</li><li><code>SCALA_HOME</code>设置</li><li><code>Path</code>设置</li></ol><h2 id="Scala对比Java"><a href="#Scala对比Java" class="headerlink" title="Scala对比Java"></a>Scala对比Java</h2><ol><li>Scala中没有public关键字，默认所有的访问权限都是公共的</li><li>Scala中没有void关键字，采用特殊的对象模拟<code>Unit</code>，没有输出的意思</li><li>Scala声明方法采用<code>def</code>关键字</li><li>Scala形参、实参都是先名字:类型</li><li><font color="red">Scala声明变量时必须显示的赋予变量初始值</font></li><li>Scala中没有null值，但是有null类。它的作用就是包含值null</li><li>Scala的标识符命名规范可以使用符号(全是符号)、可以用用反引号(飘号)<code>....</code>包括的任意字符串</li><li>Scala中的<code>_</code>有特殊含义，不要单独用作变量名</li><li>Scala没有<code>++</code>、<code>--</code>操作</li><li>Scala没有三目运算符</li><li>Scala没有<code>switch</code>，它有<code>match case</code>模式匹配</li><li>Scala没有函数重载</li><li>Scala没有<code>throws</code>关键字，函数中如果有异常发送，也不需要在函数声明时抛出异常</li></ol><h1 id="Scala快速开发"><a href="#Scala快速开发" class="headerlink" title="Scala快速开发"></a>Scala快速开发</h1><h2 id="代码执行步骤"><a href="#代码执行步骤" class="headerlink" title="代码执行步骤"></a>代码执行步骤</h2><p><strong>1. 编写源代码</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    print(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 编译代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scalac Hello.scala</span><br></pre></td></tr></table></figure><p><strong>3. 执行代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala Hello</span><br></pre></td></tr></table></figure><hr><p><font color="red"><strong>注意</strong>：scala Hello.scala 命令可以直接运行 Hello.scala 程序</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala Hello.scala</span><br></pre></td></tr></table></figure><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200726190932327.png" alt="image-20200726190932327"></p><h2 id="伴生对象🔺"><a href="#伴生对象🔺" class="headerlink" title="伴生对象🔺"></a>伴生对象🔺</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200726183815027.png" alt="image-20200726183815027"></p><p>如图，其中每个Scala源代码都会被编译成2个文件一个<code>.class</code>一个<code>$.class</code>。<font color="red"><strong>其中<code>$.class</code>是此源文件的伴生对象object编译出来的。它的作用是提供成员方法被main函数调用。</strong></font></p><p>因为，Scala语言是完全面向对象的语言，而Java不是。所以它不允许有static之类的关键字，但是它还得使用静态方法，所以它绕了一个圈子，通过调用<code>$.class</code>的对象的成员方法来对标Java的静态方法。</p><p><font color="red">所以Scala中的<code>object xxx&#123;&#125;</code>的内容就是写main方法和(普通)静态方法，并且可以直接使用类名调用。你可以直接认为它就是静态方法。</font></p><p>请看以下字节码内容：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200726184604318.png" alt="image-20200726184604318"></p><p>可以得知：</p><ol><li><code>object xx&#123;&#125;</code>内的main方法并不是实际意义上的main方法，它只是一个伴生对象的成员方法</li><li>Scala的main方法是源码自带的，我们自己在<code>obejct xx&#123;&#125;</code>中编写的main方法只不过是一个成员方法，供源代码中的main方法通过object伴生对象调用，这样不通过static来实现静态方法的使用</li><li>2的原因是Scala是一个完全面对对象的语言，所以它没有静态语法，只能通过2的步骤模拟生成静态方法</li></ol><hr><p><strong>伴生对象语法规则</strong></p><p><code>object xxx&#123;&#125;</code></p><h1 id="Scala变量"><a href="#Scala变量" class="headerlink" title="Scala变量"></a>Scala变量</h1><p>Java中变量的声明<code>int a</code>与变量的赋值<code>a=1</code>可以分开进行，也可以同时进行<code>int a=1</code></p><p><strong>变量声明基本语法</strong></p><p><code>var | val 变量名 [: 变量类型] = 变量值</code></p><p><strong>Scala的原则就是能省则省</strong>，所以一般在变量声明时不指定类型：</p><p><code>val name = &quot;zxj&quot;</code></p><h2 id="var与val"><a href="#var与val" class="headerlink" title="var与val"></a>var与val</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200726192137398.png" alt="image-20200726192137398"></p><ul><li>val声明的变量的值不可变，var声明的值可以变</li><li>val声明的变量实际上Java的final修饰的变量</li><li><font color="red"><strong>final修饰的变量指向的内容不可变(一般是引用)，但是引用执行内存的内容可以变</strong></font></li></ul><p>例如：Java为例，Scala也一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">int</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&quot;</span> + name +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> User user = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.setName(<span class="number">123</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>ps：</strong></font></p><ol><li>声明变量时，类型可以省略（就是叫 类型推断）</li><li>类型确定后，就不能修改，说明Scala 是强数据类型语言</li><li>在声明/定义一个变量时，可以使用var 或者 val 来修饰， var 修饰的变量可改变，val 修饰的变量不可改 </li><li>val修饰的对象属性在编译后，等同于加上<code>final</code></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Scala 与 Java有着相同的数据类型，在Scala中数据类型都是对象，也就是说scala没有java中的原生(基本)类型</p><p>Scala数据类型分为两大类 AnyVal(值类型) 和 AnyRef(引用类型)， 注意：不管是AnyVal还是AnyRef 都是对象。</p><p>甚至Scala中的数字都是对象，数字都可以直接调用方法。而Java数字只是字面量。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200726192724755.png" alt="image-20200726192724755"></p><p><strong>Unit类型、Null类型和Nothing类型</strong></p><ul><li><p>Null类只有一个实例对象，null，类似于Java中的null引用。null可以赋值给任意引用类型(AnyRef)，但是不能赋值给值类型(AnyVal: 比如 Int, Float, Char, Boolean, Long, Double, Byte, Short)</p></li><li><p>Unit类型用来标识过程，也就是没有明确返回值的函数。由此可见，Unit类似于Java里的void。Unit只有一个实例，这个实例也没有实质的意义</p></li><li><p>Nothing，<font color="red">可以作为没有正常返回值的方法的返回类型</font>，非常直观的告诉你这个方法不会正常返回，而且由于Nothing是其他任意类型的子类，他还能跟要求返回值的方法兼容。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>() : <span class="type">Nothing</span> = &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Exception</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Scala可以直接使用Java的类，毕竟他们可以无缝前街<del>~</del></strong></p><p><code>var ag = Integer.parseInt(&quot;3&quot;)</code></p><h2 id="值类型的隐式转换-与Java一致"><a href="#值类型的隐式转换-与Java一致" class="headerlink" title="值类型的隐式转换(与Java一致)"></a>值类型的隐式转换(与Java一致)</h2><ol><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。</li><li>当我们把精度(容量)大 的数据类型赋值给精度(容量)小 的数据类型时，就会报错，反之就会进行自动类型转换。</li><li>byte，short，char  他们三者可以计算，在计算时首先转换为int类型。</li><li>自动提升原则： 表达式结果的类型自动提升为 操作数中最大的类型</li></ol><h1 id="Scala小技巧"><a href="#Scala小技巧" class="headerlink" title="Scala小技巧"></a>Scala小技巧</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><ol><li><code>printf</code></li><li>s声明，采用el表达式</li><li>f声明，格式化输出</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">&quot;zxj&quot;</span></span><br><span class="line">    <span class="keyword">val</span> age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    printf(<span class="string">&quot;name=%s,age=%d&quot;</span>, name, age)</span><br><span class="line">    println(<span class="string">s&quot;name=<span class="subst">$&#123;name&#125;</span>,age=<span class="subst">$&#123;age&#125;</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">f&quot;name=<span class="subst">$&#123;name&#125;</span>,age=<span class="subst">$&#123;age&#125;</span>%.2f&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if代替三目运算"><a href="#if代替三目运算" class="headerlink" title="if代替三目运算"></a>if代替三目运算</h2><p>因为Scala任何代码都有返回值，并且最后一行代码的输出就是返回，所以使用if代替三目运算</p><p>Scala没有三目运算符；可用<code>val result = if (true) 1 else 0</code>替代</p><h2 id="值与string转换"><a href="#值与string转换" class="headerlink" title="值与string转换"></a>值与string转换</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200726193413151.png" alt="image-20200726193413151"></p><h2 id="获取键盘输入"><a href="#获取键盘输入" class="headerlink" title="获取键盘输入"></a>获取键盘输入</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">For</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> str = <span class="type">StdIn</span>.readLine()</span><br><span class="line">    println(str)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无中间值变量交换"><a href="#无中间值变量交换" class="headerlink" title="无中间值变量交换"></a>无中间值变量交换</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">For</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">    a = a ^ b</span><br><span class="line">    b = a ^ b</span><br><span class="line">    a = a ^ b</span><br><span class="line">    println(<span class="string">s&quot;a=<span class="subst">$a</span>, b=<span class="subst">$b</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">For</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">    a = a - b</span><br><span class="line">    b = a - b</span><br><span class="line">    a = a - b</span><br><span class="line">    println(<span class="string">s&quot;a=<span class="subst">$a</span>, b=<span class="subst">$b</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字父类判断以及类型转换"><a href="#字父类判断以及类型转换" class="headerlink" title="字父类判断以及类型转换"></a>字父类判断以及类型转换</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 定义一个Any类型</span></span><br><span class="line">    <span class="keyword">val</span> test: <span class="type">Any</span> = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果test变量是数字，则把它转换为数字</span></span><br><span class="line">    <span class="keyword">if</span> (test.isInstanceOf[<span class="type">Int</span>]) &#123;</span><br><span class="line">      <span class="keyword">val</span> i: <span class="type">Int</span> = test.asInstanceOf[<span class="type">Int</span>]</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"></font></p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Azkaban调度</title>
      <link href="2020/07/17/Azkaban%E8%B0%83%E5%BA%A6/"/>
      <url>2020/07/17/Azkaban%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="为什么需要工作流调度系统"><a href="#为什么需要工作流调度系统" class="headerlink" title="为什么需要工作流调度系统"></a>为什么需要工作流调度系统</h2><ol><li>一个完整的数据分析系统通常都是由大量任务单元组成：shell脚本程序，java程序，mapreduce程序、hive脚本等</li><li>各任务单元之间存在时间先后及前后依赖关系</li><li>为了很好地组织起这样的复杂执行计划，需要一个工作流调度系统来调度执行；</li></ol><h2 id="workflow调度系统种类"><a href="#workflow调度系统种类" class="headerlink" title="workflow调度系统种类"></a>workflow调度系统种类</h2><p>在调度 Hadoop 的相关作业时，有以下几种方式：</p><ul><li>基于 Linux 系统级别的 Crontab。</li><li>Java 应用级别的 Quartz。</li><li>第三方的调度系统。</li><li>自行开发 Hadoop 应用调度系统。</li></ul><p>对于前两种，使用 Crontab 和 Quartz 是基本可以满足业务需求，但有其弊端。<strong>在 Job 数量庞大的情况下，Crontab 脚本的编写，变得异常复杂。其调度的过程也不能透明化，让管理变得困难</strong>。Quartz 虽然不用编写脚本，实现对应的调度 API 即可，然其调度过程不透明，不涵盖 Job 运行详情。需自行开发其功能。</p><p>因而，第三方的调度系统便应运而生了。本篇博文，笔者给大家介绍 Azkaban 的相关使用心得，以及在使用中遇到的种种问题和解决思路。</p><h2 id="什么是Azkaban"><a href="#什么是Azkaban" class="headerlink" title="什么是Azkaban"></a>什么是Azkaban</h2><p>Azkaban是第三方的调度系统，它可以解决各个任务单元间的依赖关系。</p><p>如果不使用调度系统的话，多个任务互相依赖前面任务的结果时，整个的执行过程都需要人工参加，并且得盯着各任务的进度。但是我们的很多任务都是在深更半夜执行的，通过写脚本设置crontab执行。其实，整个过程类似于一个有向无环图（DAG）。每个子任务相当于大任务中的一个节点，也就是，我们需要的就是一个工作流的调度器，而Azkaban就是能解决上述问题的一个调度器。</p><p>Azkaban是由Linkedin公司推出的一个批量工作流任务调度器，主要用于在一个工作流内以一个特定的顺序运行一组工作和流程，它的配置是通过简单的key:value对的方式，<font color='red'>通过配置中的dependencies 来设置依赖关系。</font>Azkaban使用job配置文件建立任务之间的依赖关系，并提供一个易于使用的web用户界面维护和跟踪你的工作流。</p><h2 id="Azkaban的特点以及与Oozie的区别"><a href="#Azkaban的特点以及与Oozie的区别" class="headerlink" title="Azkaban的特点以及与Oozie的区别"></a>Azkaban的特点以及与Oozie的区别</h2><ol><li>兼容任何版本的hadoop(Oozie的话要不统一使用chd版本，要么根据当前Hadoop来编译Oozie)</li><li>易于使用的Web用户界面</li><li>简单的工作流的上传(Oozie要上传至HDFS，手动执行)</li><li>方便设置任务之间的关系(Azkaban通过dependencies来设置，Oozie通过xml中的节点指向设置)</li><li>调度工作流</li><li>模块化和可插拔的插件机制</li><li>认证/授权(权限的工作)</li><li>能够杀死并重新启动工作流</li><li>有关失败和成功的电子邮件提醒</li></ol><h1 id="Azkaban架构"><a href="#Azkaban架构" class="headerlink" title="Azkaban架构"></a>Azkaban架构</h1><p>Azkaban由三个关键组件构成：<code>Web Server</code>、<code>Executor Server</code>、<code>MySQL</code></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Azkaban-structure.png" alt="Azkaban-structure"></p><p>工作步骤：</p><ol><li>用户编写配置文件后<font color="red"><strong>压缩为zip包</strong></font>，通过Web UI上传。</li><li>上传后文件会以二进制的形式存放在MySQL中。</li><li>当用户在Web UI中点击执行流程或者设置定时调度执行流程时，Executor负责执行。</li><li>含有Executor的机器负责从MySQL下载文件，然后根据文件内容执行流程。并把流程执行的实时状态写入MySQL</li><li>而WebUI负责读取流程执行状态，展示在页面。</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Azkaban-workflow.png" alt="Azkaban-workflow"></p><ol><li>AzkabanWebServer：AzkabanWebServer是整个Azkaban工作流系统的主要管理者，它用户登录认证、负责project管理、定时执行工作流、跟踪工作流执行进度等一系列任务。</li><li>AzkabanExecutorServer：负责具体的工作流的提交、执行，它们通过mysql数据库来协调任务的执行。</li><li>关系型数据库（MySQL）：存储大部分执行流状态，AzkabanWebServer和AzkabanExecutorServer都需要访问数据库。</li></ol><h1 id="Azkaban安装"><a href="#Azkaban安装" class="headerlink" title="Azkaban安装"></a>Azkaban安装</h1><p>下载地址:<a href="https://gitee.com/wenhaijin_830_8756/azkaban">https://gitee.com/wenhaijin_830_8756/azkaban</a></p><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/azkaban/azkaban/archive/3.38.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf 3.38.0.tar.gz -C /opt/build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/build/azkaban-3.38.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./gradlew distTar</span></span><br></pre></td></tr></table></figure><p>bulid成功之后，分别进入如下目录：<br><code>azkaban-master/azkaban-db/build/distributions</code><br><code>azkaban-master/azkaban-exec-server/build/distributions</code><br><code>azkaban-master/azkaban-web-server/build/distributions</code><br>然后拷贝出其中的tar包，这个tar包就是我们以后需要用到的安装包。[可以留用备份]</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>将Azkaban Web服务器、Azkaban执行服务器、Azkaban的sql执行脚本及MySQL安装包拷贝到hadoop102虚拟机/opt/software目录下</p><ul><li>azkaban-web-server-2.5.0.tar.gz</li><li>azkaban-executor-server-2.5.0.tar.gz</li><li>azkaban-sql-script-2.5.0.tar.gz</li></ul><p>选择<strong>Mysql</strong>作为Azkaban数据库，因为Azkaban建立了一些Mysql连接增强功能，以方便Azkaban设置。并增强服务可靠性。<strong>此版本的Azkaban使用的是5版本的Mysql，版本一定要符合</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>在/opt/module/目录下创建azkaban目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir azkaban</span></span><br></pre></td></tr></table></figure><p>解压azkaban-web-server-2.5.0.tar.gz、azkaban-executor-server-2.5.0.tar.gz、azkaban-sql-script-2.5.0.tar.gz到/opt/module/azkaban目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf azkaban-web-server-2.5.0.tar.gz -C /opt/module/azkaban/</span><br><span class="line">tar -zxvf azkaban-executor-server-2.5.0.tar.gz -C /opt/module/azkaban/</span><br><span class="line">tar -zxvf azkaban-sql-script-2.5.0.tar.gz -C /opt/module/azkaban/</span><br></pre></td></tr></table></figure><p><strong>对解压后的文件重新命名</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mv azkaban-web-2.5.0/ server</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv azkaban-executor-2.5.0/ executor</span></span><br></pre></td></tr></table></figure><p><strong>azkaban脚本导入</strong></p><p>进入mysql，创建azkaban数据库，并将解压的脚本导入到azkaban数据库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p000000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database azkaban;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use azkaban;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">source</span> /opt/module/azkaban/azkaban-2.5.0/create-all-sql-2.5.0.sql</span></span><br></pre></td></tr></table></figure><p>注：source后跟.sql文件，用于批量处理.sql文件中的sql语句。</p><h2 id="生成密钥对和证书"><a href="#生成密钥对和证书" class="headerlink" title="生成密钥对和证书"></a>生成密钥对和证书</h2><p>为了使用HTTPS，所以生成SSL证书</p><p>Keytool是java数据证书的管理工具，使用户能够管理自己的公/私钥对及相关证书。</p><ul><li><p>keystore  指定密钥库的名称及位置(产生的各类信息将存在.keystore文件中)</p></li><li><p>genkey(或者-genkeypair)   生成密钥对</p></li><li><p>alias  为生成的密钥对指定别名，如果没有默认是mykey</p></li><li><p>keyalg 指定密钥的算法 RSA/DSA 默认是DSA</p></li></ul><p>Keytool在当前目录生成.keystore文件</p><p><strong>生成 keystore的密码及相应信息的密钥库，在web Server的根目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> keytool -keystore keystore -<span class="built_in">alias</span> my_certificate -genkey -keyalg RSA</span></span><br><span class="line">输入密钥库口令:  </span><br><span class="line">再次输入新口令: </span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  </span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:  </span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:  </span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:  </span><br><span class="line">您所在的省/市/自治区名称是什么?</span><br><span class="line">  [Unknown]:  </span><br><span class="line">该单位的双字母国家/地区代码是什么?</span><br><span class="line">  [Unknown]:  </span><br><span class="line">CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown是否正确?</span><br><span class="line">  [否]:  y</span><br><span class="line"></span><br><span class="line">输入 &lt;my_certificate&gt; 的密钥口令</span><br><span class="line">        (如果和密钥库口令相同, 按回车):  </span><br><span class="line">再次输入新口令:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>密钥库的密码至少必须6个字符，可以是纯数字或者字母或者数字和字母的组合等</p><h2 id="时间同步设置"><a href="#时间同步设置" class="headerlink" title="时间同步设置"></a>时间同步设置</h2><p>略</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="Web-Server"><a href="#Web-Server" class="headerlink" title="Web Server"></a>Web Server</h3><p><strong>进入azkaban web服务器安装目录 conf目录，打开<code>azkaban.properties</code>文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/opt/module/azkaban/server/conf</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim azkaban.properties</span></span><br></pre></td></tr></table></figure><p><strong>按照如下配置修改azkaban.properties文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Azkaban Personalization Settings</span></span><br><span class="line"><span class="comment">#服务器UI名称,用于服务器上方显示的名字</span></span><br><span class="line"><span class="meta">azkaban.name</span>=<span class="string">Test</span></span><br><span class="line"><span class="comment">#描述</span></span><br><span class="line"><span class="meta">azkaban.label</span>=<span class="string">My Local Azkaban</span></span><br><span class="line"><span class="comment">#UI颜色</span></span><br><span class="line"><span class="meta">azkaban.color</span>=<span class="string">#FF3601</span></span><br><span class="line"><span class="meta">azkaban.default.servlet.path</span>=<span class="string">/index</span></span><br><span class="line"><span class="comment">#默认web server存放web文件的目录</span></span><br><span class="line"><span class="meta">web.resource.dir</span>=<span class="string">/opt/module/azkaban/server/web/</span></span><br><span class="line"><span class="comment">#默认时区,已改为亚洲/上海 默认为美国</span></span><br><span class="line"><span class="meta">default.timezone.id</span>=<span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Azkaban UserManager class</span></span><br><span class="line"><span class="meta">user.manager.class</span>=<span class="string">azkaban.user.XmlUserManager</span></span><br><span class="line"><span class="comment">#用户权限管理默认类（绝对路径）</span></span><br><span class="line"><span class="meta">user.manager.xml.file</span>=<span class="string">/opt/module/azkaban/server/conf/azkaban-users.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Loader for projects</span></span><br><span class="line"><span class="comment">#global配置文件所在位置（绝对路径）</span></span><br><span class="line"><span class="meta">executor.global.properties</span>=<span class="string">/opt/module/azkaban/executor/conf/global.properties</span></span><br><span class="line"><span class="meta">azkaban.project.dir</span>=<span class="string">projects</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库类型</span></span><br><span class="line"><span class="meta">database.type</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="meta">mysql.port</span>=<span class="string">3306</span></span><br><span class="line"><span class="comment">#数据库连接IP</span></span><br><span class="line"><span class="meta">mysql.host</span>=<span class="string">hadoop102</span></span><br><span class="line"><span class="comment">#数据库实例名</span></span><br><span class="line"><span class="meta">mysql.database</span>=<span class="string">azkaban</span></span><br><span class="line"><span class="comment">#数据库用户名</span></span><br><span class="line"><span class="meta">mysql.user</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line"><span class="meta">mysql.password</span>=<span class="string">000000</span></span><br><span class="line"><span class="comment">#最大连接数</span></span><br><span class="line"><span class="meta">mysql.numconnections</span>=<span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Velocity dev mode</span></span><br><span class="line"><span class="meta">velocity.dev.mode</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Azkaban Jetty server properties.</span></span><br><span class="line"><span class="comment"># Jetty服务器属性.</span></span><br><span class="line"><span class="comment">#最大线程数</span></span><br><span class="line"><span class="meta">jetty.maxThreads</span>=<span class="string">25</span></span><br><span class="line"><span class="comment">#Jetty SSL端口</span></span><br><span class="line"><span class="meta">jetty.ssl.port</span>=<span class="string">8443</span></span><br><span class="line"><span class="comment">#Jetty端口</span></span><br><span class="line"><span class="meta">jetty.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#SSL文件名（绝对路径）</span></span><br><span class="line"><span class="meta">jetty.keystore</span>=<span class="string">/opt/module/azkaban/server/keystore</span></span><br><span class="line"><span class="comment">#SSL文件密码</span></span><br><span class="line"><span class="meta">jetty.password</span>=<span class="string">000000</span></span><br><span class="line"><span class="comment">#Jetty主密码与keystore文件相同</span></span><br><span class="line"><span class="meta">jetty.keypassword</span>=<span class="string">000000</span></span><br><span class="line"><span class="comment">#SSL文件名（绝对路径）</span></span><br><span class="line"><span class="meta">jetty.truststore</span>=<span class="string">/opt/module/azkaban/server/keystore</span></span><br><span class="line"><span class="comment">#SSL文件密码</span></span><br><span class="line"><span class="meta">jetty.trustpassword</span>=<span class="string">000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Azkaban Executor settings</span></span><br><span class="line"><span class="meta">executor.port</span>=<span class="string">12321</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mail settings</span></span><br><span class="line"><span class="meta">mail.sender</span>=<span class="string"></span></span><br><span class="line"><span class="meta">mail.host</span>=<span class="string"></span></span><br><span class="line"><span class="meta">job.failure.email</span>=<span class="string"></span></span><br><span class="line"><span class="meta">job.success.email</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="meta">lockdown.create.projects</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">cache.directory</span>=<span class="string">cache</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要修改的内容有：</p><ul><li><code>web.resource.dir</code>：写web项目文件的绝对路径</li><li><code>default.timezone.id</code>：默认时区修改</li><li><code>user.manager.xml.file</code>：用户权限管理默认类（绝对路径）</li><li><code>executor.global.properties</code>：global配置文件所在位置（绝对路径），在Executor中</li><li><code>mysql.host</code>、<code>mysql.user</code>、<code>mysql.password</code></li><li>证书修改<ul><li><code>jetty.keystore</code>:SSL文件名（绝对路径）</li><li><code>jetty.password</code>：SSL文件密码</li><li><code>jetty.keypassword</code>证书密码</li><li><code>jetty.truststore</code>、<code>jetty.trustpassword</code>客户端验证服务端的证书</li></ul></li></ul><p><strong>在azkaban web服务器安装目录 conf目录，按照如下配置修改azkaban-users.xml 文件，增加管理员用户。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim azkaban-users.xml</span></span><br><span class="line">&lt;azkaban-users&gt;</span><br><span class="line">    &lt;user username=&quot;azkaban&quot; password=&quot;azkaban&quot; roles=&quot;admin&quot; groups=&quot;azkaban&quot; /&gt;</span><br><span class="line">    &lt;user username=&quot;metrics&quot; password=&quot;metrics&quot; roles=&quot;metrics&quot;/&gt;</span><br><span class="line">    &lt;user username=&quot;admin&quot; password=&quot;admin&quot; roles=&quot;admin,metrics&quot;/&gt;</span><br><span class="line">    &lt;role name=&quot;admin&quot; permissions=&quot;ADMIN&quot; /&gt;</span><br><span class="line">    &lt;role name=&quot;metrics&quot; permissions=&quot;METRICS&quot;/&gt;</span><br><span class="line">&lt;/azkaban-users&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>手动的添加了用户admin。</p><h3 id="Executor-Server"><a href="#Executor-Server" class="headerlink" title="Executor Server"></a>Executor Server</h3><p><strong>进入执行服务器安装目录conf，打开azkaban.properties</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/opt/module/azkaban/executor/conf</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim azkaban.properties</span></span><br></pre></td></tr></table></figure><p><strong>按照如下配置修改azkaban.properties文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Azkaban</span></span><br><span class="line"><span class="comment">#时区</span></span><br><span class="line"><span class="meta">default.timezone.id</span>=<span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Azkaban JobTypes Plugins</span></span><br><span class="line"><span class="comment">#jobtype 插件所在位置</span></span><br><span class="line"><span class="meta">azkaban.jobtype.plugin.dir</span>=<span class="string">plugins/jobtypes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Loader for projects</span></span><br><span class="line"><span class="meta">executor.global.properties</span>=<span class="string">/opt/module/azkaban/executor/conf/global.properties</span></span><br><span class="line"><span class="meta">azkaban.project.dir</span>=<span class="string">projects</span></span><br><span class="line"></span><br><span class="line"><span class="meta">database.type</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">mysql.port</span>=<span class="string">3306</span></span><br><span class="line"><span class="meta">mysql.host</span>=<span class="string">hadoop102</span></span><br><span class="line"><span class="meta">mysql.database</span>=<span class="string">azkaban</span></span><br><span class="line"><span class="meta">mysql.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">mysql.password</span>=<span class="string">000000</span></span><br><span class="line"><span class="meta">mysql.numconnections</span>=<span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Azkaban Executor settings</span></span><br><span class="line"><span class="comment">#最大线程数</span></span><br><span class="line"><span class="meta">executor.maxThreads</span>=<span class="string">50</span></span><br><span class="line"><span class="comment">#端口号(如修改,请与web服务中一致)</span></span><br><span class="line"><span class="meta">executor.port</span>=<span class="string">12321</span></span><br><span class="line"><span class="comment">#线程数</span></span><br><span class="line"><span class="meta">executor.flow.threads</span>=<span class="string">30</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改的配置有：</p><ul><li><code>default.timezone.id</code></li><li><code>executor.global.properties</code></li><li><code>mysql.host</code>、<code>mysql.user</code>、<code>mysql.password</code></li></ul><h2 id="启动executor服务器"><a href="#启动executor服务器" class="headerlink" title="启动executor服务器"></a>启动executor服务器</h2><p>在executor服务器目录下执行启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line"></span><br><span class="line">/opt/module/azkaban/executor</span><br><span class="line"><span class="meta">$</span><span class="bash"> bin/azkaban-executor-start.sh</span></span><br></pre></td></tr></table></figure><h2 id="启动web服务器"><a href="#启动web服务器" class="headerlink" title="启动web服务器"></a>启动web服务器</h2><p>在azkaban web服务器目录下执行启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/opt/module/azkaban/server</span><br><span class="line"><span class="meta">$</span><span class="bash"> bin/azkaban-web-start.sh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：先执行executor，再执行web，避免Web Server会因为找不到执行器启动失败。</p><p>jps查看进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jps</span></span><br><span class="line"></span><br><span class="line">3601 AzkabanExecutorServer</span><br><span class="line"></span><br><span class="line">5880 Jps</span><br><span class="line"></span><br><span class="line">3661 AzkabanWebServer</span><br></pre></td></tr></table></figure><p>启动完成后，在浏览器(建议使用谷歌浏览器)中输入<strong>https://服务器IP地址:8443</strong>，<strong>一定要加上https</strong>。即可访问azkaban服务了。</p><p>在登录中输入刚才在azkaban-users.xml文件中新添加的户用名及密码，点击 login。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Azkaban-login.png" alt="Azkaban-login"></p><h1 id="Azkaban实战"><a href="#Azkaban实战" class="headerlink" title="Azkaban实战"></a>Azkaban实战</h1><p>Azkaba内置的任务类型支持command、javaprocess</p><p>为什么Azkaban能调度Hadoop任务，因为它的本质就相当于通过command在命令行直接执行Hadoop任务。</p><h2 id="Azkaban限制"><a href="#Azkaban限制" class="headerlink" title="Azkaban限制"></a>Azkaban限制</h2><ol><li>工作流程中<font color="red"><strong>每个单元对应一个.job配置文件</strong></font></li><li>配置文件必须<font color="red"><strong>以.job结尾</strong></font></li><li>所有的配置文件需要<font color="red"><strong>打为zip包</strong></font>，通过WebUI上传</li><li>设置好的项目，可以通过设置，来决定定时执行还是立即执行一次。还可以设置执行参数</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="多job工作流"><a href="#多job工作流" class="headerlink" title="多job工作流"></a>多job工作流</h3><p>简单演示，只打印文字到指定文件。因为最后执行是交给Executor的所以，如果不是集群的话，只会再Executor执行</p><p>创建有依赖的多个job，其中依赖性通过<code>dependencies</code>来设置，没有设置的，默认没有依赖，第一个执行</p><p><strong>创建第一个job</strong></p><p>start.job</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span>=<span class="string">command</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">touch /0</span></span><br></pre></td></tr></table></figure><p>step1.job</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span>=<span class="string">command</span></span><br><span class="line"><span class="attr">dependencies</span>=<span class="string">start</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">touch /1</span></span><br></pre></td></tr></table></figure><p>step2.job</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span>=<span class="string">command</span></span><br><span class="line"><span class="attr">dependencies</span>=<span class="string">start</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">touch /2</span></span><br></pre></td></tr></table></figure><p>end.job</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span>=<span class="string">command</span></span><br><span class="line"><span class="attr">dependencies</span>=<span class="string">step1,step2</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">touch /3</span></span><br></pre></td></tr></table></figure><p><strong>zip包</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Azkaban-zip.png" alt="Azkaban-zip"></p><p><strong>创建项目</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Azkaban-project.png" alt="Azkaban-project"></p><p><strong>进入项目后，上传配置</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Azkaban-upload.png" alt="Azkaban-upload"></p><p><strong>出现勾中内容证明配置文件无误</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Azkaban-uploadsuccess.png" alt="Azkaban-uploadsuccess"></p><p><strong>点击Execute Flow</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Azkaban-exe.png" alt="Azkaban-exe"></p><p><strong>立即执行成功</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Azkaban-suc.png" alt="Azkaban-suc"></p><p><strong>配置定时执行</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Azkaban-sch.png" alt="Azkaban-sch"></p><hr><h3 id="java操作任务"><a href="#java操作任务" class="headerlink" title="java操作任务"></a>java操作任务</h3><p>操作流程就是上述，Java操作任务只有配置文件，其他操作与上述一致</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span>=<span class="string">javaprocess</span></span><br><span class="line"><span class="meta">java.class</span>=<span class="string">top.awslzhang.main</span></span><br><span class="line"><span class="attr">classpath</span>=<span class="string">./xxx</span></span><br><span class="line"><span class="comment"># classpath=绝对路径</span></span><br></pre></td></tr></table></figure><ul><li>其中如果用相对路径的话，需要将jar压缩至zip</li><li>绝对路径的话，需要将jar上传至Linux，并指定位置。并且集群时，不好搞</li></ul><h3 id="hdfs、hive、mr的操作"><a href="#hdfs、hive、mr的操作" class="headerlink" title="hdfs、hive、mr的操作"></a>hdfs、hive、mr的操作</h3><p><strong>hdfs</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command</span>=<span class="string">/opt/module/hadoop-2.7.2/bin/hadoop fs -mkdir /azkaban</span></span><br></pre></td></tr></table></figure><p><strong>hive</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command</span>=<span class="string">/opt/module/hive/bin/hive -f /opt/module/azkaban/jobs/student.sql</span></span><br></pre></td></tr></table></figure><p>student.sql是需要处理的操作</p><p><strong>mr</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command</span>=<span class="string">/opt/module/hadoop-2.7.2/bin/hadoop jar /opt/module/hadoop-2.7.2/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount /wordcount/input /wordcount/output</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> scheduled </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Oozie调度</title>
      <link href="2020/07/15/Oozie%E8%B0%83%E5%BA%A6/"/>
      <url>2020/07/15/Oozie%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="Oozie简介"><a href="#Oozie简介" class="headerlink" title="Oozie简介"></a>Oozie简介</h1><p>Oozie英文翻译为：驯象人。一个基于工作流引擎的开源框架，由Cloudera公司贡献给Apache，提供对Hadoop MapReduce、Pig Jobs的任务调度与协调。Oozie需要部署到Java Servlet容器中运行。主要用于定时调度任务，多任务可以按照执行的逻辑顺序调度。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Oozie-url.png" alt="Oozie-url"></p><p>这是Oozie官网的截图。它的定义是Hadoop Workflow Scheduler。就是Hadoop工作流程调度。</p><p><strong>Workflow</strong></p><p>顾名思义，工作流程。既然是工作流程固然不是一个步骤，它有两个点：许多工作单元，按序执行。</p><p><strong>Scheduler</strong></p><p>调度，可定期有频率的执行工作流程。</p><h1 id="Oozie的功能模块介绍"><a href="#Oozie的功能模块介绍" class="headerlink" title="Oozie的功能模块介绍"></a>Oozie的功能模块介绍</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p><strong>Workflow</strong></p><p>顺序执行流程节点，支持fork（分支多个节点），join（合并多个节点为一个）</p><p>fork、join必须成对出现</p><p><strong>Coordinator</strong></p><p>定时触发workflow</p><p><strong>Bundle</strong></p><p>绑定多个Coordinator</p><h2 id="Workflow常用节点"><a href="#Workflow常用节点" class="headerlink" title="Workflow常用节点"></a>Workflow常用节点</h2><p><strong>控制流节点（Control Flow Nodes）</strong></p><p>控制流节点一般都是定义在工作流开始或者结束的位置，比如start,end,kill等。以及提供工作流的执行路径机制，如decision，fork，join等。</p><p><strong>动作节点（Action Nodes）</strong></p><p>负责执行具体动作的节点，比如：拷贝文件，执行某个Shell脚本等等。</p><hr><p>workflow就是一个xml配置文件</p><h1 id="Oozie的部署"><a href="#Oozie的部署" class="headerlink" title="Oozie的部署"></a>Oozie的部署</h1><p>因为Oozie是调度Hadoop程序的，所以它依赖于Hadoop。必须和它能一起执行，不能和它冲突。</p><p>所以apache版本的Oozie没有编译版本，只有源码。apache版本也不知道你使用的Hadoop是什么版本，所以就没有发布编译版本，<font color="red"><strong>只能通过自己下载Oozie源码，并且指定一些内容来手动编译，才能正常将Oozie与Hadoop集成</strong></font></p><p><a href="http://archive.apache.org/dist/oozie/">源码下载</a></p><p><a href="http://oozie.apache.org/docs/4.3.0/DG_QuickStart.html">编译步骤点击查看</a></p><hr><p>除了使用apache的版本，还可以使用cdn的版本，可以直接下载Oozie的cdn编译好的版本。这种方法没有上述的问题。因为同一个版本号的cdn蕴含着各个组件，并且互相兼容，我们直接使用编译好的版本就行。<font color="red"><strong>这样就又要限制你的Hadoop集群必须是cdn版本，且和Oozie的版本一致。</strong></font></p><h2 id="Hadoop配置修改"><a href="#Hadoop配置修改" class="headerlink" title="Hadoop配置修改"></a>Hadoop配置修改</h2><p>在Oozie的编译或者cdh版本设置好了之后，需要操作以下内容。</p><p><strong>core-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Oozie Server的Hostname --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许被Oozie代理的用户组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置Oozie的代理用户，用户应该设置为Oozie的归属用户，上述hadoop就是该用户</p><p><strong>mapred-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 MapReduce JobHistory Server 地址 ，默认端口10020 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 MapReduce JobHistory Server web ui 地址， 默认端口19888 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置日志、历史服务器，Oozie通过历史服务器来监控工作单位的执行进度，来把控工作流程的正常流程</p><p><strong>yarn-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 任务历史服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://hadoop201:19888/jobhistory/logs/<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>最后启动Hadoop集群，并且启动JobHistoryServer</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mr-jobhistory-daemon.sh start historyserver</span></span><br></pre></td></tr></table></figure><h2 id="部署Oozie"><a href="#部署Oozie" class="headerlink" title="部署Oozie"></a>部署Oozie</h2><h3 id="解压Oozie编译版本"><a href="#解压Oozie编译版本" class="headerlink" title="解压Oozie编译版本"></a>解压Oozie编译版本</h3><ol><li>解压Oozie后在Oozie根目录解压oozie-hadooplibs-xxx</li><li>在Oozie根目录创建<code>libext</code>目录</li><li>将oozie-hadooplibs-xxx解压后的文件夹中找出hadooplibs内所有内容放入<code>libext</code></li><li>拷贝Mysql驱动包到libext目录下</li><li> 将ext-2.2.zip拷贝到libext/目录下(ext-2.2.zip是一个前端包，需要自行下载)，<a href="http://archive.cloudera.com/gplextras/misc/ext-2.2.zip">http://archive.cloudera.com/gplextras/misc/ext-2.2.zip</a></li></ol><h3 id="修改Oozie配置文件"><a href="#修改Oozie配置文件" class="headerlink" title="修改Oozie配置文件"></a>修改Oozie配置文件</h3><p><strong>oozie-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4ge</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据库设置"><a href="#数据库设置" class="headerlink" title="数据库设置"></a>数据库设置</h3><p>进入Mysql并创建oozie数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p000000</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database oozie;</span></span><br></pre></td></tr></table></figure><h3 id="初始化Oozie"><a href="#初始化Oozie" class="headerlink" title="初始化Oozie"></a>初始化Oozie</h3><p><strong>上传Oozie目录下的yarn.tar.gz文件到HDFS：</strong></p><p>提示：yarn.tar.gz文件会自行解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/oozie-setup.sh sharelib create -fs hdfs://mycluster -locallib oozie-sharelib-xxx-yarn.tar.gz</span></span><br></pre></td></tr></table></figure><p>执行成功之后，去50070检查对应目录有没有文件生成。</p><p><strong>创建oozie.sql文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/ooziedb.sh create -sqlfile oozie.sql -run</span></span><br></pre></td></tr></table></figure><p><strong>打包项目，生成war包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/oozie-setup.sh prepare-war</span></span><br></pre></td></tr></table></figure><h3 id="Oozie的启动与关闭"><a href="#Oozie的启动与关闭" class="headerlink" title="Oozie的启动与关闭"></a>Oozie的启动与关闭</h3><p>启动命令如下：</p><p><code>$ bin/oozied.sh start</code></p><p>关闭命令如下：</p><p><code>bin/oozied.sh stop</code></p><h3 id="访问Oozie的Web页面"><a href="#访问Oozie的Web页面" class="headerlink" title="访问Oozie的Web页面"></a>访问Oozie的Web页面</h3><p><a href="http://hadoop202:11000/oozie">http://hadoop202:11000/oozie</a></p><h1 id="Oozie的使用"><a href="#Oozie的使用" class="headerlink" title="Oozie的使用"></a>Oozie的使用</h1><p>它的定时调用一定要设置好时区。</p><ol><li>首先创建工作流程配置文件<code>workflow.xml</code>、<code>job.properties</code></li><li>命令行手动上传配置文件到hdfs</li><li>命令行手动执行任务</li></ol><p>Oozie可以执行shell命令(要把命令也上传到hdfs，因为不一定是上传节点执行此任务)，可以执行MR(很麻烦，要在配置文件中指定很多的内容)</p><p>Oozie通过xml配置中节点的指向性来处理工作单元间的相互关系。</p><p>具体案例不写了，Oozie并不好用。</p><a href="/2020/07/17/Azkaban%E8%B0%83%E5%BA%A6/" title="Azkaban也是一个工作流程调度器，请看它怎么使用。">Azkaban也是一个工作流程调度器，请看它怎么使用。</a>]]></content>
      
      
      <categories>
          
          <category> scheduled </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqoop的简单使用</title>
      <link href="2020/07/14/Sqoop%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2020/07/14/Sqoop%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Sqoop简介"><a href="#Sqoop简介" class="headerlink" title="Sqoop简介"></a>Sqoop简介</h1><p>Sqoop是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</p><p>Sqoop项目开始于2009年，最早是作为Hadoop的一个第三方模块存在，后来为了让使用者能够快速部署，也为了让开发人员能够更快速的迭代开发，Sqoop独立成为一个<a href="https://baike.baidu.com/item/Apache/6265">Apache</a>项目。</p><p>Sqoop2的最新版本是1.99.7。请注意，2与1不兼容，且特征不完整，它并不打算用于生产部署。</p><h2 id="Sqoop与Flume"><a href="#Sqoop与Flume" class="headerlink" title="Sqoop与Flume"></a>Sqoop与Flume</h2><p>Flume和Sqoop是Hadoop数据集成和收集系统，两者的定位不一样。Flume有集群的概念，是一种分布式，可靠且可用的服务，主要用于高效地收集，汇总和移动大量日志数据。而我们的Sqoop是一种用于在Apache Hadoop和结构化数据存储（如关系数据库）之间高效传输批量数据的工具（没有集群的概念）。Sqoop有助于在hadoop和其他数据库之间移动数据，并且可以并行传输数据以提高性能。两者可以做同样的工作，但是各自擅长的领域不同，因此应用场景也不同。</p><p>区别可以总结为</p><ul><li>flume集群，收集非结构化数据。日志采集系统</li><li>sqoop工具，传输批量结构化数据，数据传输</li></ul><h1 id="Sqoop原理"><a href="#Sqoop原理" class="headerlink" title="Sqoop原理"></a>Sqoop原理</h1><p>将导入或导出命令翻译成mapreduce程序来实现。</p><p>在翻译出的mapreduce中主要是对inputformat和outputformat进行定制。</p><h1 id="Sqoop安装"><a href="#Sqoop安装" class="headerlink" title="Sqoop安装"></a>Sqoop安装</h1><p>安装Sqoop的前提是已经具备Java和Hadoop的环境。</p><h2 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h2><p><a href="http://apache.mirrors.pair.com/sqoop/">http://apache.mirrors.pair.com/sqoop/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz -C /opt/module/</span></span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>Sqoop的配置文件与大多数大数据框架类似，在sqoop根目录下的conf目录中。</p><p><strong>重命名配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mv sqoop-env-template.sh sqoop-env.sh</span></span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><p><code>sqoop-env.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_COMMON_HOME=</span><br><span class="line">export HADOOP_MAPRED_HOME=</span><br><span class="line">export HIVE_HOME=</span><br><span class="line">export ZOOKEEPER_HOME=</span><br><span class="line">export ZOOCFGDIR=</span><br><span class="line">export HBASE_HOME=</span><br></pre></td></tr></table></figure><h2 id="拷贝JDBC驱动"><a href="#拷贝JDBC驱动" class="headerlink" title="拷贝JDBC驱动"></a>拷贝JDBC驱动</h2><p>拷贝jdbc驱动到sqoop的lib目录下，需要使用什么关系型数据库就要拷贝哪些数据库的连接驱动，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.27-bin.jar /opt/module/sqoop-1.4.6.bin__hadoop-2.0.4-alpha/lib/</span><br></pre></td></tr></table></figure><h2 id="验证Sqoop"><a href="#验证Sqoop" class="headerlink" title="验证Sqoop"></a>验证Sqoop</h2><p>我们可以通过某一个command来验证sqoop配置是否正确：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/sqoop <span class="built_in">help</span></span></span><br></pre></td></tr></table></figure><h2 id="测试Sqoop是否能够成功连接数据库"><a href="#测试Sqoop是否能够成功连接数据库" class="headerlink" title="测试Sqoop是否能够成功连接数据库"></a>测试Sqoop是否能够成功连接数据库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/sqoop list-databases --connect jdbc:mysql://hadoop203:3306/ --username root --password example</span></span><br></pre></td></tr></table></figure><h1 id="Sqoop使用案例🔺"><a href="#Sqoop使用案例🔺" class="headerlink" title="Sqoop使用案例🔺"></a>Sqoop使用案例🔺</h1><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><p>在Sqoop中，“导入”概念指：从非大数据集群（RDBMS）向大数据集群（HDFS，HIVE，HBASE）中传输数据，叫做：导入，即使用import关键字。</p><p>在我们的RDBMS中插入一些数据，假设是MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -pexample</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database company;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create table company.staff(id int(4) primary key not null auto_increment, name varchar(255), sex varchar(255));</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> insert into company.staff(name, sex) values(<span class="string">&#x27;Thomas&#x27;</span>, <span class="string">&#x27;Male&#x27;</span>);</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> insert into company.staff(name, sex) values(<span class="string">&#x27;Catalina&#x27;</span>, <span class="string">&#x27;FeMale&#x27;</span>);</span></span><br></pre></td></tr></table></figure><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><h4 id="表内容全部导入"><a href="#表内容全部导入" class="headerlink" title="表内容全部导入"></a>表内容全部导入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/sqoop import \</span></span><br><span class="line">--connect jdbc:mysql://hadoop203:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password example \</span><br><span class="line">--table staff \</span><br><span class="line">--target-dir /user/company \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot;</span><br></pre></td></tr></table></figure><p>上述参数的分别为：RDBMS地址、用户名、密码、表、上传至HDFS地址、如果有的话删除、启动一个Mapper、HDFS文件分隔符</p><p><strong>opt</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim opt/job_RDBMS2HDFS.opt</span></span><br><span class="line"></span><br><span class="line">import</span><br><span class="line">--connect</span><br><span class="line">jdbc:mysql://hadoop203:3306/company</span><br><span class="line">--username </span><br><span class="line">root</span><br><span class="line">--password</span><br><span class="line">example</span><br><span class="line">--table</span><br><span class="line">staff</span><br><span class="line">--target-dir</span><br><span class="line">/user/company</span><br><span class="line">--delete-target-dir</span><br><span class="line">--num-mappers</span><br><span class="line">1</span><br><span class="line">--fields-terminated-by</span><br><span class="line">&quot;\t&quot;</span><br></pre></td></tr></table></figure><h4 id="查询导入"><a href="#查询导入" class="headerlink" title="查询导入"></a><strong>查询导入</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/sqoop import \</span></span><br><span class="line">--connect jdbc:mysql://hadoop203:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password example \</span><br><span class="line">--target-dir /user/company \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot; \</span><br><span class="line">--query &#x27;select name,sex from staff where id &lt;=1 and $CONDITIONS;&#x27;</span><br></pre></td></tr></table></figure><p><strong>提示：must contain ‘$CONDITIONS’ in WHERE clause.</strong></p><h4 id="导入指定列"><a href="#导入指定列" class="headerlink" title="导入指定列"></a>导入指定列</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop import \</span><br><span class="line">--connect jdbc:mysql://hadoop203:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password example \</span><br><span class="line">--target-dir /user/company \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot; \</span><br><span class="line">--columns id,sex \</span><br><span class="line">--table staff</span><br></pre></td></tr></table></figure><p><strong>提示：columns中如果涉及到多列，用逗号分隔，分隔时不要添加空格</strong></p><h4 id="使用sqoop关键字筛选查询导入数据"><a href="#使用sqoop关键字筛选查询导入数据" class="headerlink" title="使用sqoop关键字筛选查询导入数据"></a><strong>使用sqoop关键字筛选查询导入数据</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/sqoop import \</span></span><br><span class="line">--connect jdbc:mysql://hadoop203:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password example \</span><br><span class="line">--target-dir /user/company \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot; \</span><br><span class="line">--table staff \</span><br><span class="line">--where &quot;id=1&quot;</span><br></pre></td></tr></table></figure><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/sqoop import \</span></span><br><span class="line">--connect jdbc:mysql://hadoop203:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password example \</span><br><span class="line">--table staff \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--hive-import \</span><br><span class="line">--fields-terminated-by &quot;\t&quot; \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-table staff_hive</span><br></pre></td></tr></table></figure><p>提示：该过程分为两步，第一步将数据导入到HDFS，第二步将导入到HDFS的数据迁移到Hive仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim opt/job_RDBMS2HIVE.opt</span></span><br><span class="line"></span><br><span class="line">import</span><br><span class="line">--connect</span><br><span class="line">jdbc:mysql://hadoop203:3306/company</span><br><span class="line">--username </span><br><span class="line">root</span><br><span class="line">--password</span><br><span class="line">example</span><br><span class="line">--table</span><br><span class="line">staff</span><br><span class="line">--hive-import</span><br><span class="line">--fields-terminated-by</span><br><span class="line">&quot;\t&quot;</span><br><span class="line">--hive-overwrite</span><br><span class="line">--hive-table</span><br><span class="line">staff_hive</span><br></pre></td></tr></table></figure><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/sqoop import \</span></span><br><span class="line">--connect jdbc:mysql://hadoop203:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password example \</span><br><span class="line">--table staff \</span><br><span class="line">--columns &quot;id,name,sex&quot; \</span><br><span class="line">--column-family &quot;info&quot; \</span><br><span class="line">--hbase-create-table \</span><br><span class="line">--hbase-row-key &quot;id&quot; \</span><br><span class="line">--hbase-table &quot;hbase_company&quot; \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--split-by id</span><br></pre></td></tr></table></figure><p>提示：sqoop不支持自动创建HBase1.x之后的表的功能</p><p><strong>首先要手动创建HBase表</strong></p><p>然后执行命令，最后查询数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">hbase&gt;</span><span class="bash"> create <span class="string">&#x27;hbase_company&#x27;</span>,<span class="string">&#x27;info&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行sqoop</span></span><br><span class="line"><span class="meta">hbase&gt;</span><span class="bash"> scan <span class="string">&#x27;hbase_company&#x27;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim opt/job_RDBMS2HBASE.opt</span></span><br><span class="line"></span><br><span class="line">import</span><br><span class="line">--connect</span><br><span class="line">jdbc:mysql://hadoop203:3306/company</span><br><span class="line">--username </span><br><span class="line">root</span><br><span class="line">--password</span><br><span class="line">example</span><br><span class="line">--table</span><br><span class="line">staff</span><br><span class="line">--columns</span><br><span class="line">&quot;id,name,sex&quot;</span><br><span class="line">--column-family</span><br><span class="line">&quot;info&quot;</span><br><span class="line">--hbase-create-table</span><br><span class="line">--hbase-row-key</span><br><span class="line">&quot;id&quot;</span><br><span class="line">--hbase-table</span><br><span class="line">&quot;hbase_company&quot;</span><br><span class="line">--num-mappers</span><br><span class="line">1</span><br><span class="line">--split-by</span><br><span class="line">id</span><br></pre></td></tr></table></figure><h2 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h2><p>在Sqoop中，“导出”概念指：从大数据集群（HDFS，HIVE，HBASE）向非大数据集群（RDBMS）中传输数据，叫做：导出，即使用export关键字。</p><h3 id="Hive-HBase-RDBMS"><a href="#Hive-HBase-RDBMS" class="headerlink" title="Hive/HBase-RDBMS"></a>Hive/HBase-RDBMS</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/sqoop <span class="built_in">export</span> \</span></span><br><span class="line">--connect jdbc:mysql://hadoop203:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password example \</span><br><span class="line">--table staff \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--export-dir /user/hive/warehouse/staff_hive \</span><br><span class="line">--input-fields-terminated-by &quot;\t&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：Mysql中如果表不存在，不会自动创建</strong></p><h1 id="脚本打包"><a href="#脚本打包" class="headerlink" title="脚本打包"></a>脚本打包</h1><p>在shell命令中敲打出多行，修改参数是很麻烦的事情。我们可以创建一个文件，文件中修改参数，然后交给Sqoop运行，这样方便</p><p>使用opt格式的文件打包sqoop命令，然后执行</p><p><strong>创建<code>.opt</code>文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir opt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch opt/job_HDFS2RDBMS.opt</span></span><br></pre></td></tr></table></figure><p><strong>编写sqoop脚本</strong></p><p>注意参数与参数值不是一行！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi opt/job_HDFS2RDBMS.opt</span></span><br><span class="line"></span><br><span class="line">export</span><br><span class="line">--connect</span><br><span class="line">jdbc:mysql://hadoop203:3306/company</span><br><span class="line">--username</span><br><span class="line">root</span><br><span class="line">--password</span><br><span class="line">example</span><br><span class="line">--table</span><br><span class="line">staff</span><br><span class="line">--num-mappers</span><br><span class="line">1</span><br><span class="line">--export-dir</span><br><span class="line">/user/hive/warehouse/staff_hive</span><br><span class="line">--input-fields-terminated-by</span><br><span class="line">&quot;\t&quot;</span><br></pre></td></tr></table></figure><p><strong>执行脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/sqoop --options-file opt/job_HDFS2RDBMS.opt</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase介绍</title>
      <link href="2020/07/08/Hbase%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/07/08/Hbase%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="HBase简介"><a href="#HBase简介" class="headerlink" title="HBase简介"></a>HBase简介</h1><h2 id="什么是HBase"><a href="#什么是HBase" class="headerlink" title="什么是HBase"></a>什么是HBase</h2><p>HBase的原型是Google的BigTable论文，受到了该论文思想的启发，目前作为Hadoop的子项目来开发维护，用于支持结构化的数据存储。</p><p><strong>HBase</strong>是一个<strong>高可靠性、高性能、面向列、可伸缩的分布式存储系统</strong>，利用HBASE技术可在廉价PC Server上搭建起大规模结构化存储集群。</p><ul><li>高可靠性：分布式有崩溃恢复，不是直接挂掉没有后续的</li><li>高性能：通过水平拆表、垂直拆表、动态列来提高性能</li><li>面向列：列式存储</li><li>可伸缩的：处理节点可动态增减</li></ul><hr><p>HBase是Google Bigtable的开源实现，但是也有很多不同之处。比如：Google Bigtable利用GFS作为其文件存储系统，HBase利用Hadoop HDFS作为其文件存储系统；Google运行MAPREDUCE来处理Bigtable中的海量数据，HBase同样利用Hadoop MapReduce来处理HBase中的海量数据；Google Bigtable利用Chubby作为协同服务，HBase利用Zookeeper作为对应。</p><h2 id="HBase特点"><a href="#HBase特点" class="headerlink" title="HBase特点"></a>HBase特点</h2><ol><li><p>海量存储</p><p>Hbase适合存储PB级别的海量数据，在PB级别的数据以及采用廉价PC存储的情况下，能在几十到百毫秒内返回数据。这与Hbase的极易扩展性息息相关。正式因为Hbase良好的扩展性，才为海量数据的存储提供了便利。</p></li><li><p><strong>列式存储</strong></p><p>这里的列式存储其实说的是<strong>列族(ColumnFamily)存储</strong>，Hbase是根据列族来存储数据的。列族下面可以有非常多的列，列族在创建表的时候就必须指定。</p></li><li><p><strong>极易扩展</strong></p><p>Hbase的扩展性主要体现在两个方面，一个是基于上层处理能力(RegionServer,处理节点)的扩展，一个是基于存储的扩展(HDFS)。<br> 通过横向添加RegionSever的机器，进行水平扩展，提升Hbase上层的处理能力，提升Hbsae服务更多Region的能力。</p></li><li><p><strong>高并发</strong></p><p>由于目前大部分使用Hbase的架构，都是采用的廉价PC，因此单个IO的延迟其实并不小，一般在几十到上百ms之间。这里说的高并发，主要是在并发的情况下，Hbase的单个IO延迟下降并不多。能获得高并发、低延迟的服务。</p></li><li><p><strong>稀疏</strong></p><p>稀疏主要是针对Hbase列的灵活性，在列族中，你可以指定任意多的列，在列数据为空的情况下，是<strong>不会占用存储空间的</strong>。</p></li></ol><h2 id="为什么提出HBase"><a href="#为什么提出HBase" class="headerlink" title="为什么提出HBase"></a>为什么提出HBase</h2><p><code>HBase</code>是面向列簇的<strong>分布式存储数据库</strong>。它不同于Kafka、Flume，它们是主要作用传输的，数据也只是临时存储，而<code>HBase</code>则是真正的存储数据。但它既然是存储数据库，那它有什么区别于关系型数据库(例：MySQL)和分布式文件系统HDFS呢？</p><hr><p><strong>HDFS</strong></p><p>HDFS存放文件<strong>杂乱无章，没有结构</strong>上传什么就存什么，无法快速高效的定位数据。所以它只适合做存储，而不是数据库。</p><p><strong>MySQL</strong></p><p>一句话，就限制了它与HBase的抗衡。MySQL<strong>存储数据有限</strong>，虽然有MySQL集群但是它的扩展性没有HBase好，不能做到成百上千的节点。而HBase的扩展性是基于HDFS的，HBase可以做到。</p><p>MySQL数据有限，它有两个引擎：<code>InnoDB</code>、<code>MyIsam</code></p><ul><li><code>InnoDB</code>：表空间(可认为是全表)最大64TB</li><li><code>MyIsam</code>：理论单表最大256TB</li></ul><p>但是这样也没有HBase存储的多，HBase是PB级别数据存储数据库。PB=1024TB</p><h3 id="MySQL优化🔺"><a href="#MySQL优化🔺" class="headerlink" title="MySQL优化🔺"></a>MySQL优化🔺</h3><p>优化，如果<strong>不考虑MySQL的存储数据量的因素</strong>，那么它对于大数据量的查询该怎么优化呢？</p><p>首先，指出MySQL的几个问题？宽表、高表、列添加等…</p><hr><p><strong>宽表</strong></p><p>如果一张表的列过多，会影响MySQL的查询速率，因为MySQL是行式存储数据库，<font color="pink">查询时会把每行数据全部拿出，在对比查询的列，舍去其他列</font>，这样速率慢。这样的表称为<code>宽表</code>。</p><p><strong>解决方法</strong></p><p><strong>垂直拆分数据库表，将多个列的数据库表拆分成多个列不多的数据库表。</strong>就是将一张表垂直切分成多块，并且要保证每块(切分后的表)之间的联系。这里举个例子，只为了展示垂直切分，没有什么实际意义：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-vertical_spilt_example.png" alt="HBase-vertical_spilt_example"></p><hr><p><strong>高表</strong></p><p>如果一张数据库表有太多的行，而我们正常写SQL查询时指定<code>where</code>条件，先不考虑索引，<font color='yellow'>它会全表扫描来匹配第一个条件，然后对第一个条件的结果进行全部扫描进行第二个条件的匹配，以此类推…。</font>这样也会降低查询效率。</p><p><strong>解决方法</strong></p><p>水平拆分数据库表，假设一个表有10w数据，将它水平截断为2张5w数据的表，2张表的列是一致的。它们公共组成之前表的全部数据。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-horizontally_spilt_example.png" alt="HBase-horizontally_spilt_example"></p><hr><p><strong>动态列问题</strong></p><p>一个已经有数据的表如果要增加一个新的列的话，在SQL中是很容易的直接<code>alert</code>就可以，但是在MySQL的实现中是费劲的。因为MySQL是行式存储数据库，它的表在磁盘中每一行都紧凑在一起，如果要添加新的一列，那么它需要定位到每一行的结尾来开辟一个列的位置。下面假设文件是这样存储的，然后以;分割，这里只是假设，只为展示：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-dy-colums.png" alt="HBase-dy-colums"></p><p><strong>这里需要找到每一行的结尾，添加新列，效率挺慢的；</strong></p><p>然后，<font color="yellow">这种添加列的行为是不能更改以前数据的新列，所以这个新列只对新数据有效</font>，新数据插入时指定。</p><p>总结：使用alert添加新列的缺点</p><ul><li>效率不高</li><li>影响数据结构，只对新数据有效</li></ul><p><strong>解决办法</strong></p><p>使用动态列，将某些不确定的列，在数据结构中只放一列，列中存储json，当想扩展列时，而此列又不是所有人都需要时，只需要修改需要修改的行的这一列中json的内容，不需要添加列。<font color="pink">这样添加列灵活，但是修改不方便。</font></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-dy-colums1.png" alt="HBase-dy-colums1"></p><hr><h4 id="同时优化上述三个问题"><a href="#同时优化上述三个问题" class="headerlink" title="同时优化上述三个问题"></a>同时优化上述三个问题</h4><ol><li>首先因为宽表，直接把表拆分为table1,talbe2</li><li>又因为列的扩展(添加列)，所以表中存数据时使用json存数据放在一列中，如果想增加列，直接修改json的属性</li><li>又因为高表，我们又需要将table1,table2分别水平分为table1-row1,table1-row2,table2-row1,table2-row2</li></ol><p><font color="yellow">但是，数据量更大时，还是慢。</font>我们可以通过增加缓存来加快查询。</p><p>插入数据时，我们也需要使用到cache直接返回结果，而由一些机制自动的把数据写入表中。我们查询刚插入的数据时，可以直接从cache中查询，这样很快。</p><p><font color="yellow">又因为我们使用了cache，就有宕机数据丢失的风险。</font>我们在写入cache时，还需要将数据预写数据到日志，那既然要预写到日志中和写到表中有什么区别吗？写入到表需要按照格式，样式按条插入，慢；写入到日志没有格式，结构直接将数据顺序写到日志(顺序写也不慢的)。这样，当节点挂掉，这个cache数据丢失的时候，会根据日志来恢复数据。</p><p><strong>最后优化为</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase_principle.png" alt="HBase_principle"></p><p><strong><font color="red">ps：这跟HBase的原理相似。</font></strong></p><h3 id="MySQL与HBase"><a href="#MySQL与HBase" class="headerlink" title="MySQL与HBase"></a>MySQL与HBase</h3><p>mysql行式存储数据库，每行放在一起；它注重于数据本身，查询数据直接显示数据。</p><p>HBase列式存储数据库，每列放在一起；它注重于数据统计、分析。</p><p>例如，如果对一列进行分析求和。</p><p>在MYSQL中需要通过取出所有的行(行式存储，列的存储不连续)，得到这一列求和</p><p>在HBase中直接找到这一列(列的存储是连续的)，取出全部，不需要取出其他字段，直接运算。</p><h1 id="HBase结构🔺"><a href="#HBase结构🔺" class="headerlink" title="HBase结构🔺"></a>HBase结构🔺</h1><p>其实上面所说的MySQL优化和HBase结构已经差不多了。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-jiagou.png" alt="HBase-jiagou"></p><ul><li>一个<code>HRegionServer</code>是一个HBase节点，<code>HRegionServer</code>可以包含多个<code>HRegion</code>，它实际上就是一个分区</li><li><code>HRegion</code>中可以包含多个<code>Store</code>，它是一个列簇<code>Colum Family</code>一个的，一一对应</li><li><strong><code>HRegion</code>中还包含一块<code>block cache</code>，是存放读数据的内容的，下次读相同的数据，可以查询这里，加快速率</strong></li><li>其中<code>Mem Store</code>是在<code>Sotre</code>中的，又称为写缓存。写入数据时会将写的数据缓存下来。</li><li><code>HFile</code>是要写入HDFS的形式</li><li><code>HLog</code>又称为<code>Write Ahead Log</code>，WAL预写日志；在写入数据时同时写入<code>HLog</code>、<code>Mem Store</code>才算写入成功；它是一个<code>HRegionServer</code>有一个</li><li><code>HLog</code>、<code>HFile</code>是写入到HDFS的文件</li></ul><hr><p><strong>存在位置</strong></p><ul><li>Hlog、Write Ahead Log存在一RegionServer中</li><li>block cache、写缓存在于Region</li><li>mem cache存在于store</li></ul><p>从图中可以看出Hbase是由Client、Zookeeper、Master、HRegionServer、HDFS等几个组件组成，下面来介绍一下几个组件的相关功能：</p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>Client包含了访问Hbase的接口，另外Client还维护了对应的cache来加速Hbase的访问，比如cache的<code>META</code>元数据的信息。</p><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a><strong>Zookeeper</strong></h2><p>HBase通过Zookeeper来做master的高可用、RegionServer的监控、元数据的入口以及集群配置的维护等工作。具体工作如下：</p><ol><li><p>通过Zoopkeeper来保证集群中只有1个master在运行，如果master异常，会通过竞争机制产生新的master提供服务</p></li><li><p>通过Zoopkeeper来监控RegionServer的状态，当RegionSevrer有异常的时候，通过回调的形式通知Master RegionServer上下线的信息</p></li><li><p>通过Zoopkeeper存储元数据的统一入口地址</p></li></ol><h2 id="HMaster"><a href="#HMaster" class="headerlink" title="HMaster"></a>HMaster</h2><p>master节点的主要职责如下：</p><ol><li>为RegionServer分配Region</li><li>维护整个集群的负载均衡</li><li>通过Zookeeper发布自己的位置给客户端</li><li>维护集群的元数据信息</li><li> 发现失效的Region，并将失效的Region分配到正常的RegionServer上</li><li> 处理RegionServer故障转移</li></ol><h2 id="HRegionServer"><a href="#HRegionServer" class="headerlink" title="HRegionServer"></a><strong>HRegionServer</strong></h2><p><font color="red"><strong>HregionServer直接对接用户的读写请求</strong></font>，是真正的“干活”的节点。它的功能概括如下：</p><ol><li>管理master为其分配的Region</li><li>负责存储HBase的实际数据</li><li>处理来自客户端的读写请求</li><li>负责和底层HDFS的交互，存储数据到HDFS</li><li>负责Region变大以后的拆分</li><li>负责<code>Storefile</code>的合并工作</li><li>维护Hlog</li></ol><h2 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h2><h3 id="Write-Ahead-logs"><a href="#Write-Ahead-logs" class="headerlink" title="Write-Ahead logs"></a>Write-Ahead logs</h3><p>又称为<code>HLog</code>，HBase的修改记录，当对HBase读写数据的时候，数据不是直接写进磁盘，它会在内存中保留一段时间（时间以及数据量阈值可以设定）。但把数据保存在内存中可能有更高的概率引起数据丢失，为了解决这个问题，数据会先写在一个叫做Write-Ahead logfile的文件中，然后再写入内存中。所以在系统出现故障的时候，数据可以通过这个日志文件重建。</p><p>它是一个<code>HRegionServer</code>有一个</p><h3 id="Region"><a href="#Region" class="headerlink" title="Region"></a>Region</h3><p>Hbase表的分片<strong>，HBase表会根据RowKey值被切分成不同的region存储在RegionServer中</strong>，在一个RegionServer中可以有多个不同的region。</p><p>既然是表的分片，所以表和region的关系是一对多。</p><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>一个Store对应HBase表中的一个列族(列簇， Column Family)。</p><h3 id="MemStore"><a href="#MemStore" class="headerlink" title="MemStore"></a>MemStore</h3><p>存在于每个<code>Store</code>中又称写内存，顾名思义，就是内存存储，位于内存中，用来保存当前的数据操作，所以当数据保存在WAL(HLog)中之后，RegsionServer会在内存中存储键值对。</p><h3 id="HFile"><a href="#HFile" class="headerlink" title="HFile"></a>HFile</h3><p>这是在磁盘上保存原始数据的实际的物理文件，是实际的存储文件。StoreFile是以Hfile的形式存储在HDFS的。</p><h1 id="HBase数据结构🔺"><a href="#HBase数据结构🔺" class="headerlink" title="HBase数据结构🔺"></a>HBase数据结构🔺</h1><h2 id="rowkey"><a href="#rowkey" class="headerlink" title="rowkey"></a>rowkey</h2><p>rowkey是一行数据的标记，如果一个表有多个列簇，每个列簇存在于不同的store中，rowkey就是关联不同列簇中的数据的关联关系，通过列簇能查询到这一条记录的所有列簇的值。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-rowkey.png" alt="HBase-rowkey"></p><p>与nosql数据库们一样,RowKey是用来检索记录的主键。访问HBASE table中的行，只有三种方式：</p><ol><li>通过单个RowKey访问(get)</li><li>通过RowKey的range（正则）(like)</li><li>全表扫描(scan)</li></ol><p>RowKey行键 (RowKey)可以是<strong>任意字符串</strong>(最大长度是64KB，实际应用中长度一般为 10-100bytes)，在HBASE内部，RowKey保存为字节数组。存储时，<strong>数据按照RowKey的字典序(byte order)排序存储</strong>。设计RowKey时，要充分排序存储这个特性，将经常一起读取的行存储放到一起。(位置相关性)</p><p><strong>rowkey存储为字节数组，因为它可以压缩且压缩比例达。</strong></p><h2 id="Colum-Family"><a href="#Colum-Family" class="headerlink" title="Colum Family"></a>Colum Family</h2><p>列族：HBASE表中的每个列，都归属于某个列族。列族是表的schema的一部 分(而列不是)，必须在使用表之前定义。列名都以列族作为前缀。例如 courses:history，courses:math都属于courses 这个列族。</p><h2 id="Cell"><a href="#Cell" class="headerlink" title="Cell"></a>Cell</h2><p>由{rowkey, column Family:columu, version} 唯一确定的单元。cell中的数据是没有类型的，全部是字节码形式存贮。</p><p>关键字：无类型、字节码</p><h2 id="Time-Stamp"><a href="#Time-Stamp" class="headerlink" title="Time Stamp"></a>Time Stamp</h2><p>HBASE 中通过rowkey和columns确定的为一个存贮单元称为cell。每个 cell都保存 着同一份数据的多个版本。版本通过时间戳来索引。时间戳的类型是 64位整型。时间戳可以由HBASE(在数据写入时自动 )赋值，此时时间戳是精确到毫秒 的当前系统时间。时间戳也可以由客户显式赋值。如果应用程序要避免数据版 本冲突，就必须自己生成具有唯一性的时间戳。每个 cell中，不同版本的数据按照时间倒序排序，即最新的数据排在最前面。</p><p>为了避免数据存在过多版本造成的的管理 (包括存贮和索引)负担，HBASE提供 了两种数据版本回收方式。一是保存数据的最后n个版本，二是保存最近一段 时间内的版本（比如最近七天）。用户可以针对每个列族进行设置。</p><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-namespace.png" alt="HBase-namespace"></p><ol><li><strong>Table</strong>：表，所有的表都是命名空间的成员，即表必属于某个命名空间，如果没有指定，则在default默认的命名空间中。</li><li><strong>RegionServer group</strong>：一个命名空间包含了默认的RegionServer Group。</li><li><strong>Permission</strong>：权限，命名空间能够让我们来定义访问控制列表ACL（Access Control List）。例如，创建表，读取表，删除，更新等等操作。</li><li><strong>Quota：</strong>限额，可以强制一个命名空间可包含的region的数量。</li></ol><h1 id="HBase原理🔺"><a href="#HBase原理🔺" class="headerlink" title="HBase原理🔺"></a>HBase原理🔺</h1><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-jiagou_my.png" alt="HBase-jiagou_my"></p><h2 id="读流程"><a href="#读流程" class="headerlink" title="读流程"></a>读流程</h2><p>client如果想读取数据例如<code>get &#39;student&#39;,&#39;1001&#39;</code>，因为HBase是分布式存储，每个地方存放的数据都不相同，如果想读数据，<strong>就先必须知道想要获取数据的Region在哪？</strong>其实在HBase中有一个内置的命名空间<code>hbase</code>这里面存放着一张<code>meta</code>的表，它存储者各个表的元数据，我们可以通过这张表得到我们要查询的表存储在的服务器、Region。<strong>所以如果我们想要获取数据的Region位置，就必须先知道<code>hbase</code>的<code>meta</code>表在哪，通过<code>meta</code>找到<code>student</code>的存储位置。</strong>因为Zookeeper协助管理着HBase集群，当然Zookeeper中也保存着meta表的存储位置，在Zookeeper中的<code>get /hbase/meta-region-server</code>中获取。<strong>当我们获取到<code>student</code>的位置后，就开始向该节点联系读取数据。</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-readfile1.png" alt="HBase-readfile1"></p><p><strong>首先，我们先梳理一下获取被读取数据的位置的流程</strong></p><ol><li>Client先访问zookeeper，获取到meta表所在的位置信息</li><li>查询上述返回的位置信息，连接到meta节点根据namespace、表名和rowkey在meta表中找到对应的region信息</li><li>获取到最终数据存放的RegionServer,Region后，再次连接这个RegionServer并且查找对应的region</li></ol><p><strong>这样就获取到了数据的位置。接下来是读取的流程：</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-readfile2.png" alt="HBase-readfile2"></p><ol><li>client连接到指定的RegionServer</li><li>连接到指定的region，最终数据就存在放这个region中(RegionServer有多个region)，RegionServer和region是在meta表中就获取到的</li><li>根据读取命令中的列簇，来找到对应的store(store与列簇一一对应)</li><li>先从MemStore找数据，如果没有，再到BlockCache里面读。MemStore是在store中的，BlockCache(读缓存，为了快速读)是在region中的</li><li>BlockCache还没有，再到StoreFile上读(为了读取的效率)；如果有返回数据</li><li><font color="red"><strong>如果是从StoreFile里面读取的数据，不是直接返回给客户端，而是先写入BlockCache，再返回给客户端。</strong></font></li></ol><h2 id="写流程"><a href="#写流程" class="headerlink" title="写流程"></a>写流程</h2><p>client如果想写数据，<strong>首先需要知道被写的表存在的Region</strong>，其实在HBase中有一个内置的命名空间<code>hbase</code>这里面存放着一张<code>meta</code>的表，它存储者各个表的元数据，我们可以通过这张表得到我们要查询的表存储在的服务器、Region。<strong>所以如果我们想要获取数据的Region位置，就必须先知道<code>hbase</code>的<code>meta</code>表在哪，通过<code>meta</code>找到<code>student</code>的Region。因为Zookeeper协助管理着HBase集群，当然Zookeeper中也保存着meta表的存储位置，在Zookeeper中的<code>get /hbase/meta-region-server</code>中获取。</strong>当我们获取到表存储的位置后，就开始向该节点联系读取数据</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-writefile.png" alt="HBase-writefile"></p><p><strong>首先，我们先梳理一下获取被写表的位置的流程</strong></p><ol><li>Client先访问zookeeper，获取到meta表所在的位置信息</li><li>查询上述返回的位置信息，连接到meta节点根据namespace、表名和rowkey在meta表中找到对应的region信息</li><li>获取到最终数据存放的RegionServer,Region后，再次连接这个RegionServer并且查找对应的region</li></ol><p><strong>写数据的流程</strong></p><ol><li>HregionServer将数据写到HLog（write ahead log）。为了数据的持久化和恢复；</li><li>HregionServer将数据写到内存（MemStore）</li><li>反馈Client写成功。</li></ol><p>如果写入内存失败，则写入失败，并且把HLog中数据删除</p><p><strong>然后</strong>，待MemStore数据满了(默认是128M，老版本是64M)之后，开始<a href="#%E6%95%B0%E6%8D%AEflush%E8%BF%87%E7%A8%8B">数据flush过程</a></p><h2 id="数据flush过程"><a href="#数据flush过程" class="headerlink" title="数据flush过程"></a>数据flush过程</h2><ol><li>当MemStore数据达到阈值（默认是128M，老版本是64M），将数据刷到硬盘(Store File)，将内存中的数据删除，同时删除HLog中的历史数据</li><li>并将数据存储到HDFS中；</li><li>在HLog中做标记点。</li></ol><h2 id="数据合并过程"><a href="#数据合并过程" class="headerlink" title="数据合并过程"></a>数据合并过程</h2><p>当遇到某些情况，比如因为硬件资源原因，mem store没有128M只有50M，所以每次写到磁盘的store file都不足128M，此时：</p><ol><li>当数据块达到3块，Hmaster触发合并操作，Region将数据块加载到本地，进行合并；</li><li>当合并的数据超过256M，进行拆分(Region切分2个Region)，将拆分后的Region分配给不同的HregionServer管理；</li><li>当HregionServer宕机后，将HregionServer上的hlog拆分，然后分配给不同的HregionServer加载，修改.META.</li><li>注意：HLog会同步到HDFS</li></ol><p><strong>compact的用途是什么，什么时候触发，分为哪两种，有什么区别。</strong></p><p>在HBase中，每当memstore的数据flush到磁盘后，就形成一个storefile，当storefile的数量越来越大时，会严重影响HBase的读性能 ，HBase内部的compact处理流程是为了解决MemStore Flush之后，文件数目太多，导致读数据性能大大下降的一种自我调节手段，它会将文件按照某种策略进行合并，大大提升HBase的数据读性能。</p><p><strong>作用</strong></p><ul><li>合并文件</li><li>清除删除、过期、多余版本的数据</li><li>提高读写数据的效率</li></ul><p><strong>HBase中实现了两种compaction的方式</strong>：minor and major</p><p><strong>这两种compaction方式的区别是</strong></p><ul><li>Minor操作只用来做部分文件的合并操作以及包括minVersion=0并且设置ttl的过期版本清理，不做任何删除数据、多版本数据的清理工作</li><li>Major操作是对Region下的HStore下的所有StoreFile执行合并操作，最终的结果是整理合并出一个文件。</li></ul><hr><p><font color="red"><strong>ps：由数据最后存储在HDFS可得知，HBase其实是一个管理工具，最后存储还是依靠于HDFS。</strong></font></p><p><font color="red"><strong>HBase中所有存储都是以字节存储的。。</strong></font></p><h1 id="HBase安装"><a href="#HBase安装" class="headerlink" title="HBase安装"></a>HBase安装</h1><p>HBase需要zookeeper，请先安装zookeeper、Java、Hadoop后再安装HBase</p><p><strong>HBase官网</strong></p><p><a href="https://hbase.apache.org/">https://hbase.apache.org/</a></p><p><strong>下载链接</strong></p><p><a href="https://archive.apache.org/dist/hbase/">https://archive.apache.org/dist/hbase/</a></p><h2 id="HBase配置文件"><a href="#HBase配置文件" class="headerlink" title="HBase配置文件"></a>HBase配置文件</h2><p><strong>下载后解压</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop201 ~]$ tar -zxf /opt/softwares/hbase-1.3.1-bin.tar.gz  -C /opt/modules/</span><br><span class="line">[hadoop@hadoop201 ~]$ cd /opt/modules/</span><br><span class="line">[hadoop@hadoop201 modules]$ mv hbase-1.3.1/ hbase/</span><br><span class="line">[hadoop@hadoop201 modules]$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><p><code>hbase-env.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br><span class="line"><span class="meta">#</span><span class="bash"> jdk8需要注释掉原有内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> HBASE_MASTER_OPTS=<span class="string">&quot;<span class="variable">$HBASE_MASTER_OPTS</span> -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> HBASE_REGIONSERVER_OPTS=<span class="string">&quot;<span class="variable">$HBASE_REGIONSERVER_OPTS</span> -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>hbase-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--HA--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--单节点--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;property&gt;     </span></span><br><span class="line"><span class="comment">        &lt;name&gt;hbase.rootdir&lt;/name&gt;     </span></span><br><span class="line"><span class="comment">        &lt;value&gt;hdfs://hadoop201:9000/hbase&lt;/value&gt;   </span></span><br><span class="line"><span class="comment">    &lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 0.98后的新变动，之前版本没有.port,默认端口为60000 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>16000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:2181,hadoop202:2181,hadoop203:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/modules/zookeeper-3.4.10/zkdata<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>regionservers</code>：添加RegionServer的节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop201</span><br><span class="line">hadoop203</span><br><span class="line">hadoop202</span><br></pre></td></tr></table></figure><p><strong>软连接hadoop配置文件到hbase</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop201 conf]$ ln -s /opt/modules/hadoop-2.7.2/etc/hadoop/core-site.xml /opt/modules/hbase/conf/core-site.xml</span><br><span class="line">[hadoop@hadoop201 conf]$ ln -s /opt/modules/hadoop-2.7.2/etc/hadoop/h</span><br><span class="line">hadoop-env.cmd              hadoop-metrics2.properties  hadoop-policy.xml           httpfs-env.sh               httpfs-signature.secret</span><br><span class="line">hadoop-env.sh               hadoop-metrics.properties   hdfs-site.xml               httpfs-log4j.properties     httpfs-site.xml</span><br><span class="line">[hadoop@hadoop201 conf]$ ln -s /opt/modules/hadoop-2.7.2/etc/hadoop/hdfs-site.xml /opt/modules/hbase/conf/hdfs-site.xml</span><br><span class="line">[hadoop@hadoop201 conf]$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分发到其他节点</strong></p><p><strong>启动服务器</strong></p><p><code>bin/start-hbase.sh</code></p><p><strong>访问</strong></p><p><a href="http://hadoop201:16010/">http://hadoop201:16010/</a></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">master.HMaster: Failed to become active master</span><br><span class="line">org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ipc.StandbyException): Operation category READ is not supported in state standby</span><br></pre></td></tr></table></figure><p>如果你是HDFS HA的话，<code>hbase-site.xml</code>中指定hdfs地址不应该上面那样写，如果这个节点恰好是standby就是上面的错误</p><p>你应该这样写，mycluster是你的集群名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>提示：如果集群之间的节点时间不同步，会导致regionserver无法启动，抛出ClockOutOfSyncException异常。</p><p>修复提示：同步时间服务</p><h1 id="HBase-Shell"><a href="#HBase-Shell" class="headerlink" title="HBase Shell"></a>HBase Shell</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><strong>shell</strong></p><p><code>bin/hbase shell</code>进入操作</p><p><strong>回退</strong></p><p>shell中回退不能删除，需要同时按上Ctrl键</p><p><strong>查看当前数据库中有哪些表</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):001:0&gt; list</span><br><span class="line">TABLE</span><br><span class="line">0 row(s) in 0.1620 seconds</span><br><span class="line"></span><br><span class="line">=&gt; []</span><br></pre></td></tr></table></figure><h2 id="表的操作🔺"><a href="#表的操作🔺" class="headerlink" title="表的操作🔺"></a>表的操作🔺</h2><p><strong>创建表</strong>：<code>create ‘&lt;table name&gt;’,’&lt;column family&gt;’ </code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#x27;student&#x27;,&#x27;basic&#x27;,&#x27;info&#x27;</span><br></pre></td></tr></table></figure><p><strong>创建表，指定命名空间</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#x27;zxj:student&#x27;,&#x27;basic&#x27;,&#x27;info&#x27;</span><br></pre></td></tr></table></figure><p><strong>查看表结构</strong>：<code>describe  &#39;table&#39;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe &#x27;student&#x27;</span><br></pre></td></tr></table></figure><p><strong>插入数据</strong>：<code>put ’&lt;table name&gt;’,’row1’,’&lt;colfamily:colname&gt;’,’&lt;value&gt;’</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put &#x27;student&#x27;,&#x27;1001&#x27;,&#x27;basic:name&#x27;,&#x27;zxj&#x27;</span><br></pre></td></tr></table></figure><p><strong>扫描数据</strong>：<code>scan &#39;table&#39;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):008:0&gt; scan &#x27;student&#x27;</span><br><span class="line">hbase(main):009:0&gt; scan &#x27;student&#x27;,&#123;STARTROW =&gt; &#x27;1001&#x27;, STOPROW  =&gt; &#x27;1001&#x27;&#125;</span><br><span class="line">hbase(main):010:0&gt; scan &#x27;student&#x27;,&#123;STARTROW =&gt; &#x27;1001&#x27;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>获取指定行/列数据</strong>：<code>get ’&lt;table name&gt;’,’row1’,&#39;cloum&#39; </code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hbase(main):016:0&gt; get &#x27;student&#x27;,&#x27;1001&#x27;</span><br><span class="line">COLUMN                               CELL</span><br><span class="line"> basic:name                          timestamp=1594212032713, value=zxj</span><br><span class="line"> info:qq                             timestamp=1594212148477, value=1044</span><br><span class="line">1 row(s) in 0.0100 seconds</span><br><span class="line"></span><br><span class="line">hbase(main):017:0&gt; get &#x27;student&#x27;,&#x27;1001&#x27;,&#x27;info:qq&#x27;</span><br><span class="line">COLUMN                               CELL</span><br><span class="line"> info:qq                             timestamp=1594212148477, value=1044</span><br><span class="line">1 row(s) in 0.0040 seconds</span><br><span class="line"></span><br><span class="line">hbase(main):018:0&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>更新表的指定字段，其实就是插入数据指令，一摸一样</strong>🔺</p><p>其实，不是覆盖。HBase同行同列可有多个版本，如果版本大于1，多个版本同时存在。如果版本只有1，最新的会替代之前的版本。</p><p><strong>统计行</strong>：<code>count &#39;table&#39;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count &#x27;student&#x27;</span><br></pre></td></tr></table></figure><p><strong>删除数据一行</strong>：<code>deleteall &#39;table&#39;,&#39;rowkey&#39;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deleteall &#x27;student&#x27;,&#x27;1001&#x27;</span><br></pre></td></tr></table></figure><p><strong>删除某rowkey的某一列数据</strong>：<code>delete &#39;table&#39;,&#39;rowkey&#39;,&#39;cloum&#39;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete &#x27;student&#x27;,&#x27;1001&#x27;,&#x27;info:qq&#x27;</span><br></pre></td></tr></table></figure><p><strong>清空表数据</strong>：<code>truncate &#39;table&#39;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate &#x27;student&#x27;</span><br></pre></td></tr></table></figure><p>ps：清空表的操作顺序为先disable，然后再truncate。</p><p><strong>删除表</strong></p><p>首先需要先让该表为disable状态：<code>disable &#39;student&#39;</code></p><p>然后才能drop这个表：<code>drop &#39;student&#39;</code></p><p>ps：如果直接drop表，会报错：ERROR: Table student is enabled. Disable it first.</p><p><strong>变更表信息</strong></p><p>将info列族中的数据存放3个版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter &#x27;student&#x27;,&#123;NAME=&gt;&#x27;info&#x27;,VERSIONS=&gt;3&#125;</span><br></pre></td></tr></table></figure><h2 id="命名空间-1"><a href="#命名空间-1" class="headerlink" title="命名空间"></a>命名空间</h2><p><strong>创建命名空间</strong></p><p><code>create_namespace &#39;name&#39; </code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):005:0&gt; create_namespace &#x27;zxj&#x27;</span><br><span class="line">0 row(s) in 0.8800 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="HBase程序"><a href="#HBase程序" class="headerlink" title="HBase程序"></a>HBase程序</h1><h2 id="HBase-API"><a href="#HBase-API" class="headerlink" title="HBase API"></a>HBase API</h2><h3 id="依赖pom"><a href="#依赖pom" class="headerlink" title="依赖pom"></a>依赖pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="操作类🔺"><a href="#操作类🔺" class="headerlink" title="操作类🔺"></a>操作类🔺</h3><p><strong>先提供整体的操作文件，然后单个说明：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ThreadLocal是为了避免某的线程关闭HBase连接，导致其他线程的连接被关闭</span></span><br><span class="line">    <span class="comment">// ThreadLocal将连接放入线程的私有区域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Connection&gt; connectionThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为调用此方法的线程创建单独连接，并存储在调用者线程的内部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = connectionThreadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建HBase连接，默认读取classpath下的hbase-site.xml文件来访问各种参数</span></span><br><span class="line">            <span class="comment">// 或者你可以手动指定，这里采用配置文件形式</span></span><br><span class="line">            <span class="comment">// 注意如果你hbase.rootdir写的不是ip:port而是集群名，还需要拉取hdfs-site.xml</span></span><br><span class="line">            connection = ConnectionFactory.createConnection(HBaseConfiguration.create());</span><br><span class="line">            <span class="comment">// 如果刚开始创建连接，连接肯定为空，手动创建，之后使用这个就可以</span></span><br><span class="line">            connectionThreadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断表是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true存在；false不存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tableExists</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Admin admin = getManagerObject();</span><br><span class="line">        TableName table = TableName.valueOf(tableName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b = admin.tableExists(table);</span><br><span class="line">        admin.close();</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName    表明</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ColumnFamily 列簇可变参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(String tableName, String... ColumnFamily)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Admin admin = getManagerObject();</span><br><span class="line">        TableName creatTable = TableName.valueOf(tableName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不存在则创建</span></span><br><span class="line">        <span class="keyword">if</span> (!admin.tableExists(creatTable)) &#123;</span><br><span class="line">            HTableDescriptor tableDescriptor = <span class="keyword">new</span> HTableDescriptor(creatTable);</span><br><span class="line">            <span class="keyword">for</span> (String s : ColumnFamily) &#123;</span><br><span class="line">                tableDescriptor.addFamily(<span class="keyword">new</span> HColumnDescriptor(s));</span><br><span class="line">            &#125;</span><br><span class="line">            admin.createTable(tableDescriptor);</span><br><span class="line">            admin.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Admin admin = getManagerObject();</span><br><span class="line">        TableName dropTable = TableName.valueOf(tableName);</span><br><span class="line">        <span class="comment">// 存在则删除</span></span><br><span class="line">        <span class="keyword">if</span> (admin.tableExists(dropTable)) &#123;</span><br><span class="line">            <span class="comment">// 删除需先禁用表</span></span><br><span class="line">            admin.disableTable(dropTable);</span><br><span class="line">            <span class="comment">// 删除表</span></span><br><span class="line">            admin.deleteTable(dropTable);</span><br><span class="line">            admin.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除表的多行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> table   表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKeys 被删除的所有行(可变参数)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteRowsTable</span><span class="params">(String table, String... rowKeys)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table queryObject = getQueryObject(table);</span><br><span class="line">        List&lt;Delete&gt; deletes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (tableExists(table)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String rowKey : rowKeys) &#123;</span><br><span class="line">                deletes.add(<span class="keyword">new</span> Delete(Bytes.toBytes(rowKey)));</span><br><span class="line">            &#125;</span><br><span class="line">            queryObject.delete(deletes);</span><br><span class="line">            queryObject.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除表的多行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> table   表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKeys 被删除的所有行(可变参数)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteRowsTable</span><span class="params">(String table, List&lt;String&gt; rowKeys)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table queryObject = getQueryObject(table);</span><br><span class="line">        List&lt;Delete&gt; deletes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (tableExists(table)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String rowKey : rowKeys) &#123;</span><br><span class="line">                deletes.add(<span class="keyword">new</span> Delete(Bytes.toBytes(rowKey)));</span><br><span class="line">            &#125;</span><br><span class="line">            queryObject.delete(deletes);</span><br><span class="line">            queryObject.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName    表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey       唯一键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnFamily 列簇</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columns      列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value        值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putData</span><span class="params">(String tableName, String rowKey, String columnFamily,</span></span></span><br><span class="line"><span class="function"><span class="params">                               String columns, String value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table table = getQueryObject(tableName);</span><br><span class="line">        <span class="comment">// Bytes.toBytes(rowKey)变为字节数组，使用自带方法进行UTF-8的编码，也可以自己编码。</span></span><br><span class="line">        <span class="comment">// 必须指定编码，否则相同的字符不同的编码会有不同的字节码</span></span><br><span class="line">        Put put = <span class="keyword">new</span> Put(Bytes.toBytes(rowKey));</span><br><span class="line">        put.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(columns), Bytes.toBytes(value));</span><br><span class="line">        table.put(put);</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取表中所有数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据，如果表不存在返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">scanAll</span><span class="params">(String name)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tableExists(name)) &#123;</span><br><span class="line">            Table table = getQueryObject(name);</span><br><span class="line">            ResultScanner scanner = table.getScanner(<span class="keyword">new</span> Scan());</span><br><span class="line">            table.close();</span><br><span class="line">            <span class="keyword">return</span> scanner;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据rowKey范围获取表中数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name     表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startRow 开始的行，字典顺序比较</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endRow   结束的行，字典顺序比较</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据，表不存在为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">scanRowRange</span><span class="params">(String name, String startRow, String endRow)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tableExists(name)) &#123;</span><br><span class="line">            Table table = getQueryObject(name);</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.setStartRow(Bytes.toBytes(startRow));</span><br><span class="line">            scan.setStopRow(Bytes.toBytes(endRow));</span><br><span class="line">            ResultScanner scanner = table.getScanner(scan);</span><br><span class="line">            table.close();</span><br><span class="line">            <span class="keyword">return</span> scanner;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据列簇来获取表中数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name   表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> family 列簇</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据，表不存在为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">scanByFamily</span><span class="params">(String name, String family)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tableExists(name)) &#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.addFamily(Bytes.toBytes(family));</span><br><span class="line">            Table queryObject = getQueryObject(name);</span><br><span class="line">            ResultScanner scanner = queryObject.getScanner(scan);</span><br><span class="line">            queryObject.close();</span><br><span class="line">            <span class="keyword">return</span> scanner;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据列来获取表中数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name   表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> family 列簇</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> column 列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据，表不存在为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">scanByColumn</span><span class="params">(String name, String family, String column)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tableExists(name)) &#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.addColumn(Bytes.toBytes(family), Bytes.toBytes(column));</span><br><span class="line">            Table queryObject = getQueryObject(name);</span><br><span class="line">            ResultScanner scanner = queryObject.getScanner(scan);</span><br><span class="line">            queryObject.close();</span><br><span class="line">            <span class="keyword">return</span> scanner;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询根据正则匹配到的rowKey的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> regex 正则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据，表不存在为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">scanByRowKeyReg</span><span class="params">(String name, String regex)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tableExists(name)) &#123;</span><br><span class="line">            <span class="comment">// 使用Filter过滤器，来对rowKey进行筛选</span></span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            <span class="comment">// Filter是一个抽象类，它有众多的实现类，而对rowKey进行筛选的是RowFilter</span></span><br><span class="line">            <span class="comment">// RowFilter的两个参数分别为过滤rowKey的比较符(=,&gt;=...)和比较器ByteArrayComparable</span></span><br><span class="line">            <span class="comment">// ByteArrayComparable又是一个抽象类，其中它的子类RegexStringComparator就是用来使用正则的</span></span><br><span class="line">            RowFilter rowFilter = <span class="keyword">new</span> RowFilter(CompareFilter.CompareOp.EQUAL,</span><br><span class="line">                    <span class="keyword">new</span> RegexStringComparator(regex));</span><br><span class="line">            <span class="comment">// scan条件中加入过滤器</span></span><br><span class="line">            scan.setFilter(rowFilter);</span><br><span class="line"></span><br><span class="line">            Table queryObject = getQueryObject(name);</span><br><span class="line">            ResultScanner scanner = queryObject.getScanner(scan);</span><br><span class="line">            queryObject.close();</span><br><span class="line">            <span class="keyword">return</span> scanner;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">scanByFilters</span><span class="params">(String name, String regex, String notHas)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tableExists(name)) &#123;</span><br><span class="line">            <span class="comment">// 使用多个Filter过滤器，来对rowKey进行筛选</span></span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            <span class="comment">// Filter是一个抽象类，它有众多的实现类，而对rowKey进行筛选的是RowFilter</span></span><br><span class="line">            <span class="comment">// RowFilter的两个参数分别为过滤rowKey的比较符(=,&gt;=...)和比较器ByteArrayComparable</span></span><br><span class="line">            <span class="comment">// ByteArrayComparable又是一个抽象类，其中它的子类RegexStringComparator就是用来使用正则的</span></span><br><span class="line">            RowFilter rowFilter = <span class="keyword">new</span> RowFilter(CompareFilter.CompareOp.EQUAL,</span><br><span class="line">                    <span class="keyword">new</span> RegexStringComparator(regex));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// BinaryComparator是ByteArrayComparable的子类，用于比较二进制</span></span><br><span class="line">            RowFilter rowFilter1 = <span class="keyword">new</span> RowFilter(CompareFilter.CompareOp.NOT_EQUAL,</span><br><span class="line">                    <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(notHas)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// FilterList.Operator.MUST_PASS_ALL==and</span></span><br><span class="line">            <span class="comment">// FilterList.Operator.MUST_PASS_ONE==or</span></span><br><span class="line">            FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL);</span><br><span class="line">            filterList.addFilter(rowFilter);</span><br><span class="line">            filterList.addFilter(rowFilter1);</span><br><span class="line">            <span class="comment">// scan条件中加入过滤器</span></span><br><span class="line">            scan.setFilter(filterList);</span><br><span class="line"></span><br><span class="line">            Table queryObject = getQueryObject(name);</span><br><span class="line">            ResultScanner scanner = queryObject.getScanner(scan);</span><br><span class="line">            queryObject.close();</span><br><span class="line">            <span class="keyword">return</span> scanner;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取指定rowKey的数据</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> name   表</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> rowKey 主键</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 数据，表不存在返回null</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">getByRowKey</span><span class="params">(String name, String rowKey)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tableExists(name)) &#123;</span><br><span class="line">            Table queryObject = getQueryObject(name);</span><br><span class="line">            Result result = queryObject.get(<span class="keyword">new</span> Get(Bytes.toBytes(rowKey)));</span><br><span class="line">            queryObject.close();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定rowKey的指定列簇的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name         表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey       键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnFamily 列簇</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据，表不存在返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">getByRowKeyAndFamily</span><span class="params">(String name, String rowKey,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              String columnFamily)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tableExists(name)) &#123;</span><br><span class="line">            Table table = getQueryObject(name);</span><br><span class="line">            Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line">            get.addFamily(Bytes.toBytes(columnFamily));</span><br><span class="line">            Result result = table.get(get);</span><br><span class="line">            table.close();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定rowKey的指定列簇的指定列的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name         表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey       键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnFamily 列簇</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> column       列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据，表不存在返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">getByRowKeyAndColumn</span><span class="params">(String name, String rowKey,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              String columnFamily, String column)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tableExists(name)) &#123;</span><br><span class="line">            Table table = getQueryObject(name);</span><br><span class="line">            Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line">            get.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(column));</span><br><span class="line">            Result result = table.get(get);</span><br><span class="line">            table.close();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从connectionThreadLocal中获取连接</span></span><br><span class="line"><span class="comment">     * 并从连接中获取管理数据库表的对象，只能进行DDL操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Admin DDL操作对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Admin <span class="title">getManagerObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = connectionThreadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> connection.getAdmin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从connectionThreadLocal中获取连接</span></span><br><span class="line"><span class="comment">     * 并从连接中获取查询数据库表的对象，只能进行DQL操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Admin DQL操作对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Table <span class="title">getQueryObject</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = connectionThreadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭调用者线程HBase的连接，不响应其他调用此类的线程，因为连接存在于别调用者内存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = connectionThreadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!connection.isClosed()) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">                <span class="comment">// 关闭线程的存储区域</span></span><br><span class="line">                connectionThreadLocal.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li><font color="red"><strong>使用<code>ThreadLocal</code>将与HBase的连接放入调用者线程的内存中，将线程间的HBase连接区分开来</strong>，操作线程存储。<strong>它解决了线程内部的数据共享问题</strong>，如果能保证每个线程内部存放在ThreadLocal中的对象不同，它可以避免线程安全问题。</font></li><li>HBase连接参数采用HBase的配置文件<code>HBase-site.xml</code>，如果<code>hbase.rootdir</code>写的不是ip:port而是hdfs集群名，还需要加入配置文件<code>hdfs-site.xml</code></li><li>管理对象admin用于表的增删(DDL)</li><li>表对象table用于查询，插入(DQL)</li><li><font color="yellow">其中包含使用<code>Filter</code>查询数据，这种方式比较灵活。但是效率不高。</font></li></ol><hr><p><strong>Scan Filter查询</strong></p><p>过滤器<code>Filter</code>是一个抽象类，不同内容的过滤使用的子类不同：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-rowkeyfilter.png" alt="HBase-rowkeyfilter"></p><p><code>RowFilter</code>的参数分别为：</p><ol><li>过滤rowKey的比较符(=,&gt;=…)</li><li>ByteArrayComparable，值的类型</li></ol><p>ByteArrayComparable又是一个抽象类，可用于不同值的比较：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-com.png" alt="HBase-com"></p><p>过滤器可以指定多个，可以通过放入<code>FilterList</code>，通过它的参数来指定逻辑：</p><ol><li>FilterList.Operator.MUST_PASS_ONE==or</li><li>FilterList.Operator.MUST_PASS_ALL==and</li></ol><h2 id="HBase集成MapReduce🔺"><a href="#HBase集成MapReduce🔺" class="headerlink" title="HBase集成MapReduce🔺"></a>HBase集成MapReduce🔺</h2><h3 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h3><p>mapReduce 默认是没有添加HBase的依赖包的，<strong>你可以通过添加HBase-site这个配置文件到hadoop配置目录下，但是这样要复制到整个集群</strong>；或者你可以编辑<strong>Hadoop的CLASSPATH，但这样又会使得你的Hadoop环境受到污染。而且需要重启Hadoop集群才能生效</strong>。<br>因此，最好的方法是让HBase自己添加自己的依赖包到Hadoop的CLASSPATH，然后再使用程序。</p><ol><li><p>设置好Hadoop和HBase的环境变量</p></li><li><p><code>bin/hbase mapredcp</code>，输出MapReduce与HBase集成时候需要的HBase依赖包</p></li><li><p>然后每次运行任务时，将HBase的依赖包告诉世界 (空格) 然后执行mapreduce程序；例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> HADOOP_CLASSPATH=`<span class="variable">$HBASE_HOME</span>/bin/hbase mapredcp` <span class="variable">$HADOOP_HOME</span>/bin/hadoop jar <span class="variable">$HBASE_HOME</span>/lib/hbase-server-1.2.0-cdh5.12.0.jar</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h3><p>使用HBase集成MapReduce开发MapReduce程序，和直接开发Map Reduce程序有些不同，也有些相似。</p><p><strong>编写步骤</strong></p><ol><li>首先HBase的MR程序也需要是Mapper、Reducer、Driver三部分。</li><li>编写Mapper时不是继承<code>Mapper</code>而是继承<code>TableMapper</code>，而<code>public abstract class TableMapper&lt;KEYOUT, VALUEOUT&gt; extends Mapper&lt;ImmutableBytesWritable, Result, KEYOUT, VALUEOUT&gt;</code>，可得知后者是前者的字类，并确定死了K-V，因为HBase集成MR，输入数据源肯定是HBase的表，输入MapTask被确定的Key、Value分别是rowKey和表中此行所有的值</li><li>编写Reduce时不是继承<code>Reducer</code>而是继承<code>TableReducer</code>，而<code>public abstract class TableReducer&lt;KEYIN, VALUEIN, KEYOUT&gt; extends Reducer&lt;KEYIN, VALUEIN, KEYOUT, Mutation&gt; </code>，可得知后者是前者的字类，并确定好了最后输出的Value，因为输出尽头是HBase，所以它固定了最后的Value(Mutation)，Mutation是一个抽象类它的子类Put可以存储每一行的信息，用于插入数据。</li><li>Mutation类型有很多子类，对应多种不同操作：<code>put</code>，<code>delete</code></li><li>设置Driver时，设置Map Task、Reducer Task时可以使用HBase工具来简化开发，只需要放入表名、kv、job即可。</li></ol><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p><strong>目标：将from表中的数据，通过MR迁入到to表中。</strong></p><p><strong>Mapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ImmutableBytesWritable是rowkey，Put将结果数据放入PUT</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper</span> <span class="keyword">extends</span> <span class="title">TableMapper</span>&lt;<span class="title">ImmutableBytesWritable</span>, <span class="title">Put</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ImmutableBytesWritable是rowKey</span></span><br><span class="line">    <span class="comment">// Result是这一行所有的结果值，columnFamily,column,value....</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(ImmutableBytesWritable key, Result value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        Put put = <span class="keyword">new</span> Put(key.get());</span><br><span class="line">        <span class="keyword">for</span> (Cell listCell : value.listCells()) &#123;</span><br><span class="line">            put.addColumn(CellUtil.cloneFamily(listCell), CellUtil.cloneQualifier(listCell),</span><br><span class="line">                    CellUtil.cloneValue(listCell));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后将rowkey-和这一行所有的数据输出给Reduce</span></span><br><span class="line">        context.write(key, put);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Reducer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型的意义分别为MapTask的Key、Value和最后输出的K。</span></span><br><span class="line"><span class="comment">// 最后输出的Value已经被定死，因为是HBase结合MR，所以输入输出全是HBase</span></span><br><span class="line"><span class="comment">// Value被确定为Mutation，它是PUT的父类，是能把数据放入表的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reducer</span> <span class="keyword">extends</span> <span class="title">TableReducer</span>&lt;<span class="title">ImmutableBytesWritable</span>, <span class="title">Put</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reducer将Map的数据分组，所以它的参数是MapTask的Key和可迭代的Value</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(ImmutableBytesWritable key, Iterable&lt;Put&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 因为要把每一条数据放入新的表中</span></span><br><span class="line">        <span class="comment">// 所以要遍历values，取得每一个PUT，每一个PUT就是一个rowKey对应的全部数据</span></span><br><span class="line">        <span class="keyword">for</span> (Put value : values) &#123;</span><br><span class="line">            context.write(NullWritable.get(), value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Driver</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataMigrationApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ToolRunner.run(<span class="keyword">new</span> DataMigrationTool(), args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataMigrationTool</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] strings)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException,</span></span><br><span class="line"><span class="function">            InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 初始化JOB对象</span></span><br><span class="line">        Job job = Job.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 设置Jar路径</span></span><br><span class="line">        job.setJarByClass(DataMigrationTool.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为使用HBase做为MR的输入输出，所以可以直接使用HBase的工具类</span></span><br><span class="line">        <span class="comment">// 来简化Map、Reduce的配置</span></span><br><span class="line">        <span class="comment">// 3. 设置MapTask</span></span><br><span class="line">        TableMapReduceUtil.initTableMapperJob(<span class="string">&quot;from&quot;</span>, <span class="keyword">new</span> Scan(), Mapper.class,</span><br><span class="line">                ImmutableBytesWritable.class, Put.class, job);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 设置ReduceTask</span></span><br><span class="line">        TableMapReduceUtil.initTableReducerJob(<span class="string">&quot;to&quot;</span>, Reducer.class, job);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. job执行</span></span><br><span class="line">        <span class="keyword">boolean</span> b = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> b ? JobStatus.State.SUCCEEDED.getValue() : JobStatus.State.FAILED.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConf</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试运行</strong></p><p><code>HADOOP_CLASSPATH=&#39;$HBASE_HOME/bin/hbase mapredcp&#39; yarn jar xxx.jar</code></p><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><p><strong>HDFS文件内容通过MR迁移到HBase表中</strong></p><p>与<a href="#%E6%A1%88%E4%BE%8B%E4%B8%80">案例一</a>相比，这次案例的输入是HDFS、输出是HBase。所以Mapper的设置不能使用util了，需要正常设置：<strong>输入文件路径、Mapper类、Mapper输出的k和v</strong>，并且Mapper类不能继承tablemapper了，需要正常的继承Mapper</p><p><strong>需要额外添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>被处理文件内容格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">123,zxj</span><br><span class="line">1234,ddd</span><br><span class="line">124,klj</span><br></pre></td></tr></table></figure><p><strong>Mapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFS2HBaseMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">ImmutableBytesWritable</span>, <span class="title">Put</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> ImmutableBytesWritable immutableBytesWritable = <span class="keyword">new</span> ImmutableBytesWritable();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 文件中数据：rowKey,name</span></span><br><span class="line">        String[] split = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        immutableBytesWritable.set(Bytes.toBytes(split[<span class="number">0</span>]));</span><br><span class="line">        Put put = <span class="keyword">new</span> Put(immutableBytesWritable.get());</span><br><span class="line">        put.addColumn(Bytes.toBytes(<span class="string">&quot;info&quot;</span>), Bytes.toBytes(<span class="string">&quot;name&quot;</span>), Bytes.toBytes(split[<span class="number">1</span>]));</span><br><span class="line">        context.write(immutableBytesWritable, put);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Reducer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFS2HBaseReducer</span> <span class="keyword">extends</span> <span class="title">TableReducer</span>&lt;<span class="title">ImmutableBytesWritable</span>, <span class="title">Put</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(ImmutableBytesWritable key, Iterable&lt;Put&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Put value : values) &#123;</span><br><span class="line">            context.write(NullWritable.get(), value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Driver</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSHBaseApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ToolRunner.run(<span class="keyword">new</span> HDFS2HBaseTool(), args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFS2HBaseTool</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// job</span></span><br><span class="line">        Job job = Job.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jar</span></span><br><span class="line">        job.setJarByClass(HDFS2HBaseTool.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mapper设置</span></span><br><span class="line">        job.setMapperClass(HDFS2HBaseMapper.class);</span><br><span class="line">        job.setMapOutputKeyClass(ImmutableBytesWritable.class);</span><br><span class="line">        job.setMapOutputValueClass(Put.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="string">&quot;E:\\input&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// reducer</span></span><br><span class="line">        TableMapReduceUtil.initTableReducerJob(<span class="string">&quot;to&quot;</span>, HDFS2HBaseReducer.class, job);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> b ? JobStatus.State.SUCCEEDED.getValue() : JobStatus.State.FAILED.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConf</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h3><p>将HBase的结果放入到Mysql</p><p>与案例二一样的思路，但是要单独的设置输出到Mysql，而MR默认没有，所以我们要自己定义<code>OutputFormat</code>ji将数据插入到MySQL</p><p>要单独的添加MySQL连接依赖(要根据自己MySQL服务端的版本来引用)s</p><p>输出到关系型数据库，<a href="/2020/07/14/Sqoop%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/" title="可使用Sqoop实现下面功能">可使用Sqoop实现下面功能</a>。下面只是个案例。</p><p>处理流程如下：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-mysql.png" alt="HBase-mysql"></p><p>列簇：info，列：name。数据结构。</p><p><strong>MR</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBase2MySqlMapper</span> <span class="keyword">extends</span> <span class="title">TableMapper</span>&lt;<span class="title">Text</span>, <span class="title">TransferBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(ImmutableBytesWritable key, Result value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Cell listCell : value.listCells()) &#123;</span><br><span class="line">            TransferBean transferBean = <span class="keyword">new</span> TransferBean();</span><br><span class="line">            transferBean.setCount(<span class="number">1</span>);</span><br><span class="line">            transferBean.setName(Bytes.toString(CellUtil.cloneValue(listCell)));</span><br><span class="line">            context.write(<span class="keyword">new</span> Text(transferBean.getName()), transferBean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBase2MySqlReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">TransferBean</span>, <span class="title">NullWritable</span>, <span class="title">TransferBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;TransferBean&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (TransferBean value : values) &#123;</span><br><span class="line">            count += value.getCount();</span><br><span class="line">        &#125;</span><br><span class="line">        TransferBean transferBean = <span class="keyword">new</span> TransferBean();</span><br><span class="line">        transferBean.setName(key.toString());</span><br><span class="line">        transferBean.setCount(count);</span><br><span class="line">        context.write(NullWritable.get(), transferBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBase2MySqlTool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ToolRunner.run(<span class="keyword">new</span> HBase2MySqlApplication(), args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBase2MySqlApplication</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Job instance = Job.getInstance();</span><br><span class="line"></span><br><span class="line">        TableMapReduceUtil.initTableMapperJob(<span class="string">&quot;student&quot;</span>, <span class="keyword">new</span> Scan(), HBase2MySqlMapper.class</span><br><span class="line">                , Text.class, TransferBean.class, instance);</span><br><span class="line"></span><br><span class="line">        instance.setReducerClass(HBase2MySqlReducer.class);</span><br><span class="line">        instance.setOutputKeyClass(NullWritable.class);</span><br><span class="line">        instance.setOutputValueClass(TransferBean.class);</span><br><span class="line"></span><br><span class="line">        instance.setOutputFormatClass(MySqlOutputFormat.class);</span><br><span class="line">        <span class="comment">// 5. job执行</span></span><br><span class="line">        <span class="keyword">boolean</span> b = instance.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> b ? JobStatus.State.SUCCEEDED.getValue() : JobStatus.State.FAILED.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConf</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferBean</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">TransferBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(Integer count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(TransferBean o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name.compareTo(o.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeUTF(name);</span><br><span class="line">        dataOutput.writeInt(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        name = dataInput.readUTF();</span><br><span class="line">        count = dataInput.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>OutputFormat</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlOutputFormat</span> <span class="keyword">extends</span> <span class="title">FileOutputFormat</span>&lt;<span class="title">NullWritable</span>, <span class="title">TransferBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RecordWriter&lt;NullWritable, TransferBean&gt; <span class="title">getRecordWriter</span><span class="params">(TaskAttemptContext taskAttemptContext)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySqlRecordWriter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlRecordWriter</span> <span class="keyword">extends</span> <span class="title">RecordWriter</span>&lt;<span class="title">NullWritable</span>, <span class="title">TransferBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(NullWritable nullWritable, TransferBean transferBean)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;insert into test(id,name,count) values (?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = JDBCUtils.getConnection();</span><br><span class="line">             PreparedStatement preparedStatement = connection.prepareStatement(sql);) &#123;</span><br><span class="line">            preparedStatement.setObject(<span class="number">1</span>, System.currentTimeMillis());</span><br><span class="line">            preparedStatement.setObject(<span class="number">2</span>, transferBean.getName());</span><br><span class="line">            preparedStatement.setObject(<span class="number">3</span>, transferBean.getCount());</span><br><span class="line">            preparedStatement.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(TaskAttemptContext taskAttemptContext)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>JDBC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER_CLASS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 加载属性文件并解析：</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 使用类的加载器的方式获取属性文件的输入流</span></span><br><span class="line">        InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            props.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数据库配置文件 jdbc.properties 读取失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DRIVER_CLASS = props.getProperty(<span class="string">&quot;DRIVER_CLASS&quot;</span>);</span><br><span class="line">        URL = props.getProperty(<span class="string">&quot;URL&quot;</span>);</span><br><span class="line">        USERNAME = props.getProperty(<span class="string">&quot;USERNAME&quot;</span>);</span><br><span class="line">        PASSWORD = props.getProperty(<span class="string">&quot;PASSWORD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册驱动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadDriver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVER_CLASS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;驱动类&quot;</span> + DRIVER_CLASS + <span class="string">&quot;加载失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立数据库连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Connection 数据库连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 得到当前线程上绑定的连接</span></span><br><span class="line">        Connection connection = threadLocal.get();</span><br><span class="line">        <span class="comment">// 如果有事务，返回当前事务的连接</span></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> connection;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有事务，创建新的链接</span></span><br><span class="line">        loadDriver(); <span class="comment">// 加载驱动</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startTransaction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = threadLocal.get(); <span class="comment">// 获取当前线程的事务连接</span></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">&quot;事务已开启，不能重复开启&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        loadDriver(); <span class="comment">// 加载驱动</span></span><br><span class="line">        connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>); <span class="comment">// 设置手动提交</span></span><br><span class="line">        threadLocal.set(connection); <span class="comment">// 把当前事务连接放到线程中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = threadLocal.get(); <span class="comment">// 获取当前线程的事务连接</span></span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">&quot;没有事务不能提交！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connection.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚事务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = threadLocal.get(); <span class="comment">// 获取当前线程的事务连接</span></span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">&quot;没有事务不能提交！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connection.rollback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != obj) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ResultSet) &#123;</span><br><span class="line">                ResultSet rs = (ResultSet) obj;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;释放结果集资源出错，&quot;</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Statement) &#123;</span><br><span class="line">                Statement stmt = (Statement) obj;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;释放 statement 资源出错，&quot;</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Connection) &#123;</span><br><span class="line">                Connection connection = threadLocal.get(); <span class="comment">// 获取当前线程的事务连接</span></span><br><span class="line">                Connection conn = (Connection) obj; <span class="comment">// 普通连接</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果是事务连接</span></span><br><span class="line">                    <span class="keyword">if</span> (connection == conn) &#123;</span><br><span class="line">                        threadLocal.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;释放连接资源出错，&quot;</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="HBase协处理器🔺"><a href="#HBase协处理器🔺" class="headerlink" title="HBase协处理器🔺"></a>HBase协处理器🔺</h1><p>上述说的<a href="#%E6%A1%88%E4%BE%8B%E4%B8%80">表数据迁移</a>，不怎么好？原因如下：</p><ol><li>表数据迁移，意思就是两个表数据要同步，如果同步之后原始表又新增数据了，迁移表该怎么做？</li><li>这时应该增量导入？但是也无从得知哪些是新的数据</li><li>应该全量导入？数据量更大，浪费</li></ol><p>ps：全量导入还是增量导入还是看需求，增量导入需要保证老数据没有被修改。</p><p><strong>那么该怎么设置一个同步的表呢？</strong></p><p>我们可以将迁移表和原始表进行插入动作绑定，当原始表插入数据时，我们也给迁移表插入。但是这个操作肯定不是我们手动操作，这样来插入两张表很麻烦。</p><p>这个问题在关系型数据库中有实现，它就是<code>trigger</code>触发器，它监听到原始表的操作，然后根据<code>trigger</code>的定义，来对其他表做出操作。</p><p>HBase也有相似的概念：<code>Coprocessor</code>协处理器，它能提供上面一样的功能</p><h2 id="协处理器的使用"><a href="#协处理器的使用" class="headerlink" title="协处理器的使用"></a>协处理器的使用</h2><p>基于我们提出的痛点，我们可以在新建原始表的时候指定协处理器，来完成对迁移表数据的更新。</p><p>协处理器要谨慎操作，如果逻辑错误会造成集群无法启动的问题。</p><p>步骤如下：</p><ol><li>创建协处理器类，继承<code>BaseRegionObserver</code></li><li>重写方法</li><li>实现逻辑</li><li>项目打包，依赖jar包就行(不包含第三方依赖)</li><li>上传至<code>$HBASE_HOME/lib</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseRegionObserver有很多方法可以重写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCoprocessor</span> <span class="keyword">extends</span> <span class="title">BaseRegionObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post是指源表执行完后执行</span></span><br><span class="line">    <span class="comment">// put指的是put操作(add,modify)</span></span><br><span class="line">    <span class="comment">// 最好不要写全局Coprocessor,这样任意一个表put数据后，都会触发此函数给to加数据，to加了数据后，又会触发这个函数，死循环</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postPut</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e, Put put, WALEdit edit, Durability durability)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table to = e.getEnvironment().getTable(TableName.valueOf(<span class="string">&quot;to&quot;</span>));</span><br><span class="line">        to.put(put);</span><br><span class="line">        to.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> tableDescriptor.addCoprocessor(<span class="string">&quot;top.awslzhang.hbase.mr.MyCoprocessor&quot;</span>);</span><br><span class="line"><span class="comment">// 创建表时，声明协处理器。</span></span><br></pre></td></tr></table></figure><h1 id="HBase集成Hive🔺"><a href="#HBase集成Hive🔺" class="headerlink" title="HBase集成Hive🔺"></a>HBase集成Hive🔺</h1><p>HBase 虽然可以存储数亿或数十亿行数据，但是对于数据分析来说，不太友好，<strong>只提供了简单的基于 Key 值的快速查询能力，没法进行大量的条件查询。</strong></p><p>不过，Hive 与 HBase 的整合可以实现我们的这个目标。不仅如此，还能通过 Hive 将数据批量地导入到 HBase 中。</p><p>Hive 与 HBase 整合的实现是利用两者本身对外的 API 接口互相通信来完成的，其具体工作交由 Hive 的 lib 目录中的 hive-hbase-handler-xxx.jar 工具类来实现对 HBase 数据的读取。</p><h2 id="HBase与Hive的对比"><a href="#HBase与Hive的对比" class="headerlink" title="HBase与Hive的对比"></a>HBase与Hive的对比</h2><p><strong>hive</strong></p><ul><li>数据仓库：Hive的本质其实就相当于将HDFS中已经存储的文件在Mysql中做了一个双射关系，以方便使用HQL去管理查询。</li><li>用于数据分析、清洗：Hive适用于离线的数据分析和清洗，延迟较高。</li><li>基于HDFS、MapReduce：Hive存储的数据依旧在DataNode上，编写的HQL语句终将是转换为MapReduce代码执行。</li></ul><p><strong>hbase</strong></p><ul><li>数据库：是一种面向列存储的非关系型数据库。</li><li> 用于存储结构化和非结构化的数据：适用于单表非关系型数据的存储，不适合做关联查询，类似JOIN等操作</li><li>基于HDFS：数据持久化存储的体现形式是Hfile，存放于DataNode中，被ResionServer以region的形式进行管理</li><li>延迟较低，接入在线业务使用：面对大量的企业数据，HBase可以直线单表大量数据的存储，同时提供了高效的数据访问速度。</li></ul><h2 id="版本冲突"><a href="#版本冲突" class="headerlink" title="版本冲突"></a>版本冲突</h2><p>当我们想整合hadoop，hbase，hive，zookeeper的时候，如果刚入门，可能认为这是比较简单的问题。但是当你自己真正想整合的时候，却会遇到很多的问题。1.hadoop与hbase哪些版本兼容？2.hadoop与hive哪些版本兼容？3.hbase与hive哪些版本兼容？4.hbase与zookeeper哪些版本兼容？所以当我们真正想做整合的时候，我们需要解决上面四个问题，有些同学，忽略上面问题，直接部署，导致产生各种问题。所以我们现在就要解决上面问题。第一个问题，hadoop与hbase哪些版本兼容。 这里的每一个问题，当然我们需要引用官网的内容。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-hiveversion.png" alt="HBase-hiveversion"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-hadoop.png" alt="HBase-hadoop"></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-hbase.png" alt="HBase-hbase"></p><h2 id="集成使用"><a href="#集成使用" class="headerlink" title="集成使用"></a>集成使用</h2><h3 id="hive的修改"><a href="#hive的修改" class="headerlink" title="hive的修改"></a>hive的修改</h3><p><strong>修改hive-site.xml配置文件，添加配置属性</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>server01:2181,server02:2181,server03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修改hive-env.sh文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_CLASSPATH=$HIVE_CLASSPATH:/hadoop/hbase/lib/*</span><br></pre></td></tr></table></figure><h3 id="hive绑定hbase"><a href="#hive绑定hbase" class="headerlink" title="hive绑定hbase"></a>hive绑定hbase</h3><p><strong>目标：</strong>建立Hive表，<strong>关联</strong>HBase表，插入数据到Hive表的同时能够影响HBase表。</p><p><strong>分步实现：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hive_hbase_emp_table(</span><br><span class="line">empno <span class="built_in">int</span>,</span><br><span class="line">ename <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">BY</span> <span class="string">&#x27;org.apache.hadoop.hive.hbase.HBaseStorageHandler&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (<span class="string">&quot;hbase.columns.mapping&quot;</span> = <span class="string">&quot;:key,info:ename&quot;</span>)</span><br><span class="line">TBLPROPERTIES (<span class="string">&quot;hbase.table.name&quot;</span> = <span class="string">&quot;hbase_emp_table&quot;</span>);</span><br></pre></td></tr></table></figure><p>提示：完成之后，可以分别进入Hive和HBase查看，都生成了对应的表</p><p><strong>2.在Hive中创建临时中间表，用于load文件中的数据</strong></p><p><font color="red"><strong>提示：不能将数据直接load进Hive所关联HBase的那张表中</strong></font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">empno <span class="built_in">int</span>,</span><br><span class="line">ename <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">hive&gt;</span><span class="bash"> load data <span class="built_in">local</span> inpath <span class="string">&#x27;/home/admin/softwares/data/emp.txt&#x27;</span> into table emp;</span></span><br></pre></td></tr></table></figure><p><strong>3.通过tmp插入数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">hive&gt;</span><span class="bash"> insert into table hive_hbase_emp_table select * from emp;</span></span><br></pre></td></tr></table></figure><p><strong>4.分别查看hbase和hive的数据</strong></p><hr><h3 id="hive分析hbase"><a href="#hive分析hbase" class="headerlink" title="hive分析hbase"></a>hive分析hbase</h3><p><strong>hbase该表必须存在，否则报错(内部表不必在hbase中先创建)</strong></p><p><strong>1. 在Hive中创建外部表</strong></p><p>为什么是外部表，因为此时两张表绑定了，如果是普通表hive删除hbase也没了。所以使用外部表的特性，来避免一些误删。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> relevance_hbase_emp(</span><br><span class="line">empno <span class="built_in">int</span>,</span><br><span class="line">ename <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">BY</span> </span><br><span class="line"><span class="string">&#x27;org.apache.hadoop.hive.hbase.HBaseStorageHandler&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (<span class="string">&quot;hbase.columns.mapping&quot;</span> = </span><br><span class="line"><span class="string">&quot;:key,info:ename&quot;</span>) </span><br><span class="line">TBLPROPERTIES (<span class="string">&quot;hbase.table.name&quot;</span> = <span class="string">&quot;hbase_emp_table&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2. 关联后就可以使用Hive函数进行一些分析操作了</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select * from relevance_hbase_emp;</span><br></pre></td></tr></table></figure><h1 id="HBase优化"><a href="#HBase优化" class="headerlink" title="HBase优化"></a>HBase优化</h1><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>在HBase中Hmaster负责监控RegionServer的生命周期，均衡RegionServer的负载。<strong>如果Hmaster挂掉了，那么整个HBase集群将陷入不健康的状态，并且此时的工作状态并不会维持太久。</strong>所以HBase支持对Hmaster的高可用配置。</p><p>陷入不健康的状态之后一些操作还可以正常运行，例如：<code>scan</code>、<code>put</code>，因为这些命令一般不需要HMaster参与，除非Region过大拆分时，需要HMaster参与。</p><p>持对Hmaster的高可用配置。就是设置多个HMaster节点，待Avtice挂了后，后面的补上。</p><p><strong>操作步骤</strong></p><ol><li>关闭Hbase集群</li><li>在conf目录下创建<code>backup-masters</code>文件</li><li>在<code>backup-masters</code>文件中配置高可用HMaster节点</li><li>分发到其他节点</li><li>开启HBase集群</li></ol><h2 id="预分区🔺"><a href="#预分区🔺" class="headerlink" title="预分区🔺"></a>预分区🔺</h2><p><strong>提出</strong></p><p>当创建一个表的时候默认会把表的数据全部存储在一个region中，这个region存储rowkey的范围是负无穷到正无穷。当不断的向这个region中存储数据达到一定地步时(第一次默认256M)，会将这个region根据当前数据计算出middle key切分成2个region，这2个region分别存储负无穷-middle key和middle key-正无穷的数据。</p><p>这样当数据撑满时在切分性能不好。我们可以在新建表的时候就对数据进行分析，来决定它占用多少个Region(分区)</p><hr><p>每一个region维护着startRow与endRowKey，如果加入的数据符合某个region维护的rowKey范围，则该数据交给这个region维护。那么依照这个原则，我们可以将数据所要投放的分区提前大致的规划好，以提高HBase性能。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/HBase-partiton.png" alt="HBase-partiton"></p><h3 id="指定分区"><a href="#指定分区" class="headerlink" title="指定分区"></a>指定分区</h3><p>指定分区不需要直接直接分区的个数，只需要指出分区键(以哪些rowkey分区)，例如上图中bcd就是分区键，它将rowkey范围划分成了两段。</p><p><strong>shell</strong></p><p>例如，使用以下命令来手动设定预分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#x27;staff1&#x27;,&#x27;info&#x27;,&#x27;partition1&#x27;,SPLITS =&gt; [&#x27;1000&#x27;,&#x27;2000&#x27;,&#x27;3000&#x27;,&#x27;4000&#x27;]</span><br></pre></td></tr></table></figure><p>通过分区键：1000、2000、3000、4000创建了5个region，他们的region范围分别为：</p><p>。。。</p><p><strong>按照文件中设置的规则预分区</strong></p><p>创建splits.txt文件内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aaaa</span><br><span class="line">bbbb</span><br><span class="line">cccc</span><br><span class="line">dddd</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#x27;staff3&#x27;,&#x27;partition3&#x27;,SPLITS_FILE =&gt; &#x27;splits.txt&#x27;</span><br></pre></td></tr></table></figure><p>即可，如果文件中不是有序的，程序会自动排序然后分区的</p><p><strong>使用API创建预分区</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义算法，产生一系列Hash散列值存储在二维数组中</span></span><br><span class="line"><span class="keyword">byte</span>[][] splitKeys = 某个散列值函数</span><br><span class="line"><span class="comment">//创建HBaseAdmin实例</span></span><br><span class="line">HBaseAdmin hAdmin = <span class="keyword">new</span> HBaseAdmin(HBaseConfiguration.create());</span><br><span class="line"><span class="comment">//创建HTableDescriptor实例</span></span><br><span class="line">HTableDescriptor tableDesc = <span class="keyword">new</span> HTableDescriptor(tableName);</span><br><span class="line"><span class="comment">//通过HTableDescriptor实例和散列值二维数组创建带有预分区的HBase表</span></span><br><span class="line">hAdmin.createTable(tableDesc, splitKeys);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分区案例"><a href="#分区案例" class="headerlink" title="分区案例"></a>分区案例</h3><p>分区键的预分区中每个分区存储的rowkey范围要和rowkey的设计要对应的。假如，我们想分三个区：0，1，2。<font color="red">然后将大量的rowkey打散后均匀的放入到这三个分区之中，0开头的rowkey要放入0分区，其余的也是如此。</font></p><p><strong>分区</strong></p><p>首先，我们应该先开始建表，创建预分区。此时应该想分区键应该如何设置，因为最终想要三个分区，所以我们需要两个分区键。乍一想我们可以用0,1作为分区键。</p><p>但是这样形成的分区分别分：负无穷-0，0-1，1-正无穷。可得知0开头的rowkey是放入不到0分区的，因为我们rowkey是通过字典顺序来进行匹配的，这时候我们在分区键012后面加上一个很大的ascii 码<code>|</code>表示的字符就可以满足0开头的rowkey放入0分区(需保证0开头的rowkey的第二个字符小于<code>|</code>)。</p><p>所以最终决定我们的分区键分别为：0|、1|、2|。</p><p><strong>rowkey设计</strong></p><p>因为要把rowkey加上0或1或2的前缀，又要保证rowkey的数据均匀的分布在三个分区之中，所以我们要根据rowkey本身的值来确定它的前缀(属于哪个分区)。</p><p>这就是分区策略。</p><p>分区策略有很多地方可以参考：<code>Kafka</code>的生产者分区策略、HashMap的数据存放。</p><ul><li>Kafka的topic分区是可以手动设置个数的</li><li>HashMap的容量是固定死的，开始16。然后每次扩容为之前的两倍。<strong>2的n次方</strong></li></ul><p>我们可以同时参考下面的分区方式。当分区数为2的n次方时，采用按位与；不是时，采用取余数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">genRowKeyNum</span><span class="params">(String rowKey, <span class="keyword">int</span> regionNum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashCode = rowKey.hashCode();</span><br><span class="line">    <span class="keyword">int</span> region;</span><br><span class="line">    <span class="keyword">if</span> (regionNum &gt; <span class="number">0</span> &amp;&amp; (regionNum &amp; (regionNum - <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        region = hashCode &amp; (regionNum - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        region = hashCode % regionNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> region + <span class="string">&quot;_&quot;</span> + rowKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashMapd的分区策略"><a href="#HashMapd的分区策略" class="headerlink" title="HashMapd的分区策略"></a>HashMapd的分区策略</h4><p>当初始化一个HashMap时，默认容量是16。众所周知，HashMap的本质就是数据+链表/红黑树。向其中添加数据时，数据添加到数组的哪一个位置。这就是一个分区问题。</p><p>HashMap是使用hash算法+位运算来实现的。通过Hash算法将值算出一个唯一的码，然后将这个码和（容量-1）来进行位运算，得出的结果肯定是0-15之间的一个数据，这样分区就完成了。</p><p>位运算的计算</p><p>因为15的二进制为<code>00001111</code>，这样如果一个其他数据和15按位与，<strong>只有最低四位有可能不为0</strong>，所以最后的答案肯定是0-15之间</p><p>如果不是15是其他的数子，例如10：<code>0001010</code>这样只有2，4位的数字有可能不为0，这样最后的结果只有4个答案。这样不行，太浪费位置了，假如有10的容量，最后只能用到4个格子。</p><p>所以如果使用按位与来计算分区的话，容量-1必须是最后几位是连续的1，这就导致它的十进制必须是2的n次方。<font color="red">所以为什么HashMap的容量必须是2的n次方，因为它用按位与来计算分区。同时位运算比较快。</font></p><hr><p><strong>同时记录一下如何判断一个数是不是2的n次方？</strong></p><p>思路一：</p><p>递归除以2，最终结果为1。效率太低</p><p>思路二：</p><p>将值打成二进制，查看有几个1位</p><p>思路三：推荐</p><p>2的n次方的所有值的二进制的特点<code>...000100...</code></p><p>而2的n次方-1的值的二进制特点<code>....00000111111...</code></p><p>如果两者按位与，答案肯定是0。所以这就是判断方法。</p><h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><p>分区原则：</p><ol><li>指明 partition 的情况下，直接将指明的值直接作为 partiton 值</li><li>没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值；</li><li>既没有 partition 值又没有 key 值的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与 topic 可用的 partition 总数取余得到 partition 值，**也就是常说的 round-robin 算法(轮询)**。</li></ol><p>由此得知，因为Kafka的分区数是手动指定的，不是2的n次方，所以不能使用位运算。所以它使用的是取余数。</p><h2 id="RowKey设计🔺"><a href="#RowKey设计🔺" class="headerlink" title="RowKey设计🔺"></a>RowKey设计🔺</h2><p>一条数据的唯一标识就是rowkey，那么这条数据存储于哪个分区，取决于rowkey处于哪个一个预分区的区间内，<strong>设计rowkey的主要目的 ，就是让数据均匀的分布于所有的region中</strong>，<strong>在一定程度上防止数据倾斜</strong>。接下来我们就谈一谈rowkey常用的设计方案。</p><p><strong>Rowkey设计时需要遵循三大原则</strong></p><h3 id="唯一性"><a href="#唯一性" class="headerlink" title="唯一性"></a>唯一性</h3><p>rowkey在设计上保证其唯一性。rowkey是按照字典顺序排序存储的，因此，设计rowkey的时候，要充分利用这个排序的特点，<strong>将经常读取的数据存储到一块，将最近可能会被访问的数据放到一块。</strong></p><p>这时就要看业务了，有时需要<strong>将经常读取的数据存储到一块，将最近可能会被访问的数据放到一块。</strong>；有时需要<strong>让数据均匀的分布于所有的region中</strong>，<strong>在一定程度上防止数据倾斜</strong></p><h3 id="长度原则"><a href="#长度原则" class="headerlink" title="长度原则"></a>长度原则</h3><p>rowkey是一个二进制码流，可以是任意字符串，最大长度 64kb ，实际应用中一般为10-100bytes，以byte[] 形式保存，一般设计成定长。<strong>建议越短越好，不要超过16个字节</strong>，原因如下：数据的持久化文件HFile中是按照KeyValue存储的，如果rowkey过长，比如超过100字节，1000w行数据，光rowkey就要占用100*1000w=10亿个字节，将近1G数据，这样会极大影响HFile的存储效率；MemStore将缓存部分数据到内存，如果rowkey字段过长，内存的有效利用率就会降低，系统不能缓存更多的数据，这样会降低检索效率。</p><h3 id="散列原则"><a href="#散列原则" class="headerlink" title="散列原则"></a>散列原则</h3><p>如果rowkey按照时间戳的方式递增，不要将时间放在二进制码的前面，建议将rowkey的高位作为散列字段，由程序随机生成，低位放时间字段，这样将提高数据均衡分布在每个RegionServer，以实现负载均衡的几率。如果没有散列字段，首字段直接是时间信息，所有的数据都会集中在一个RegionServer上，这样在数据检索的时候负载会集中在个别的RegionServer上，造成热点问题，会降低查询效率</p><p>可以使用的方式有：加盐、哈希、时间戳反转</p><h2 id="基础优化"><a href="#基础优化" class="headerlink" title="基础优化"></a>基础优化</h2><p><strong>允许在HDFS的文件中追加内容</strong></p><p>hdfs-site.xml、hbase-site.xml</p><p>属性：dfs.support.append</p><p>解释：开启HDFS追加同步，可以优秀的配合HBase的数据同步和持久化。默认值为true。</p><p><strong>优化DataNode允许的最大文件打开数</strong></p><p>hdfs-site.xml</p><p>属性：dfs.datanode.max.transfer.threads</p><p>解释：HBase一般都会同一时间操作大量的文件，根据集群的数量和规模以及数据动作，设置为4096或者更高。默认值：4096</p><p><strong>优化延迟高的数据操作的等待时间</strong></p><p>hdfs-site.xml</p><p>属性：dfs.image.transfer.timeout  解释：如果对于某一次数据操作来讲，延迟非常高，socket需要等待更长的时间，建议把该值设置为更大的值（默认60000毫秒），以确保socket不会被timeout掉。  </p><p><strong>优化数据的写入效率</strong></p><p>mapred-site.xml</p><p> 属性：  mapreduce.map.output.compress  mapreduce.map.output.compress.codec  解释：开启这两个数据可以大大提高文件的写入效率，减少写入时间。第一个属性值修改为true，第二个属性值修改为：org.apache.hadoop.io.compress.GzipCodec或者其他压缩方式。  </p><p><strong>设置RPC监听数量</strong></p><p>hbase-site.xml</p><p>属性：hbase.regionserver.handler.count  解释：默认值为30，用于指定RPC监听的数量，可以根据客户端的请求数进行调整，读写请求较多时，增加此值。  </p><p><strong>优化HStore文件大小</strong></p><p>hbase-site.xml</p><p>属性：hbase.hregion.max.filesize  解释：默认值10737418240（10GB），如果需要运行HBase的MR任务，可以减小此值，因为一个region对应一个map任务，如果单个region过大，会导致map任务执行时间过长。该值的意思就是，如果HFile的大小达到这个数值，则这个region会被切分为两个Hfile。  </p><p><strong>指定scan.next扫描HBase所获取的行数</strong></p><p>hbase-site.xml</p><p>属性：hbase.client.scanner.caching  解释：用于指定scan.next方法获取的默认行数，值越大，消耗内存越大。  </p><p><strong>flush、compact、split机制🔺</strong></p><p>当MemStore达到阈值，将Memstore中的数据Flush进Storefile；compact机制则是把flush出来的小文件合并成大的Storefile文件。split则是当Region达到阈值，会把过大的Region一分为二。</p><p><strong>涉及属性：</strong></p><p>即：128M就是Memstore的默认阈值</p><p><code>hbase.hregion.memstore.flush.size：134217728  </code></p><p>即：这个参数的作用是当单个HRegion内所有的Memstore大小总和超过指定值时，flush该HRegion的所有memstore。RegionServer的flush是通过将请求添加一个队列，模拟生产消费模型来异步处理的。那这里就有一个问题，当队列来不及消费，产生大量积压请求时，可能会导致内存陡增，最坏的情况是触发OOM。</p><p> <code>hbase.regionserver.global.memstore.upperLimit：0.4  hbase.regionserver.global.memstore.lowerLimit：0.38 </code></p><p>即：当MemStore使用内存<strong>总量达到</strong>hbase.regionserver.global.memstore.upperLimit指定值时，将会有多个MemStores flush到文件中，MemStore flush 顺序是按照大小降序执行的，直到刷新到MemStore使用内存略小于lowerLimit</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>Hbase,hive和redis的区别</strong></p><p>Hive基于MR程序，将HQL转换为MR执行。效率比较低，不适合实时数据访问</p><p>Hbase基于Hadoop数据存储，存储海量数据，而且拥有自己的查询操作应用场景</p><p>Redis是一个基于内存的缓存数据库</p><p><strong>scan和get功能以及实现的异同</strong></p><p>都是查询数据，一个扫描所有RowKey(指定条件)、一个单独找一个rowKey</p><hr><p><a href="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/word/HBase-word.docx">HBase-word</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka详解</title>
      <link href="2020/07/05/Kafka%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/07/05/Kafka%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka概述"><a href="#Kafka概述" class="headerlink" title="Kafka概述"></a>Kafka概述</h1><h2 id="Kafka定义"><a href="#Kafka定义" class="headerlink" title="Kafka定义"></a>Kafka定义</h2><p>Kafka是一个分布式的基于<strong>发布/订阅模式</strong>的<strong>消息队列(MQ)，</strong>主要应用于大数据实时处理领域。</p><h2 id="MQ消息队列"><a href="#MQ消息队列" class="headerlink" title="MQ消息队列"></a>MQ消息队列</h2><a href="/2020/02/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97MQ/" title="什么是消息队列MQ，请查看！">什么是消息队列MQ，请查看！</a><h3 id="消息队列的场景"><a href="#消息队列的场景" class="headerlink" title="消息队列的场景"></a>消息队列的场景</h3><h4 id="传统消息队列应用场景"><a href="#传统消息队列应用场景" class="headerlink" title="传统消息队列应用场景"></a>传统消息队列应用场景</h4><p><strong>线程/系统间通信</strong></p><p><img src="https://i.loli.net/2020/07/05/edx1rCHBa6Kivq8.png" alt="image-20200705140538047"></p><p><strong>秒杀系统的消峰</strong></p><p>例如：秒杀500个商品，此时进来5w的请求。5w请求按顺序通过MQ，我们取MQ的前500达成交易。</p><p><strong>系统间解耦</strong></p><h4 id="大数据消息队列应用场景"><a href="#大数据消息队列应用场景" class="headerlink" title="大数据消息队列应用场景"></a>大数据消息队列应用场景</h4><p><strong>日志的实时处理</strong></p><p>结合Flume推送日志到Kafka，再到应用处理。此时MQ起到了缓冲作用。</p><p><img src="https://i.loli.net/2020/07/05/K8n4WY6iwhEfMZJ.png" alt="image-20200705141037287"></p><hr><h2 id="Kafka基础架构"><a href="#Kafka基础架构" class="headerlink" title="Kafka基础架构"></a>Kafka基础架构</h2><p>包含broker的MQ包括三部分：<code>Product</code>、<code>Topic</code>、<code>Customer</code>。</p><p><code>Product</code>与<code>Customer</code>都是基于<code>Topic</code>来实现交流的。</p><p><img src="https://i.loli.net/2020/07/05/n1YQeM7TE3i4PfH.png" alt="image-20200705142530232"></p><p><strong>1. 为了方便扩展，提高吞吐量，将一个topic分为多个partition(为了并发读取)</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-07-19_11-30-36.png" alt="Snipaste_2020-07-19_11-30-36"></p><p>然而，这样customer读取topic的数据还是没有优化到，还是同步读取，一个读完一个读。</p><p><strong>2. 配合分区的设计，提出消费者组的概念，组内每个消费者进行并行消费</strong></p><p><img src="https://i.loli.net/2020/07/05/uTQD5t9HwgBiRxq.png" alt="image-20200705142743666"></p><p>这样把上面的一个customer变为一个消费者组，组内包含多个custom，每个customer读取一个分区的数据，这样一个消费者组就读取到了整个topic的数据了，实现了并行读取，提高了吞吐量。消费者组是上面消费者的抽象。<strong>然而分区数据只存一份是不安全的，如果节点挂掉，就会丢失</strong>。</p><p><strong>3. 为提高可用性，为每个partition增加若干个副本</strong></p><p><img src="https://i.loli.net/2020/07/05/evMZ3JSLC59zw1p.png" alt="image-20200705143005279"></p><p>这样为每个partition数据添加备份数据(必须是不同节点的)，保证数据的安全性。每个Partition的数据又分<code>leader</code>和<code>follower</code>。<code>leader partition</code>数据负责被读写；而<code>follower partition</code>的分区数据只负责同步<code>leader partition</code>的数据，并且在<code>leader partition</code>挂掉时准备成为<code>leader partition</code>。</p><p>图中的<code>broker</code>就是Kafka的节点。</p><p><code>topic</code>是一个逻辑的概念、副本是一个物理上的副本。</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>Producer</strong> </p><p>消息生产者，就是向kafka broker发消息的客户端</p><p>**Consumer **</p><p>消息消费者，向kafka broker取消息的客户端</p><p><strong>Consumer Group （CG）</strong></p><p>费者组，由多个consumer组成。<font color="red"><strong>消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个消费者消费；消费者组之间互不影响。</strong></font>所有的消费者都属于某个消费者组，即<strong>消费者组是逻辑上的一个订阅者</strong>。</p><p><strong>Broker</strong> </p><p>一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。</p><p><strong>Topic</strong> </p><p>可以理解为一个队列，<font color="red"><strong>生产者和消费者面向的都是一个topic</strong>；</font></p><p><strong>Partition</strong></p><p>为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，<font color="red"><strong>一个topic可以分为多个partition</strong></font>，每个partition是一个有序的队列；</p><p><strong>Replica</strong></p><p>副本，为保证集群中的某个节点发生故障时，<font color="red">该节点上的partition数据不丢失，且kafka仍然能够继续工作</font>，kafka提供了副本机制，一个topic的每个分区都有若干个副本，一个<strong>leader</strong>和若干个<strong>follower</strong>。</p><p><strong>leader</strong></p><p>每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader。</p><p><strong>follower</strong></p><p>每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的follower。</p><h1 id="Kafka安装"><a href="#Kafka安装" class="headerlink" title="Kafka安装"></a>Kafka安装</h1><p>Kafka依赖于Zookeeper，所以首先要先启动Zookeeper的服务。</p><p>Kafka的文件名称实例：<code>kafka_2.11-0.11.0.2.tgz</code></p><ol><li>2.11是Kafka的开发语言Scala的版本号</li><li>0.11.0.2才是Kafka的版本</li></ol><p>Kafka依赖于Java环境。</p><h2 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h2><table><thead><tr><th>Hadoop201</th><th>Hadoop202</th><th>Hadoop203</th></tr></thead><tbody><tr><td>Zookeeper</td><td>Zookeeper</td><td>Zookeeper</td></tr><tr><td>Kafka</td><td>Kafka</td><td>Kafka</td></tr></tbody></table><h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><p><strong>1. 解压安装包</strong></p><p><strong>2. 方便操作，修改文件名</strong></p><p><strong>3. 创建文件夹logs，用于存储日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop203 modules]$ tar -zxf /opt/softwares/kafka_2.12-0.11.0.2.gz -C /opt/modules/</span><br><span class="line">[hadoop@hadoop203 modules]$ mv kafka_2.12-0.11.0.2/ kafka</span><br><span class="line">[hadoop@hadoop203 modules]$ mkdir /opt/modules/kafka/logs</span><br></pre></td></tr></table></figure><p><strong>4. 修改<code>config/server.properties</code>配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/server.properties</span><br></pre></td></tr></table></figure><p>修改以下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#broker的全局唯一编号，不能重复</span></span><br><span class="line"><span class="meta">broker.id</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#删除topic功能使能</span></span><br><span class="line"><span class="meta">delete.topic.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#kafka运行日志存放的路径    </span></span><br><span class="line"><span class="meta">log.dirs</span>=<span class="string">/opt/module/kafka/logs</span></span><br><span class="line"><span class="comment">#配置连接Zookeeper集群地址</span></span><br><span class="line"><span class="meta">zookeeper.connect</span>=<span class="string">hadoop102:2181,hadoop103:2181,hadoop104:2181</span></span><br></pre></td></tr></table></figure><p><strong>5. 配置环境变量</strong></p><p><strong>6. 分发安装包，并修改broker的全局唯一编号</strong></p><p><strong>7. 启动集群</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure><h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><p>用的不多，多用于测试</p><h3 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h3><p><strong>topic创建流程</strong></p><p><img src="https://i.loli.net/2020/07/05/gQwmzTDjnVdEySM.png" alt="image-20200705154348084"></p><p><strong>创建topic</strong></p><p>需要制定：分区数、副本数、zookeeper。查看了上面的流程我们需要指定zookeeper。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --zookeeper hadoop201:2181 --create --replication-factor 3 --partitions 3 --topic first</span><br></pre></td></tr></table></figure><ul><li>–topic 定义topic名</li><li>–replication-factor 定义副本数</li><li>–partitions 定义分区数</li></ul><p>然后我们查看zookeeper的数据，确实发现topic数据在zookeeper里面。</p><p><img src="https://i.loli.net/2020/07/05/F7n5pgCWYmVuUwB.png" alt="image-20200705154735632"></p><p><strong>文字描述创建topic：</strong></p><ol><li>客户端发送创建命令后，zookeeper开始创建一个<code>/brokets/topics/xxx</code>的节点</li><li>Kafka集群中的leader：<code>controller</code>监听到节点的变化开始创建topic，并把topic信息发送到所有broker节点</li><li>每个节点都把这些信息缓存到服务的meta cache中。</li></ol><p><strong>查看所有topic</strong></p><p>因为topic数据存放于zookeeper，而我们本地使用的命令查看(客户端)，本地不一定是服务端，不能从服务端的节点中获取topic，所以需要指定zookeeper地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --zookeeper hadoop201:2181 --list</span><br></pre></td></tr></table></figure><p><strong>查看描述topic</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop203 kafka]$ bin/kafka-topics.sh --zookeeper hadoop201:2181 --topic first --describe</span><br><span class="line">Topic:first     PartitionCount:3        ReplicationFactor:3     Configs:</span><br><span class="line">        Topic: first    Partition: 0    Leader: 2       Replicas: 2,3,1 Isr: 2,3,1</span><br><span class="line">        Topic: first    Partition: 1    Leader: 3       Replicas: 3,1,2 Isr: 3,1,2</span><br><span class="line">        Topic: first    Partition: 2    Leader: 1       Replicas: 1,2,3 Isr: 1,2,3</span><br><span class="line">[hadoop@hadoop203 kafka]$</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ReplicationFactor：副本数=leader+follower</li><li>PartitionCount：分区数，下面是各个分区</li><li>Replicas：分区数据在那个broker节点上，展示的是broker_id</li><li>Isr：Replicas的子集，与Leader partition数据保持一致的partition分区存在的节点</li></ul><p><strong>修改分区🔺</strong></p><p>分区数只能增加不能减少，因为分区减少又涉及到数据分配，Kafka没有实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --zookeeper hadoop201:2181 --topic first --alter --partitions 4</span><br></pre></td></tr></table></figure><p><strong>发送消息</strong></p><p>发送消息是服务端执行的程序，不需要指定zookeeper，需要指定生产者的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list hadoop202:9092 --topic first</span><br></pre></td></tr></table></figure><p><strong>接收消息</strong></p><p>接收消息是服务端执行的程序，不需要指定zookeeper，需要指定生产者的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server hadoop202:9092 --topic first</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/05/KhjZ8iICas69Tnb.png" alt="image-20200705160056884"></p><h1 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h1><h2 id="Kafka工作流程、文件存储机制🔺"><a href="#Kafka工作流程、文件存储机制🔺" class="headerlink" title="Kafka工作流程、文件存储机制🔺"></a>Kafka工作流程、文件存储机制🔺</h2><p><img src="https://i.loli.net/2020/07/05/XL4AYrqnTsvaodF.png" alt="image-20200705160258007"></p><p>Kafka中消息是以<strong>topic</strong>进行分类的，生产者生产消息，消费者消费消息，都是面向topic的。</p><p><strong>topic是逻辑上的概念，而partition是物理上的概念</strong>，每个partition对应于一个log文件，该log文件中存储的就是producer生产的数据。Producer生产的数据会被不断追加到该log文件末端，且<strong>每条数据都有自己的offset</strong>。消费者组中的每个消费者，都会实时记录自己消费到了哪个offset，<strong>以便出错恢复时，从上次的位置继续消费。</strong></p><p>每个分区都有单独的offset！</p><hr><p><strong>Kafka文件存储机制</strong></p><p><img src="https://i.loli.net/2020/07/05/hgsJGfY7Rtdy9Wn.png" alt="image-20200705160430292"></p><p>由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下<font color="red">，Kafka采取了<strong>分片</strong>和<strong>索引</strong>机制</font>，每个partition是一个文件夹，将每个partition分为多个segment。每个segment对应两个文件——“.index”文件和“.log”文件。这些文件位于一个文件夹下，该文件夹的命名规则为：topic名称+分区序号。例如，first这个topic有三个分区，则其对应的文件夹为first-0,first-1,first-2。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000.index</span><br><span class="line">00000000000000000000.log</span><br><span class="line">00000000000000170410.index</span><br><span class="line">00000000000000170410.log</span><br><span class="line">00000000000000239430.index</span><br><span class="line">00000000000000239430.log</span><br></pre></td></tr></table></figure><p>index和log文件以<strong>当前segment的第一条消息的offset命名</strong>。下图为index文件和log文件的结构示意图。</p><p><img src="https://i.loli.net/2020/07/05/5S9BhzIXfdwUHu8.png" alt="image-20200705160623460"></p><p><font color="red">“.index”文件存储大量的索引信息，“.log”文件存储大量的数据，索引文件中的元数据指向对应数据文件中message的物理偏移地址。</font></p><p>上图展示了通过offset找到消息的一个过程：</p><ol><li>直接进如到该分区的文件夹</li><li>通过offset的数字与各个文件名的对比，找到这个offset存在于哪个log文件</li><li>通过log文件名的与offset对比，相差多少，设为x</li><li>index文件中找到x的对应字节，然后在log文件中偏移对应字节，就找到了消息，开始继续读取</li></ol><h2 id="Kafka生产者"><a href="#Kafka生产者" class="headerlink" title="Kafka生产者"></a>Kafka生产者</h2><h3 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h3><p>是数据发送到topic时，决定哪些数据该发送到哪些分区的策略。</p><p><strong>分区的优点：</strong></p><ol><li><strong>方便在集群中扩展</strong>，每个Partition可以通过调整以适应它所在的机器，而一个topic又可以有多个Partition组成，因此整个集群就可以适应任意大小的数据了；Partition可以扩充</li><li><strong>可以提高并发</strong>，因为可以以Partition为单位读写了</li></ol><p><strong>分区的原则</strong></p><p>我们需要将producer发送的数据封装成一个<strong>ProducerRecord</strong>对象。</p><p><img src="https://i.loli.net/2020/07/05/vORtnF7S5laDVJw.png" alt="image-20200705161144959"></p><ol><li>指明 partition 的情况下，直接将指明的值直接作为 partiton 值</li><li>没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值；</li><li>既没有 partition 值又没有 key 值的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与 topic 可用的 partition 总数取余得到 partition 值，**也就是常说的 round-robin 算法(轮询)**。</li></ol><h3 id="数据可靠性保证🔺"><a href="#数据可靠性保证🔺" class="headerlink" title="数据可靠性保证🔺"></a>数据可靠性保证🔺</h3><p><font color="blue">为保证producer发送的数据，能可靠的发送到指定的topic，topic的每个<code>leader partition</code>收到producer发送的数据后，都需要向producer发送ack（acknowledgement确认收到），如果producer收到ack，就会进行下一轮的发送，否则重新发送数据。</font></p><p>生产者这边的数据可靠性指的是：<strong>生产者发送数据到topic这个过程的数据保证</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-product_ack.png" alt="Kafka-product_ack"></p><p><code>product</code>根据分区策略上传数据到不同的<code>leader partition</code>，而<code>partition</code>收到数据后开始和它的副本<code>follower partition</code>同步数据，这时多少个同步完成后向<code>product</code>返回成功标志是一个策略的问题？</p><h4 id="副本数据同步策略"><a href="#副本数据同步策略" class="headerlink" title="副本数据同步策略"></a>副本数据同步策略</h4><table><thead><tr><th><strong>方案</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>半数以上完成同步，就发送ack</strong></td><td>延迟低</td><td>如果有n个节点故障，因为写入半数follower为完成同步，所以它的正常副本最少有n+1个，所以它一共需要2n+1节点</td></tr><tr><td><strong>全部完成同步，才发送ack</strong></td><td>如果有n个节点故障，因为全部写入完成同步，所以它的正常副本最少有1个，所以它一共需要n+1节点</td><td>延迟高</td></tr></tbody></table><p><strong>Kafka选择了第二种方案，原因如下：</strong></p><ol><li><p>同样为了容忍n台节点的故障，第一种方案需要2n+1个副本，而第二种方案只需要n+1个副本，而Kafka的每个分区都有大量的数据，第一种方案会造成大量数据的冗余。</p></li><li><p>虽然第二种方案的网络延迟会比较高，但网络延迟对Kafka的影响较小。</p></li></ol><p><strong>采用第二种方案之后，设想以下情景：leader收到数据，所有follower都开始同步数据，但有一个follower，因为某种故障，迟迟不能与leader进行同步，那leader就要一直等下去，直到它完成同步，才能发送ack。这个问题怎么解决呢？</strong></p><p><font color="blue">Leader维护了一个动态的<strong>in-sync replica set (ISR)**，意为和leader保持同步的follower集合。当ISR中的follower完成数据的同步之后，leader就会给follower发送ack。如果follower长时间未向leader同步数据，则该follower将被踢出ISR，该时间阈值由</strong>replica.lag.time.max.ms**参数设定。Leader发生故障之后，就会从ISR中选举新的leader。</font>这样leader不是和全部的follow同步，而是和ISR集合中的follower同步。</p><p>以上，如果某个follower因为故障迟迟不能和leader进行同步，那么此<code>follow</code>会被踢出ISR集合，然后<code>leader</code>向<code>product</code>返回<code>ack</code>。当故障的<code>follower</code>修复故障开启后，他会读取磁盘中数据内容与<code>leader partition</code>一致，然后重新加入到ISR集合。具体请看<a href="#%E6%95%85%E9%9A%9C%E4%BF%AE%E5%A4%8D%E7%BB%86%E8%8A%82%F0%9F%94%BA">故障修复细节</a></p><hr><p><strong>acks参数设置</strong></p><p><strong>然而</strong>，对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等(follow partiton)ISR中的follower全部接收成功。(in-sync replica set (ISR)，意为和leader保持同步的follower集合。)</p><p>所以Kafka为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡，选择以下的配置。</p><p><strong>acks=0</strong></p><p>producer不等待broker的ack，这一操作提供了一个最低的延迟，broker一接收到还没有写入磁盘就已经返回，当broker故障时有可能<font color="pink"><strong>丢失数据</strong></font>；</p><p><strong>情景：</strong></p><ol><li>在leader partiton接受到请求没写入磁盘时直接返回ack，然后leader partiton存在的broker节点挂了</li><li>数据直接丢失</li></ol><hr><p><strong>acks=1</strong></p><p>producer等待broker的ack，partition的leader落盘成功后返回ack，如果在follower同步成功之前leader故障，那么将会<font color="pink"><strong>丢失数据</strong></font>；</p><p><strong>情景：</strong></p><ol><li>在leader partiton接受到请求且写入磁盘完成时返回ack</li><li>然后follower同步leader partiton的数据，可是没开始leader partiton存在的broker节点挂了</li><li>数据丢失</li></ol><hr><p><strong>acks=-1</strong></p><p>producer等待broker的ack，partition的leader和ISR中的所有follower全部落盘成功后才返回ack。但是如果在follower同步完成后，broker发送ack之前，leader发生故障，那么会造成<font color="pink"><strong>数据重复</strong></font>。如果某个follow partition因为故障无法同步，会从ISR中剔除它，不必等待这个follow partition的同步了。具体请看<a href="#%E6%95%85%E9%9A%9C%E4%BF%AE%E5%A4%8D%E7%BB%86%E8%8A%82%F0%9F%94%BA">故障修复细节</a></p><p><strong>情景：</strong></p><ol><li>在leader partiton接受到请求，写完数据后，ISR中的所有follow开始和leader同步数据</li><li>但是此时leader在的broker挂了，没有返回ack</li><li>生产者再次发送数据，然后已经同步的follow存在数据重复，之前未同步的follow数据正常</li></ol><hr><p>上述中，leader partiton、follower partiton只是Broker节点中的一部分数据；而broker是Kafka集群中的节点。</p><h4 id="故障修复细节🔺"><a href="#故障修复细节🔺" class="headerlink" title="故障修复细节🔺"></a>故障修复细节🔺</h4><p>首先明白两个概念：<code>LEO</code>、<code>HW</code>。</p><ul><li><code>LEO</code>：每个副本中的最后一个offset</li><li><code>HW</code>：所有副本中最小的LEO</li></ul><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-LEO,HW.png" alt="Kafka-LEO,HW"></p><p>topic会把数据分为很多区，每个区又会有很多副本。leader partition的offset是最新的数据，该分区的副本会从这里同步数据所以该分区的副本的offset肯定会小于等于leader partition的offset。这个分区所有的副本(包含leader)中最小的LEO就是HW，因为LEO代表着副本中最慢者的同步速度，此时的HW代表所有副本中同步的进度。</p><h5 id="Follower故障"><a href="#Follower故障" class="headerlink" title="Follower故障"></a>Follower故障</h5><p>follower发生故障后会被临时踢出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次的HW，<font color="red"><strong>并将log文件高于HW的部分截取掉</strong></font>，从HW开始向leader进行同步。<font color="red">等该<strong>follower</strong>的LEO大于等于该Partition的HW</font>，即follower追上leader之后，就可以重新加入ISR了。</p><hr><p><strong>为什么将log文件高于HW的部分截取掉？</strong></p><p><strong>因为要保证所有副本中数据的一致性。</strong>设上面图中的follower2故障了，然后leader也故障了，理所当然follower1成为了leader。此时follower2开始故障恢复，开始向leader读取数据，然而leader的数据比它还少(原leader的数据就是丢了)，为了保证一致性，他要把自己数据中HW之后的数据扔掉，因为HW代表中所有副本的同步进度，而leader的LEO最小所以这个分区的HW就是leader的LEO，这样保证了和leader的进度，然后<font color="red"><strong>follower2</strong>的LEO大于等于该Partition的HW</font>，就可以重新加入ISR了。</p><h5 id="Leader故障"><a href="#Leader故障" class="headerlink" title="Leader故障"></a>Leader故障</h5><p>leader发生故障之后，会从ISR中选出一个新的leader，之后，为保证多个副本之间的数据一致性，<font color="red">其余的follower会先将各自的log文件高于HW的部分截掉，然后从新的leader同步数据。</font></p><hr><p><strong>注意：故障修复只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</strong></p><h3 id="Exactly-Once语义"><a href="#Exactly-Once语义" class="headerlink" title="Exactly Once语义"></a>Exactly Once语义</h3><p>对于某些比较重要的消息，我们需要保证exactly once语义，即保证每条消息被发送且仅被发送一次。</p><p>上面的数据可靠性保证acks=-1其实就是atlast once语义(至少发送一次的语义，造成数据重复)，其实还有最多一次的语义(造成数据丢失)。所以在0.11版本之后，Kafka引入了<strong>幂等性机制(idempotent)**，配合acks = -1时的at least once语义，实现了</strong>producer到broker的exactly once语义。**</p><p><code>idempotent + at least once = exactly once</code></p><p>幂等性机制就是<code>product</code>还是at least once语义的发送数据，然后它在topic时判断这个数据是否已经发送，如果已经发送，则这个数据不发送到topic。它的实现原理就是：</p><ol><li>为每一条数据生成一个id，需要保证相同数据的消息id是一致的</li><li>id由product id和消息id组成，我们需要保证不同product发送相同的数据应该是不同的数据</li><li>Kafka暂时将这些id缓存下来，等有一次ack返回失败时，重新发送数据</li><li>id存在于缓存中的数据被认为是二次发送，topic不接收，这就做到了Exactly Once语义。</li></ol><h2 id="Kafka消费者"><a href="#Kafka消费者" class="headerlink" title="Kafka消费者"></a>Kafka消费者</h2><h3 id="消费方式"><a href="#消费方式" class="headerlink" title="消费方式"></a>消费方式</h3><p>consumer采用pull（拉）模式从broker中读取数据。</p><p>push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。它的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据consumer的消费能力以适当的速率消费消息。</p><p>pull模式不足之处是，如果kafka没有数据，消费者可能会陷入循环中，一直返回空数据。针对这一点，Kafka的消费者在消费数据时会传入一个时长参数timeout，如果当前没有数据可供消费，consumer会等待一段时间之后再返回，这段时长即为timeout。</p><h3 id="分区-分配-消费策略"><a href="#分区-分配-消费策略" class="headerlink" title="分区(分配)消费策略"></a>分区(分配)消费策略</h3><p>一个<code>consumer group</code>中有多个consumer，一个 topic有多个partition，所以必然会涉及到partition的分配问题，<strong>即确定那个partition由哪个consumer来消费。</strong></p><p>Kafka有两种分配策略，一是roundrobin，一是range。</p><p><strong>一个分区只能由一个消费者组内的一个消费者消费！！！</strong></p><h4 id="roundrobin轮询"><a href="#roundrobin轮询" class="headerlink" title="roundrobin轮询"></a>roundrobin轮询</h4><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-Consumer_roundrobin.gif" alt="Kafka-Consumer_roundrobin"></p><h4 id="rank-默认"><a href="#rank-默认" class="headerlink" title="rank(默认)"></a>rank(默认)</h4><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-Consumer_rank.gif" alt="Kafka-Consumer_rank"></p><h3 id="offset维护"><a href="#offset维护" class="headerlink" title="offset维护"></a>offset维护</h3><p>由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，<strong>所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费。</strong></p><p>Kafka 0.9版本之前，consumer默认将offset保存在Zookeeper中，从0.9版本开始，consumer默认将offset保存在Kafka一个内置的topic中，该topic为<strong>__consumer_offsets</strong>。</p><p>生产者发送到Kafka的数据可靠性由acks决定。</p><p>而Kafka到Consumer的数据的可靠性由Consumer维护的offset决定，就算Consumer挂了之后，可以根据offset继续读取数据。</p><h2 id="Kafka高效读写数据"><a href="#Kafka高效读写数据" class="headerlink" title="Kafka高效读写数据"></a>Kafka高效读写数据</h2><h3 id="顺序读写磁盘"><a href="#顺序读写磁盘" class="headerlink" title="顺序读写磁盘"></a>顺序读写磁盘</h3><p>Kafka的producer生产数据，要写入到log文件中，写的过程是一直追加到文件末端，为顺序写。官网有数据表明，同样的磁盘，顺序写能到到600M/s，而随机写只有100k/s。这与磁盘的机械机构有关，顺序写之所以快，是因为其省去了大量磁头寻址的时间。</p><h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p>一般来说网络传输一个文件需要好几步骤：(主要是用户不能直接操作硬件，只能通过kernel操作)</p><ol><li>将文件读入kernel中</li><li>从kernel读入用户缓存</li><li>用户进行网络传输前的操作，比如：序列化</li><li>修改好的文件传送给kernel</li><li>kernel发送给硬件，硬件发送</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-fast_1.png" alt="Kafka-fast_1"></p><hr><p>而Kafka为什么那么快，它省略了上面的几个步骤。因为它在写文件时就已经是能通过网络传输的文件了，它不需要再到用户层去处理。如下图：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-fast_2.png" alt="Kafka-fast_2"></p><h2 id="Zookeeper在Kafka中的作用🔺"><a href="#Zookeeper在Kafka中的作用🔺" class="headerlink" title="Zookeeper在Kafka中的作用🔺"></a>Zookeeper在Kafka中的作用🔺</h2><p><a href="#topic">创建topic需要zookeeper的协助</a></p><p>Kafka的<code>Kafka Controller</code>的Leader是第一个向Zookeeper注册的节点。</p><p><code>Leader Kafka Controller</code>负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作。它的管理工作都是依赖于Zookeeper的。</p><hr><p>以Leader Partition的选举为例：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-zookeeper-leader.gif" alt="Kafka-zookeeper-leader"></p><ol><li>原leader挂掉，zookeeper删除这个节点</li><li>Leader Kafka Controller监听到变化，他重新向Zookeeper获取ISR列表</li><li>从ISR列表中找到一个Partition，把它作为Leader</li><li>更改Zookeeper数据</li></ol><h1 id="Kafka-API"><a href="#Kafka-API" class="headerlink" title="Kafka API"></a>Kafka API</h1><h2 id="Producer-API🔺"><a href="#Producer-API🔺" class="headerlink" title="Producer API🔺"></a>Producer API🔺</h2><h3 id="消息发送流程"><a href="#消息发送流程" class="headerlink" title="消息发送流程"></a>消息发送流程</h3><p>Kafka的Producer发送消息采用的是<font color="red">异步发送</font>的方式。异步的话,肯定涉及到多个线程。在消息发送的过程中，<font color="red">涉及到了两个线程——main线程和Sender线程，以及一个线程共享变量——RecordAccumulator</font>。main线程将消息发送给RecordAccumulator，Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-producerapi-model.png" alt="Kafka-producerapi-model"></p><p><strong>从上图可以大致看出流程：</strong></p><ol><li>main线程将数据包装为<code>ProducerRecord</code>对象。</li><li><code>ProducerRecord</code>对象经过<font color="red"><strong>拦截器、序列化器、分区器</strong></font>后，发送到线程共享变量<code>RecordAccumulator</code></li><li><strong>从main线程到<code>RecordAccumulator</code>的数据是一条条发送的</strong></li><li><code>RecordAccumulator</code>中的数据就是我们topic中分区的数据，在<code>ProducerRecord</code>对象创建时就已经确定在哪个分区，然后不同分区存在<code>RecordAccumulator</code>的不同位置，<strong>然后分区内的数据会形成批次(根据batch.size大小)，批次数据由Sender发出</strong></li><li>Sender线程不断监控RecordAccumulator的数据，当满足：<ul><li>某个分区中数据积累到batch.size之后，sender才会发送一个批次的数据</li><li>如果数据迟迟未达到batch.size，sender等待linger.time之后就会发送数据</li></ul></li><li>Sender线程发送批次数据到Kafka</li></ol><p><strong>相关参数</strong></p><ul><li><code>batch.size</code>：只有数据积累到batch.size之后，sender才会发送数据。</li><li><code>linger.ms</code>：如果数据迟迟未达到batch.size，sender等待linger.time之后就会发送数据。</li></ul><h3 id="异步发送API"><a href="#异步发送API" class="headerlink" title="异步发送API"></a>异步发送API</h3><p>新版的Kafka已经不支持同步发送的api了，但是我们可以通过异步发送的API，<font color="blue">通过<code>send</code>的返回值<code>future</code>类型的的<code>get</code>方法</font>(这个方式是阻塞的，一直到获取到返回值才释放)获取返回值，这样就做到了同步发送的效果。(不编写此部分了)</p><p><strong>涉及到的类</strong></p><ol><li><code>KafkaProducer</code>：需要创建一个生产者对象，用来发送数据</li><li><code>ProducerConfig</code>：获取所需的一系列配置参数</li><li><code>ProducerRecord</code>：每条数据都要封装成一个ProducerRecord对象</li></ol><p><strong>导入依赖pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>Producer类编写(无回调)</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;hadoop201:9092&quot;</span>);<span class="comment">//kafka集群，broker-list</span></span><br><span class="line">        props.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>);<span class="comment">// 生产者数据可靠性等级设置，待所有ISR中同步完成后返回acks</span></span><br><span class="line">        props.put(<span class="string">&quot;retries&quot;</span>, <span class="number">1</span>);<span class="comment">//失败重试次数</span></span><br><span class="line">        props.put(<span class="string">&quot;batch.size&quot;</span>, <span class="number">16384</span>);<span class="comment">//数据积累到batch.size之后，sender才会发送数据。</span></span><br><span class="line">        props.put(<span class="string">&quot;linger.ms&quot;</span>, <span class="number">1</span>);<span class="comment">//Sender线程等待RecordAccumulator中批次数据等待时间</span></span><br><span class="line">        props.put(<span class="string">&quot;buffer.memory&quot;</span>, <span class="number">33554432</span>);<span class="comment">//RecordAccumulator缓冲区大小</span></span><br><span class="line">        props.put(<span class="string">&quot;key.serializer&quot;</span>, StringSerializer.class.getName());<span class="comment">// 发送数据KafkaProducer的key的序列化</span></span><br><span class="line">        props.put(<span class="string">&quot;value.serializer&quot;</span>, StringSerializer.class.getName());<span class="comment">// 发送数据KafkaProducer的value的序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Properties传递给生产者各个参数设置</span></span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 根据分区策略：没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值</span></span><br><span class="line">            <span class="comment">//；所以我认为这里key的作用只有作为分区根据的作用</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;first&quot;</span>, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Producer类编写(回调)</em></strong></p><p>回调函数会在producer收到ack时调用，为异步调用，该方法有两个参数，分别是RecordMetadata和Exception，<strong>如果Exception为null，说明消息发送成功，如果Exception不为null，说明消息发送失败。</strong></p><p><font color="red">注意：消息发送失败会自动重试，不需要我们在回调函数中手动重试。</font></p><p>返回ack给producer时，这批次的数据其实已经重试发送过了，但是还是失败了。这个批次数据直接发送失败，我们只能捕获到，而无法处理！！回调函数的作用好像只有得知数据发送失败还是成功，还可以记个日志啥的。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-Product_retry.png" alt="Kafka-Product_retry"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;hadoop201:9092&quot;</span>);<span class="comment">//kafka集群，broker-list</span></span><br><span class="line">        props.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>);<span class="comment">// 生产者数据可靠性等级设置，待所有ISR中同步完成后返回acks</span></span><br><span class="line">        props.put(<span class="string">&quot;retries&quot;</span>, <span class="number">1</span>);<span class="comment">//失败重试次数</span></span><br><span class="line">        props.put(<span class="string">&quot;batch.size&quot;</span>, <span class="number">16384</span>);<span class="comment">//数据积累到batch.size之后，sender才会发送数据。</span></span><br><span class="line">        props.put(<span class="string">&quot;linger.ms&quot;</span>, <span class="number">1</span>);<span class="comment">//Sender线程等待RecordAccumulator中批次数据等待时间</span></span><br><span class="line">        props.put(<span class="string">&quot;buffer.memory&quot;</span>, <span class="number">33554432</span>);<span class="comment">//RecordAccumulator缓冲区大小</span></span><br><span class="line">        props.put(<span class="string">&quot;key.serializer&quot;</span>, StringSerializer.class.getName());<span class="comment">// 发送数据KafkaProducer的key的序列化</span></span><br><span class="line">        props.put(<span class="string">&quot;value.serializer&quot;</span>, StringSerializer.class.getName());<span class="comment">// 发送数据KafkaProducer的value的序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Properties传递给生产者各个参数设置</span></span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//回调函数，该方法会在Producer收到ack时调用，为异步调用</span></span><br><span class="line">            <span class="comment">// 根据分区策略：没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值</span></span><br><span class="line">            <span class="comment">//；所以我认为这里key的作用只有作为分区根据的作用</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;first&quot;</span>, Integer.toString(i), Integer.toString(i)), (metadata, exception) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;success-&gt;&quot;</span> + metadata.offset());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    exception.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>手动在Linux中开启一个消费者。然后运行程序发现效果：</p><p><code>bin/kafka-console-consumer.sh --bootstrap-server hadoop202:9092 --topic first</code></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-produce-test.png" alt="Kafka-produce-test"></p><h2 id="Consumer-API-🔺"><a href="#Consumer-API-🔺" class="headerlink" title="Consumer API 🔺"></a>Consumer API 🔺</h2><p>Consumer消费数据时的可靠性是很容易保证的，因为数据在Kafka中是持久化的，故不用担心数据丢失问题。</p><p>由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，所以consumer需要实时记录自己消费到了哪个offset，然后发送给Kafka中的内置topic：<code>_consumer_offsets</code>，以便故障恢复后继续消费。</p><p>所以offset的维护是Consumer消费数据是必须考虑的问题。</p><hr><p>上面说到Producer的Exactly Once语义是由幂等性完成的：<code>idempotent + at least once = exactly once</code>.</p><p>而consumer这边的Exactly Once语义，得需要消费者维护offset、消费数据这两个操作得是一个原子性操作，不<strong>然一直会有数据重复消费、数据丢失消费的问题</strong>。</p><hr><p>上面说到Producer的数据可靠性是由acks的等级指定的。</p><p>而consumer这边是由offset决定的，当消费者挂掉之后，通过在Kafka中维护的offset做到从断点处获取新的数据。</p><h3 id="维护offset"><a href="#维护offset" class="headerlink" title="维护offset"></a>维护offset</h3><p><strong>导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>需要用到的类</strong></p><ol><li><strong>KafkaConsumer</strong>：需要创建一个消费者对象，用来消费数据</li><li><strong>ConsumerConfig</strong>：获取所需的一系列配置参数</li><li><strong>ConsuemrRecord</strong>：每条数据都要封装成一个ConsumerRecord对象</li></ol><p><strong>poll函数</strong></p><p>如果topic中没有数据，这个函数会一直循环去取，可以设个参数，如果没有数据在topic那里等多长时间，这样不用一直循环去问。</p><h4 id="手动提交offset"><a href="#手动提交offset" class="headerlink" title="手动提交offset"></a>手动提交offset</h4><p>**手动提交又分为：先提交后消费(数据未消费)、先消费后提交(重复消费)**。各有各的缺点，把这两个操作合成一个原子性操作就没有问题了。可以通过自己编码实现。</p><p>这两种的区别就是提交offset的代码在消费前还是消费后。</p><p>offset的维护默认是自动提交，如果想手动维护，需要把参数<code>enable.auto.commit</code>置为false</p><p><strong>CustomConsumer 编写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;hadoop201:9092&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;test&quot;</span>);<span class="comment">//消费者组，只要group.id相同，就属于同一个消费者组</span></span><br><span class="line">        props.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;false&quot;</span>);<span class="comment">//取消自动提交offset</span></span><br><span class="line">        props.put(<span class="string">&quot;key.deserializer&quot;</span>, StringDeserializer.class.getName());</span><br><span class="line">        props.put(<span class="string">&quot;value.deserializer&quot;</span>, StringDeserializer.class.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(Collections.singletonList(<span class="string">&quot;first&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 先提交后消费，可能造成数据未消费问题</span></span><br><span class="line"><span class="comment">//            consumer.commitAsync();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// ConsumerRecords，因为每次是poll一批数据不是一个数据，所以这里是一推ConsumerRecord数据</span></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;offset = %d, key = %s, value = %s, partition = %s%n&quot;</span>, record.offset(), record.key(), record.value(), record.partition());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 先消费后提交，可能造成重复消费问题</span></span><br><span class="line">            consumer.commitAsync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码解析</strong></p><p>手动提交offset的方法有两种：分别是<strong>commitSync（同步提交）和commitAsync（异步提交</strong>）。两者的相同点是，都会将本次poll的一批数据最高的偏移量提交；<strong>不同点是，commitSync会失败重试，一直到提交成功（如果由于不可恢复原因导致，也会提交失败）；而commitAsync则没有失败重试机制，故有可能提交失败。</strong></p><hr><p><strong>测试</strong></p><p>手动开启Linux中一个生产者的实例<code>bin/kafka-console-producer.sh --broker-list hadoop202:9092 --topic first</code></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-consumer-test.png" alt="Kafka-consumer-test"></p><h5 id="先提交后消费-数据未消费"><a href="#先提交后消费-数据未消费" class="headerlink" title="先提交后消费(数据未消费)"></a>先提交后消费(数据未消费)</h5><p>假如本次读取批次的数据为4，5，6；消费者确实消费了4，5，6；然后没提交offset时挂了，再次启动消费者时，因为offset没更新，它的值还是之前的3，所以4，5，6数据被重复消费</p><h5 id="先消费后提交-重复消费"><a href="#先消费后提交-重复消费" class="headerlink" title="先消费后提交(重复消费)"></a>先消费后提交(重复消费)</h5><p>假如本次读取批次的数据为4，5，6；消费者还没消费4，5，6；先提交的<font color="red"><strong>offset+1</strong></font>。然后挂了，再次启动消费者时，因为offset为7，所以4，5，6数据没有被消费，别忽略了。</p><hr><p>解决的办法就是将这两个操作设置为一个原子性操作，同时的。感兴趣的自己实现。</p><h4 id="自动提交offset"><a href="#自动提交offset" class="headerlink" title="自动提交offset"></a>自动提交offset</h4><p>自动提交是默认开启的，我们还可以设置参数<code>auto.commit.interval.ms</code>自动提交offset的时间间隔。代码就不写了，和上面几乎一致，修改参数就可以了</p><ul><li><strong>enable.auto.commit</strong>：是否开启自动提交offset功能</li><li><strong>auto.commit.interval.ms：</strong>自动提交offset的时间间隔</li></ul><h2 id="自定义Interceptor"><a href="#自定义Interceptor" class="headerlink" title="自定义Interceptor"></a>自定义Interceptor</h2><h3 id="拦截器原理"><a href="#拦截器原理" class="headerlink" title="拦截器原理"></a>拦截器原理</h3><p>Producer拦截器(interceptor)是在Kafka 0.10版本被引入的，主要用于实现clients端的定制化控制逻辑。</p><p>对于producer而言，interceptor使得用户在<strong>消息发送前</strong>以及<strong>producer回调逻辑</strong>前有机会对消息做一些定制化需求，比如修改消息等。</p><p>同时，producer允许用户指定多个interceptor按序作用于同一条消息从而形成一个拦截链(interceptor chain)。Intercetpor的实现接口是<code>org.apache.kafka.clients.producer.ProducerInterceptor</code>，其定义的方法包括：</p><ol><li>configure(configs)：获取配置信息和初始化数据时调用</li><li>onSend(ProducerRecord)：该方法封装进KafkaProducer.send方法中，<strong>即它运行在用户主线程中</strong>。Producer确保在消息被序列化以及计算分区前调用该方法。<font color="red">用户可以在该方法中对消息做任何操作，但最好保证不要修改消息所属的topic和分区</font>，否则会影响目标分区的计算</li><li>onAcknowledgement(RecordMetadata, Exception)：<font color="red">该方法会在消息从RecordAccumulator成功发送到Kafka Broker之后，或者在发送过程中失败时调用。并且通常都是在producer回调逻辑触发之前。</font>onAcknowledgement运行在<strong>producer的IO线程中</strong>，因此不要在该方法中放入很重的逻辑，否则会拖慢producer的消息发送效率。</li><li>close：关闭interceptor，主要用于执行一些资源清理工作</li></ol><hr><p>ps：因为onsend方法运行在main线程中，而onAcknowledgement运行在<strong>producer的IO线程中</strong>，所以这两者要注意线程安装，不要使用共享变量！！且onsend方法中的参数ProducerRecord只能查看，不能修改内容，如果想修改内容的话，需要新建一个ProducerRecord返回。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterInterceptor</span> <span class="keyword">implements</span> <span class="title">ProducerInterceptor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errorCounter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> successCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerRecord&lt;String, String&gt; <span class="title">onSend</span><span class="params">(ProducerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 创建一个新的record，把时间戳写入消息体的最前部</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProducerRecord(record.topic(), record.partition(), record.timestamp(), record.key(),</span><br><span class="line">                System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + record.value().toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAcknowledgement</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 统计成功和失败的次数</span></span><br><span class="line">        <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">            successCounter++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errorCounter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保存结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Successful sent: &quot;</span> + successCounter);</span><br><span class="line">        System.out.println(<span class="string">&quot;Failed sent: &quot;</span> + errorCounter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>main方法中</strong></p><p>添加拦截器参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2 构建拦截链</span></span><br><span class="line">    List&lt;String&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    interceptors.add(<span class="string">&quot;com.atguigu.kafka.interceptor.CounterInterceptor&quot;</span>); </span><br><span class="line">    props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, interceptors);        </span><br></pre></td></tr></table></figure><h2 id="证明ProducerRecord中的key只有分区的作用"><a href="#证明ProducerRecord中的key只有分区的作用" class="headerlink" title="证明ProducerRecord中的key只有分区的作用"></a>证明ProducerRecord中的key只有分区的作用</h2><p><strong>producer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;hadoop201:9092&quot;</span>);<span class="comment">//kafka集群，broker-list</span></span><br><span class="line">        props.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>);<span class="comment">// 生产者数据可靠性等级设置，待所有ISR中同步完成后返回acks</span></span><br><span class="line">        props.put(<span class="string">&quot;retries&quot;</span>, <span class="number">1</span>);<span class="comment">//失败重试次数</span></span><br><span class="line">        props.put(<span class="string">&quot;batch.size&quot;</span>, <span class="number">16384</span>);<span class="comment">//数据积累到batch.size之后，sender才会发送数据。</span></span><br><span class="line">        props.put(<span class="string">&quot;linger.ms&quot;</span>, <span class="number">1</span>);<span class="comment">//Sender线程等待RecordAccumulator中批次数据等待时间</span></span><br><span class="line">        props.put(<span class="string">&quot;buffer.memory&quot;</span>, <span class="number">33554432</span>);<span class="comment">//RecordAccumulator缓冲区大小</span></span><br><span class="line">        props.put(<span class="string">&quot;key.serializer&quot;</span>, StringSerializer.class.getName());<span class="comment">// 发送数据KafkaProducer的key的序列化</span></span><br><span class="line">        props.put(<span class="string">&quot;value.serializer&quot;</span>, StringSerializer.class.getName());<span class="comment">// 发送数据KafkaProducer的value的序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Properties传递给生产者各个参数设置</span></span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//回调函数，该方法会在Producer收到ack时调用，为异步调用</span></span><br><span class="line">            <span class="comment">// 根据分区策略：没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值</span></span><br><span class="line">            <span class="comment">//；所以我认为这里key的作用只有作为分区根据的作用</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;first&quot;</span>, Integer.toString(i), Integer.toString(i)), (metadata, exception) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;success-&gt;&quot;</span> + metadata.offset());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    exception.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将1-100为key，应该会根据key的哈希来自动分区。</p><p><strong>consumer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;hadoop201:9092&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;test&quot;</span>);<span class="comment">//消费者组，只要group.id相同，就属于同一个消费者组</span></span><br><span class="line">        props.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;false&quot;</span>);<span class="comment">//取消自动提交offset</span></span><br><span class="line">        props.put(<span class="string">&quot;key.deserializer&quot;</span>, StringDeserializer.class.getName());</span><br><span class="line">        props.put(<span class="string">&quot;value.deserializer&quot;</span>, StringDeserializer.class.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(Collections.singletonList(<span class="string">&quot;first&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 先提交后消费，可能造成数据未消费问题</span></span><br><span class="line"><span class="comment">//            consumer.commitAsync();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// ConsumerRecords，因为每次是poll一批数据不是一个数据，所以这里是一推ConsumerRecord数据</span></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;offset = %d, key = %s, value = %s, partition = %s%n&quot;</span>, record.offset(), record.key(), record.value(), record.partition());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 先消费后提交，可能造成重复消费问题</span></span><br><span class="line">            consumer.commitAsync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样输出每条数据的分区，效果预测应该是，各个分区都有数据。 </p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-test1.png" alt="Kafka-test1"></p><h2 id="消费者组的分区分配"><a href="#消费者组的分区分配" class="headerlink" title="消费者组的分区分配"></a>消费者组的分区分配</h2><p>消费者组内可以有多个消费者只要他们的<code>group.id</code>是同一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;hadoop201:9092&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;test&quot;</span>);<span class="comment">//消费者组，只要group.id相同，就属于同一个消费者组</span></span><br><span class="line">        props.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;false&quot;</span>);<span class="comment">//取消自动提交offset</span></span><br><span class="line">        props.put(<span class="string">&quot;key.deserializer&quot;</span>, StringDeserializer.class.getName());</span><br><span class="line">        props.put(<span class="string">&quot;value.deserializer&quot;</span>, StringDeserializer.class.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(Collections.singletonList(<span class="string">&quot;first&quot;</span>), <span class="keyword">new</span> ConsumerRebalanceListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPartitionsRevoked</span><span class="params">(Collection&lt;TopicPartition&gt; collection)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;回收分区&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPartitionsAssigned</span><span class="params">(Collection&lt;TopicPartition&gt; collection)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;重新分配的分区&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (TopicPartition topicPartition : collection) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;partition = &quot;</span> + topicPartition);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 先提交后消费，可能造成数据未消费问题</span></span><br><span class="line"><span class="comment">//            consumer.commitAsync();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// ConsumerRecords，因为每次是poll一批数据不是一个数据，所以这里是一推ConsumerRecord数据</span></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;offset = %d, key = %s, value = %s, partition = %s%n&quot;</span>, record.offset(), record.key(), record.value(), record.partition());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 先消费后提交，可能造成重复消费问题</span></span><br><span class="line">            consumer.commitAsync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当开启第一个消费者时，所有的分区都被第一个消费。当第二个开启时，所以分区被重新分配：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-groupconsumer-partition.png" alt="Kafka-groupconsumer-partition"></p><h1 id="Flume对接Kafka🔺"><a href="#Flume对接Kafka🔺" class="headerlink" title="Flume对接Kafka🔺"></a>Flume对接Kafka🔺</h1><h2 id="配置Flume"><a href="#配置Flume" class="headerlink" title="配置Flume"></a>配置Flume</h2><p>创建文件<code>flume-netcat-kafka.conf</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define</span></span><br><span class="line"><span class="meta">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a1.sinks</span> = <span class="string">k1</span></span><br><span class="line"><span class="meta">a1.channels</span> = <span class="string">c1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># source</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span> = <span class="string">netcat</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span> = <span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span> = <span class="string">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sink</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span> = <span class="string">org.apache.flume.sink.kafka.KafkaSink</span></span><br><span class="line"><span class="meta">a1.sinks.k1.kafka.bootstrap.servers</span> = <span class="string">hadoop201:9092,hadoop202:9092,hadoop203:9092</span></span><br><span class="line"><span class="meta">a1.sinks.k1.kafka.topic</span> = <span class="string">first</span></span><br><span class="line"><span class="meta">a1.sinks.k1.kafka.flumeBatchSize</span> = <span class="string">20</span></span><br><span class="line"><span class="meta">a1.sinks.k1.kafka.producer.acks</span> = <span class="string">1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.kafka.producer.linger.ms</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># channel</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a1.channels.c1.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a1.channels.c1.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bind</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>bin/flume-ng agent -c conf/ -n a1 –f job/flume-netcat-kafka.conf</code></p><h2 id="开启idea消费程序"><a href="#开启idea消费程序" class="headerlink" title="开启idea消费程序"></a>开启idea消费程序</h2><p>开启程序后，使用<code>nc localhost 44444</code>推送数据</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-flume.png" alt="Kafka-flume"></p><h1 id="Kafka监控"><a href="#Kafka监控" class="headerlink" title="Kafka监控"></a>Kafka监控</h1><h2 id="Kafka-Manager"><a href="#Kafka-Manager" class="headerlink" title="Kafka Manager"></a>Kafka Manager</h2><p>想要查看和管理Kafka，完全使用命令并不方便，我们可以使用雅虎开源的Kafka-manager，GitHub地址如下：</p><p><a href="https://github.com/yahoo/kafka-manager/releases%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%8D%E6%83%B3%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E7%BC%96%E8%AF%91%E5%A5%BD%E7%9A%84%E5%8F%91%E5%B8%83%E7%89%88%E6%9C%AC%E3%80%82">https://github.com/yahoo/kafka-manager/releases，如果不想编译安装，可以直接下载编译好的发布版本。</a></p><p><a href="https://cloud.tencent.com/developer/article/1592849">编译和安装请查看</a></p><h1 id="Kafka问题🔺"><a href="#Kafka问题🔺" class="headerlink" title="Kafka问题🔺"></a>Kafka问题🔺</h1><p><strong>Kafka中的ISR、AR又代表什么？</strong></p><ul><li>AR：分区的所有副本</li><li>ISR：分区中与Leader Partition内容保持一致的副本</li></ul><hr><p><strong>Kafka中的HW、LEO等分别代表什么？</strong></p><ul><li>LEO是分区中各个副本的最后条消息的offset</li><li>HW是一个分区概念，一个分区中所有副本最小的offset。代表着分区内数据同步进度</li></ul><hr><p><strong>Kafka中是怎么体现消息顺序性的？</strong></p><p>因为topic数据分为多个区放入到不同的broker节点中，所以消费时是没有序的，但是每个分区内因为有offset，而offset又由每个分区单独维护，所以分区内是有序的。</p><hr><p><strong>Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？</strong></p><p>拦截器、序列化器、分区器</p><hr><p><strong>Kafka生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Kafka-producerapi-model.png" alt="Kafka-producerapi-model"></p><hr><p><strong>“消费组中的消费者个数如果超过topic的分区，那么就会有消费者消费不到数据”这句话是否正确？</strong></p><p>正确，<strong>一个分区只能由一个消费者组内的一个消费者消费！！！</strong></p><hr><p><strong>消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset+1？</strong></p><p>offset+1</p><hr><p><strong>有哪些情形会造成重复消费？</strong></p><ol><li>producer中，acks=-1，数据重复发送，导致消费者重复消费</li><li>consumer中，先消费后提交，造成数据重复消费</li></ol><hr><p><strong>那些情景会造成消息漏消费？</strong></p><ol><li>producer中，acks=0/1，数据丢失</li><li>consumer中，先提交后消费，造成数据漏消费</li></ol><hr><p><strong>当你使用kafka-topics.sh创建（删除）了一个topic之后，Kafka背后会执行什么逻辑？</strong></p><p><a href="#topic">点击查看</a></p><hr><p><strong>topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？</strong></p><p>可以增加，不可以减少。Kafka没有实现减少时，多余分区数据的分配；</p><hr><p><strong>Kafka有内部的topic吗？如果有是什么？有什么所用？</strong></p><p> __consumer_offsets,保存消费者offset</p><hr><p><strong>简述Kafka的日志目录结构？</strong></p><p><img src="https://i.loli.net/2020/07/05/hgsJGfY7Rtdy9Wn.png" alt="image-20200705160430292"></p><p> 每个分区对应一个文件夹，文件夹的命名为topic-0，topic-1，内部为.log和.index文件</p><hr><p><strong>如果我指定了一个offset，Kafka Controller怎么查找到对应的消息？</strong></p><p><a href="#Kafka%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E3%80%81%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6%F0%9F%94%BA">点击查看</a></p><hr><p><strong>Kafka中有那些地方需要选举？这些地方的选举策略又有哪些？</strong></p><p> partition leader（ISR），controller（先到先得）</p><hr><p><strong>Kafka的那些设计让它有如此高的性能？</strong></p><p>分区(并发读写)，顺序写磁盘，0-copy</p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume基本使用</title>
      <link href="2020/07/04/Flume%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>2020/07/04/Flume%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Flume是Cloudera提供的一个高可用的，高可靠的，<font color="red">分布式的海量日志采集、聚合和传输的系统</font>。Flume基于流式架构，灵活简单。</p><p><img src="https://i.loli.net/2020/07/04/tZIRaYJzOdPpxh1.png" alt="image-20200704160637966"></p><p><strong>ps：一般来说非结构化的数据上传到HDFS需要Flume，结构化的数据库信息上传到HDFS需要使用Sqoop。</strong></p><p>为什么不直接手动上传？</p><ol><li>没有缓冲</li><li>文件实时变化，手动发控制上传</li></ol><h2 id="Flume优点"><a href="#Flume优点" class="headerlink" title="Flume优点"></a>Flume优点</h2><ol><li>可以和任意存储进程集成</li><li>若输入的的数据速率大于写入目的存储的速率，<font color="red"><strong>flume会进行缓冲，减小hdfs的压力。</strong></font></li><li>flume中的事务基于channel，使用了两个事务模型（sender + receiver），确保消息被可靠发送。</li></ol><p>Flume使用两个独立的事务分别负责从<code>soucrce</code>到<code>channel</code>，以及从<code>channel</code>到<code>sink</code>的事件传递。一旦事务中所有的数据全部成功提交到<code>channel</code>，那么<code>source</code>才认为该数据读取完成。同理，只有成功被sink写出去的数据，才会从<code>takeList缓冲区</code>中移除，否否则返回给<code>channel</code>。</p><p><strong>ps：</strong>因为flume使用了事务，事务的特性：同时成功/失败。这个特性可能导致数据重复发送：一批数据发送中间有发送失败的，并且前一部分数据发送成功；那么这个数据因为事务判定发送失败，所以这个部分数据会重新发送全部，进而导致数据重复。</p><h2 id="Flume架构"><a href="#Flume架构" class="headerlink" title="Flume架构"></a>Flume架构</h2><p><img src="https://i.loli.net/2020/07/04/Qeh8Jufq6UixObV.png" alt="image-20200704161245107"></p><hr><p><img src="https://i.loli.net/2020/07/04/e5nuNOzk3vyhqHI.png" alt="image-20200704162923528"></p><h3 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h3><p><code>Agent</code>是一个JVM进程，它以事件的形式将数据从源头送至目的。</p><p>它是Flume的一个工作实例。它们的关系类似于类与对象。</p><p><code>Agent</code>主要有3个部分组成：<code>Source</code>、<code>Channel</code>、<code>Sink</code>。</p><p>每一个Agent需要单独的写配置文件。</p><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><font color="red">Source是负责接收数据到Flume Agent的组件</font>。Source组件可以处理各种类型、各种格式的日志数据，包括avro、thrift、<font color="red">exec</font>、jms、<font color="red">spooling directory</font>、<font color="red">netcat</font>、sequence generator、syslog、http、legacy。</p><ul><li><code>exec</code>：获取到shell命令中的输出</li><li><code>spooling directory</code>：监听这个文件夹中的变化</li><li><code>netcat</code>：监听一个端口输出的数据</li></ul><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p><font color="red">Channel是位于Source和Sink之间的缓冲区。</font>因此，Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作。</p><p>Flume自带两种Channel：<code>Memory Channel</code>和<code>File Channel</code>。</p><ul><li><code>Memory Channel</code>是内存中的队列。Memory Channel在不需要关心数据丢失的情景下适用。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失。\</li><li><code>File Channel</code>将所有事件写到磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据。</li></ul><h3 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h3><p><font color="red">Sink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另一个Flume Agent。</font></p><p>Sink是<strong>完全事务性的</strong>。在从Channel批量删除数据之前，每个Sink用Channel启动一个事务。批量事件一旦成功写出到存储系统或下一个Flume Agent，Sink就利用Channel提交事务。事务一旦被提交，该Channel从自己的内部缓冲区删除事件。</p><p>Sink组件目的地包括<strong>hdfs</strong>、logger、<strong>avro</strong>、thrift、ipc、<strong>file</strong>、null、HBase、solr、自定义。</p><ul><li><code>hdfs</code>：上传至hdfs</li><li><code>avro</code>：Flume的输出格式，成为下一个<code>Agent</code>的<code>Source</code>的输入</li><li><code>file</code>：输出到本地文件系统</li></ul><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>传输单元，Flume数据<font color="red"><strong>传输的基本单元</strong></font>，以事件的形式将数据从源头送至目的地。 Event由可选的header和载有数据的一个byte array 构成。Header是容纳了key-value字符串对的HashMap。</p><h2 id="Flume内部原理"><a href="#Flume内部原理" class="headerlink" title="Flume内部原理"></a>Flume内部原理</h2><p><strong>内部原理</strong></p><p><img src="https://i.loli.net/2020/07/04/6gV73m8TnfDYusJ.png" alt="image-20200704164518461"></p><h2 id="Flume拓扑"><a href="#Flume拓扑" class="headerlink" title="Flume拓扑"></a>Flume拓扑</h2><p><img src="https://i.loli.net/2020/07/04/zZqigRuQLjOl1HM.png" alt="image-20200704163440556"></p><p>这种模式是将多个flume给顺序连接起来了，从最初的source开始到最终sink传送的目的存储系统。此模式不建议桥接过多的flume数量， flume数量过多不仅会影响传输速率，而且一旦传输过程中某个节点flume宕机，会影响整个传输系统。</p><hr><p><img src="https://i.loli.net/2020/07/04/gB7GdcCuZ5Ok8K9.png" alt="image-20200704164139594"></p><p>Flume支持将事件流向一个或者多个目的地。这种模式将数据源<strong>复制</strong>到多个channel中，每个channel都有相同的数据，sink可以选择传送的不同的目的地。</p><p>多个channel复制相同的流到不同的位置的话，需要配置<code>channel选择器</code>为<code>Replicating Channel Selector</code>，他会将<code>Source</code>过来的<code>events</code>发往所有<code>channel</code></p><hr><p><img src="https://i.loli.net/2020/07/04/tyn6D2g1VTdXRoW.png" alt="image-20200704164614570"></p><p>Flume支持使用将多个sink逻辑上分到一个sink组，flume将数据发送到不同的sink，主要解决负载均衡和故障转移问题。</p><p>这样组成的逻辑分组<code>sink group</code>加起来才等于<code>channel</code>的数据，如果只有一个<code>channel</code>则不需要设置<code>channel选择器</code></p><h1 id="Flume安装"><a href="#Flume安装" class="headerlink" title="Flume安装"></a>Flume安装</h1><p><strong>下载地址</strong></p><p><a href="http://archive.apache.org/dist/flume">http://archive.apache.org/dist/flume</a></p><p><strong>安装部署</strong></p><ol><li><p>解压到<code>/opt/modules/</code>目录下</p></li><li><p>修改文件夹的名称为<code>flume</code></p></li><li><p>将<code>flume/conf</code>下的<code>flume-env.sh.template</code>文件修改为<code>flume-env.sh</code>，并配置f：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/modules/jdk1.8.0_144</span><br></pre></td></tr></table></figure></li></ol><h1 id="Flume实例"><a href="#Flume实例" class="headerlink" title="Flume实例"></a>Flume实例</h1><h2 id="监控端口数据，输出控制台"><a href="#监控端口数据，输出控制台" class="headerlink" title="监控端口数据，输出控制台"></a>监控端口数据，输出控制台</h2><p><strong>案例需求</strong></p><p>首先启动Flume任务，监控本机44444端口，然后通过netcat工具向本机44444端口发送消息，最后Flume将监听的数据实时显示在控制台。</p><p><strong>分析</strong></p><p><img src="https://i.loli.net/2020/07/04/xv1XK3FRZ2M8jgy.png" alt="image-20200704170759090"></p><p><strong>步骤</strong></p><ol><li><p>安装工具nc：<code>sudo yum install -y nc</code></p></li><li><p>创建Flume Agent配置文件<code>flume-netcat-logger.conf</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="meta">a1.sources</span> = <span class="string">r1 # 声明r1为source</span></span><br><span class="line"><span class="meta">a1.sinks</span> = <span class="string">k1 # 声明k1为sink</span></span><br><span class="line"><span class="meta">a1.channels</span> = <span class="string">c1 # 声明一个channelc1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span> = <span class="string">netcat</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span> = <span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span> = <span class="string">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span> = <span class="string">logger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="comment"># 使用内存</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="comment"># channel总大小</span></span><br><span class="line"><span class="meta">a1.channels.c1.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="comment"># 事务为100event</span></span><br><span class="line"><span class="meta">a1.channels.c1.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="comment"># 通过这里将source、channel、sink连接</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动命令(需要注意上述文件中的a1是agent名，开启命令中也要一致)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf/ --name a1 --conf-file job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">bin/flume-ng agent -c conf/ -n a1 –f job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="https://i.loli.net/2020/07/04/v6XICKMgorcuzJk.png" alt="image-20200704171459448"></p><p><img src="https://i.loli.net/2020/07/04/FePg1Tjwpxym4OB.png" alt="image-20200704171510187"></p><h2 id="读取本地文件，输出到HDFS"><a href="#读取本地文件，输出到HDFS" class="headerlink" title="读取本地文件，输出到HDFS"></a>读取本地文件，输出到HDFS</h2><p><strong>需求</strong></p><p>实时监控Hive日志，并上传到HDFS中</p><p><strong>分析</strong></p><p><img src="https://i.loli.net/2020/07/04/zOnmRKNyLgI7FcM.png" alt="image-20200704174303682"></p><p><strong>前置</strong></p><p>Flume要想将数据输出到HDFS，必须持有Hadoop相关jar包。</p><p>将Hadoop中的一些包拷贝到<code>flume/lib</code>中，以下展示需要Hadoop的哪些依赖？</p><ol><li><code>$HADOOP_HOME/share/hadoop/common/hadoop-common-2.7.1.jar</code></li><li><code>$HADOOP_HOME/share/hadoop/common/lib/commons-configuration-1.6.jar</code></li><li><code>$HADOOP_HOME/share/hadoop/common/lib/hadoop-auth-2.7.1.jar</code></li><li><code>$HADOOP_HOME/share/hadoop/httpfs/tomcat/webapps/webhdfs/WEB-INF/lib/hadoop-hdfs-2.7.1.jar</code></li><li><code>$HADOOP_HOME/share/hadoop/hdfs/lib/htrace-core-3.1.0-incubating.jar</code></li><li><code>$HADOOP_HOME/share/hadoop/common/lib/commons-io-2.4.jar</code></li></ol><p><strong>实现步骤</strong></p><ol><li><p>创建Flume Agent配置文件<code>flume-file-hdfs.conf</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="meta">a2.sources</span> = <span class="string">r2</span></span><br><span class="line"><span class="meta">a2.sinks</span> = <span class="string">k2</span></span><br><span class="line"><span class="meta">a2.channels</span> = <span class="string">c2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="comment"># 通过tail命令读取文件的输出结果exec推送到hdfs</span></span><br><span class="line"><span class="meta">a2.sources.r2.type</span> = <span class="string">exec</span></span><br><span class="line"><span class="meta">a2.sources.r2.command</span> = <span class="string">tail -F /opt/modules/hive/logs/hive.log</span></span><br><span class="line"><span class="meta">a2.sources.r2.shell</span> = <span class="string">/bin/bash -c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="meta">a2.sinks.k2.type</span> = <span class="string">hdfs</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.path</span> = <span class="string">hdfs://hadoop201:9000/flume/%Y%m%d/%H</span></span><br><span class="line"><span class="comment">#上传文件的前缀</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.filePrefix</span> = <span class="string">logs-</span></span><br><span class="line"><span class="comment">#是否按照时间滚动文件夹</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.round</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#多少时间单位创建一个新的文件夹</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.roundValue</span> = <span class="string">1</span></span><br><span class="line"><span class="comment">#重新定义时间单位</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.roundUnit</span> = <span class="string">hour</span></span><br><span class="line"><span class="comment">#是否使用本地时间戳</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.useLocalTimeStamp</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#积攒多少个Event才flush到HDFS一次</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.batchSize</span> = <span class="string">1000</span></span><br><span class="line"><span class="comment">#设置文件类型，可支持压缩</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.fileType</span> = <span class="string">DataStream</span></span><br><span class="line"><span class="comment">#多久生成一个新的文件</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.rollInterval</span> = <span class="string">60</span></span><br><span class="line"><span class="comment">#设置每个文件的滚动大小</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.rollSize</span> = <span class="string">134217700</span></span><br><span class="line"><span class="comment">#文件的滚动与Event数量无关</span></span><br><span class="line"><span class="meta">a2.sinks.k2.hdfs.rollCount</span> = <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="meta">a2.channels.c2.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a2.channels.c2.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a2.channels.c2.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="meta">a2.sources.r2.channels</span> = <span class="string">c2</span></span><br><span class="line"><span class="meta">a2.sinks.k2.channel</span> = <span class="string">c2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>运行</p></li></ol><p><img src="https://i.loli.net/2020/07/04/2GyJa6XFcbEsAZV.png" alt="image-20200704180248167"></p><p><img src="https://i.loli.net/2020/07/04/uZKJ3BsS7zjUDMN.png" alt="image-20200704180020381"></p><p><font color="red">ps：对于所有与时间相关的转义序列，Event Header中必须存在以 “timestamp”的key（除非hdfs.useLocalTimeStamp设置为true，此方法会使用TimestampInterceptor自动添加timestamp）。</font></p><p><code>a3.sinks.k3.hdfs.useLocalTimeStamp = true</code></p><h2 id="读取本地目录，输出到HDFS"><a href="#读取本地目录，输出到HDFS" class="headerlink" title="读取本地目录，输出到HDFS"></a>读取本地目录，输出到HDFS</h2><p><strong>不要在监控目录中创建并持续修改文件</strong></p><p><strong>需求</strong></p><p>使用Flume监听整个目录的文件</p><p><strong>分析</strong></p><p><img src="https://i.loli.net/2020/07/04/hQmELGWcryJdSsv.png" alt="image-20200704180350871"></p><p><strong>配置文件</strong></p><p>创建配置文件<code>flume-dir-hdfs.conf</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">a3.sources</span> = <span class="string">r3</span></span><br><span class="line"><span class="meta">a3.sinks</span> = <span class="string">k3</span></span><br><span class="line"><span class="meta">a3.channels</span> = <span class="string">c3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="meta">a3.sources.r3.type</span> = <span class="string">spooldir</span></span><br><span class="line"><span class="meta">a3.sources.r3.spoolDir</span> = <span class="string">/opt/module/flume/upload</span></span><br><span class="line"><span class="meta">a3.sources.r3.fileSuffix</span> = <span class="string">.COMPLETED</span></span><br><span class="line"><span class="meta">a3.sources.r3.fileHeader</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#忽略所有以.tmp结尾的文件，不上传</span></span><br><span class="line"><span class="meta">a3.sources.r3.ignorePattern</span> = <span class="string">([^ ]*\.tmp)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="meta">a3.sinks.k3.type</span> = <span class="string">hdfs</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.path</span> = <span class="string">hdfs://hadoop102:9000/flume/upload/%Y%m%d/%H</span></span><br><span class="line"><span class="comment">#上传文件的前缀</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.filePrefix</span> = <span class="string">upload-</span></span><br><span class="line"><span class="comment">#是否按照时间滚动文件夹</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.round</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#多少时间单位创建一个新的文件夹</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.roundValue</span> = <span class="string">1</span></span><br><span class="line"><span class="comment">#重新定义时间单位</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.roundUnit</span> = <span class="string">hour</span></span><br><span class="line"><span class="comment">#是否使用本地时间戳</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.useLocalTimeStamp</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#积攒多少个Event才flush到HDFS一次</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.batchSize</span> = <span class="string">100</span></span><br><span class="line"><span class="comment">#设置文件类型，可支持压缩</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.fileType</span> = <span class="string">DataStream</span></span><br><span class="line"><span class="comment">#多久生成一个新的文件</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.rollInterval</span> = <span class="string">60</span></span><br><span class="line"><span class="comment">#设置每个文件的滚动大小大概是128M</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.rollSize</span> = <span class="string">134217700</span></span><br><span class="line"><span class="comment">#文件的滚动与Event数量无关</span></span><br><span class="line"><span class="meta">a3.sinks.k3.hdfs.rollCount</span> = <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="meta">a3.channels.c3.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a3.channels.c3.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a3.channels.c3.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="meta">a3.sources.r3.channels</span> = <span class="string">c3</span></span><br><span class="line"><span class="meta">a3.sinks.k3.channel</span> = <span class="string">c3</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/04/QO9CniNE21PAabs.png" alt="image-20200704180659850"></p><p>ps：</p><ol><li>不要在监控目录中创建并持续修改文件</li><li>上传完成的文件会以.COMPLETED结尾</li><li>被监控文件夹每500毫秒扫描一次文件变动</li></ol><h2 id="单数据源多出口案例-channel选择器-🔺"><a href="#单数据源多出口案例-channel选择器-🔺" class="headerlink" title="单数据源多出口案例(channel选择器)🔺"></a>单数据源多出口案例(channel选择器)🔺</h2><p>意思是单个source，多个channel和sink。</p><p><img src="https://i.loli.net/2020/07/04/Niuk8rWDHKovB5L.png" alt="image-20200704181219457"></p><p><strong>Flume1</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="meta">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="comment"># 配置多个</span></span><br><span class="line"><span class="meta">a1.sinks</span> = <span class="string">k1 k2</span></span><br><span class="line"><span class="meta">a1.channels</span> = <span class="string">c1 c2</span></span><br><span class="line"><span class="comment"># 将数据流复制给所有channel(设置channel选择器，多个channel才配置)</span></span><br><span class="line"><span class="meta">a1.sources.r1.selector.type</span> = <span class="string">replicating</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span> = <span class="string">exec</span></span><br><span class="line"><span class="meta">a1.sources.r1.command</span> = <span class="string">tail -F /opt/module/hive/logs/hive.log</span></span><br><span class="line"><span class="meta">a1.sources.r1.shell</span> = <span class="string">/bin/bash -c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="comment"># sink端的avro是一个数据发送者</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hostname</span> = <span class="string">hadoop102 </span></span><br><span class="line"><span class="meta">a1.sinks.k1.port</span> = <span class="string">4141</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sinks.k2.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a1.sinks.k2.hostname</span> = <span class="string">hadoop102</span></span><br><span class="line"><span class="meta">a1.sinks.k2.port</span> = <span class="string">4142</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the channel</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a1.channels.c1.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a1.channels.c1.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.channels.c2.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a1.channels.c2.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a1.channels.c2.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span> = <span class="string">c1 c2</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k2.channel</span> = <span class="string">c2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Flume2</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="meta">a2.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a2.sinks</span> = <span class="string">k1</span></span><br><span class="line"><span class="meta">a2.channels</span> = <span class="string">c1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="comment"># source端的avro是一个数据接收服务</span></span><br><span class="line"><span class="meta">a2.sources.r1.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a2.sources.r1.bind</span> = <span class="string">hadoop102</span></span><br><span class="line"><span class="meta">a2.sources.r1.port</span> = <span class="string">4141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="meta">a2.sinks.k1.type</span> = <span class="string">hdfs</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.path</span> = <span class="string">hdfs://hadoop102:9000/flume2/%Y%m%d/%H</span></span><br><span class="line"><span class="comment">#上传文件的前缀</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.filePrefix</span> = <span class="string">flume2-</span></span><br><span class="line"><span class="comment">#是否按照时间滚动文件夹</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.round</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#多少时间单位创建一个新的文件夹</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.roundValue</span> = <span class="string">1</span></span><br><span class="line"><span class="comment">#重新定义时间单位</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.roundUnit</span> = <span class="string">hour</span></span><br><span class="line"><span class="comment">#是否使用本地时间戳</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.useLocalTimeStamp</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#积攒多少个Event才flush到HDFS一次</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.batchSize</span> = <span class="string">100</span></span><br><span class="line"><span class="comment">#设置文件类型，可支持压缩</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.fileType</span> = <span class="string">DataStream</span></span><br><span class="line"><span class="comment">#多久生成一个新的文件</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.rollInterval</span> = <span class="string">600</span></span><br><span class="line"><span class="comment">#设置每个文件的滚动大小大概是128M</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.rollSize</span> = <span class="string">134217700</span></span><br><span class="line"><span class="comment">#文件的滚动与Event数量无关</span></span><br><span class="line"><span class="meta">a2.sinks.k1.hdfs.rollCount</span> = <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the channel</span></span><br><span class="line"><span class="meta">a2.channels.c1.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a2.channels.c1.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a2.channels.c1.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="meta">a2.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a2.sinks.k1.channel</span> = <span class="string">c1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Flume3</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="meta">a3.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a3.sinks</span> = <span class="string">k1</span></span><br><span class="line"><span class="meta">a3.channels</span> = <span class="string">c2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="meta">a3.sources.r1.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a3.sources.r1.bind</span> = <span class="string">hadoop102</span></span><br><span class="line"><span class="meta">a3.sources.r1.port</span> = <span class="string">4142</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="meta">a3.sinks.k1.type</span> = <span class="string">file_roll</span></span><br><span class="line"><span class="meta">a3.sinks.k1.sink.directory</span> = <span class="string">/opt/module/data/flume3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the channel</span></span><br><span class="line"><span class="meta">a3.channels.c2.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a3.channels.c2.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a3.channels.c2.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="meta">a3.sources.r1.channels</span> = <span class="string">c2</span></span><br><span class="line"><span class="meta">a3.sinks.k1.channel</span> = <span class="string">c2</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ps：输出的本地目录必须是已经存在的目录，如果该目录不存在，并不会创建新的目录。</p><p><strong>最后，多个agent的运行顺序应该是从后往前，需要先确定好输出位置。</strong></p><h2 id="单数据源多出口案例-sink组-🔺"><a href="#单数据源多出口案例-sink组-🔺" class="headerlink" title="单数据源多出口案例(sink组)🔺"></a>单数据源多出口案例(sink组)🔺</h2><p><img src="https://i.loli.net/2020/07/04/I7tF8gMPyBTGVnN.png" alt="image-20200704181516337"></p><p>通过一个channel发送数据到sink组，sink组内所有sink的数据加起来等于channel，这样实现负载均衡。</p><p><strong>Flume1</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="meta">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="comment"># 声明组</span></span><br><span class="line"><span class="meta">a1.sinkgroups</span> = <span class="string">g1</span></span><br><span class="line"><span class="meta">a1.sinks</span> = <span class="string">k1 k2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span> = <span class="string">netcat</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span> = <span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span> = <span class="string">44444</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sinkgroups.g1.processor.type</span> = <span class="string">load_balance</span></span><br><span class="line"><span class="meta">a1.sinkgroups.g1.processor.backoff</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">a1.sinkgroups.g1.processor.selector</span> = <span class="string">round_robin</span></span><br><span class="line"><span class="meta">a1.sinkgroups.g1.processor.selector.maxTimeOut</span>=<span class="string">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hostname</span> = <span class="string">hadoop102</span></span><br><span class="line"><span class="meta">a1.sinks.k1.port</span> = <span class="string">4141</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sinks.k2.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a1.sinks.k2.hostname</span> = <span class="string">hadoop102</span></span><br><span class="line"><span class="meta">a1.sinks.k2.port</span> = <span class="string">4142</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the channel</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a1.channels.c1.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a1.channels.c1.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="comment"># 为组添加sink k1,k2</span></span><br><span class="line"><span class="meta">a1.sinkgroups.g1.sinks</span> = <span class="string">k1 k2</span></span><br><span class="line"><span class="comment"># k1的数据来源于channel c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br><span class="line"><span class="comment"># k2的数据来源于channel c1</span></span><br><span class="line"><span class="meta">a1.sinks.k2.channel</span> = <span class="string">c1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Flume2,3</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="meta">a2.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a2.sinks</span> = <span class="string">k1</span></span><br><span class="line"><span class="meta">a2.channels</span> = <span class="string">c1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="meta">a2.sources.r1.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a2.sources.r1.bind</span> = <span class="string">hadoop102</span></span><br><span class="line"><span class="meta">a2.sources.r1.port</span> = <span class="string">4141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="meta">a2.sinks.k1.type</span> = <span class="string">logger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the channel</span></span><br><span class="line"><span class="meta">a2.channels.c1.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a2.channels.c1.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a2.channels.c1.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="meta">a2.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a2.sinks.k1.channel</span> = <span class="string">c1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Flume监控"><a href="#Flume监控" class="headerlink" title="Flume监控"></a>Flume监控</h1><p>可以使用开源之Ganglia</p><h1 id="自定义Source"><a href="#自定义Source" class="headerlink" title="自定义Source"></a>自定义Source</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Source是负责接收数据到Flume Agent的组件。Source组件可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy。官方提供的source类型已经很多，但是有时候并不能满足实际开发当中的需求，此时我们就需要根据实际需求自定义某些source。</p><p>官方也提供了自定义source的接口：</p><p><a href="https://flume.apache.org/FlumeDeveloperGuide.html#source">https://flume.apache.org/FlumeDeveloperGuide.html#source</a></p><p>根据官方说明自定义MySource需要继承AbstractSource类并实现Configurable和PollableSource接口。</p><p>实现相应方法：</p><ol><li><p>getBackOffSleepIncrement()//暂不用</p></li><li><p>getMaxBackOffSleepInterval()//暂不用</p></li><li><p>configure(Context context)//初始化context（读取配置文件内容）</p></li><li><p>process()//获取数据封装成event并写入channel，这个方法将被循环调用。</p></li></ol><h1 id="自定义Sink"><a href="#自定义Sink" class="headerlink" title="自定义Sink"></a>自定义Sink</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>Sink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另一个Flume Agent。</p><p>Sink是完全事务性的。在从Channel批量删除数据之前，每个Sink用Channel启动一个事务。批量事件一旦成功写出到存储系统或下一个Flume Agent，Sink就利用Channel提交事务。事务一旦被提交，该Channel从自己的内部缓冲区删除事件。</p><p>Sink组件目的地包括hdfs、logger、avro、thrift、ipc、file、null、HBase、solr、自定义。官方提供的Sink类型已经很多，但是有时候并不能满足实际开发当中的需求，此时我们就需要根据实际需求自定义某些Sink。</p><p>官方也提供了自定义source的接口：</p><p><a href="https://flume.apache.org/FlumeDeveloperGuide.html#sink">https://flume.apache.org/FlumeDeveloperGuide.html#sink</a></p><p>根据官方说明自定义MySink需要继承AbstractSink类并实现Configurable接口。</p><p>实现相应方法：</p><ol><li><p>configure(Context context)//初始化context（读取配置文件内容）</p></li><li><p>process()//从Channel读取获取数据（event），这个方法将被循环调用。</p></li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><strong>如何实现Flume数据传输的监控的</strong></p><p>使用第三方框架Ganglia实时监控Flume</p><hr><p><strong>Flume的Source，Sink，Channel的作用？你们Source是什么类型？</strong></p><ol><li>Source组件是专门用来收集数据的，可以处理各种类型、各种格式的日志数据，包括avro、exec、spooling directory、netcat。</li><li>Channel组件对采集到的数据进行缓存，可以存放在Memory或File中</li><li>Sink组件是用于把数据发送到目的地的组件，目的地包括Hdfs、Logger、avro、thrift、ipc、file、Hbase、solr、自定义。</li></ol><hr><p> <strong>Flume的Channel Selectors</strong></p><p><img src="https://i.loli.net/2020/07/04/IJ2KfFhs8GX4RMn.png" alt="image-20200704182235828"></p><hr><p><strong>Flume采集数据会丢失吗?</strong></p><p>不会，Channel存储可以存储在File中，数据传输自身有事务。</p><hr><p><strong>Flume的事务机制</strong></p><p>lume的事务机制（类似数据库的事务机制）：Flume使用两个独立的事务分别负责从Soucrce到Channel，以及从Channel到Sink的事件传递。比如spooling directory source 为文件的每一行创建一个事件，一旦事务中所有的事件全部传递到Channel且提交成功，那么Soucrce就将该文件标记为完成。同理，事务以类似的方式处理从Channel到Sink的传递过程，如果因为某种原因使得事件无法记录，那么事务将会回滚。且所有的事件都会保持到Channel中，等待重新传递。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive概述</title>
      <link href="2020/07/02/Hive%E6%A6%82%E8%BF%B0/"/>
      <url>2020/07/02/Hive%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="hive概述"><a href="#hive概述" class="headerlink" title="hive概述"></a>hive概述</h1><h2 id="hive背景"><a href="#hive背景" class="headerlink" title="hive背景"></a>hive背景</h2><p>引入原因</p><ul><li><p>对存在HDFS上的文件或HBase中的表进行查询时，是要手工写一堆MapReduce代码</p></li><li><p>对于统计任务，只能由动MapReduce的程序员才能搞定</p></li><li><p>耗时耗力，更多精力没有有效的释放出来</p></li><li><p> Hive基于一个统一的查询分析层，通过SQL语句的方式对HDFS上的数据进行查询、统计和分析</p></li></ul><h2 id="什么是Hive"><a href="#什么是Hive" class="headerlink" title="什么是Hive"></a>什么是Hive</h2><p>Hive：由Facebook开源用于解决海量结构化日志的数据统计。</p><p>Hive是基于Hadoop的一个<strong>数据仓库工具</strong>，可以<font color="red"><strong>将结构化的数据文件映射为一张表，并提供类SQL查询功能</strong></font>。</p><p>本质是：将HQL转化成MapReduce程序</p><ul><li>Hive是一个SQL解析引擎，将SQL语句转译成MR Job，然后再Hadoop平台上运行，达到快速开发的目的。</li><li> Hive处理的数据存储在HDFS</li><li> Hive分析数据底层的实现是MapReduce</li><li> 执行程序运行在Yarn上</li><li>Hive的内容是读多写少，不支持对数据的更新</li><li>Hive中没有定义专门的数据格式，由用户指定，需要指定三个属性：<ol><li>列分隔符</li><li>行分隔符</li><li>读取文件数据的方法</li></ol></li></ul><p><img src="https://i.loli.net/2020/07/02/qj3hpVJ5LwzuIr8.png" alt="image-20200702100710220"></p><h2 id="hive优缺点"><a href="#hive优缺点" class="headerlink" title="hive优缺点"></a>hive优缺点</h2><p><strong>优点</strong></p><ol><li>操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）</li><li>避免了去写MapReduce，减少开发人员的学习成本</li><li>Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合</li><li>Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高</li></ol><p><strong>缺点</strong></p><ol><li>Hive的HQL表达能力有限<ul><li>迭代式算法无法表达</li><li>数据挖掘方面不擅长，由于MapReduce数据处理流程的限制，效率更高的算法却无法实现</li></ul></li><li>Hive的效率比较低<ul><li>Hive自动生成的MapReduce作业，通常情况下不够智能化</li><li>Hive调优比较困难，粒度较粗</li></ul></li></ol><h2 id="hive架构"><a href="#hive架构" class="headerlink" title="hive架构"></a>hive架构</h2><p><img src="https://i.loli.net/2020/07/02/Gl7UX5RfbkOTdZg.png" alt="Snipaste_2020-07-02_10-44-28"></p><p><strong>用户接口：Client</strong></p><p>CLI（command-line interface）、JDBC/ODBC(jdbc访问hive)、WEBUI（浏览器访问hive）</p><p><strong>元数据：Metastore</strong></p><p>元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列/分区字段、表的类型（是否是外部表）、表的数据所在目录等</p><p><font color="red">ps：默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore</font></p><p><strong>Hadoop</strong></p><p>使用HDFS进行存储，使用MapReduce进行计算</p><p><strong>驱动器：Driver</strong></p><ul><li>解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误</li><li>编译器（Physical Plan）：将AST编译生成逻辑执行计划</li><li>优化器（Query Optimizer）：对逻辑执行计划进行优化</li><li>执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark</li></ul><p><img src="https://i.loli.net/2020/07/02/ryqGYnsHFmg8fES.png" alt="image-20200702104759443"></p><p>Hive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。</p><h2 id="hive与数据库比较"><a href="#hive与数据库比较" class="headerlink" title="hive与数据库比较"></a>hive与数据库比较</h2><p>由于 Hive 采用了类似SQL 的查询语言 HQL(Hive Query Language)，因此很容易将 Hive 理解为数据库。其实从结构上来看，Hive 和数据库除了拥有类似的查询语言，再无类似之处。本文将从多个方面来阐述 Hive 和数据库的差异。数据库可以用在 Online 的应用中，但是Hive 是为数据仓库而设计的，清楚这一点，有助于从应用角度理解 Hive 的特性。</p><h3 id="查询语言"><a href="#查询语言" class="headerlink" title="查询语言"></a>查询语言</h3><p>由于SQL被广泛的应用在数据仓库中，因此，专门针对Hive的特性设计了类SQL的查询语言HQL。熟悉SQL开发的开发者可以很方便的使用Hive进行开发。</p><h3 id="数据存储位置"><a href="#数据存储位置" class="headerlink" title="数据存储位置"></a>数据存储位置</h3><p>Hive 是建立在 Hadoop 之上的，所有 Hive 的数据都是存储在 HDFS 中的。而数据库则可以将数据保存在块设备或者本地文件系统中。</p><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><p>由于Hive是针对数据仓库应用设计的，而<font color="red">数据仓库的内容是读多写少的</font>。因此，<font color="red">Hive中不建议对数据的改写，所有的数据都是在加载的时候确定好的</font>。而数据库中的数据通常是需要经常进行修改的，因此可以使用 INSERT INTO … VALUES 添加数据，使用 UPDATE … SET修改数据。</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>Hive中大多数查询的执行是通过 Hadoop 提供的 MapReduce 来实现的。而数据库通常有自己的执行引擎。</p><h3 id="执行延迟"><a href="#执行延迟" class="headerlink" title="执行延迟"></a>执行延迟</h3><p>Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导致 Hive 执行延迟高的因素是 MapReduce框架。由于MapReduce 本身具有较高的延迟，因此在利用MapReduce 执行Hive查询时，也会有较高的延迟。相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时候，Hive的并行计算显然能体现出优势。</p><h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><p>由于Hive是建立在Hadoop之上的，因此Hive的可扩展性是和Hadoop的可扩展性是一致的（世界上最大的Hadoop 集群在 Yahoo!，2009年的规模在4000 台节点左右）。而数据库由于 ACID 语义的严格限制，扩展行非常有限。目前最先进的并行数据库 <a href="http://lib.csdn.net/base/oracle">Oracle</a> 在理论上的扩展能力也只有100台左右。</p><h3 id="HQL与传统SQL的区别"><a href="#HQL与传统SQL的区别" class="headerlink" title="HQL与传统SQL的区别"></a>HQL与传统SQL的区别</h3><table><thead><tr><th></th><th>HQL</th><th>SQL</th></tr></thead><tbody><tr><td>数据存储</td><td>HDFS(源数据)、MySql或者Derby(元数据)</td><td>local FS</td></tr><tr><td>数据格式</td><td>用户自定义</td><td>系统决定</td></tr><tr><td>数据更新</td><td>不支持</td><td>支持</td></tr><tr><td>索引</td><td>有</td><td>有</td></tr><tr><td>执行</td><td>MapReduce</td><td>Executor</td></tr><tr><td>数据规模</td><td>大</td><td>小</td></tr><tr><td>数据检查</td><td>读时模式</td><td>写时模式</td></tr></tbody></table><p><strong>什么是读时模式？</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很少情况下往hive中加载的数据是比较规整的，字段与字段之间都是分割好的，每一个字段都不是脏数据，并且每一个字段都是有意义的。<br>但是在真实场景中不见得这个尽人意，当你把不符合某个表规范的脏数据插入到这个表中，不会出错，但是当你读这个表的时候，脏数据读出的是NULL。</p><h1 id="hive安装1-x"><a href="#hive安装1-x" class="headerlink" title="hive安装1.x"></a>hive安装1.x</h1><p><strong>下载地址</strong></p><p><a href="http://mirror.bit.edu.cn/apache/hive/">http://mirror.bit.edu.cn/apache/hive/</a></p><p><strong>节点选择</strong></p><p>选择一台资源充足的节点，也可是集群外</p><p><strong>安装部署</strong></p><ol><li>把apache-hive-1.2.1-bin.tar.gz上传到linux的<code>/opt/softwares</code>目录下</li><li>解压apache-hive-1.2.1-bin.tar.gz到<code>/opt/modules/</code>目录下面</li><li>修改apache-hive-1.2.1-bin.tar.gz的名称为hive</li><li>修改/opt/module/hive/conf目录下的hive-env.sh.template名称为<code>hive-env.sh</code></li><li>配置<code>hive-env.sh</code>文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/opt/modules/hadoop-2.7.2</span><br><span class="line">export HIVE_CONF_DIR=/opt/modules/hive/conf</span><br></pre></td></tr></table></figure><h2 id="本地模式-derby"><a href="#本地模式-derby" class="headerlink" title="本地模式(derby)"></a>本地模式(derby)</h2><p><font color="red"><strong>使用derby存储方式时，运行hive会在当前目录生成一个derby文件和一个metastore_db目录。这种存储方式的弊端是在同一个目录下同时只能有一个hive客户端能使用数据库，否则错误</strong></font></p><ol><li>修改/opt/modules/hive/conf目录下的hive-site.xml.template名称为<code>hive-site.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:derby:;databaseName=metastore_db;create=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.derby.jdbc.EmbeddedDriver<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.local<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br></pre></td></tr></table></figure><ol start="2"><li><code>bin/hive</code>启动</li></ol><h2 id="本地模式-MYSQL"><a href="#本地模式-MYSQL" class="headerlink" title="本地模式(MYSQL)"></a>本地模式(MYSQL)</h2><p>没有上述的缺陷，使用MySQL存储元数据。</p><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p><strong>docker安装MySQL</strong></p><p><em>docker-compose.yml</em></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">example</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><p><code>docker-compose.yml up -d </code>开启服务。</p><hr><p><strong>远程登陆设置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> Host=<span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> Host=<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h3 id="Hive元数据配置到MySql"><a href="#Hive元数据配置到MySql" class="headerlink" title="Hive元数据配置到MySql"></a>Hive元数据配置到MySql</h3><ol><li><p>将MySQL的驱动包拷贝到<code>/opt/modules/hive/lib/</code></p></li><li><p>在<code>/opt/modules/hive/conf</code>目录下修改一个<code>hive-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.local<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop203:3306/metastore?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span> useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--不同的版本的MySQL的ConnectionDriverName不同，请自行修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>example<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure> </property></configuration><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   3. 启动：&#96;bin&#x2F;hive&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### HiveJDBC访问</span><br><span class="line"></span><br><span class="line">在hive配置好的节点(Hadoop201)</span><br><span class="line"></span><br><span class="line">&#96;bin&#x2F;hiveserver2&#96;</span><br><span class="line"></span><br><span class="line">可以在本节点或者其他hive(空白的，未配置过的hive)节点</span><br><span class="line"></span><br><span class="line">&#96;bin&#x2F;beeline&#96;</span><br><span class="line"></span><br><span class="line">**连接hiveserver2**</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;shell</span><br><span class="line">beeline&gt; !connect jdbc:hive2:&#x2F;&#x2F;hadoop201:10000（回车）</span><br></pre></td></tr></table></figure></li></ol><h1 id="hive安装2-x"><a href="#hive安装2-x" class="headerlink" title="hive安装2.x"></a>hive安装2.x</h1><p><font color="red"> <strong>当使用的<em>hive</em> 是<em>2</em>.<em>x</em> 版本时，必须手动初始化元数据库。</strong></font></p><h2 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h2><p><a href="http://mirror.bit.edu.cn/apache/hive/">http://mirror.bit.edu.cn/apache/hive/</a></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p><code># vim /etc/profile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_HOME=</span><br><span class="line">export PATH=$HIVE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>使得配置的环境变量立即生效：</p><p><code># source /etc/profile</code></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p><strong>1. hive-env.sh</strong></p><p>进入安装目录下的 <code>conf/</code> 目录，拷贝 Hive 的环境配置模板 <code>flume-env.sh.template</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp hive-env.sh.template hive-env.sh</span><br></pre></td></tr></table></figure><p>修改 <code>hive-env.sh</code>，指定 Hadoop 的安装路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=</span><br></pre></td></tr></table></figure><p><strong>2. hive-site.xml</strong></p><p>新建 hive-site.xml 文件，内容如下，主要是配置存放元数据的 MySQL 的地址、驱动、用户名和密码等信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop203:3306/metastore?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span> useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--不同的版本的MySQL的ConnectionDriverName不同，请自行修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>example<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="拷贝数据库驱动"><a href="#拷贝数据库驱动" class="headerlink" title="拷贝数据库驱动"></a>拷贝数据库驱动</h2><p>将 MySQL 驱动包拷贝到 Hive 安装目录的 <code>lib</code> 目录下, MySQL 驱动的下载地址为：<a href="https://dev.mysql.com/downloads/connector/j/">dev.mysql.com/downloads/c…</a> , 在本仓库的<a href="https://github.com/heibaiying/BigData-Notes/tree/master/resources">resources</a> 目录下我也上传了一份，有需要的可以自行下载。</p><h2 id="初始化元数据库"><a href="#初始化元数据库" class="headerlink" title="初始化元数据库"></a>初始化元数据库</h2><p>当使用的 hive 是 1.x 版本时，可以不进行初始化操作，Hive 会在第一次启动的时候会自动进行初始化，但不会生成所有的元数据信息表，只会初始化必要的一部分，在之后的使用中用到其余表时会自动创建；</p><p><strong>当使用的 hive 是 2.x 版本时，必须手动初始化元数据库。初始化命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> schematool 命令在安装目录的 bin 目录下，由于上面已经配置过环境变量，在任意位置执行即可</span></span><br><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>由于已经将 Hive 的 bin 目录配置到环境变量，直接使用以下命令启动，成功进入交互式命令行后执行 <code>show databases</code> 命令，无异常则代表搭建成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> hive</span></span><br></pre></td></tr></table></figure><h2 id="hiveserver2-beeline"><a href="#hiveserver2-beeline" class="headerlink" title="hiveserver2/beeline"></a>hiveserver2/beeline</h2><p>Hive 内置了 HiveServer 和 HiveServer2 服务，两者都允许客户端使用多种编程语言进行连接，但是 HiveServer 不能处理多个客户端的并发请求，因此产生了 HiveServer2。HiveServer2（HS2）允许远程客户端可以使用各种编程语言向 Hive 提交请求并检索结果，支持多客户端并发访问和身份验证。HS2 是由多个服务组成的单个进程，其包括基于 Thrift 的 Hive 服务（TCP 或 HTTP）和用于 Web UI 的 Jetty Web 服务。</p><p>HiveServer2 拥有自己的 CLI 工具——Beeline。Beeline 是一个基于 SQLLine 的 JDBC 客户端。由于目前 HiveServer2 是 Hive 开发维护的重点，所以官方更加推荐使用 Beeline 而不是 Hive CLI。以下主要讲解 Beeline 的配置方式。</p><h3 id="启动hiveserver2"><a href="#启动hiveserver2" class="headerlink" title="启动hiveserver2"></a>启动hiveserver2</h3><p>由于上面已经配置过环境变量，这里直接启动即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nohup hiveserver2 &amp;</span></span><br></pre></td></tr></table></figure><h3 id="使用beeline"><a href="#使用beeline" class="headerlink" title="使用beeline"></a>使用beeline</h3><p>可以使用以下命令进入 beeline 交互式命令行，出现 <code>Connected</code> 则代表连接成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> beeline -u jdbc:hive2://hadoop001:10000</span></span><br></pre></td></tr></table></figure><h1 id="hive常见属性配置"><a href="#hive常见属性配置" class="headerlink" title="hive常见属性配置"></a>hive常见属性配置</h1><h2 id="Hive数据仓库位置配置"><a href="#Hive数据仓库位置配置" class="headerlink" title="Hive数据仓库位置配置"></a>Hive数据仓库位置配置</h2><ol><li><p>Default数据仓库的最原始位置是在hdfs上的：/user/hive/warehouse路径下</p></li><li><p><font color="red">在仓库目录下，没有对默认的数据库default创建文件夹。如果某张表属于default数据库，直接在数据仓库目录下创建一个文件夹</font></p></li><li><p>修改default数据仓库原始位置（将hive-default.xml.template如下配置信息拷贝到hive-site.xml文件中）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>location of default database for the warehouse<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置同组用户有执行权限</p><p><code>bin/hdfs dfs -chmod g+w /user/hive/warehouse</code></p></li></ol><h2 id="查询后信息显示配置"><a href="#查询后信息显示配置" class="headerlink" title="查询后信息显示配置"></a>查询后信息显示配置</h2><ol><li><p>在hive-site.xml文件中添加如下配置信息，就可以实现显示当前数据库，以及查询表的头信息配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.header<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.current.db<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>重新启动hive，对比配置前后差异</p></li></ol><p><img src="https://i.loli.net/2020/07/02/rERF1JKIzDPCdo7.png" alt="image-20200702153859361"></p><h2 id="Hive运行日志信息配置"><a href="#Hive运行日志信息配置" class="headerlink" title="Hive运行日志信息配置"></a>Hive运行日志信息配置</h2><ol><li><p>Hive的log默认存放在/tmp/atguigu/hive.log目录下（当前用户名下）</p></li><li><p>修改hive的log存放日志到/opt/modules/hive/logs</p><ul><li><p>修改/opt/modules/hive/conf/hive-log4j.properties.template文件名称为</p><p>hive-log4j.properties</p></li><li><p>在hive-log4j.properties文件中修改log存放位置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">hive.log.dir</span>=<span class="string">/opt/modules/hive/logs</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="hive数据类型"><a href="#hive数据类型" class="headerlink" title="hive数据类型"></a>hive数据类型</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table><thead><tr><th>Hive数据类型</th><th>Java数据类型</th><th>长度</th><th>例子</th></tr></thead><tbody><tr><td>TINYINT</td><td>byte</td><td>1byte有符号整数</td><td>20</td></tr><tr><td>SMALINT</td><td>short</td><td>2byte有符号整数</td><td>20</td></tr><tr><td>INT</td><td>int</td><td>4byte有符号整数</td><td>20</td></tr><tr><td>BIGINT</td><td>long</td><td>8byte有符号整数</td><td>20</td></tr><tr><td>BOOLEAN</td><td>boolean</td><td>布尔类型，true或者false</td><td>TRUE FALSE</td></tr><tr><td>FLOAT</td><td>float</td><td>单精度浮点数</td><td>3.14159</td></tr><tr><td>DOUBLE</td><td>double</td><td>双精度浮点数</td><td>3.14159</td></tr><tr><td>STRING</td><td>string</td><td>字符系列。可以指定字符集。可以使用单引号或者双引号。</td><td>‘now is the time’ “for all good men”</td></tr><tr><td>TIMESTAMP</td><td></td><td>时间类型</td><td></td></tr><tr><td>BINARY</td><td></td><td>字节数组</td><td></td></tr></tbody></table><p>对于Hive的String类型相当于数据库的varchar类型，该类型是一个可变的字符串，不过它不能声明其中最多能存储多少个字符，理论上它可以存储2GB的字符数。</p><h2 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a>集合数据类型</h2><table><thead><tr><th>数据类型</th><th>描述</th><th>语法示例</th></tr></thead><tbody><tr><td>STRUCT</td><td>和c语言中的struct类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是STRUCT{first STRING, last STRING},那么第1个元素可以通过字段.first来引用。</td><td>struct()  例如struct&lt;street:string,  city:string&gt;</td></tr><tr><td>MAP</td><td>MAP是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是MAP，其中键-&gt;值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么可以通过字段名[‘last’]获取最后一个元素</td><td>map()  例如map&lt;string, int&gt;</td></tr><tr><td>ARRAY</td><td>数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’,  ‘Doe’]，那么第2个元素可以通过数组名[1]进行引用。</td><td>Array()  例如array<string></td></tr></tbody></table><p>Hive有三种复杂数据类型ARRAY、MAP 和 STRUCT。ARRAY和MAP与Java中的Array和Map类似，而STRUCT与C语言中的Struct类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。</p><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><p>Hive的原子数据类型是可以进行隐式转换的，类似于Java的类型转换，例如某表达式使用INT类型，TINYINT会自动转换为INT类型，但是Hive不会进行反向转化，例如，某表达式使用TINYINT类型，INT不会自动转换为TINYINT类型，它会返回错误，除非使用CAST操作。</p><p><strong>隐式类型转换规则如下</strong></p><ol><li>任何整数类型都可以隐式地转换为一个<strong>范围更广的类型</strong>，如TINYINT可以转换成INT，INT可以转换成BIGINT。</li><li>所有整数类型、FLOAT和<strong>STRING类型</strong>都可以隐式地转换成DOUBLE</li><li>TINYINT、SMALLINT、INT都可以转换为FLOAT</li><li>BOOLEAN类型不可以转换为任何其它的类型</li></ol><p><strong>可以使用CAST操作显示进行数据类型转换</strong></p><p>例如CAST(‘1’ AS INT)将把字符串’1’ 转换成整数1；如果强制类型转换失败，如执行CAST(‘X’ AS INT)，表达式返回空值 NULL。</p><h1 id="hive的表类型"><a href="#hive的表类型" class="headerlink" title="hive的表类型"></a>hive的表类型</h1><p><strong>建表语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name </span><br><span class="line">[(col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)] </span><br><span class="line">[<span class="keyword">COMMENT</span> table_comment] </span><br><span class="line">[PARTITIONED <span class="keyword">BY</span> (col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)] </span><br><span class="line">[CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...) </span><br><span class="line">[SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>], ...)] <span class="keyword">INTO</span> num_buckets BUCKETS] </span><br><span class="line">[<span class="keyword">ROW</span> <span class="keyword">FORMAT</span> row_format] </span><br><span class="line">[<span class="keyword">STORED</span> <span class="keyword">AS</span> file_format] </span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line">[TBLPROPERTIES (property_name=property_value, ...)]</span><br><span class="line">[<span class="keyword">AS</span> select_statement]</span><br></pre></td></tr></table></figure><p><strong>建表方式</strong></p><ol><li><p><code>like</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> zxj1 <span class="keyword">like</span> zxjtb1;         <span class="comment">-- 只是创建表结构</span></span><br></pre></td></tr></table></figure></li><li><p><code>AS</code>：<strong>无需再次提及表架构，因为你指定要从另一个表中获取模式。可以在select时选择列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> zxj2 <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">from</span> zxjtb1;<span class="comment">--会创建相应的表结构，并且插入数据</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>数据插入方式</strong></p><ol><li><p><code>INSERT INTO ... VALUES ....</code></p></li><li><p><code>load</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> [<span class="keyword">local</span>] inpath <span class="string">&#x27;/opt/module/datas/student.txt&#x27;</span> [overwrite] <span class="keyword">into</span> <span class="keyword">table</span> student [<span class="keyword">partition</span> (partcol1=val1,…)];  <span class="comment">-- 实质上是把文件直接上传到HDFS</span></span><br></pre></td></tr></table></figure><ul><li>load data:表示加载数据</li><li>local:表示从本地加载数据到hive表；否则从HDFS加载数据到hive表</li><li>inpath:表示加载数据的路径</li><li>overwrite:表示覆盖表中已有数据，否则表示追加</li><li>into table:表示加载到哪张表</li><li>student:表示具体的表</li><li>partition:表示上传到指定分区</li></ul></li><li><p><code>from ... select</code>；<strong>insert不支持插入部分字段，并且select的列数量和类型要和插入的表一致</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from zxj2 <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> zxjtb1 <span class="keyword">select</span> *;                 <span class="comment">-- 查询其他表数据 insert 到新表中</span></span><br></pre></td></tr></table></figure></li><li><p>创建表时通过Location指定加载数据路径</p></li><li><p>Import数据到指定Hive表中；<strong>注意：先用export导出后，再将数据导入。</strong>(会附带所有用到的元数据)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import table student2 partition(month=&#x27;201709&#x27;) from</span><br><span class="line">&#x27;/user/hive/warehouse/export/student&#x27;;</span><br></pre></td></tr></table></figure></li></ol><p><strong>数据导出方式</strong></p><ol><li><p><code>insert</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">&#x27;/opt/module/datas/export/student1&#x27;</span> <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>   <span class="keyword">select</span> * <span class="keyword">from</span> student; <span class="comment">-- 导出本地</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">directory</span> <span class="string">&#x27;/user/atguigu/student2&#x27;</span> <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>  <span class="keyword">select</span> * <span class="keyword">from</span> student;    <span class="comment">-- 没有local，到hdfs</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>Hive Shell 命令</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hive -e &#x27;select * from default.student;&#x27; &gt; /opt/module/datas/export/student4.txt;</span><br></pre></td></tr></table></figure></li><li><p><code> Export导出到HDFS上</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export table default.student to &#x27;/user/hive/warehouse/export/student&#x27;; <span class="comment">-- hdfs中</span></span><br></pre></td></tr></table></figure><p>export和import主要用于两个Hadoop平台集群之间Hive表迁移(因为包含元数据)</p></li></ol><h2 id="内部表"><a href="#内部表" class="headerlink" title="内部表"></a>内部表</h2><p><strong>创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> zxjtb1(</span><br><span class="line">        <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">        <span class="keyword">name</span> <span class="keyword">STRING</span>,</span><br><span class="line">          age <span class="built_in">INT</span>,</span><br><span class="line">          gfs <span class="built_in">ARRAY</span>&lt;<span class="keyword">STRING</span>&gt;,</span><br><span class="line">          address <span class="keyword">MAP</span>&lt;<span class="keyword">STRING</span>,<span class="keyword">STRING</span>&gt;,</span><br><span class="line">        info <span class="keyword">STRUCT</span>&lt;country:<span class="keyword">String</span>,province:<span class="keyword">String</span>,shi:<span class="keyword">String</span>&gt;</span><br><span class="line">        )</span><br><span class="line">            <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span>                   <span class="comment">-- 行格式分割</span></span><br><span class="line">            <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27; &#x27;</span>                <span class="comment">-- 字段的分割符</span></span><br><span class="line">            COLLECTION ITEMS <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>    <span class="comment">-- 集合元素间的分割符</span></span><br><span class="line">            <span class="keyword">MAP</span> <span class="keyword">KEYS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;:&#x27;</span>               <span class="comment">-- Map中key-value的分隔符</span></span><br><span class="line">             <span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span>;              <span class="comment">-- 行与行分隔符</span></span><br></pre></td></tr></table></figure><h2 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h2><p><strong>创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">建表：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> wc_external </span><br><span class="line">           (word1 <span class="keyword">STRING</span>, </span><br><span class="line">            word2 <span class="keyword">STRING</span></span><br><span class="line">            ) </span><br><span class="line">         <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> </span><br><span class="line">           <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27; &#x27;</span> </span><br><span class="line">           location <span class="string">&#x27;/test/external&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>外部表与内部表的区别</strong></p><ul><li>在导入数据到外部表，数据并没有移动到自己的数据仓库目录下，也就是说外部表中的数据并不是由它自己来管理的！而表则不一样；</li><li><font color="red">在删除内表的时候，Hive将会把属于表的元数据和数据全部删掉；而删除外部表的时候，Hive仅仅删除外部表的元数据，HDFS数据是不会删除的。</font></li></ul><h2 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h2><p><strong>创建临时表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">TEMPORARY</span> <span class="keyword">table</span> ttabc(<span class="keyword">id</span> <span class="built_in">Int</span>,<span class="keyword">name</span> <span class="keyword">String</span>)</span><br></pre></td></tr></table></figure><ul><li>临时表不支持分区字段和创建索引</li><li>每次退出Hive脚本时都会清空此次创建的临时表</li></ul><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p>分区表实际上就是对应一个HDFS文件系统上的独立的文件夹，该文件夹下是该分区所有的数据文件。Hive中的分区就是分目录，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过WHERE子句中的表达式选择查询所需要的指定的分区，这样的查询效率会提高很多(扫描的数据少了)</p><ul><li>在 Hive 中，表中的一个 Partition 对应于表下的一个目录，所有的 Partition 的数据都存储在对应的目录中<ul><li>例如：pvs 表中包含 ds 和 city 两个 Partition，则</li><li>对应于 ds = 20090801, ctry = US 的 HDFS 子目录为：/wh/pvs/ds=20090801/ctry=US；</li><li>对应于 ds = 20090801, ctry = CA 的 HDFS 子目录为；/wh/pvs/ds=20090801/ctry=CA；</li></ul></li><li>partition是辅助查询，缩小查询范围，加快数据的检索速度和对数据按照一定的规格和条件进行管理。</li><li>分区表(<strong>防止暴力扫描全表</strong>)又分为：静态分区表和动态分区表</li></ul><h3 id="静态分区表"><a href="#静态分区表" class="headerlink" title="静态分区表"></a>静态分区表</h3><p><strong>创建单分区</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> day_table (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">content</span> <span class="keyword">string</span></span><br><span class="line">) </span><br><span class="line">    partitioned <span class="keyword">by</span> (dt <span class="keyword">string</span>)      <span class="comment">-- 按照dt分区</span></span><br><span class="line">    <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> </span><br><span class="line">    <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span> ;</span><br></pre></td></tr></table></figure><p><strong>创建多分区</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> day_hour_table (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>, </span><br><span class="line"><span class="keyword">content</span> <span class="keyword">string</span></span><br><span class="line">) </span><br><span class="line">    partitioned <span class="keyword">by</span> (dt <span class="built_in">int</span>,<span class="keyword">hour</span> <span class="built_in">int</span>)   <span class="comment">-- 按照dt,hour分区</span></span><br><span class="line">    <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> </span><br><span class="line">    <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span> ;</span><br></pre></td></tr></table></figure><p><strong>静态分区表加载数据必须指定分区</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> day_table <span class="keyword">partition</span> (dt = <span class="string">&quot;9-26&quot;</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&quot;anb&quot;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> day_hour_table <span class="keyword">partition</span>(dt=<span class="number">9</span>,<span class="keyword">hour</span>=<span class="number">1</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&quot;a2 bc&quot;</span>);</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/ceshi&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span> day_table <span class="keyword">partition</span> (dt=<span class="string">&quot;9-27&quot;</span>);</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/ceshi&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span> day_table <span class="keyword">partition</span> (dt=<span class="number">10</span>,<span class="keyword">hour</span>=<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>删除分区</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> day_table <span class="keyword">DROP</span> <span class="keyword">PARTITION</span> (dt=<span class="string">&quot;9-27&quot;</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> day_table <span class="keyword">DROP</span> <span class="keyword">PARTITION</span> (dt=<span class="number">10</span>,<span class="keyword">hour</span>=<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>查询表的分区</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PARTITIONS</span> table_name;</span><br></pre></td></tr></table></figure><p><strong>分区修复</strong></p><p>如果直接使用hdfs命令上传文件到表目录，是不会正常分区的，要修复：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msck <span class="keyword">repair</span> <span class="keyword">table</span> xxx;</span><br></pre></td></tr></table></figure><h3 id="动态分区表"><a href="#动态分区表" class="headerlink" title="动态分区表"></a>动态分区表</h3><p>&nbsp;刚才分区表示静态分区表，一个文件数据只能导入到某一个分区中，并且分区是用户指定的;这种方式不够灵活，业务场景比较局限;动态分区可以根据数据本身的特征自动来划分分区，比如我们可以指定按照数据中的年龄、性别来动态分区会产出3个不同的分区 。</p><p><strong>前置操作</strong></p><p>只在本次脚本内生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set hive.exec.dynamic.partition=true;</span><br><span class="line">set hive.exec.dynamic.partition.mode=nonstrict;</span><br></pre></td></tr></table></figure><p><strong>创建</strong></p><p>静态分区与动态分区创建表的语句是一模一样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> gfstbl_dynamic(</span><br><span class="line">        <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">     <span class="keyword">name</span> <span class="keyword">STRING</span>,</span><br><span class="line">  gfs <span class="built_in">ARRAY</span>&lt;<span class="keyword">STRING</span>&gt;,</span><br><span class="line">  address <span class="keyword">MAP</span>&lt;<span class="keyword">STRING</span>,<span class="keyword">STRING</span>&gt;,</span><br><span class="line">  info <span class="keyword">STRUCT</span>&lt;country:<span class="keyword">String</span>,province:<span class="keyword">String</span>,shi:<span class="keyword">String</span>&gt;</span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (sex <span class="keyword">string</span>,age <span class="built_in">INT</span>)</span><br><span class="line">    <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> </span><br><span class="line">    <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27; &#x27;</span> </span><br><span class="line">    COLLECTION ITEMS <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">    <span class="keyword">MAP</span> <span class="keyword">KEYS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;:&#x27;</span> </span><br><span class="line">    <span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>加载数据</strong></p><p>不可以使用load,它只是将数据上传到HDFS指定目录中，而动态分区是自动分区的(必须经过MR程序)，所以它只能从其他表查询导入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from gfstbl_pt</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> gfstbl_dynamic <span class="keyword">partition</span>(sex,age)</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,gfs,address,info,sex,age;</span><br></pre></td></tr></table></figure><p><strong>查看分区数目</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">partitions</span> gfstbl_dynamic;</span><br></pre></td></tr></table></figure><h2 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h2><p>分区提供一个隔离数据和优化查询的便利方式。不过，并非所有的数据集都可形成合理的分区。对于一张表或者分区，Hive 可以进一步组织成桶，也就是更为细粒度的数据范围划分。</p><p>分桶是将数据集分解成更容易管理的若干部分的另一个技术。</p><p><font color="red"><strong>分区针对的是数据的存储路径；分桶针对的是数据文件</strong>。</font></p><p><strong>前置操作</strong></p><p>只在本次脚本内生效。(开启分桶表的支持)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set hive.enforce.bucketing=true;</span><br></pre></td></tr></table></figure><p><strong>创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> bucket_user (<span class="keyword">id</span> <span class="built_in">int</span>,<span class="keyword">name</span> <span class="keyword">string</span>)</span><br><span class="line">        clustered <span class="keyword">by</span> (<span class="keyword">id</span>) <span class="keyword">into</span> <span class="number">4</span> buckets</span><br><span class="line">        <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>插入数据</strong></p><p>不可以使用load,它只是将数据上传到HDFS指定目录中，而动态分桶是自动分桶的(必须经过MR程序)，所以它只能从其他表查询导入或者直接insert..values…</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> bucket_user  <span class="keyword">partition</span>(<span class="keyword">id</span>) <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> original;</span><br></pre></td></tr></table></figure><h3 id="分桶表作用之抽样"><a href="#分桶表作用之抽样" class="headerlink" title="分桶表作用之抽样"></a>分桶表作用之抽样</h3><p>分桶表的原理就是根据输入的数据的某个字段去哈希，将数据分流到不同的文件中。因为哈希，所有每个文件中的数据都有相同的属性，所以可以每个桶中取些数据，来代替这个表的特性(抽样)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> bucket_user <span class="keyword">tablesample</span>(<span class="keyword">bucket</span> x <span class="keyword">out</span> <span class="keyword">of</span> y <span class="keyword">on</span> <span class="keyword">id</span>);</span><br></pre></td></tr></table></figure><ol><li>y必须是table总bucket数的倍数或者因子。</li><li>x表示从哪个bucket开始抽取。</li><li>分桶数/y 指的是抽取几个桶的数据。</li></ol><p>例如，table总bucket数为32，tablesample(bucket 3 out of 16)，表示总共抽取（32/16=）2个bucket的数据，分别为第3个bucket和第（3+16=）19个bucket的数据。</p><hr><p>如果数据量非常巨大时，常采用分桶+分区表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> psnbucket_partition( <span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="keyword">STRING</span>, age <span class="built_in">INT</span>) </span><br><span class="line">PARTITIONED <span class="keyword">BY</span>(height <span class="keyword">DOUBLE</span>) </span><br><span class="line">CLUSTERED <span class="keyword">BY</span> (age) <span class="keyword">INTO</span> <span class="number">4</span> BUCKETS </span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="hive查询"><a href="#hive查询" class="headerlink" title="hive查询"></a>hive查询</h1><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p><strong>列别名</strong></p><p>列别名在select中写，别名可以和列名紧跟，也可以用as衔接，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">AS</span> <span class="keyword">name</span>, deptno dn <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><strong>算数运算符</strong></p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>A+B</td><td>A和B  相加</td></tr><tr><td>A-B</td><td>A减去B</td></tr><tr><td>A*B</td><td>A和B  相乘</td></tr><tr><td>A/B</td><td>A除以B</td></tr><tr><td>A%B</td><td>A对B取余</td></tr><tr><td>A&amp;B</td><td>A和B按位取与</td></tr><tr><td>A|B</td><td>A和B按位取或</td></tr><tr><td>A^B</td><td>A和B按位取异或</td></tr><tr><td>~A</td><td>A按位取反</td></tr></tbody></table><p><strong>常用函数</strong></p><ul><li><code>count()</code>：总行数</li><li><code>max()</code>：最大值</li><li><code>min()</code>：最小值</li><li><code>sum()</code>：总和</li><li><code>avg()</code>：平均值</li></ul><p><strong>limit语句</strong></p><p>典型的查询会返回多行数据。LIMIT子句用于限制返回的行数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="where语句"><a href="#where语句" class="headerlink" title="where语句"></a>where语句</h2><ol><li>使用WHERE子句，将不满足条件的行过滤掉</li><li>WHERE子句紧随FROM子句</li><li><font color="red"><strong>where子句中不能使用字段别名</strong></font></li></ol><p><strong>比较运算符</strong></p><table><thead><tr><th>操作符</th><th>支持的数据类型</th><th>描述</th></tr></thead><tbody><tr><td>A=B</td><td>基本数据类型</td><td>如果A等于B则返回TRUE，反之返回FALSE</td></tr><tr><td><strong>A&lt;=&gt;B</strong></td><td><strong>基本数据类型</strong></td><td><strong>如果A和B都为NULL，则返回TRUE，其他的和等号（=）操作符的结果一致，如果任一为NULL则结果为NULL</strong></td></tr><tr><td>A&lt;&gt;B, A!=B</td><td>基本数据类型</td><td>A或者B为NULL则返回NULL；如果A不等于B，则返回TRUE，反之返回FALSE</td></tr><tr><td>A&lt;B</td><td>基本数据类型</td><td>A或者B为NULL，则返回NULL；如果A小于B，则返回TRUE，反之返回FALSE</td></tr><tr><td>A&lt;=B</td><td>基本数据类型</td><td>A或者B为NULL，则返回NULL；如果A小于等于B，则返回TRUE，反之返回FALSE</td></tr><tr><td>A&gt;B</td><td>基本数据类型</td><td>A或者B为NULL，则返回NULL；如果A大于B，则返回TRUE，反之返回FALSE</td></tr><tr><td>A&gt;=B</td><td>基本数据类型</td><td>A或者B为NULL，则返回NULL；如果A大于等于B，则返回TRUE，反之返回FALSE</td></tr><tr><td>A [NOT] BETWEEN B AND C</td><td>基本数据类型</td><td>如果A，B或者C任一为NULL，则结果为NULL。如果A的值大于等于B而且小于或等于C，则结果为TRUE，反之为FALSE。如果使用NOT关键字则可达到相反的效果。</td></tr><tr><td>A IS NULL</td><td>所有数据类型</td><td>如果A等于NULL，则返回TRUE，反之返回FALSE</td></tr><tr><td>A IS NOT NULL</td><td>所有数据类型</td><td>如果A不等于NULL，则返回TRUE，反之返回FALSE</td></tr><tr><td>IN(数值1, 数值2)</td><td>所有数据类型</td><td>使用 IN运算显示列表中的值</td></tr><tr><td>A [NOT] LIKE B</td><td>STRING 类型</td><td>B是一个SQL下的简单正则表达式，也叫通配符模式，如果A与其匹配的话，则返回TRUE；反之返回FALSE。B的表达式说明如下：‘x%’表示A必须以字母‘x’开头，‘%x’表示A必须以字母’x’结尾，而‘%x%’表示A包含有字母’x’,可以位于开头，结尾或者字符串中间。如果使用NOT关键字则可达到相反的效果。</td></tr><tr><td>A RLIKE B, A REGEXP B</td><td>STRING 类型</td><td>B是基于java的正则表达式，如果A与其匹配，则返回TRUE；反之返回FALSE。匹配使用的是JDK中的正则表达式接口实现的，因为正则也依据其中的规则。例如，正则表达式必须和整个字符串A相匹配，而不是只需与其字符串匹配。</td></tr></tbody></table><p><strong>Like与RLike</strong></p><ol><li>使用LIKE运算选择类似的值</li><li>选择条件可以包含字符或数字:</li><li>RLIKE子句是Hive中这个功能的一个扩展，其可以通过<strong>Java的正则表达式</strong>这个更强大的语言来指定匹配条件。</li></ol><p><strong>逻辑运算符</strong></p><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>AND</td><td>逻辑并</td></tr><tr><td>OR</td><td>逻辑或</td></tr><tr><td>NOT</td><td>逻辑否</td></tr></tbody></table><h2 id="group分组"><a href="#group分组" class="headerlink" title="group分组"></a>group分组</h2><p>GROUP BY语句通常会和聚合函数一起使用，按照一个或者多个列队结果进行分组，然后对每个组执行聚合操作。</p><p><strong>Having</strong></p><p>Having执行在分组之后，where执行在分组之前</p><p><strong>having与where不同点</strong></p><ol><li>where后面不能写分组函数，而having后面可以使用分组函数</li><li>having只用于group by分组统计语句</li></ol><h2 id="Join语句"><a href="#Join语句" class="headerlink" title="Join语句"></a>Join语句</h2><ol><li>等值join(连接条件必须是等于)：<code>table1 join table2 on xxx</code></li><li>内连接：<code>table1 join table2 on xxx</code></li><li>左外连接：<code>table1 left join table2 on xxx</code></li><li>右外连接：<code>table1 right join table2 on xxx</code></li></ol><p><font color="red"><strong>ps：hive join目前不支持在on子句中使用谓词or</strong></font></p><h2 id="排序🔺"><a href="#排序🔺" class="headerlink" title="排序🔺"></a>排序🔺</h2><h3 id="全局排序"><a href="#全局排序" class="headerlink" title="全局排序"></a>全局排序</h3><p><strong>Order By：全局排序，只有一个Reducer</strong></p><p>如果使用全局排序，则只能有一个Reducer，如果有多个Reducer的话，则没法保证最终总的结果是有序的。</p><p><strong>总之慎用全局排序</strong></p><h3 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h3><p>Sort By：对于大规模的数据集order by的效率非常低。在很多情况下，并不需要全局排序，此时可以使用<strong>sort by</strong>。</p><p>它是对Reducer内的数据排序，所以最终的结果是区域有序的。</p><p>Sort by为每个reducer产生一个排序文件。每个Reducer内部进行排序，对全局结果集来说不是排序。</p><h3 id="分区排序"><a href="#分区排序" class="headerlink" title="分区排序"></a>分区排序</h3><p>Distribute By： 在有些情况下，我们需要控制某个特定行应该到哪个reducer，通常是为了进行后续的聚集操作。<strong>distribute by</strong> 子句可以做这件事。<strong>distribute by</strong>类似MR中partition（自定义分区），进行分区，结合sort by使用。 </p><p>对于distribute by进行测试，一定要分配多reduce进行处理，否则无法看到distribute by的效果。</p><p>一般它结合sort by使用，distribute by设置哪一行到哪一个分区，sort by负责每个分区内排序。</p><p><font color="red">ps：distribute by设置的字段不是有几个值就有几个reducer，最总有几个reducer还是需要看配置<code>mapreduce.job.reduces</code>的！！！</font></p><h3 id="Cluster-By"><a href="#Cluster-By" class="headerlink" title="Cluster By"></a>Cluster By</h3><p>当distribute by和sorts by字段相同时，可以使用cluster by方式。</p><p>cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p><h2 id="其余查询函数"><a href="#其余查询函数" class="headerlink" title="其余查询函数"></a>其余查询函数</h2><h3 id="空字段赋值"><a href="#空字段赋值" class="headerlink" title="空字段赋值"></a>空字段赋值</h3><p><code>nvl(comm, -1)</code></p><p>NVL：给值为NULL的数据赋值，它的格式是NVL( value，default_value)。它的功能是如果value为NULL，则NVL函数返回default_value的值，否则返回value的值，如果两个参数都为NULL ，则返回NULL。</p><h3 id="CASE-WHEN"><a href="#CASE-WHEN" class="headerlink" title="CASE WHEN"></a>CASE WHEN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">case ... when... then... else ... <span class="keyword">end</span> </span><br></pre></td></tr></table></figure><h3 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h3><p><strong>把查询结果中的多行转换成一个集合</strong></p><h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><ol><li><p><code>CONCAT(string A/col, string B/col…)</code>：返回输入字符串连接后的结果，支持任意个输入字符串;</p></li><li><p><code>CONCAT_WS(separator, str1, str2,...)</code>：它是一个特殊形式的 CONCAT()。第一个参数剩余参数间的分隔符。分隔符可以是与剩余参数一样的字符串。如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间;</p></li><li><p><code>COLLECT_SET(col)</code>：函数只接受基本数据类型，它的主要作用是将某字段(多行)的值进行去重汇总，产生array类型字段。</p></li></ol><p><strong>数据准备</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">孙悟空    白羊座    A</span><br><span class="line">大海         射手座    A</span><br><span class="line">宋宋         白羊座    B</span><br><span class="line">猪八戒         射手座    A</span><br><span class="line">凤姐         射手座    A</span><br></pre></td></tr></table></figure><p><strong>创建表，导入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person_info(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>, </span><br><span class="line">constellation <span class="keyword">string</span>, </span><br><span class="line">blood_type <span class="keyword">string</span>) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;\t&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>数据查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.base,</span><br><span class="line">    <span class="keyword">concat_ws</span>(<span class="string">&#x27;|&#x27;</span>, collect_set(t1.name)) <span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span></span><br><span class="line">        <span class="keyword">name</span>,</span><br><span class="line">        <span class="keyword">concat</span>(constellation, <span class="string">&quot;,&quot;</span>, blood_type) base</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        person_info) t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    t1.base;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h3><p><strong>将一个集合转换成多行</strong></p><h4 id="相关函数-1"><a href="#相关函数-1" class="headerlink" title="相关函数"></a>相关函数</h4><ol><li><code>EXPLODE(col)</code>：将hive一列中复杂的array或者map结构拆分成多行。</li><li><code>LATERAL VIEW</code></li></ol><p>用法：<code>LATERAL VIEW udtf(expression) tableAlias AS columnAlias</code></p><p>解释：<code>LATERAL VIEW</code>用于和split, explode等UDTF一起使用，它能够将一列数据拆成多行数据，<strong>在此基础上可以对拆分后的数据进行聚合。</strong></p><p><strong>数据准备</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">《疑犯追踪》    悬疑,动作,科幻,剧情</span><br><span class="line">《Lie to me》    悬疑,警匪,动作,心理,剧情</span><br><span class="line">《战狼2》    战争,动作,灾难</span><br></pre></td></tr></table></figure><p><strong>表建立，导入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> movie_info(</span><br><span class="line">    movie <span class="keyword">string</span>, </span><br><span class="line">    <span class="keyword">category</span> <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;\t&quot;</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>按需求查询数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    movie,</span><br><span class="line">    category_name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    movie_info <span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">category</span>) table_tmp <span class="keyword">as</span> category_name;</span><br></pre></td></tr></table></figure><h3 id="开窗函数🔺"><a href="#开窗函数🔺" class="headerlink" title="开窗函数🔺"></a>开窗函数🔺</h3><a href="/2019/11/29/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/" title="开窗函数的使用请查看这篇文章">开窗函数的使用请查看这篇文章</a><p>ps：hive中每开一个窗就执行一次MR，除非每次开的窗的内容是一致的。</p><h1 id="hive函数"><a href="#hive函数" class="headerlink" title="hive函数"></a>hive函数</h1><h2 id="系统内置函数"><a href="#系统内置函数" class="headerlink" title="系统内置函数"></a>系统内置函数</h2><p><strong>查看系统自带的函数</strong></p><p><code>show functions;</code></p><p><strong>显示自带的函数的用法</strong></p><p><code>desc function upper;</code></p><p><strong>详细显示自带的函数的用法</strong></p><p><code>desc function extended upper;</code></p><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>当Hive提供的内置函数无法满足你的业务处理需要时，此时就可以考虑使用用户自定义函数（UDF：user-defined function）</p><p>根据用户自定义函数类别分为以下三种：</p><ol><li><code>UDF</code>(User-Defined-Function)：一进一出</li><li><code>UDAF</code>(User-Defined Aggregation Function)： 聚集函数，多进一出；类似于：<code>count/max/min</code></li><li><code>UDTF</code>(User-Defined Table-Generating Functions)：一进多出；如<code>lateral view explore()</code></li></ol><h3 id="编程步骤"><a href="#编程步骤" class="headerlink" title="编程步骤"></a>编程步骤</h3><p>以<code>UDF</code>为例：</p><ol><li><p>maven项目导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hive/hive-exec --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>继承<code>org.apache.hadoop.hive.ql.exec.UDF</code></p></li><li><p>需要实现<code>evaluate</code>函数；<code>evaluate</code>函数支持重载，这个函数不是重写，自己直接写。</p></li><li><p>在hive的命令行窗口创建函数</p><ul><li><code>add jar linux_jar_path</code></li><li><code>create [temporary] function [dbname.]function_name AS class_name;</code></li></ul></li><li><p>在hive的命令行窗口删除函数</p><ul><li><code>Drop [temporary] function [if exists] [dbname.]function_name;</code></li></ul></li></ol><p><font color="red">ps：UDF必须要有返回类型，可以返回null，但是返回类型不能为void；</font></p><h1 id="hive存储和压缩"><a href="#hive存储和压缩" class="headerlink" title="hive存储和压缩"></a>hive存储和压缩</h1><a href="/2020/06/22/Hadoop%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/" title="如何使hadoop支持&#96;snappy&#96;压缩">如何使hadoop支持&#96;snappy&#96;压缩</a><h2 id="压缩参数配置"><a href="#压缩参数配置" class="headerlink" title="压缩参数配置"></a>压缩参数配置</h2><h3 id="开启Map输出阶段压缩"><a href="#开启Map输出阶段压缩" class="headerlink" title="开启Map输出阶段压缩"></a>开启Map输出阶段压缩</h3><p>开启map输出阶段压缩可以减少job中map和Reduce task间数据传输量。具体配置如下：</p><ol><li>开启hive中间传输数据压缩功能：<code>set hive.exec.compress.intermediate=true;</code></li><li>开启mapreduce中map输出压缩功能：<code>set mapreduce.map.output.compress=true;</code></li><li>设置mapreduce中map输出数据的压缩方式：<code>set mapreduce.map.output.compress.codec=org.apache.hadoop.io.compress.SnappyCodec;</code></li><li>执行查询语句</li></ol><h3 id="开启Reduce输出阶段压缩"><a href="#开启Reduce输出阶段压缩" class="headerlink" title="开启Reduce输出阶段压缩"></a>开启Reduce输出阶段压缩</h3><p>当Hive将输出写入到表中时，输出内容同样可以进行压缩。属性<code>hive.exec.compress.output</code>控制着这个功能。用户可能需要保持默认设置文件中的默认值false，这样默认的输出就是非压缩的纯文本文件了。用户可以通过在查询语句或执行脚本中设置这个值为true，来开启输出结果压缩功能。</p><ol><li>开启hive最终输出数据压缩功能：<code>set hive.exec.compress.output=true;</code></li><li>开启mapreduce最终输出数据压缩：<code>set mapreduce.output.fileoutputformat.compress=true;</code></li><li>设置mapreduce最终数据输出压缩方式：<code>set mapreduce.output.fileoutputformat.compress.codec =org.apache.hadoop.io.compress.SnappyCodec;</code></li><li>设置mapreduce最终数据输出压缩为块压缩：<code>set mapreduce.output.fileoutputformat.compress.type=BLOCK;</code></li><li>执行查询语句</li></ol><h2 id="文件存储格式⚪"><a href="#文件存储格式⚪" class="headerlink" title="文件存储格式⚪"></a>文件存储格式⚪</h2><p>Hive支持的存储数据的格式主要有：TEXTFILE 、SEQUENCEFILE、ORC、PARQUET</p><h3 id="列式存储和行式存储"><a href="#列式存储和行式存储" class="headerlink" title="列式存储和行式存储"></a>列式存储和行式存储</h3><p><img src="https://i.loli.net/2020/07/03/xcpwYt1HW7TXNRd.png" alt="image-20200703171205351"></p><p>左边为逻辑表，右边第一个为行式存储，第二个为列式存储。</p><p><strong>行式存储优点</strong></p><p>查询满足条件的一整行数据的时候，列存储则需要去每个聚集的字段找到对应的每个列的值，行存储只需要找到其中一个值，其余的值都在相邻地方，所以此时行存储查询的速度更快。</p><p><strong>列存储的特点</strong></p><p>因为每个字段的数据聚集存储，在查询只需要少数几个字段的时候，能大大减少读取的数据量；每个字段的数据类型一定是相同的，列式存储可以针对性的设计更好的设计压缩算法。</p><hr><p><strong>TEXTFILE和SEQUENCEFILE的存储格式都是基于行存储的；</strong></p><p><strong>ORC和PARQUET是基于列式存储的。</strong></p><h3 id="TEXTFILE格式"><a href="#TEXTFILE格式" class="headerlink" title="TEXTFILE格式"></a>TEXTFILE格式</h3><p>默认格式，数据不做压缩，磁盘开销大，数据解析开销大。可结合Gzip、Bzip2使用，但使用Gzip这种方式，hive不会对数据进行切分，从而无法对数据进行并行操作。</p><h3 id="Orc格式"><a href="#Orc格式" class="headerlink" title="Orc格式"></a>Orc格式</h3><p>Orc (Optimized Row Columnar)是Hive 0.11版里引入的新的存储格式。</p><h3 id="Parquet格式"><a href="#Parquet格式" class="headerlink" title="Parquet格式"></a>Parquet格式</h3><p>Parquet文件是以二进制方式存储的，所以是不可以直接读取的，文件中包括该文件的数据和元数据，<strong>因此Parquet格式文件是自解析的。</strong></p><h3 id="总结-压缩-存储-🔺"><a href="#总结-压缩-存储-🔺" class="headerlink" title="总结(压缩+存储)🔺"></a>总结(压缩+存储)🔺</h3><p><font color="red"><strong>在实际的项目开发当中，hive表的数据存储格式一般选择：orc或parquet。压缩方式一般选择snappy，lzo。</strong></font></p><h1 id="hive调优"><a href="#hive调优" class="headerlink" title="hive调优"></a>hive调优</h1><h2 id="Fetch抓取"><a href="#Fetch抓取" class="headerlink" title="Fetch抓取"></a>Fetch抓取</h2><p>Fetch抓取是指，<strong>Hive中对某些情况的查询可以不必使用MapReduce计算</strong>。例如：<code>SELECT * FROM employees;</code>在这种情况下，Hive可以简单地读取employee对应的存储目录下的文件，然后输出查询结果到控制台。</p><p>在<code>hive-default.xml.template</code>文件中<code>hive.fetch.task.conversion</code>默认是<code>more</code>，老版本hive默认是minimal，<strong>该属性修改为more以后，在全局查找、字段查找、limit查找等都不走mapreduce。</strong></p><h2 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h2><p>大多数的Hadoop Job是需要Hadoop提供的完整的可扩展性来处理大数据集的。不过，有时Hive的输入数据量是非常小的。在这种情况下，为查询触发执行任务消耗的时间可能会比实际job的执行时间要多的多。对于大多数这种情况，<strong>Hive可以通过本地模式在单台机器上处理所有的任务。对于小数据集，执行时间可以明显被缩短。</strong></p><p>用户可以通过设置<code>hive.exec.mode.local.auto</code>的值为true，来让Hive在适当的时候自动启动这个优化，<strong>默认是false。</strong></p><p>ps：数据小时使用，大数据时不能开启！！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set hive.exec.mode.local.auto=true;  //开启本地mr</span><br><span class="line">//设置local mr的最大输入数据量，当输入数据量小于这个值时采用local  mr的方式，默认为134217728，即128M</span><br><span class="line">set hive.exec.mode.local.auto.inputbytes.max=50000000;</span><br><span class="line">//设置local mr的最大输入文件个数，当输入文件个数小于这个值时采用local mr的方式，默认为4</span><br><span class="line">set hive.exec.mode.local.auto.input.files.max=10;</span><br></pre></td></tr></table></figure><h2 id="表优化"><a href="#表优化" class="headerlink" title="表优化"></a>表优化</h2><h3 id="小表、大表Join"><a href="#小表、大表Join" class="headerlink" title="小表、大表Join"></a>小表、大表Join</h3><p>新版的hive已经做了优化，小表放在左边和右边已经没有明显区别。</p><h3 id="大表Join大表"><a href="#大表Join大表" class="headerlink" title="大表Join大表"></a>大表Join大表</h3><h4 id="空KEY过滤"><a href="#空KEY过滤" class="headerlink" title="空KEY过滤"></a>空KEY过滤</h4><p>有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在SQL语句中进行过滤。例如key对应的字段为空，操作如下：</p><p>原始sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> jointable <span class="keyword">select</span> n.* <span class="keyword">from</span> nullidtable n</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> ori o <span class="keyword">on</span> n.id = o.id;</span><br></pre></td></tr></table></figure><p>过滤的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> jointable <span class="keyword">select</span> n.* <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> nullidtable <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> ) n  <span class="keyword">left</span> <span class="keyword">join</span> ori o <span class="keyword">on</span> n.id = o.id;</span><br></pre></td></tr></table></figure><h4 id="空key转换"><a href="#空key转换" class="headerlink" title="空key转换"></a>空key转换</h4><p>有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机的值，使得数据随机均匀地分不到不同的reducer上。例如：</p><p>原始SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> jointable</span><br><span class="line"><span class="keyword">select</span> n.* <span class="keyword">from</span> nullidtable n <span class="keyword">left</span> <span class="keyword">join</span> ori b <span class="keyword">on</span> n.id = b.id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> jointable</span><br><span class="line"><span class="keyword">select</span> n.* <span class="keyword">from</span> nullidtable n <span class="keyword">full</span> <span class="keyword">join</span> ori o <span class="keyword">on</span> </span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> n.id <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="keyword">concat</span>(<span class="string">&#x27;hive&#x27;</span>, <span class="keyword">rand</span>()) <span class="keyword">else</span> n.id <span class="keyword">end</span> = o.id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="MapJoin"><a href="#MapJoin" class="headerlink" title="MapJoin"></a>MapJoin</h3><p>多表关联分为mapjoin和reducejoin。mapjoin是将小表放入内存，不会有reduce。这样块，但是它有条件。默认开启状态</p><p>如果不指定MapJoin或者不符合MapJoin的条件，那么Hive解析器会将Join操作转换成Common Join，即：在Reduce阶段完成join。容易发生数据倾斜。可以用MapJoin把小表全部加载到内存在map端进行join，避免reducer处理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set hive.auto.convert.join = true; 默认为true</span><br><span class="line">set hive.mapjoin.smalltable.filesize=25000000;</span><br></pre></td></tr></table></figure><h3 id="避免一些操作"><a href="#避免一些操作" class="headerlink" title="避免一些操作"></a>避免一些操作</h3><p>数据量小的时候无所谓，数据量大的情况下，<font color="red">由于COUNT DISTINCT的全聚合操作，即使设定了reduce task个数，set mapred.reduce.tasks=100；hive也只会启动一个reducer。</font>这就造成一个Reduce处理的数据量太大，导致整个Job很难完成，<strong>一般COUNT DISTINCT使用先GROUP BY再COUNT的方式替换：</strong></p><p>原始SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">id</span>) <span class="keyword">from</span> bigtable;</span><br></pre></td></tr></table></figure><p>之后SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> bigtable <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>) a;</span><br></pre></td></tr></table></figure><hr><p>列处理：在SELECT中，只拿需要的列，如果有，尽量使用分区过滤，少用SELECT *。</p><p>行处理：在分区剪裁中，当使用外关联时，如果将副表的过滤条件写在Where后面，那么就会先全表关联，之后再过滤，比如：</p><p>原始SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o.id <span class="keyword">from</span> bigtable b</span><br><span class="line"><span class="keyword">join</span> ori o <span class="keyword">on</span> o.id = b.id</span><br><span class="line"><span class="keyword">where</span> o.id &lt;= <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>优化SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> b.id <span class="keyword">from</span> bigtable b</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> ori <span class="keyword">where</span> <span class="keyword">id</span> &lt;= <span class="number">10</span> ) o <span class="keyword">on</span> b.id = o.id;</span><br></pre></td></tr></table></figure><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>Hive提供了一个严格模式，可以防止用户执行那些可能意想不到的不好的影响的查询。</p><p>通过设置属性hive.mapred.mode值为默认是非严格模式nonstrict 。开启严格模式需要修改hive.mapred.mode值为strict，开启严格模式可以禁止3种类型的查询。</p><ol><li>对于分区表，<strong>除非where语句中含有分区字段过滤条件来限制范围，否则不允许执行。</strong>换句话说，就是用户不允许扫描所有分区。进行这个限制的原因是，通常分区表都拥有非常大的数据集，而且数据增加迅速。没有进行分区限制的查询可能会消耗令人不可接受的巨大资源来处理这个表。</li><li>对于使用了order by语句的查询，<strong>要求必须使用limit语句</strong>。因为order by为了执行排序过程会将所有的结果数据分发到同一个Reducer中进行处理，强制要求用户增加这个LIMIT语句可以防止Reducer额外执行很长一段时间。</li><li> <strong>限制笛卡尔积的查询</strong>。对关系型数据库非常了解的用户可能期望在执行JOIN查询的时候不使用ON语句而是使用where语句，这样关系数据库的执行优化器就可以高效地将WHERE语句转化成那个ON语句。不幸的是，Hive并不会执行这种优化，因此，如果表足够大，那么这个查询就会出现不可控的情况。</li></ol><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><h1 id="hive视图"><a href="#hive视图" class="headerlink" title="hive视图"></a>hive视图</h1><p><strong>为什么要使用视图？</strong><br>视图中保存的是一推复杂的SQL语句，视图是一个懒执行，只有我们用到此视图的时候才会执行此复杂的SQL语句；可以将这么长的SQL（数据表）与视图对应映射，每次查询这个视图就是执行了长的SQL语句。</p><p><strong>特点：</strong></p><ul><li>不支持物化视图（保存在磁盘上）</li><li>只能查询，不能做加载数据操作  load data into</li><li>视图的创建，只是保存一份元数据，查询视图时才执行对应的子查询</li><li>view定义中若包含了ORDER BY/LIMIT语句，当查询视图时也进行ORDER BY/</li><li>一旦创建成功，无法修改</li></ul><ol><li><p>创建视图<code>CREATE VIEW  IF NOT EXISTS  view1 AS SELECT * FROM logtbl order by age;</code></p><pre><code> -创建视图的时候不会启动MR任务</code></pre></li><li><pre><code> 但是在查询视图的时候会启动MR任务`select * from view1;`</code></pre></li><li><p> show tables可以查看已经创建的视图</p></li><li><p> drop view view1 删除视图</p></li></ol><h3 id="Hive索引"><a href="#Hive索引" class="headerlink" title="Hive索引"></a>Hive索引</h3><h5 id="为什么要使用索引？"><a href="#为什么要使用索引？" class="headerlink" title="为什么要使用索引？"></a>为什么要使用索引？</h5><p><font color="red">Hive的索引目的是提高Hive表指定列的查询速度。索引就类似目录。</font><br>没有索引时，类似’WHERE tab1.col1 = 10’ 的查询，Hive==会加载整张表或分区==，然后处理==所有的rows==，<br>但是如果在字段col1上面存在索引时，那么只会加载和处理文件的一部分。<br>与其他传统数据库一样，增加索引在提升查询速度时，会==消耗额外资源去创建索引表和需要更多的磁盘空间==存储索引。<br>他会把索引列的每个数据都建立一个目录，说明它所在的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">创建索引库，用于存放索引</span><br><span class="line">        create index t2_index on table psnbucket_partition(age) </span><br><span class="line">        as &#39;org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler&#39; with deferred rebuild </span><br><span class="line">        in table t2_index_table;</span><br><span class="line">        </span><br><span class="line">上述是对 psnbucket_partition表的age字段设置索引 t2_index，索引的内容放入 t2_index_table;</span><br><span class="line"></span><br><span class="line">这一步是真正的创建索引信息，并且存储到索引库中，若数据库有新增数据，也可以使用以上语句重建索引</span><br><span class="line">        alter index t2_index on psnbucket_partition rebuild;     </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce原理</title>
      <link href="2020/06/26/MapReduce%E5%8E%9F%E7%90%86/"/>
      <url>2020/06/26/MapReduce%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h1><h2 id="MapReduce定义"><a href="#MapReduce定义" class="headerlink" title="MapReduce定义"></a>MapReduce定义</h2><p>MapReduce是一个<font color="red">分布式运算程序的编程框架</font>，是用户开发基于“Hadoop的数据分析应用”的核心框架。</p><p>MapReduce的核心功能是将<strong>用户编写的业务逻辑代码和自带默认组件</strong>整合成一个完整的<strong>分布式运算程序</strong>，并发运行在一个Hadoop集群上。</p><h2 id="MapReduce优缺点"><a href="#MapReduce优缺点" class="headerlink" title="MapReduce优缺点"></a>MapReduce优缺点</h2><p><strong>优点</strong></p><ol><li>易于编程</li><li>良好的扩展性(计算资源)</li><li>高容错性</li><li>适合PB级以上数据的离线处理</li></ol><p><strong>缺点(实质：计算速度慢)</strong></p><ol><li>不擅长实时计算：无法再毫秒/秒级返回结果</li><li>不擅长流式计算：流式计算的输入数据是动态的，而MapReduce只能处理静态数据</li><li>不擅长DAG(有向图)计算：多个应用程序之间存在依赖关系，后一应用的输入为前一个的输出。这里使用MapReduce会很慢，它每次将结果都写入磁盘</li></ol><h2 id="MapReudce流程"><a href="#MapReudce流程" class="headerlink" title="MapReudce流程"></a>MapReudce流程</h2><p><img src="https://i.loli.net/2020/07/02/LgUycWVrnBOZpfx.png" alt="image-20200702101011024"></p><ol><li>分布式的运算程序往往需要分成至少2个阶段。</li><li>第一个阶段的MapTask并发实例，完全并行运行，互不相干。(默认：并行度由block数量决定)</li><li>第二个阶段的ReduceTask并发实例互不相干，但是他们的数据依赖于上一个阶段的所有MapTask并发实例的部分输出(指定分区)</li><li>MapReduce编程模型只能包含一个Map阶段和一个Reduce阶段，如果用户的业务逻辑非常复杂，那就只能多个MapReduce程序，串行运行。</li></ol><h2 id="MapReduce进程"><a href="#MapReduce进程" class="headerlink" title="MapReduce进程"></a>MapReduce进程</h2><p>一个完整的MapReduce程序在分布式运行时有三类实例进程：</p><ol><li><code>MrAppMaster</code>：负责整个程序的过程调度及状态协调</li><li><code>MapTask</code>：负责Map阶段的整个数据处理流程</li><li><code>ReduceTask</code>：负责Reduce阶段的整个数据处理流程</li></ol><h2 id="MapReduce序列化"><a href="#MapReduce序列化" class="headerlink" title="MapReduce序列化"></a>MapReduce序列化</h2><p>MapReduce程序由三部分构成：Map类、Reduce类和驱动类。且数据的类型是Hadoop自身封装的序列化类型。</p><p><strong>常用数据序列化类型</strong></p><table><thead><tr><th><strong>Java类型</strong></th><th><strong>Hadoop Writable类型</strong></th></tr></thead><tbody><tr><td>Boolean</td><td>BooleanWritable</td></tr><tr><td>Byte</td><td>ByteWritable</td></tr><tr><td>Int</td><td>IntWritable</td></tr><tr><td>Float</td><td>FloatWritable</td></tr><tr><td>Long</td><td>LongWritable</td></tr><tr><td>Double</td><td>DoubleWritable</td></tr><tr><td>String</td><td>Text</td></tr><tr><td>Map</td><td>MapWritable</td></tr><tr><td>Array</td><td>ArrayWritable</td></tr></tbody></table><h3 id="自定义bean对象实现序列化接口（Writable）"><a href="#自定义bean对象实现序列化接口（Writable）" class="headerlink" title="自定义bean对象实现序列化接口（Writable）"></a>自定义bean对象实现序列化接口（Writable）</h3><p>在企业开发中往往常用的基本序列化类型不能满足所有需求，比如在Hadoop框架内部传递一个bean对象，那么该对象就需要实现序列化接口。</p><p>具体实现bean对象序列化步骤如下7步。</p><ol><li>必须实现Writable接口</li><li>反序列化时，需要反射调用空参构造函数，所以必须有空参构造</li><li>重写序列化方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    out.writeLong(upFlow);</span><br><span class="line">    out.writeLong(downFlow);</span><br><span class="line">    out.writeLong(sumFlow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>重写反序列化方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    upFlow = in.readLong();</span><br><span class="line">    downFlow = in.readLong();</span><br><span class="line">    sumFlow = in.readLong();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>注意反序列化的顺序和序列化的顺序完全一致</li><li>要想把结果显示在文件中，需要重写toString()，可用”\t”分开，方便后续用。</li><li>如果需要将自定义的bean放在key中传输，则还需要实现<code>Comparable</code>接口，因为MapReduce框中的Shuffle过程要求对key必须能排序。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 倒序排列，从大到小</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sumFlow &gt; o.getSumFlow() ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MapReduce编程规范"><a href="#MapReduce编程规范" class="headerlink" title="MapReduce编程规范"></a>MapReduce编程规范</h2><p><strong>Mapper阶段</strong></p><ol><li>自定义的Mapper继承父类Mapper, 四个参数分别为输入的k-v(InputFormat生成的kv)，map映射完成后输出的k-v；</li><li>Mapper的输入数据是KV格式数据(具体看你使用什么<code>InputFormat</code>)</li><li>业务逻辑写入<code>map(xxx)</code>方法</li><li>Mapper的输出是KV格式</li><li><code>map(xxx)</code>方法(MapTask进程)对每一个KV调用一次</li></ol><p><strong>Reducer阶段</strong></p><ol><li>自定义的Reducer继承父类Reducer，参数分别为Mapper的输出和最终输出</li><li>Reducer的输入数据是KV格式数据</li><li>业务逻辑写入<code>reduce(xxx)</code>方法</li><li>ReduceTask进程对每一组相同k的kv组调用一次reduce()方法</li></ol><p><strong>Driver阶段</strong></p><p>相当于YARN集群的客户端，用于提交我们整个程序到Yarn集群，提交的是封装了MapReduce程序相关运行参数的job对象</p><hr><h3 id="代码展示wordcount"><a href="#代码展示wordcount" class="headerlink" title="代码展示wordcount"></a>代码展示wordcount</h3><ol><li>MapReduce程序的流程是，首先根据输入目录/文件，然后通过默认的<code>InputFormat(TextInputFormat)</code>或者指定需要的<code>InputFormat</code>将文件处理为k=每行行首偏移量，value=每行的内容</li><li>将<code>InputFormat</code>处理后的KV交给Map Task来处理，Map Task声明时的泛型应该依次为<code>InputFormat</code>的输出KV、Map Task输出的KV</li><li>将MapTask处理后的KV交给Reduce Task来执行任务，而Reduce Task声明时候的泛型应该依次为Map Task输出的KV，最终输出的KV，Reduce Task的处理函数<code>reduce</code>的方法参数是MapTask的K和组成迭代的V。</li><li>将ReduceTask处理后的KV交给默认的<code>OutputFormat(TextOutputFormat)</code>将KV输入文件。</li></ol><p><strong>Mapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mr程序中不得使用Java的基础类，得使用mr提供的序列化类</span></span><br><span class="line"><span class="comment"> * 编写Map程序:</span></span><br><span class="line"><span class="comment"> * 1. 继承父类Mapper(), 四个参数分别为输入的k-v，map映射完成后输出的k-v；(TextInputFormat默认)输入的k-v是文件每行的偏移量和每行内容</span></span><br><span class="line"><span class="comment"> * 2. 重写父类的map()方法。context是此次Map程序的上下文。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IntWritable num = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Text text = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每一行数据会调用一次map方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            InterruptedException </span>&#123;</span><br><span class="line">        String[] s = value.toString().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s1 : s) &#123;</span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">            text.set(s1);</span><br><span class="line">            context.write(text, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Reducer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mr程序中不得使用Java的基础类，得使用mr提供的序列化类</span></span><br><span class="line"><span class="comment"> * 编写Reducer程序:</span></span><br><span class="line"><span class="comment"> * 1. 继承父类Reducer(), 四个参数分别为map输出的k-v，reduce输出的k-v；</span></span><br><span class="line"><span class="comment"> * 2. 重写父类的reduce()方法。context是此次reduce程序的上下文。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reducer</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">hadoop</span>.<span class="title">mapreduce</span>.<span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IntWritable intWritable = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="comment">// 每一组相同的key会调用一次，value是相同的key的value的组合</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        intWritable.set(sum);</span><br><span class="line">        context.write(key, intWritable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Driver</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException,</span></span><br><span class="line"><span class="function">            InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取一个Job实例</span></span><br><span class="line">        Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置我们的类路径（Classpath）</span></span><br><span class="line">        job.setJarByClass(Driver.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 设置Mapper和Reducer</span></span><br><span class="line">        job.setMapperClass(Map.class);</span><br><span class="line">        job.setReducerClass(Reducer.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 设置Mapper和Reducer 输出的类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更改inputFormat/outputFormat</span></span><br><span class="line"><span class="comment">//        job.setOutputFormatClass(SequenceFileOutputFormat.class);</span></span><br><span class="line"><span class="comment">//        job.setInputFormatClass(TextInputFormat.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 设置输入输出数据</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="string">&quot;E:\\input&quot;</span>);</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(<span class="string">&quot;E:\\input874&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 提交我们的Job</span></span><br><span class="line">        <span class="keyword">boolean</span> b = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(b ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="Driver优化写法"><a href="#Driver优化写法" class="headerlink" title="Driver优化写法"></a>Driver优化写法</h3><p>我们可以使用工具类将Driver类切分为main和tool设置，无需直接在main方法中写入过多的配置：</p><p><strong>main</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.ToolRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// ToolRunner可以运行MR</span></span><br><span class="line">        ToolRunner.run(<span class="keyword">new</span> WordCountMRTool(), args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tool</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.Tool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountMRTool</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">    <span class="comment">// strings就是main的args参数</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取一个Job实例</span></span><br><span class="line">        Job job = Job.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置我们的类路径（Classpath）</span></span><br><span class="line">        job.setJarByClass(WordCountMRTool.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3. 设置Mapper和Reducer</span></span><br><span class="line">        job.setMapperClass(Map.class);</span><br><span class="line">        job.setReducerClass(Reducer.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 设置Mapper和Reducer 输出的类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 设置输入输出数据</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="string">&quot;E:\\input&quot;</span>);</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(<span class="string">&quot;E:\\input444&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 提交我们的Job</span></span><br><span class="line">        <span class="keyword">boolean</span> b = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> b ? JobStatus.State.SUCCEEDED.getValue() : JobStatus.State.FAILED.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConf</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种代码本质上是一致的，但是第二种看起来比较好。</p><h1 id="MapReduce框架原理"><a href="#MapReduce框架原理" class="headerlink" title="MapReduce框架原理"></a>MapReduce框架原理</h1><h2 id="InputFormat"><a href="#InputFormat" class="headerlink" title="InputFormat"></a>InputFormat</h2><h3 id="FileInputFormat切片"><a href="#FileInputFormat切片" class="headerlink" title="FileInputFormat切片"></a>FileInputFormat切片</h3><p><img src="https://i.loli.net/2020/06/27/jg8ymAwIrU4M5uk.png" alt="image-20200627105459017"></p><p><strong>切片与MapTask并行度决定机制</strong></p><p><strong>问题引出</strong></p><p>思考：1G的数据，启动8个MapTask，可以提高集群的并发处理能力。那么1K的数据，也启动8个MapTask，会提高集群性能吗？MapTask并行任务是否越多越好呢？哪些因素影响了MapTask并行度？       </p><p>MapTask并行度决定机制：</p><p><strong>数据块：</strong>Block是HDFS物理上把数据分成一块一块。</p><p><strong>数据切片：</strong>数据切片只是在逻辑上对输入进行分片，并不会在磁盘上将其切分成片进行存储。</p><p>一个MapTask处理一个切片，默认切片大小=数据块大小</p><p><strong>Job提交流程</strong></p><p><img src="https://i.loli.net/2020/06/27/35BAYkgES6qimFW.png" alt="image-20200627105835689"></p><h4 id="FileInputFormat切片机制"><a href="#FileInputFormat切片机制" class="headerlink" title="FileInputFormat切片机制"></a>FileInputFormat切片机制</h4><ol><li>简单的按照文件内容长度进行切分</li><li>切片大小，默认等于Block大小</li><li>切片时不考虑数据集整体，而是逐个针对每一个文件进行切分</li></ol><p>FileInputFormat的实现类有：<code>TextInputFormat</code>、<code>KeyValueTextInputFormat</code>、<code>NLineInputFormat</code>、<code>CombineTextInputFormat</code>和自定义InputFormat等。</p><p>上述各个子类有的使用了FileInputFormat的切片机制(<code>TextInputFormat</code>、<code>KeyValueTextInputFormat</code>、<code>NLineInputFormat</code>)，特别的<code>CombineTextInputFormat</code>[自定义了一套切片机制](# CombineTextInputFormat切片机制)。</p><h4 id="CombineTextInputFormat切片机制"><a href="#CombineTextInputFormat切片机制" class="headerlink" title="CombineTextInputFormat切片机制"></a>CombineTextInputFormat切片机制</h4><p>框架默认的TextInputFormat切片机制是对任务按文件规划切片，<font color="red">不管文件多小，都会是一个单独的切片</font>，都会交给一个MapTask，这样如果有大量小文件，就<font color="red">会产生大量的MapTask</font>，处理效率极其低下。</p><p><strong>应用场景</strong></p><p>CombineTextInputFormat用于小文件过多的场景，它可以将多个小文件从逻辑上规划到一个切片中，这样，多个小文件就可以交给一个MapTask处理。</p><p><strong>虚拟存储切片最大值设置</strong></p><p>CombineTextInputFormat.setMaxInputSplitSize(job, 4194304);// 4m</p><p>注意：虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值。</p><p><strong>切片机制</strong></p><p><img src="https://i.loli.net/2020/06/27/6EzDF5hqc8LIxwU.png" alt="image-20200627114202060"></p><p><strong>虚拟存储过程：</strong></p><p>将输入目录下所有文件大小，依次和设置的setMaxInputSplitSize值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块；<font color="red">当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件均分成2个虚拟存储块（防止出现太小切片）。</font></p><p>例如setMaxInputSplitSize值为4M，输入文件大小为8.02M，则先逻辑上分成一个4M。剩余的大小为4.02M，如果按照4M逻辑划分，就会出现0.02M的小的虚拟存储文件，所以将剩余的4.02M文件切分成（2.01M和2.01M）两个文件。</p><p><strong>切片过程：</strong></p><p>判断虚拟存储的文件大小是否大于setMaxInputSplitSize值，大于等于则单独形成一个切片。</p><p>如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。</p><p><strong>测试举例</strong></p><p>有4个小文件大小分别为1.7M、5.1M、3.4M以及6.8M这四个小文件</p><p>则虚拟存储之后形成6个文件块，大小分别为：</p><p>1.7M，（2.55M、2.55M），3.4M以及（3.4M、3.4M）</p><p>最终会形成3个切片，大小分别为：</p><p>（1.7+2.55）M，（2.55+3.4）M，（3.4+3.4）M</p><h3 id="FileInputFormat的RecordReader生成K-V"><a href="#FileInputFormat的RecordReader生成K-V" class="headerlink" title="FileInputFormat的RecordReader生成K-V"></a>FileInputFormat的RecordReader生成K-V</h3><p>FileInputFormat的实现类有：<code>TextInputFormat</code>、<code>KeyValueTextInputFormat</code>、<code>NLineInputFormat</code>、<code>CombineTextInputFormat</code>和自定义InputFormat等。</p><p>上述各个子类有的使用了FileInputFormat的切片机制(<code>TextInputFormat</code>、<code>KeyValueTextInputFormat</code>、<code>NLineInputFormat</code>)，特别的<code>CombineTextInputFormat</code>[自定义了一套切片机制](# CombineTextInputFormat切片机制)。</p><h4 id="KeyValueTextInputFormat的RecordReader生成K-V"><a href="#KeyValueTextInputFormat的RecordReader生成K-V" class="headerlink" title="KeyValueTextInputFormat的RecordReader生成K-V"></a>KeyValueTextInputFormat的RecordReader生成K-V</h4><p>每一行均为一条记录，被分割符分割为key，value。可以通过在驱动类中设置分隔符。默认分隔符<code>\t</code>。</p><p><img src="https://i.loli.net/2020/06/27/uhMNsVke6iFP8oO.png" alt="image-20200627115321246"></p><h4 id="TextInputFormat的RecordReader生成K-V"><a href="#TextInputFormat的RecordReader生成K-V" class="headerlink" title="TextInputFormat的RecordReader生成K-V"></a>TextInputFormat的RecordReader生成K-V</h4><p><font color="red"><code>TextInputFormat</code>是默认的FileInputFormat实现类。按行读取每条记录。</font>建是存储该行在整个文件中的起始字节偏移量，<code>LongWritable</code>类型；值是这行的内容，不包括任何行终止符(换行符和回车符)，<code>Text</code>类型。</p><p><img src="https://i.loli.net/2020/06/27/gAshOJRpqN8YM7E.png" alt="image-20200627120055534"></p><h4 id="NLineInputFormat的RecordReader生成K-V"><a href="#NLineInputFormat的RecordReader生成K-V" class="headerlink" title="NLineInputFormat的RecordReader生成K-V"></a>NLineInputFormat的RecordReader生成K-V</h4><p>如果使用<code>NLineInputFormat</code>，代表每个map进程处理的<code>InputSpilt不再按照Block块去划分</code>，而是按照<code>NLineInputFormat</code>指定的行数来划分的。即输入文件的总行数/N=切片数，如果不整除，切片数=商+1.</p><p><img src="https://i.loli.net/2020/06/27/NFaighH4XodG8tk.png" alt="image-20200627121035864"></p><h3 id="自定义InputFormat🔺"><a href="#自定义InputFormat🔺" class="headerlink" title="自定义InputFormat🔺"></a>自定义InputFormat🔺</h3><p>在企业发开中，Hadoop自带的InputFormat类型不能满足所有应用场景，需要自定义来解决实际问题。</p><p><strong>步骤：</strong></p><ol><li>自定义一个类继承<code>FileInputFormat</code></li><li>自定义一个类继承<code>RecordReader</code>，实现读取切片形成K-V</li><li>如果想改变切片机制，改写<code>WriteSpilts</code>方法</li><li>切片机制中需要先判断文件是否支持切分，是否支持切分是这个函数<code>isSpiltable()</code></li><li>Driver类中设置使用自定义的InputFormat</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.setInputFormatClass(xxxx.class);</span><br></pre></td></tr></table></figure><h2 id="MapReduce工作流程"><a href="#MapReduce工作流程" class="headerlink" title="MapReduce工作流程"></a>MapReduce工作流程</h2><p><img src="https://i.loli.net/2020/06/27/qv7MoCncyVRNKzd.png" alt="image-20200627121618614"></p><p><img src="https://i.loli.net/2020/06/27/jG2CRhwftTd1Nzv.png" alt="image-20200627121633037"></p><p>上面的流程是整个MapReduce最全工作流程，但是Shuffle过程只是从第7步开始到第16步结束，具体Shuffle过程详解，如下：</p><ol><li>MapTask收集我们的map()方法输出的kv对，放到环形内存缓冲区中(此时会计算分区号)。</li><li>从内存缓冲区不断溢出本地磁盘文件，可能会溢出(&gt;80M时)多个文件。此时如果设置了Combiner则排序完成后还会进行Combiner</li><li>多个溢出文件会被合并成大的溢出文件，归并排序按照分区号和key值，这样保证分区数据被特定的ReduceTask处理，并且根据Key分组。此时如果设置了Combiner则排序完成后还会进行Combiner</li><li>在溢出过程及合并的过程中，都要调用Partitioner进行分区和针对key进行排序</li><li>ReduceTask根据自己的分区号，去每个MapTask机器上取相应的结果分区数据</li><li>ReduceTask会取到同一个分区的来自不同MapTask的结果文件，ReduceTask会将这些文件再进行合并（归并排序）</li><li>合并成大文件后，Shuffle的过程也就结束了，后面进入ReduceTask的逻辑运算过程（从文件中取出一个一个的键值对Group，调用用户自定义的reduce()方法）</li></ol><h2 id="Shuffle机制"><a href="#Shuffle机制" class="headerlink" title="Shuffle机制"></a>Shuffle机制</h2><p><strong>Shuffle</strong>就是将每个Map输出的数据进行规整，同同一分区的数据都发送到指定的ReduceTask中去处理。</p><p>Map方法之后，Reduce方法之前的数据处理过程称之为Shuffle。如图所示。</p><p><img src="https://i.loli.net/2020/06/27/HrkfelLnKDcav4B.png" alt="Snipaste_2020-06-27_12-43-49"></p><ol><li>MapTask通过<code>context</code>上下文写入时，写到了环形缓冲区。一进入缓冲区就会对KV进行分区，默认分区是<code>HashPartitoner</code>，成为K-V-P</li><li>环形缓冲区的数据会对KVP进行快速排序，根据P-K二次排序</li><li>环形缓冲区的数据大于80M时，会溢写到磁盘中。如果此时设置了Combiner(实质Reducer)的话，会先执行Combiner后溢写</li><li>多个溢写的小文件会进行归并排序形成一个MapTask的最终文件。也是根据P-K来二次排序。如果此时设置了Combiner(实质Reducer)的话，也会执行Combiner，同时进行</li><li>最后ReducerTask端会访问所有MapTask的结果文件，取到此ReduceTask需要处理的分区文件</li><li>对多个次分区的文件进行归并排序，根据K，因为ReduceTask里的数据全是同一分区的，然后Reduce端就得到了根据可以排好序的数据</li><li>然而，我们ReducerTask的处理粒度是k-Itorable<V>，所以ReduceTask还需要对key进行分组。</li><li>这里我们可是使用默认的，就是值相同为一组；也可以自定义<code>GroupingComparator</code>设置分组规则。</li><li>分组实上就是一个比较器，如果第一个和第二个相同就归为一组，否则不同组。为什么这样就可以？因为我们的Key是已经排好序的，这样key相同的数据必然是连续的。</li><li>执行ReduceTask的业务逻辑</li><li>多个ReduceTask的结果进行汇总，得到最总数据！</li></ol><h3 id="Partiton分区"><a href="#Partiton分区" class="headerlink" title="Partiton分区"></a>Partiton分区</h3><p> 前面说到MapTask的并行度由数据的切片数决定。</p><p>而ReduceTask的并行度由Partion分区决定，必须通过在Driver驱动类手动设置或者修改默认配置。</p><p>为什么说ReduceTask的并行度由Partion分区决定呢？</p><p>如果Partion分区器给你分了5个区，而你没有设置ReduceTask的并行度(默认1)，就会报错！当然ReduceTask的并行度可以大约5个区，但是最总结果只有5个区有数据，多余的区不会用到，浪费。所以ReduceTask的并行度=Partion分区器分的区。<font color="red">其中Partion分区器分的区的区号，<strong>必须是从0开始，逐一递增！！</strong></font>因为我们手动设置ReduceTask的并行度为5时，它产生的分区就是0-4。</p><p>ps：分区器分了几个区，最终结果就有几个文件有内容。</p><h4 id="默认分区器"><a href="#默认分区器" class="headerlink" title="默认分区器"></a>默认分区器</h4><p><img src="https://i.loli.net/2020/06/27/V51zjlWTCtGd3Dh.png" alt="image-20200627130939155"></p><h4 id="自定义分区器🔺"><a href="#自定义分区器🔺" class="headerlink" title="自定义分区器🔺"></a>自定义分区器🔺</h4><ol><li>自定义类继承<code>Partitioner</code>，重写<code>getPartition()</code></li><li>Job驱动中，设置自定义Partitoner；<code>job.setPartitionerClass(xxx.class)</code></li><li>自定义<code>Partitioner</code>后，需要根据它的逻辑来设置相应数量的ReduceTask；<code>job.setNumReduceTasks(n)</code></li></ol><h4 id="分区总结"><a href="#分区总结" class="headerlink" title="分区总结"></a>分区总结</h4><ol><li>如果ReduceTask的数量&gt;getPartiton的结果数，则会多产生几个空的输出文件part-r-000xx;</li><li>如果1&lt;ReduceTask的数量&lt;getPartiton的结果数，则有一部分分区数据无法安放，会Exception</li><li>如果1=ReduceTask的数量，不管多少个分区，最后产生一个ReduceTask，最终一个结果文件</li><li>分区号必须从0开始，逐一累加</li></ol><h3 id="WritableComparable排序"><a href="#WritableComparable排序" class="headerlink" title="WritableComparable排序"></a>WritableComparable排序</h3><p>排序时MapReduce框架中最重要的操作之一。是ReduceTask能<strong>把相同Key分组这个操作的基石</strong>！！</p><p>因为ReduceTask的分组不是一个个分的，因为大数据情况下很慢。还可能会爆掉。Hadoop通过三次排序(环形缓冲区时、溢写大文件时、ReduceTask从各个MapTask获取特定分区数据时)，当ReduceTask获取到数据时，数据的顺序是根据key排好的(相同key比相邻)，所以只需要编写一个key的比较器即可，如果比较器返回0，则归为同一组，否则不同组</p><p>默认排序是按照字典顺序排序的，如果你的key是一个bean，那么你就必须得在bean中指定bean的排序规则，然后在GroupingComparator中指定分组规则。排序规则必须包含分组规则，而且先按照分组规则排一下序，再排其他。否则就会导致ReduceTask分组效果失败。</p><h4 id="排序的分类"><a href="#排序的分类" class="headerlink" title="排序的分类"></a>排序的分类</h4><p><img src="https://i.loli.net/2020/06/27/MuGgZNohnFyT57c.png" alt="image-20200627133002336"></p><h4 id="自定义排序WritableComparable🔺"><a href="#自定义排序WritableComparable🔺" class="headerlink" title="自定义排序WritableComparable🔺"></a>自定义排序WritableComparable🔺</h4><p>bean对象做为key传输，需要实现WritableComparable接口重写compareTo方法，就可以实现排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 按照总流量大小，倒序排列</span></span><br><span class="line">    <span class="keyword">if</span> (sumFlow &gt; bean.getSumFlow()) &#123;</span><br><span class="line">        result = -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (sumFlow &lt; bean.getSumFlow()) &#123;</span><br><span class="line">        result = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="GroupingComparator分组（辅助排序）"><a href="#GroupingComparator分组（辅助排序）" class="headerlink" title="GroupingComparator分组（辅助排序）"></a>GroupingComparator分组（辅助排序）</h3><p>上面说到bean作为key时候的排序，那么GroupingComparator就是ReduceTask端bean做为key时的分组(排序)</p><p>Hadoop通过三次排序(环形缓冲区时、溢写大文件时、ReduceTask从各个MapTask获取特定分区数据时)，当ReduceTask获取到数据时，数据的顺序是根据key排好的(相同key比相邻)，所以只需要编写一个key的比较器即可，如果比较器返回0，则归为同一组，否则不同组</p><h4 id="自定义分组🔺"><a href="#自定义分组🔺" class="headerlink" title="自定义分组🔺"></a>自定义分组🔺</h4><ol><li>作为key的bean必须实现了<code>WritableComparable</code>接口，并实现了相关方法</li><li>编写分组排序类继承<code>WritableComparator</code>，编写key的bean类型的(分组)比较方法</li><li>分组排序类额外需要创建一个构造将比较对象的类传给父类🔺</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">xxx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(OrderBean.class, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>Driver驱动类中<code>job.setGroupingComparatorClass(xxx.class)</code></li></ol><h3 id="Combiner"><a href="#Combiner" class="headerlink" title="Combiner"></a>Combiner</h3><p><img src="https://i.loli.net/2020/06/27/5pkt1imEhJ2ZVDv.png" alt="image-20200627133822658"></p><h4 id="自定义Combiner"><a href="#自定义Combiner" class="headerlink" title="自定义Combiner"></a>自定义Combiner</h4><ol><li>和Reduce一样，继承Reducer，重写Reduce方法</li><li>在Job驱动类中设置：<code>job.setCombinerClass(WordcountCombiner.class)</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS概述</title>
      <link href="2020/06/22/HDFS%E6%A6%82%E8%BF%B0/"/>
      <url>2020/06/22/HDFS%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HDFS概述"><a href="#HDFS概述" class="headerlink" title="HDFS概述"></a>HDFS概述</h1><h2 id="HDFS产生背景"><a href="#HDFS产生背景" class="headerlink" title="HDFS产生背景"></a>HDFS产生背景</h2><p>随着数据量越来越大，在一个操作系统存不下所有的数据，那么就分配到更多的操作下同管理的磁盘中，但是不方便管理和维护，迫切<font color="red">需要一种系统来管理多台机器上的文件</font>，这就是分布式文件管理系统。HDFS只是分布式管理系统的一种。</p><h2 id="HDFS定义"><a href="#HDFS定义" class="headerlink" title="HDFS定义"></a>HDFS定义</h2><p>HDFS(Hadoop Distributed File System)，它是一个文件系统，用于存储文件，通过目录树来定位文件；其次，它是分布式的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色。</p><p>HDFS的适用场景：</p><ol><li>一次写入</li><li>多次读出</li><li>文件不修改</li></ol><h2 id="HDFS优缺点"><a href="#HDFS优缺点" class="headerlink" title="HDFS优缺点"></a>HDFS优缺点</h2><p><strong>优点</strong></p><ol><li>通过<a href="#HDFS%E5%A4%87%E4%BB%BD%E6%9C%BA%E5%88%B6%F0%9F%94%BA">备份机制</a>提供高容错性</li><li>适合处理大数据</li><li>可构建在廉价机器上</li></ol><p><strong>缺点</strong></p><ol><li>不适合低延时数据访问</li><li>无法高校的对大量小文件按进行存储</li><li>不支持并发写入、文件随机修改</li></ol><h2 id="HDFS组成架构🔺"><a href="#HDFS组成架构🔺" class="headerlink" title="HDFS组成架构🔺"></a>HDFS组成架构🔺</h2><h3 id="HDFS分布式存储的角色"><a href="#HDFS分布式存储的角色" class="headerlink" title="HDFS分布式存储的角色"></a>HDFS分布式存储的角色</h3><p>NameNode、SecondaryNode、DataNode</p><p><img src="https://i.loli.net/2020/06/22/9q1IKBtUJlD87T5.png" alt="image-20200622201510707"></p><h3 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h3><p><strong>作用</strong></p><ol><li>掌控全局，管理DataNode和元数据(对数据进行描述的数据)</li><li>接收客户端client的读或者是写请求</li><li>收集DataNode汇报的Block列表信息</li><li>保存上传文件的所有者，权限，上传时间，Block表：Blockid，Block副本位置（备份）</li></ol><p><strong>构成</strong></p><ol><li>edits(存放着能对元数据进行更改的操作)</li><li>fsimage(元数据信息) ：{edits文件会被SNN拿到并重演合并形成新的fsimage文件，把新文件持久化到本地，并推送给NN}</li><li>Block的位置信息，DataNode的心跳信息(启动后每3s发送)，文件的拥有者、权限、上传时间：(前三个是client第一次汇报时存取)、block的位置(在每个block传输完毕，由DN汇报得来)</li></ol><h3 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h3><p>DataNode是一个存储数据的节点，它的存储单位是block块。</p><p><strong>作用</strong></p><ol><li><font color="red">存储Block块(HDFS中不是以文件为基础存储的，是把文件切分为数据块来进行存储的)，默认128M</font></li><li>执行数据块的读写请求</li></ol><p><strong>为什么块的大小不能设置太小，也不能设置太大？</strong></p><ol><li>太小会导致增加寻址时间。</li><li>太大会导致MapReduce分析计算变慢。</li></ol><h3 id="SecondaryNameNode"><a href="#SecondaryNameNode" class="headerlink" title="SecondaryNameNode"></a>SecondaryNameNode</h3><p>并非NameNode的热备，当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务。</p><p><strong>作用</strong></p><ol><li>辅助NameNode，分担其工作量，比如定期合并Fsimage和Edits，并推送给NameNode</li><li>紧急情况下，辅助恢复NameNode</li></ol><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>客户端</p><ol><li>文件切分。文件上传HDFS时，Client将文件切分成一个个的Block，然后上传</li><li>与NameNode交互，获取文件的位置信息</li><li>与DataNode交互，读/写入数据</li><li>Client提供一些命令来管理HDFS，比如Name Node格式化</li><li>Client可以通过一些命令来访问HDFS，比如对HDFS增删查改操作</li></ol><h1 id="HDFS的Shell操作"><a href="#HDFS的Shell操作" class="headerlink" title="HDFS的Shell操作"></a>HDFS的Shell操作</h1><p><code>hdfs dfs</code>或者<code>hadoop fs</code></p><p>请<code>hadoop fs -hlep</code>查看</p><h1 id="HDFS备份机制🔺"><a href="#HDFS备份机制🔺" class="headerlink" title="HDFS备份机制🔺"></a>HDFS备份机制🔺</h1><p>一份数据默认有2份备份，所以一个数据块要存3份。即一份数据要存储在3个DataNode节点中，1个DataNode存储一份数据块，相同的数据块不会在同一DataNode中备份。那么这3个DataNode节点是如何选择的呢？这涉及到集群内提交和集群外提交，直接上结论：([结论依据：就近法则](# 网络拓扑-节点距离计算))</p><p><strong>集群内提交</strong></p><ol><li>第1个DataNode通常是本机(如果本机是DataNode的话)</li><li>其余的1个是和第1个DataNode同机架上的其他一台DataNode</li><li>最后的1个是和1，2号服务器不同机架的随机一台DataNode</li></ol><p><strong>客户端提交(集群外提交)</strong></p><ol><li>第1个存放在一个负载不是很高的一台服务器上</li><li>第2个存储在与第1个不同机架的随机一台服务器上</li><li> 第3个存在放与第1个相同的机架上，但是不是同一台服务器上的随机一台服务器。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For the common case, when the replication factor is three, HDFS’s placement policy is to put one replica on one node in the local rack, another on a different node in the local rack, and the last on a different node in a different rack.</span><br></pre></td></tr></table></figure><h1 id="HDFS的数据流🔺"><a href="#HDFS的数据流🔺" class="headerlink" title="HDFS的数据流🔺"></a>HDFS的数据流🔺</h1><h2 id="HDFS的写数据流程"><a href="#HDFS的写数据流程" class="headerlink" title="HDFS的写数据流程"></a>HDFS的写数据流程</h2><h3 id="剖析文件写入"><a href="#剖析文件写入" class="headerlink" title="剖析文件写入"></a>剖析文件写入</h3><p><img src="https://i.loli.net/2020/06/22/WZkbuTswchHERdJ.gif" alt="pic"></p><ol><li>Client通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否存在，父目录是否存在。然后NameNode返回是否可以上传</li><li>客户端将本地大文件进行<strong>逻辑</strong>分块，并向NameNode请求上传第一块数据</li><li>NameNode返回3(HDFS默认存储3份)个DataNode节点，假设为dn1、dn2、dn3([有讲究](# NameNode返回多个DataNode节点之间的关系))</li><li>客户端通过开启输出流FSDataOutPutStream，请求dn1上传数据，同时dn1收到请求后继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成</li><li>dn1、dn2、dn3逐级应答客户端</li><li>客户端开始往dn1上传第一个数据块Black(先从磁盘读取数据到一个本地内存缓存)，以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答。</li><li>当一个Block传输完成后，客户端再次请求NameNode返回上传第二个Block的3个DataNode节点。(重复执行3-7步)</li><li>客户端发送数据传输完成标志，并关闭输入流。</li></ol><p><img src="https://i.loli.net/2020/06/22/sGcpDPR5eLnt329.png" alt="image-20200622213821279"></p><h4 id="NameNode返回多个DataNode节点之间的关系"><a href="#NameNode返回多个DataNode节点之间的关系" class="headerlink" title="NameNode返回多个DataNode节点之间的关系"></a>NameNode返回多个DataNode节点之间的关系</h4><p>以上面流程第三步为例，首先dn1是距离client端最近的一个几点，dn2、dn3是根据dn1计算得出的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For the common case, when the replication factor is three, HDFS’s placement policy is to put one replica on one node in the local rack, another on a different node in the local rack, and the last on a different node in a different rack.</span><br></pre></td></tr></table></figure><p>通过官方描述可知：3个DataNode应该是同一机架2个，最后1个存放在不同机架。以防机架故障数据丢失。</p><p>[在HDFS写数据的过程中，NameNode会选择距离待上传数据最近距离的DataNode接收数据。那么这个最近距离怎么计算呢？](# 网络拓扑-节点距离计算)</p><h3 id="网络拓扑-节点距离计算"><a href="#网络拓扑-节点距离计算" class="headerlink" title="网络拓扑-节点距离计算"></a>网络拓扑-节点距离计算</h3><p>节点距离：两个节点到达最近的共同祖先的距离总和。</p><p><img src="https://i.loli.net/2020/06/23/dG8ynIozuTgxlqZ.png" alt="image-20200623104447002"></p><p><strong>集群内提交</strong></p><p>假设数据中心d1机架r1中的节点n1上提交，则n1是第一个被选择的节点，第二个节点是相同机架上的其他节点(n0/n2)，最后一个节点是除了r1机架外的一台节点。</p><p><strong>集群外提交</strong></p><p>随便选择一台负载不高的节点作为第一个，二三个跟上面选择一致。</p><h2 id="HDFS的下载数据流程"><a href="#HDFS的下载数据流程" class="headerlink" title="HDFS的下载数据流程"></a>HDFS的下载数据流程</h2><p>如果所示：</p><p><img src="https://i.loli.net/2020/06/23/ERuKIG9QjhDJbpi.gif" alt="gif5"></p><ol><li>客户端通过Distributed FileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址。</li><li>挑选一台DataNode（就近原则，然后随机）服务器，请求读取数据。</li><li>DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）。</li><li>客户端以Packet为单位接收，先在本地缓存，然后写入目标文件。</li><li>最后NameNode返回数据传输完成，然后客户端关闭输入流。</li></ol><h1 id="NameNode和SecondaryNameNode🔺"><a href="#NameNode和SecondaryNameNode🔺" class="headerlink" title="NameNode和SecondaryNameNode🔺"></a>NameNode和SecondaryNameNode🔺</h1><h2 id="NN和2NN工作机制"><a href="#NN和2NN工作机制" class="headerlink" title="NN和2NN工作机制"></a>NN和2NN工作机制</h2><p><strong>思考：NameNode中的元数据是存储在哪里的？</strong></p><p>首先，我们做个假设，如果存储在NameNode节点的磁盘中，因为经常需要进行随机访问，还有响应客户请求，必然是效率过低。<font color="red">因此，元数据需要存放在内存中。</font>但如果只存在内存中，一旦断电，元数据丢失，整个集群就无法工作了。<font color="red">因此它还在在磁盘中备份一份元数据称为FsImage。</font></p><p>这样又会带来新的问题，当在内存中的元数据更新时，如果同时更新FsImage，就会导致效率过低，但如果不更新，就会发生一致性问题，一旦NameNode节点断电，就会产生数据丢失。<font color="red">因此，引入Edits文件(只进行追加操作，效率很高)。每当元数据有更新或者添加元数据时，修改内存中的元数据并追加到Edits中。(Edits也在磁盘中，由NameNode持久化)</font>这样，一旦NameNode节点断电，可以通过FsImage和Edits的合并，合成元数据。</p><p>但是，如果长时间添加数据到Edits中，会导致该文件数据过大，效率降低，而且一旦断电，恢复元数据需要的时间过长。因此，需要定期进行FsImage和Edits的合并，如果这个操作由NameNode节点完成，又会效率过低。<font color="red">因此，引入一个新的节点SecondaryNamenode，专门用于FsImage和Edits的合并，并持久化到磁盘。</font></p><p>NameNode不能持久化fsimage到磁盘，这样对内存全部持久化，会锁内存。此时不能提供服务。</p><p>SecondaryNamenode就是这样减轻NameNode的负担的。</p><p><img src="https://i.loli.net/2020/06/23/sRymkSict2Zh1WU.png" alt="NN和2NN工作机制"></p><ul><li>第一阶段：NameNode启动<ol><li>第一次启动NameNode格式化后，创建Fsimage和Edits文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存。NameNode对其进行合并(仅此一次)</li><li>客户端对元数据进行增删改的请求(读请求不会造成元数据更改，不会触发Edits文件修改)</li><li>NameNode记录操作日志，更新滚动日志</li><li>NameNode在内存中对元数据进行增删改</li></ol></li><li>第二阶段：Secondary NamaNode工作<ol><li>Secondary NameNode询问NameNode是否需要CheckPoint。直接带回NameNode是否检查结果</li><li>Secondary NameNode请求执行CheckPoint</li><li>NameNode滚动正在写的Edits日志</li><li>将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode</li><li>Secondary NameNode加载编辑日志和镜像文件到内存，并合并</li><li>生成新的镜像文件fsimage.chkpoint</li><li>拷贝fsimage.chkpoint到NameNode</li><li>NameNode将fsimage.chkpoint重新命名成fsimage</li></ol></li></ul><h2 id="NN和2NN工作机制详解"><a href="#NN和2NN工作机制详解" class="headerlink" title="NN和2NN工作机制详解"></a>NN和2NN工作机制详解</h2><p><code>Fsimage</code>：NameNode内存中元数据序列化后形成的文件(磁盘中)。</p><p><code>Edits</code>：记录客户端更新元数据信息的每一步操作（可通过Edits运算出元数据）。</p><p>NameNode启动时，先滚动Edits并生成一个空的edits.inprogress，然后加载Edits和Fsimage到内存中，此时NameNode内存就持有最新的元数据信息。Client开始对NameNode发送元数据的增删改的请求，这些请求的操作首先会被记录到edits.inprogress中（查询元数据的操作不会被记录在Edits中，因为查询操作不会更改元数据信息），如果此时NameNode挂掉，重启后会从Edits中读取元数据的信息。然后，NameNode会在内存中执行元数据的增删改的操作。</p><p>由于Edits中记录的操作会越来越多，Edits文件会越来越大，导致NameNode在启动加载Edits时会很慢，所以需要对Edits和Fsimage进行合并（所谓合并，就是将Edits和Fsimage加载到内存中，照着Edits中的操作一步步执行，最终形成新的Fsimage）。SecondaryNameNode的作用就是帮助NameNode进行Edits和Fsimage的合并工作。</p><p>SecondaryNameNode首先会询问NameNode是否需要CheckPoint（触发CheckPoint需要满足两个条件中的任意一个，定时时间到和Edits中数据写满了）。直接带回NameNode是否检查结果。SecondaryNameNode执行CheckPoint操作，首先会让NameNode滚动Edits并生成一个空的edits.inprogress，滚动Edits的目的是给Edits打个标记，以后所有新的操作都写入edits.inprogress，其他未合并的Edits和Fsimage会拷贝到SecondaryNameNode的本地，然后将拷贝的Edits和Fsimage加载到内存中进行合并，生成fsimage.chkpoint，然后将fsimage.chkpoint拷贝给NameNode，重命名为Fsimage后替换掉原来的Fsimage。NameNode在启动时就只需要加载之前未合并的Edits和Fsimage即可，因为合并过的Edits中的元数据信息已经被记录在Fsimage中。</p><hr><p><code>Fsimage</code>、<code>Edits</code>类似于Redis的持久化的两种策略：<code>RDB</code>、<code>AOF</code></p><p><code>RDB</code>对Redis内存中的数据的镜像。</p><p><code>AOF</code>存放对数据操作的指令，来对原始数据进行指令操作做到恢复数据。</p><h2 id="怎么触发CheckPoint"><a href="#怎么触发CheckPoint" class="headerlink" title="怎么触发CheckPoint"></a>怎么触发CheckPoint</h2><p>上面的流程中是SecondaryNameNode主动询问NameNode是否需要checkPoint，那么也不可能SecondaryNameNode一直轮询询问NameNode。那么是怎么触发的呢？</p><ol><li>通常情况下，SecondaryNameNode每隔一小时执行一次。</li></ol><p>[hdfs-default.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3600<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>当操作次数达到1百万时，SecondaryNameNode执行一次。(一分钟检查一次)</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.txns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>1000000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>操作动作次数<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.check.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>60<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span> 1分钟检查一次操作次数<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span> &gt;</span></span><br></pre></td></tr></table></figure><h1 id="HDFS安全模式"><a href="#HDFS安全模式" class="headerlink" title="HDFS安全模式"></a>HDFS安全模式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>NameNode启动时</strong></p><p>首先将镜像文件<code>Fsimage</code>载入内存，并执行编辑日志<code>Edits</code>中的各项操作。一旦在内存中成功建立文件系统元数据的映像，则创建一个新的<code>Fsimage</code>和一个空的编辑日志。此时，NameNode开始监听DataNode的请求(DataNode向NameNode发送Block块信息)。<font color="red">这个过程期间，NameNode一直运行在安全模式，即NameNode的文件系统对于客户端来说是只读的。</font></p><p><strong>DataNode启动</strong></p><p><font color="red">系统中的数据块的位置并不是由NameNode维护的，而是以块列表的形式存储在DataNode中。</font>在系统的正常操作期间，NameNode会在内存中保留所有块位置的映射信息。在安全模式下，各个DataNode会向NameNode发送最新的块列表信息(离开安全模式后，周期性(1 hour)上报block信息)，NameNode了解到足够多的块位置信息后，即可高效运行文件系统。</p><p><strong>安全模式退出判断</strong></p><p>如果满足“最小副本条件”，NameNode会在30秒钟之后就退出安全模式。所谓的最小副本条件指的是在整个文件系统中99.9%的块满足最小副本级别(1)。<font color="red">在启动一个刚刚格式化的HDFS集群时，因为系统没有任何块，所以NameNode不会进入安全模式。</font></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>集群处于安全模式，不能执行重要操作（写操作）。集群启动完成后，自动退出安全模式。</p><ol><li><code>bin/hdfs dfsadmin -safemode get</code>    （功能描述：查看安全模式状态）</li><li><code>bin/hdfs dfsadmin -safemode enter</code>  （功能描述：进入安全模式状态）</li><li><code>bin/hdfs dfsadmin -safemode leave</code>   （功能描述：离开安全模式状态）</li><li><code>bin/hdfs dfsadmin -safemode wait</code>    （功能描述：等待安全模式状态）</li></ol><h1 id="DataNode工作机制"><a href="#DataNode工作机制" class="headerlink" title="DataNode工作机制"></a>DataNode工作机制</h1><p>DataNode工作机制，如图：</p><p><img src="https://i.loli.net/2020/06/23/QfneWoclTGrOAgi.png" alt="Snipaste_2020-06-23_18-32-58"></p><ol><li>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是元数据包括数据块的长度，块数据的校验和，以及时间戳。</li><li>DataNode启动后向NameNode注册，通过后，周期性（1小时）的向NameNode上报所有的块信息。</li><li>心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一台机器，或删除某个数据块。如果超过10分钟没有收到某个DataNode的心跳，则认为该节点不可用。</li><li>集群运行中可以安全加入和退出一些机器。</li></ol><h2 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h2><p><strong>思考：</strong>如果电脑磁盘里面存储的数据是控制高铁信号灯的红灯信号（1）和绿灯信号（0），但是存储该数据的磁盘坏了，一直显示是绿灯，是否很危险？同理DataNode节点上的数据损坏了，却没有发现，是否也很危险，那么如何解决呢？</p><p>如下是DataNode节点保证数据完整性的方法。</p><ol><li>当DataNode读取Block的时候，它会计算CheckSum。</li><li>如果计算后的CheckSum，与Block创建时值不一样，说明Block已经损坏。</li><li>Client读取其他DataNode上的Block。</li><li>DataNode在其文件创建后周期验证CheckSum，如图</li></ol><p><img src="https://i.loli.net/2020/06/23/JhT84BEmtibgopN.png" alt="image-20200623183440272"></p><h2 id="掉线时限参数设置"><a href="#掉线时限参数设置" class="headerlink" title="掉线时限参数设置"></a>掉线时限参数设置</h2><p><img src="https://i.loli.net/2020/06/23/AVx9db7gOmyvfL4.png" alt="image-20200623183557129"></p><p>需要注意的是<code>hdfs-site.xml</code> 配置文件中的<code>heartbeat.recheck.interval</code>的单位为<font color="red">毫秒</font>，<code>dfs.heartbeat.interval</code>的单位为<font color="red">秒</font>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.heartbeat.recheck-interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>300000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.heartbeat.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安全增加DataNode"><a href="#安全增加DataNode" class="headerlink" title="安全增加DataNode"></a>安全增加DataNode</h2><p>随着公司业务的增长，数据量越来越大，原有的数据节点的容量已经不能满足存储数据的需求，需要在原有集群基础上动态添加新的数据节点。</p><p><strong>环境准备</strong></p><ol><li>取一台集群内的节点，复制它，改IP改host名</li><li><strong>删除原来HDFS文件系统留存的文件</strong>(data、logs)</li><li>source一下配置文件</li></ol><p><strong>具体步骤</strong></p><p>直接启动DataNode，即可关联到集群</p><p><code>sbin/hadoop-daemon.sh start</code></p><p><strong>为什么这样设置就可以？</strong></p><p>这里为什么什么也不用改就能直接添加到集群中，因为最新节点开启DataNode后会自己主动去找到NameNode注册自己，那么从其他节点拷贝过来的hadoop配置里面有配置NameNode的信息，所以可以直接添加DataNode节点成功。</p><p>但是还是建议在集群中所有节点的Host文件添加最新的节点，这样展示好。</p><p><strong>之前Hadoop里面slaves文件配置的从节点的列表不用修改吗？</strong></p><p>hadoop配置文件中的<code>slave</code>文件只有在群起集群的时候才有用：<code>start-dfs.sh</code>，因为我们最后一个是集群运行时加入的，是他自己开启DataNode的，所以可以不用修改。这样我们关闭集群时，最新的不会关闭，开启集群时最新的会加入。</p><h2 id="安全退役DataNode"><a href="#安全退役DataNode" class="headerlink" title="安全退役DataNode"></a>安全退役DataNode</h2><p>有黑名单和白名单两种方式，其中白名单比较严格。</p><p>使用黑名单后，DataNode节点处于退役状态，不提供服务。但是节点列表还能查询到，此节点的DataNode进程还存在。</p><p>使用白名单后，DataNode节点直接删除。节点列表不展示，此节点的DataNode进程被杀死。</p><p><strong>所以，一般来说退役节点采用黑名单，白名单一般在多个集群时，为了集群间数据不被污染时设置。</strong></p><h3 id="添加白名单"><a href="#添加白名单" class="headerlink" title="添加白名单"></a>添加白名单</h3><p>添加到白名单的主机节点，都允许访问NameNode，不在白名单的主机节点，都会被退出。</p><p>配置白名单的具体步骤如下：</p><ol><li>在NameNode的<code>/opt/module/hadoop-2.7.2/etc/hadoop</code>目录下创建<code>dfs.hosts</code>文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 集群内所有允许访问NameNode的主机名/IP</span></span><br><span class="line">hadoop201</span><br><span class="line">hadoop202</span><br><span class="line">hadoop203</span><br></pre></td></tr></table></figure><ol start="2"><li>在NameNode的<code>hdfs-site.xml</code>配置文件中增加<code>dfs.hosts</code>属性</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-2.7.2/etc/hadoop/dfs.hosts<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置文件分发</li><li>刷新NameNode，<code>hdfs dfsadmin -refreshNodes</code></li><li>更新ResourceManager节点，<code>yarn rmadmin -refreshNodes</code></li><li>如果数据不均衡，可以用命令实现集群的再平衡。<code>start-balancer.sh</code></li></ol><h3 id="黑名单退役"><a href="#黑名单退役" class="headerlink" title="黑名单退役"></a>黑名单退役</h3><p>在黑名单上面的主机都会被强制退出。</p><ol><li>在NameNode的<code>/opt/module/hadoop-2.7.2/etc/hadoop</code>目录下创建<code>dfs.hosts.exclude</code>文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加要退役的节点</span></span><br><span class="line">hadoop204</span><br></pre></td></tr></table></figure><ol start="2"><li>在NameNode的<code>hdfs-site.xml</code>配置文件中增加<code>dfs.hosts.exclude</code>属性</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.hosts.exclude<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-2.7.2/etc/hadoop/dfs.hosts.exclude<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>刷新NameNode、刷新ResourceManager。<code>hdfs dfsadmin -refreshNodes</code>、<code>yarn rmadmin -refreshNodes</code></li><li>如果数据不均衡，可以用命令实现集群的再平衡。<code>start-balancer.sh</code></li></ol><p>ps：其实白名单/黑名单方式，不需要把改的名单发送到其他节点的，只需要在NameNode那里刷新一下即可。</p><h1 id="HA"><a href="#HA" class="headerlink" title="HA"></a>HA</h1><table><thead><tr><th>hadoop201</th><th>hadoop202</th><th>hadoop203</th></tr></thead><tbody><tr><td>NameNode</td><td>NameNode</td><td></td></tr><tr><td>ZKFC</td><td>ZKFC</td><td></td></tr><tr><td>JournalNode</td><td>JournalNode</td><td>JournalNode</td></tr><tr><td>DataNode</td><td>DataNode</td><td>DataNode</td></tr><tr><td>ZK</td><td>ZK</td><td>ZK</td></tr><tr><td></td><td>ResourceManager</td><td></td></tr><tr><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr></tbody></table><h2 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h2><p><strong>core-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/modules/hadoop-2.7.2/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 指定Hadoop运行时链接zookeeper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:2181,hadoop202:2181,hadoop203:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HDFS配置"><a href="#HDFS配置" class="headerlink" title="HDFS配置"></a>HDFS配置</h2><p><strong>hadoop-env.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/modules/jdk1.8.0_152</span><br></pre></td></tr></table></figure><p><strong>hdfs-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 完全分布式集群名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 集群中NameNode节点都有哪些 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- nn1的RPC通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- nn2的RPC通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop202:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- nn1的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop202:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定NameNode元数据在JournalNode上的存放位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hadoop201:8485;hadoop202:8485;hadoop203:8485/mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置隔离机制，即同一时刻只能有一台服务器对外响应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用隔离机制时需要ssh无秘钥登录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--副本数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明journalnode服务器存储目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/modules/hadoop-2.7.2/data/jn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 关闭权限检查--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions.enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 访问代理类：client，mycluster，active配置失败自动切换实现方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span>                       <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置HDFS-HA自动故障转移 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yarn配置"><a href="#yarn配置" class="headerlink" title="yarn配置"></a>yarn配置</h2><p><strong>yarn-env.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/modules/jdk1.8.0_152</span><br></pre></td></tr></table></figure><p><strong>yarn-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启用resourcemanager ha--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明两台resourcemanager的地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>cluster-yarn1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop202<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定zookeeper集群的地址--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:2181,hadoop202:2181,hadoop203:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启用自动恢复--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--指定resourcemanager的状态信息存储在zookeeper集群--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 日志聚集功能使能 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日志保留时间设置7天 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="red">ps：注意：NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动 YARN，应该在ResouceManager所在的机器上启动YARN。</font></p><h2 id="MapReduce配置"><a href="#MapReduce配置" class="headerlink" title="MapReduce配置"></a>MapReduce配置</h2><p><strong>mapred-env.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/modules/jdk1.8.0_152</span><br></pre></td></tr></table></figure><p><strong>mapred-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 历史服务器端地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>mr-jobhistory-daemon.sh start historyserver</code>启动历史服务器</p><hr><ol><li>先开启Zookeeper</li><li>所有节点开启JournalNode：<code>hadoop-daemon.sh start journalnode</code></li><li>NameNode格式化(一次)，并启动:：<code>hdfs namenode -format</code>、<code>hadoop-daemon.sh start namenode</code></li><li>standbyNameNode执行<code>hdfs namenode -bootstarpStandby  </code></li><li>初始化ZKFC在Zookeeper中的状态，<code>hdfs zkfc -formatZK</code></li><li>关闭所有进程，<code>stop-dfs.sh</code></li><li>群起：<code>start-dfs.sh</code></li><li>群起：<code>start-yarn.sh</code></li><li>在另外一个ResourceManager节点上单独启动，<code>yarn-daemon.sh start resourcemanager</code></li></ol><hr><p><strong>记一个HA手动杀死<code>NameNode</code>，另外一个<code>NameNode</code>不自动切换状态的问问题</strong></p><ol><li>首先查看<code>hdfs-site.xml</code>的配置是否出错</li><li>查看两个<code>namenode</code>节点的namenode和zkfc的log日志。</li><li>(一开始Hadoop201是active，手动杀死Hadoop201的namenode)发现Hadoop202的zkfc</li><li>发现zkfc想通过sshfence的方式切换状态。却出现了错误</li></ol><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-07-01 23:24:45,815 WARN org.apache.hadoop.ha.SshFenceByTcpPort: PATH&#x3D;$PATH:&#x2F;sbin:&#x2F;usr&#x2F;sbin fuser -v -k -n tcp 9000 via ssh: bash: fuser: 未找到命令</span><br></pre></td></tr></table></figure><p>以上所述，原因是最小化安装centos的时候，没有fuser这个命令，导致无法fence，解决办法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install psmisc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop编译安装</title>
      <link href="2020/06/22/Hadoop%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
      <url>2020/06/22/Hadoop%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。提到Hadoop不得不提出大数据的概念。</p><h1 id="大数据概念"><a href="#大数据概念" class="headerlink" title="大数据概念"></a>大数据概念</h1><p>大数据（big data），IT行业术语，是指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</p><p>它主要解决，海量数据的存储和海量数据的分析计算问题。</p><p><img src="https://i.loli.net/2020/06/22/D2fv1ebUotWRA4N.png" alt="大数据技术生态"></p><h2 id="大数据特点"><a href="#大数据特点" class="headerlink" title="大数据特点"></a>大数据特点</h2><ol><li>大量(Volume)</li><li>高速(Velocity)</li><li>多样化(Variety)</li><li>低价值密度(Value)</li></ol><h1 id="Hadoop框架"><a href="#Hadoop框架" class="headerlink" title="Hadoop框架"></a>Hadoop框架</h1><h2 id="Hadoop是什么"><a href="#Hadoop是什么" class="headerlink" title="Hadoop是什么"></a>Hadoop是什么</h2><p><img src="https://i.loli.net/2020/06/22/tgVh1cKbG3pzqRU.png" alt="Snipaste_2020-06-22_11-03-24"></p><h2 id="Hadoop三大发行版本"><a href="#Hadoop三大发行版本" class="headerlink" title="Hadoop三大发行版本"></a>Hadoop三大发行版本</h2><p>Hadoop三大发行版本：Apache、Cloudera、Hortonworks。</p><ol><li><p>Apache版本最原始（最基础）的版本，对于入门学习最好。</p></li><li><p>Cloudera在大型互联网企业中用的较多。</p></li><li><p>Hortonworks文档较好。</p></li></ol><h2 id="Hadoop的组成"><a href="#Hadoop的组成" class="headerlink" title="Hadoop的组成"></a>Hadoop的组成</h2><p>Yarn、HDFS、Conmmon、MapReduce</p><p><img src="https://i.loli.net/2020/06/22/h1C2tSm9eGEANQW.png" alt="image-20200622135005184"></p><h1 id="Hadoop编译"><a href="#Hadoop编译" class="headerlink" title="Hadoop编译"></a>Hadoop编译</h1><p>一般hadoop需要在自己的linux环境下重新将源代码编译一下，为什么hadoop要自己再次编译一下，网上很多都是说:官网提供编译好的只有32位的，没有提供64位的，其实这种解释是错的。官网可下载的也有编译好的64位。</p><h2 id="Hadoop为什么要编译安装？"><a href="#Hadoop为什么要编译安装？" class="headerlink" title="Hadoop为什么要编译安装？"></a>Hadoop为什么要编译安装？</h2><p>主要是要重新编译本地库(Native Libraries) 代码(Linux下对应[.so]文件，window下对应[.dlI]文件)，也就是编译生成linux下的[.so] 文件。</p><p>Hadoop是使用Java语言开发的，但是有一些需求和操作并不适合使用java,所以就引入了本地库(Native Libraries) 的概念。说白了，就是Hadoop的某些功能，必须通过JNT来协调Java类文件和Native代码生成的库文件一起才能工作。linux系统要运行Native 代码，首先要将Native 编译成目标CPU 架构的[.so]文件。<font color="red">而不同的处理器架构，需要编译出相应平台的动态库[.so] 文件，才能被正确的执行，所以最好重新编译一次hadoop源码，让[.so]文件与自己处理器相对应。</font></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>联网的Linux(我这里是CentOS 7)</li><li>hadoop-2.7.2-src.tar.gz</li><li>jdk-8u144-linux-x64.tar.gz</li><li>apache-ant-1.9.9-bin.tar.gz（build工具，打包用的）</li><li>apache-maven-3.0.5-bin.tar.gz</li><li>protobuf-2.5.0.tar.gz（序列化的框架）</li></ol><h2 id="jar包安装"><a href="#jar包安装" class="headerlink" title="jar包安装"></a>jar包安装</h2><p><font color="red">注意：所有操作必须在root用户下完成</font></p><ol><li>jdk安装，坏境变量设置。不多叙述</li><li>maven安装，坏境变量设置；并设置第三方库。不多叙述</li><li>ant安装、配置环境变量</li></ol><h2 id="命令安装"><a href="#命令安装" class="headerlink" title="命令安装"></a>命令安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc-c++ glibc-headers make cmake openssl-devel ncurses-devel</span><br></pre></td></tr></table></figure><p><strong>protobuf</strong></p><p>解压后进入目录，然后执行命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# tar -zxvf /opt/softwares/protobuf-2.5.0.tar.gz -C /opt/modules/</span><br><span class="line">[root@localhost /]# cd /opt/modules/protobuf-2.5.0/</span><br><span class="line">[root@localhost protobuf-2.5.0]# ./configure</span><br><span class="line">[root@localhost protobuf-2.5.0]# make</span><br><span class="line">[root@localhost protobuf-2.5.0]# make check</span><br><span class="line">[root@localhost protobuf-2.5.0]# make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost protobuf-2.5.0]# vim /etc/profile</span><br><span class="line">export LD_LIBRARY_PATH=/opt/modules/protobuf-2.5.0</span><br><span class="line">export PATH=$PATH:$LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">[root@localhost protobuf-2.5.0]# source /etc/profile</span><br></pre></td></tr></table></figure><p><code>protoc --version</code>命令验证安装</p><h2 id="源码编译🔺"><a href="#源码编译🔺" class="headerlink" title="源码编译🔺"></a>源码编译🔺</h2><p><strong>解压源码到/opt</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># tar -zxvf /opt/softwares/hadoop-2.7.2-src.tar.gz -C /opt/</span></span><br><span class="line">[root@localhost /]<span class="comment"># cd /opt/hadoop-2.7.2-src/</span></span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><p>漫长的等待…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost hadoop-2.7.2-src]<span class="comment"># mvn package -Pdist,native -DskipTests -Dtar</span></span><br></pre></td></tr></table></figure><p>编译成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Executed tasks</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-javadoc-plugin:2.8.1:jar (module-javadocs) @ hadoop-dist ---</span><br><span class="line">[INFO] Building jar: /opt/hadoop-2.7.2-src/hadoop-dist/target/hadoop-dist-2.7.2-javadoc.jar</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Reactor Summary:</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] Apache Hadoop Main ................................ SUCCESS [19.528s]</span><br><span class="line">[INFO] Apache Hadoop Project POM ......................... SUCCESS [7.369s]</span><br><span class="line">[INFO] Apache Hadoop Annotations ......................... SUCCESS [17.965s]</span><br><span class="line">[INFO] Apache Hadoop Assemblies .......................... SUCCESS [0.209s]</span><br><span class="line">[INFO] Apache Hadoop Project Dist POM .................... SUCCESS [3.056s]</span><br><span class="line">[INFO] Apache Hadoop Maven Plugins ....................... SUCCESS [29.447s]</span><br><span class="line">[INFO] Apache Hadoop MiniKDC ............................. SUCCESS [27.958s]</span><br><span class="line">[INFO] Apache Hadoop Auth ................................ SUCCESS [38.704s]</span><br><span class="line">[INFO] Apache Hadoop Auth Examples ....................... SUCCESS [7.743s]</span><br><span class="line">[INFO] Apache Hadoop Common .............................. SUCCESS [2:33.067s]</span><br><span class="line">[INFO] Apache Hadoop NFS ................................. SUCCESS [9.051s]</span><br><span class="line">[INFO] Apache Hadoop KMS ................................. SUCCESS [2:56.490s]</span><br><span class="line">[INFO] Apache Hadoop Common Project ...................... SUCCESS [0.069s]</span><br><span class="line">[INFO] Apache Hadoop HDFS ................................ SUCCESS [3:45.576s]</span><br><span class="line">[INFO] Apache Hadoop HttpFS .............................. SUCCESS [17:29.927s]</span><br><span class="line">[INFO] Apache Hadoop HDFS BookKeeper Journal ............. SUCCESS [1:33.868s]</span><br><span class="line">[INFO] Apache Hadoop HDFS-NFS ............................ SUCCESS [8.027s]</span><br><span class="line">[INFO] Apache Hadoop HDFS Project ........................ SUCCESS [0.077s]</span><br><span class="line">[INFO] hadoop-yarn ....................................... SUCCESS [0.105s]</span><br><span class="line">[INFO] hadoop-yarn-api ................................... SUCCESS [56.050s]</span><br><span class="line">[INFO] hadoop-yarn-common ................................ SUCCESS [44.561s]</span><br><span class="line">[INFO] hadoop-yarn-server ................................ SUCCESS [0.064s]</span><br><span class="line">[INFO] hadoop-yarn-server-common ......................... SUCCESS [13.190s]</span><br><span class="line">[INFO] hadoop-yarn-server-nodemanager .................... SUCCESS [24.725s]</span><br><span class="line">[INFO] hadoop-yarn-server-web-proxy ...................... SUCCESS [4.854s]</span><br><span class="line">[INFO] hadoop-yarn-server-applicationhistoryservice ...... SUCCESS [10.211s]</span><br><span class="line">[INFO] hadoop-yarn-server-resourcemanager ................ SUCCESS [31.475s]</span><br><span class="line">[INFO] hadoop-yarn-server-tests .......................... SUCCESS [7.259s]</span><br><span class="line">[INFO] hadoop-yarn-client ................................ SUCCESS [9.486s]</span><br><span class="line">[INFO] hadoop-yarn-server-sharedcachemanager ............. SUCCESS [4.992s]</span><br><span class="line">[INFO] hadoop-yarn-applications .......................... SUCCESS [0.049s]</span><br><span class="line">[INFO] hadoop-yarn-applications-distributedshell ......... SUCCESS [3.647s]</span><br><span class="line">[INFO] hadoop-yarn-applications-unmanaged-am-launcher .... SUCCESS [2.828s]</span><br><span class="line">[INFO] hadoop-yarn-site .................................. SUCCESS [0.037s]</span><br><span class="line">[INFO] hadoop-yarn-registry .............................. SUCCESS [7.389s]</span><br><span class="line">[INFO] hadoop-yarn-project ............................... SUCCESS [6.492s]</span><br><span class="line">[INFO] hadoop-mapreduce-client ........................... SUCCESS [0.065s]</span><br><span class="line">[INFO] hadoop-mapreduce-client-core ...................... SUCCESS [35.417s]</span><br><span class="line">[INFO] hadoop-mapreduce-client-common .................... SUCCESS [26.472s]</span><br><span class="line">[INFO] hadoop-mapreduce-client-shuffle ................... SUCCESS [4.315s]</span><br><span class="line">[INFO] hadoop-mapreduce-client-app ....................... SUCCESS [10.550s]</span><br><span class="line">[INFO] hadoop-mapreduce-client-hs ........................ SUCCESS [7.457s]</span><br><span class="line">[INFO] hadoop-mapreduce-client-jobclient ................. SUCCESS [38.727s]</span><br><span class="line">[INFO] hadoop-mapreduce-client-hs-plugins ................ SUCCESS [2.103s]</span><br><span class="line">[INFO] Apache Hadoop MapReduce Examples .................. SUCCESS [6.359s]</span><br><span class="line">[INFO] hadoop-mapreduce .................................. SUCCESS [3.301s]</span><br><span class="line">[INFO] Apache Hadoop MapReduce Streaming ................. SUCCESS [12.503s]</span><br><span class="line">[INFO] Apache Hadoop Distributed Copy .................... SUCCESS [14.949s]</span><br><span class="line">[INFO] Apache Hadoop Archives ............................ SUCCESS [2.771s]</span><br><span class="line">[INFO] Apache Hadoop Rumen ............................... SUCCESS [9.066s]</span><br><span class="line">[INFO] Apache Hadoop Gridmix ............................. SUCCESS [6.101s]</span><br><span class="line">[INFO] Apache Hadoop Data Join ........................... SUCCESS [2.899s]</span><br><span class="line">[INFO] Apache Hadoop Ant Tasks ........................... SUCCESS [2.329s]</span><br><span class="line">[INFO] Apache Hadoop Extras .............................. SUCCESS [3.326s]</span><br><span class="line">[INFO] Apache Hadoop Pipes ............................... SUCCESS [10.514s]</span><br><span class="line">[INFO] Apache Hadoop OpenStack support ................... SUCCESS [5.215s]</span><br><span class="line">[INFO] Apache Hadoop Amazon Web Services support ......... SUCCESS [1:56.165s]</span><br><span class="line">[INFO] Apache Hadoop Azure support ....................... SUCCESS [9.854s]</span><br><span class="line">[INFO] Apache Hadoop Client .............................. SUCCESS [9.677s]</span><br><span class="line">[INFO] Apache Hadoop Mini-Cluster ........................ SUCCESS [0.095s]</span><br><span class="line">[INFO] Apache Hadoop Scheduler Load Simulator ............ SUCCESS [5.450s]</span><br><span class="line">[INFO] Apache Hadoop Tools Dist .......................... SUCCESS [12.957s]</span><br><span class="line">[INFO] Apache Hadoop Tools ............................... SUCCESS [0.024s]</span><br><span class="line">[INFO] Apache Hadoop Distribution ........................ SUCCESS [48.026s]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 41:50.655s</span><br><span class="line">[INFO] Finished at: Mon Jun 22 15:51:06 GMT 2020</span><br><span class="line">[INFO] Final Memory: 108M/338M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译成功好的文件在：</p><p><code>/opt/hadoop-2.7.2-src/hadoop-dist/target</code>源码目录的<code>hadoop-dist</code>文件夹里。</p><h1 id="Hadoop数据压缩🔺"><a href="#Hadoop数据压缩🔺" class="headerlink" title="Hadoop数据压缩🔺"></a>Hadoop数据压缩🔺</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>压缩技术能够有效减少底层存储系统（HDFS）读写字节数。压缩提高了网络带宽和磁盘空间的效率。在运行MR程序时，I/O操作、网络数据传输、 Shuffle和Merge要花大量的时间，<font color="red">尤其是数据规模很大和工作负载密集的情况下，因此，使用数据压缩显得非常重要。</font></p><p>  鉴于磁盘I/O和网络带宽是Hadoop的宝贵资源，<font color="red">数据压缩对于节省资源、最小化磁盘I/O和网络传输非常有帮助。可以在任意MapReduce阶段启用压缩。</font>不过，尽管压缩与解压操作的CPU开销不高，其性能的提升和资源的节省并非没有代价。</p><h2 id="MR支持的压缩编码"><a href="#MR支持的压缩编码" class="headerlink" title="MR支持的压缩编码"></a>MR支持的压缩编码</h2><table><thead><tr><th>压缩格式</th><th>hadoop自带？</th><th>算法</th><th>文件扩展名</th><th>是否可切分</th><th>换成压缩格式后，原来的程序是否需要修改</th></tr></thead><tbody><tr><td>DEFLATE</td><td>是，直接使用</td><td>DEFLATE</td><td>.deflate</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>Gzip</td><td>是，直接使用</td><td>DEFLATE</td><td>.gz</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>bzip2</td><td>是，直接使用</td><td>bzip2</td><td>.bz2</td><td>是</td><td>和文本处理一样，不需要修改</td></tr><tr><td>LZO</td><td>否，需要安装</td><td>LZO</td><td>.lzo</td><td>是</td><td>需要建索引，还需要指定输入格式</td></tr><tr><td>Snappy</td><td>否，需要安装</td><td>Snappy</td><td>.snappy</td><td>否</td><td>和文本处理一样，不需要修改</td></tr></tbody></table><p><strong>压缩性能的比较</strong></p><table><thead><tr><th>压缩算法</th><th>原始文件大小</th><th>压缩文件大小</th><th>压缩速度</th><th>解压速度</th></tr></thead><tbody><tr><td>gzip</td><td>8.3GB</td><td>1.8GB</td><td>17.5MB/s</td><td>58MB/s</td></tr><tr><td>bzip2</td><td>8.3GB</td><td>1.1GB</td><td>2.4MB/s</td><td>9.5MB/s</td></tr><tr><td>LZO</td><td>8.3GB</td><td>2.9GB</td><td>49.3MB/s</td><td>74.6MB/s</td></tr></tbody></table><p><a href="http://google.github.io/snappy/">http://google.github.io/snappy/</a></p><p>On a single core of a Core i7 processor in 64-bit mode, Snappy compresses at about 250 MB/sec or more and decompresses at about 500 MB/sec or more.</p><p>可以得知<code>snappy</code>的压缩性能非常好，但是Hadoop不自带<code>snappy</code>，那么如何使用它呢，需要在编译Hadoop指定参数，让他把<code>snappy</code>编译进Hadoop包的<code>lib/native</code>位置。(本地库)</p><p><strong><em>那么如何得知Hadoop包是否支持<code>snappy</code>压缩呢？</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost hadoop-2.7.2]# bin/hadoop checknative</span><br><span class="line">20/07/03 16:52:54 WARN bzip2.Bzip2Factory: Failed to load/initialize native-bzip2 library system-native, will use pure-Java version</span><br><span class="line">20/07/03 16:52:54 INFO zlib.ZlibFactory: Successfully loaded &amp; initialized native-zlib library</span><br><span class="line">Native library checking:</span><br><span class="line">hadoop:  true /opt/modules/hadoop-2.7.2/lib/native/libhadoop.so.1.0.0</span><br><span class="line">zlib:    true /lib64/libz.so.1</span><br><span class="line">snappy:  true /opt/modules/hadoop-2.7.2/lib/native/libsnappy.so.1</span><br><span class="line">lz4:     true revision:99</span><br><span class="line">bzip2:   false</span><br><span class="line">openssl: true /lib64/libcrypto.so</span><br></pre></td></tr></table></figure><p>输入以上命令，查看snappy那一行的输出结果即可。</p><h2 id="编译支持snappy的Hadoop包🔺"><a href="#编译支持snappy的Hadoop包🔺" class="headerlink" title="编译支持snappy的Hadoop包🔺"></a>编译支持snappy的Hadoop包🔺</h2><p>和[源码编译](# 源码编译🔺)流程大体一致。</p><p>不同的是：</p><ol><li><p>在编译前，编译安装<code>snappy</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 software]# tar -zxvf snappy-1.1.3.tar.gz -C /opt/modules/</span><br><span class="line">[root@hadoop101 module]# cd snappy-1.1.3/</span><br><span class="line">[root@hadoop101 snappy-1.1.3]# ./configure</span><br><span class="line">[root@hadoop101 snappy-1.1.3]# make</span><br><span class="line">[root@hadoop101 snappy-1.1.3]# make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看snappy库文件</span></span><br><span class="line">[root@hadoop101 snappy-1.1.3]# ls -lh /usr/local/lib |grep snappy</span><br></pre></td></tr></table></figure></li><li><p>最终的编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 software]# tar -zxvf hadoop-2.7.2-src.tar.gz</span><br><span class="line">[root@hadoop101 software]# cd hadoop-2.7.2-src/</span><br><span class="line">[root@hadoop101 software]# mvn clean package -DskipTests -Pdist,native -Dtar -Dsnappy.lib=/usr/local/lib -Dbundle.snappy</span><br></pre></td></tr></table></figure></li></ol><h1 id="Hadoop常用端口"><a href="#Hadoop常用端口" class="headerlink" title="Hadoop常用端口"></a>Hadoop常用端口</h1><p>datanode端口：50010</p><p>namenode端口：50070</p><p>secondarynamenode端口：50090</p><p>默认文件系统端口：9000</p><p>yarn管理端口：8088</p><h1 id="Hadoop集群配置文件"><a href="#Hadoop集群配置文件" class="headerlink" title="Hadoop集群配置文件"></a>Hadoop集群配置文件</h1><table><thead><tr><th>hadoop201</th><th>hadoop202</th><th>hadoop203</th></tr></thead><tbody><tr><td>NameNode</td><td>NameNode</td><td></td></tr><tr><td>DataNode</td><td>DataNode</td><td>DataNode</td></tr><tr><td></td><td>ResourceManager</td><td></td></tr><tr><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr></tbody></table><p>配置文件在<code>hadoop/etc/hadoop</code>中</p><h2 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h2><p><strong>core-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop201:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/modules/hadoop-2.7.2/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HDFS配置"><a href="#HDFS配置" class="headerlink" title="HDFS配置"></a>HDFS配置</h2><p><strong>hadoop-env.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/modules/jdk1.8.0_152</span><br></pre></td></tr></table></figure><p><strong>hdfs-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--副本数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop202:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yarn配置"><a href="#yarn配置" class="headerlink" title="yarn配置"></a>yarn配置</h2><p><strong>yarn-env.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/modules/jdk1.8.0_152</span><br></pre></td></tr></table></figure><p><strong>yarn-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop202<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 日志聚集功能使能 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日志保留时间设置7天 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="red">ps：注意：NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动 YARN，应该在ResouceManager所在的机器上启动YARN。</font></p><h2 id="MapReduce配置"><a href="#MapReduce配置" class="headerlink" title="MapReduce配置"></a>MapReduce配置</h2><p><strong>mapred-env.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/modules/jdk1.8.0_152</span><br></pre></td></tr></table></figure><p><strong>mapred-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 历史服务器端地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop201:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>mr-jobhistory-daemon.sh start historyserver</code>启动历史服务器</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell之cut、sed、awk、sort</title>
      <link href="2020/06/17/Shell%E4%B9%8Bcut%E3%80%81sed%E3%80%81awk%E3%80%81sort/"/>
      <url>2020/06/17/Shell%E4%B9%8Bcut%E3%80%81sed%E3%80%81awk%E3%80%81sort/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell概述"><a href="#Shell概述" class="headerlink" title="Shell概述"></a>Shell概述</h1><p><img src="https://i.loli.net/2020/06/17/gYbrhyfoNv4cAut.png" alt="image-20200617202031720"></p><h1 id="Shell解析器"><a href="#Shell解析器" class="headerlink" title="Shell解析器"></a>Shell解析器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p>Linux提供的Shell解析器有：</p><ol><li>/bin/sh</li><li>/bin/bash</li><li>/bin/rbash</li><li>/bin/dash</li><li>/usr/bin/tmux</li><li>/usr/bin/screen</li></ol><p>Ubuntu默认的解析器<code>echo $SHELL</code>是<code>bash</code></p><h1 id="Shell工具之cut、sed、awk、sort"><a href="#Shell工具之cut、sed、awk、sort" class="headerlink" title="Shell工具之cut、sed、awk、sort"></a>Shell工具之cut、sed、awk、sort</h1><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>cut [选项参数] filename</code></p><p><strong>说明：默认分隔符是制表符</strong></p><h3 id="选项参数说明"><a href="#选项参数说明" class="headerlink" title="选项参数说明"></a>选项参数说明</h3><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-f</td><td>列号，提取第几列</td></tr><tr><td>-d</td><td>分隔符，按照指定分隔符分割一行为多个分割列</td></tr><tr><td>-c</td><td>获取指定位置的字符(多个时n-n+k)</td></tr></tbody></table><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>例如：获取此目录文件内容中包含 /bin的文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r /bin|cut -d : -f 1</span><br></pre></td></tr></table></figure><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</p><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p><code>sed [选项参数]  ‘command’ filename</code></p><h3 id="选项参数说明-1"><a href="#选项参数说明-1" class="headerlink" title="选项参数说明"></a>选项参数说明</h3><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>直接在指令列模式上进行sed的动作编辑(可多个指定)</td></tr><tr><td>-i</td><td>直接编辑文件</td></tr></tbody></table><h3 id="命令功能描述"><a href="#命令功能描述" class="headerlink" title="命令功能描述"></a>命令功能描述</h3><p>command包含范围和操作</p><table><thead><tr><th>命令</th><th>功能描述</th></tr></thead><tbody><tr><td>a</td><td>新增，新增的字符串在下一行展示</td></tr><tr><td>d</td><td>删除</td></tr><tr><td>s</td><td>查找、替换(s/代替换/替换为/g)</td></tr></tbody></table><p>范围可以是行号(n|n,n+k)或者正则表达式(要用//包裹)。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>删除前三行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | sed &#x27;1-3d&#x27;</span><br></pre></td></tr></table></figure><p>去除空行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | sed &#39;&#x2F;^$&#x2F;d&#39;</span><br></pre></td></tr></table></figure><p>将127.0.0.1替换为8.8.8.8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | sed &#x27;s/127.0.0.1/8.8.8.8/g&#x27;</span><br></pre></td></tr></table></figure><h2 id="🔺awk"><a href="#🔺awk" class="headerlink" title="🔺awk"></a>🔺awk</h2><p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>awk [选项参数] ‘pattern1&#123;action1&#125; pattern2&#123;action2&#125;...’ filename</code></p><p>pattern：表示AWK在数据中查找的内容，就是匹配模式</p><p>pattern可以是正则表达式(用//包裹)，还可以是<code>BEGIN</code>、<code>END</code>之类。</p><p>action：在找到匹配内容时所执行的一系列命令(用{}包裹)</p><h3 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h3><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-F</td><td>指定每行分隔符</td></tr><tr><td>-v</td><td>复制用户自定义变量</td></tr></tbody></table><h3 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h3><p>有很多，只列举一些常用！</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>FILENAME</td><td>文件名</td></tr><tr><td>NR</td><td>已读行数</td></tr><tr><td>NF</td><td>浏览记录的域的个数(切割后，列的个数)</td></tr></tbody></table><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>查询文件file中空行的行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;/^$/&#123;print NR&#125;&#x27; file</span><br></pre></td></tr></table></figure><p>计算第二列的和并输出</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangsan 50</span><br><span class="line">lisi 100</span><br><span class="line">wuwang 50</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F &quot; &quot;  &#x27;BEGIN&#123;sum=0&#125; &#123;sum+=$2&#125; END&#123;print sum&#125;&#x27; score</span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><code>sort(选项)(参数)</code></p><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>依照数值的大小排序</td></tr><tr><td>-r</td><td>以相反的顺序来排序</td></tr><tr><td>-t</td><td>设置排序时所用的分隔字符</td></tr><tr><td>-k</td><td>指定需要排序的列</td></tr></tbody></table><p>ps：如果不指定-n默认以字符串字典排序</p><p>参数：指定待排序的文件列表</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p>对文本中无序的一列数字排序</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">554</span><br><span class="line">884</span><br><span class="line">21</span><br><span class="line">221</span><br><span class="line">210</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -n number</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMM内存模型</title>
      <link href="2020/06/15/%E4%BB%80%E4%B9%88%E6%98%AFJMM/"/>
      <url>2020/06/15/%E4%BB%80%E4%B9%88%E6%98%AFJMM/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JMM"><a href="#什么是JMM" class="headerlink" title="什么是JMM"></a>什么是JMM</h1><p>java内存模型；在多线程环境下，线程之间的要通信,就不得不提JMM(java内存模型)</p><p><strong>在JVM内部使用的java内存模型(JMM)将线程堆栈和堆之间的内存分开</strong></p><p>JMM是一种抽象的概念并<strong>不真实存在</strong>，它描述的是一组规则或规范，通过这组规范定义了程序中各个变量(包括实例字段、静态字段和构成数组对象的元素)，是多个线程对同一变量访问的规范。</p><p>它的特征有：</p><ol><li>可见性</li><li>有序性</li><li>原子性</li></ol><h1 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h1><h2 id="线程堆栈"><a href="#线程堆栈" class="headerlink" title="线程堆栈"></a>线程堆栈</h2><p>线程堆栈(<code>thread stack</code>):</p><ol><li><p>运行在java虚拟机上的每个线程都有自己的线程堆栈(<code>thread stack</code>)</p></li><li><p>线程堆栈还包含正在执行的每个方法的所有局部变量,一个线程只能访问它自己的线程堆栈。由线程创建的局部变量对于除创建它的线程之外的所有其他线程都是不可见的。</p></li><li><p>即使两个线程正在执行完全相同的代码，两个线程仍然会在每个线程堆栈中创建该代码的局部变量,一个线程可能会将一个有限变量的副本传递给另一个线程，但它不能共享原始局部变量本身</p></li></ol><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆:</p><ol><li><p>堆包含在Java应用程序中创建的所有对象，而不管是不是由线程创建的该对象。</p></li><li><p>堆中的对象可以被具有对象引用的所有线程访问。当一个线程访问一个对象时，它也可以访问该对象的成员变量。</p></li><li><p>如果两个线程同时调用同一个对象上的一个方法，它们都可以访问该对象的成员变量，但每个线程都有自己的局部变量副本</p></li><li><p>堆中的数据是共享的,线程不安全的</p></li></ol><h1 id="多线程访问同一变量"><a href="#多线程访问同一变量" class="headerlink" title="多线程访问同一变量"></a>多线程访问同一变量</h1><p>由于JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存（有些地方称为栈空间），工作内存是每个线程的私有数据区域，而Java内存模型中规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，但线程对变量 的操作（读取赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝的自己的工作内存空间，然后对变量进行操作，操作完成 后再将变量写回主内存，不能直接操作主内存中的变量，各个线程中的工作内存中存储着主内存中的变量副本拷贝，因此不同的线程间无法去访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成，其简要访问过程如下图</p><p>JMM关于同步的规定：</p><ol><li>线程解锁前，必须把共享变量的值刷新回主内存</li><li>线程加锁前，必须读取主内存的最新值到自己的工作内存</li><li>加锁解锁是同一把锁</li></ol><p><img src="https://i.loli.net/2020/06/15/oCTlgtIXvVOcPwf.png" alt="image-20200615194751790"></p><p>JMM就是这个图！</p><h1 id="synchronized与volatile🔺"><a href="#synchronized与volatile🔺" class="headerlink" title="synchronized与volatile🔺"></a>synchronized与volatile🔺</h1><p>JMM内存模型是定义的线程间通信的规定，线程间肯定是多线程了。涉及到多线程的开发就肯定知道synchronized、volatile。</p><ul><li><font color="red">volatile遵循了JMM的可见性、有序性。</font></li><li><font color="red">synchronized遵循了JMM的可见性、原子性、有序性。&lt;</font></li></ul><p><strong>提到JMM的三大特征：</strong></p><ol><li>可见性：是指线程之间的可见性，就是一个线程修改后的结果，其他的线程能够立马知道。</li><li>原子性：是指线程的多个操作是一个整体，不能被分割，要么就不执行，要么就全部执行完，中间不能被打断。</li><li>有序性：为了提高执行效率，java中的编译器和处理器可以对指令进行重新排序，重新排序会影响多线程并发的正确性，有序性就是要保证不进行重新排序（保证线程操作的执行顺序）。</li></ol><h2 id="volatile🔺"><a href="#volatile🔺" class="headerlink" title="volatile🔺"></a>volatile🔺</h2><p><strong>volatile是什么？</strong></p><ul><li>Java的轻量同步机制</li><li>遵循JMM的可见性、有序性</li></ul><p>其实volatile关键字的作用就是<strong>保证了可见性和有序性（不保证原子性）</strong>，如果一个共享变量被volatile关键字修饰，那么如果一个线程修改了这个共享变量后，其他线程是立马可知的。</p><p>为什么是这样的呢？比如，线程A修改了自己的共享变量副本，这时如果该共享变量没有被volatile修饰，那么本次修改不一定会马上将修改结果刷新到主存中，如果此时B去主存中读取共享变量的值，那么这个值就是没有被A修改之前的值。如果该共享变量被volatile修饰了，那么本次修改结果会强制立刻刷新到主存中，如果此时B去主存中读取共享变量的值，那么这个值就是被A修改之后的值了。</p><p>volatile能禁止指令重新排序，在指令重排序优化时，在volatile变量之前的指令不能在volatile之后执行，在volatile之后的指令也不能在volatile之前执行，所以它保证了有序性。</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p><font color="red"><strong>volatile是值被修改后及时通知其他线程机制来保证JMM的可见性的。</strong></font></p><p><strong>验证可见性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNumber</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">numberTo100</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyNumber myNumber = <span class="keyword">new</span> MyNumber();</span><br><span class="line">        <span class="comment">// Thead A</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            myNumber.numberTo100();</span><br><span class="line">            System.out.println(<span class="string">&quot;number已被修改&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Thread main</span></span><br><span class="line">        <span class="keyword">while</span> (myNumber.number == <span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main线程察觉出number值已修改，跳出循环&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时代码不会结束，因为main线程一直察觉不到number值已经被修改。</p><p>因为JMM约束多线程读取变量，代码的执行逻辑是：</p><ol><li>A、main线程同时从主内存拷贝number的副本到线程堆栈中</li><li>main线程一直读取自己本地线程堆栈中的数字(固定为10)，不会改变</li><li>A线程修改完本地后，刷新到主内存，此时主内存的数值已经是100。</li><li>但是main读取的是本地副本，没人通知它值已经修改。所以循环不断</li></ol><p>如何解决？</p><p>关键字synchronized锁住或者利用volatile关键字的可见性</p><p>volatile是java虚拟机提供的轻量级的同步机制（可以理解成乞丐版的synchronized）</p><p>特性有： </p><ol><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNumber</span></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> number=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">numberTo100</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyNumber myNumber = <span class="keyword">new</span> MyNumber();</span><br><span class="line">        <span class="comment">// Thead A</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            myNumber.numberTo100();</span><br><span class="line">            System.out.println(<span class="string">&quot;number已被修改&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Thread main</span></span><br><span class="line">        <span class="keyword">while</span> (myNumber.number == <span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main线程察觉出number值已修改，跳出循环&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p><strong>volatile不保证原子性！！！</strong>怎么验证呢，既然它不保证原子性，那么测试一下多个操作同时执行就可验证它支不支持原子性。</p><p>众所周知，<code>i++</code>操作并不是一个原子性操作，它包含多个步骤：获取值，计算值，赋值等</p><p>看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">public</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">volatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyData myData = <span class="keyword">new</span> MyData();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2000</span>; j++) &#123;</span><br><span class="line">                    myData.add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, i+<span class="string">&quot;&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待20子线程执行完毕后。mian获取最后的值</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// why 2? 因为默认main、GC线程在运行，如果大于2证明子线程没有执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;last value number: &quot;</span> + myData.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后结果：一直小于40000！！！</p><p><strong>原因</strong></p><p>别看<code>i++</code>只有一行，但实际上JVM字节码分了三个步骤。获取值，+1，把值写回主内存。这样就有一中情况造成写覆盖！</p><ol><li>设三个线程同时读取主内存中的0，然后线程内部进行加1操作，还未写到主内存</li><li>此时，<strong>1线程突然被挂起</strong>，线程2快已经写入到主内存了，然后volatile的可见性通知到线程3最新值</li><li>线程3加一后写入到主内存，此时为2.</li><li><strong>然后这时线程1开始执行，此时也没有其他线程改值，所以线程1也没收到最新值。</strong>直接把1写入了主内存，所以造成了写覆盖。</li></ol><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200722194639205.png" alt="image-20200722194639205"></p><p><strong>避免问题</strong></p><p>只要多线程同时操作一个方法，方法内部不是原子操作，就会有各种问题。且volatile不保证原子性。那么如何避免呢？</p><ul><li>synchronized(不推荐)：小题大做了，使用后同一时刻只有一个线程操作，值自然不会被同时修改。问题不攻自破</li><li>使用JUC的原子包装类(<code>Atomic</code>)，底层原理为：<font color="red"><strong>CAS</strong></font>！！！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">public</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAtomic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        atomicInteger.getAndIncrement();<span class="comment">// 此方法和i++意义一致</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">volatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyData myData = <span class="keyword">new</span> MyData();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2000</span>; j++) &#123;</span><br><span class="line">                    myData.add();</span><br><span class="line">                    myData.addAtomic();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, i+<span class="string">&quot;&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待20子线程执行完毕后。mian获取最后的值</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// why 2? 因为默认main、GC线程在运行，如果大于2证明子线程没有执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;last value number: &quot;</span> + myData.number);</span><br><span class="line">        System.out.println(<span class="string">&quot;last value atomicInteger: &quot;</span> + myData.atomicInteger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>有序性指的就是禁止指令重排。</p><p>计算机在执行程序时,为了提高性能,编译器和处理器常常会做<font color="red">指令重排</font>,一把分为以下3种：</p><ol><li>编译器优化的重排</li><li>指令并行的重排</li><li>内存系统的重排</li></ol><p><font color="blue">单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致。所以synchronized保证有序性的原理就是单线程不会进行重排。</font><br><strong>处理器在进行重新排序是必须要考虑指令之间的数据依赖性</strong>，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mySort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">11</span>;<span class="comment">//语句1</span></span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">12</span>;<span class="comment">//语句2</span></span><br><span class="line">    x=x+<span class="number">5</span>;<span class="comment">//语句3</span></span><br><span class="line">    y=x*x;<span class="comment">//语句4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多线程同时执行此方法时，可能因为重排导致语句1-4执行乱序。但是因为语句4依赖语句1，所以语句4不可能第一个执行！！！</p><p>多线程环境中线程交替执行,由于编译器优化重排的存在,两个线程使用的变量能否保持一致性是无法确定的,结果无法预测。</p><p>这时，volatile不能保证单一时刻只有一个线程执行。所以它能禁止指令重排(有序性)的原理和synchronized不同。上述xy变量使用volatile声明后就可以解决指令重排问题。</p><p><strong>volatile解决指令重排的原理？</strong></p><p>通过CPU指令：内存屏障（Memory Barrier）。它的作用：</p><ol><li>保证特性操作的执行顺序</li><li>保证某些变量的内存可见性</li></ol><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>synchronized提供了同步锁的概念，被synchronized修饰的代码段可以防止被多个线程同时执行，必须一个线程把synchronized修饰的代码段都执行完毕了，其他的线程才能开始执行这段代码。</p><p><strong>synchronized是如何保证JMM的三大特性的？</strong></p><p>因为synchronized保证了在同一时刻，只能有一个线程执行同步代码块，所以执行同步代码块的时候<font color="red"><strong>相当于是单线程操作了</strong></font>，那么线程的可见性、原子性、有序性（线程之间的执行顺序）它都能保证了。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>volatile线程不阻塞，synchronized线程阻塞。</li><li>volatile只能作用于变量，使用范围较小。synchronized可以用在变量、方法、类、同步代码块等，使用范围比较广。</li><li>volatile只能保证可见性和有序性，不能保证原子性。而可见性、有序性、原子性synchronized都可以包证。</li></ol><h1 id="JMM保证线程安全"><a href="#JMM保证线程安全" class="headerlink" title="JMM保证线程安全"></a>JMM保证线程安全</h1><p>工作内存和主内存同步延迟现象导致的可见性问题，可以使用synchronized/volatile关键字解决。<strong>它们都可以使一个线程修改后的变量立即对其他线程可见。</strong></p><p>对于指令重排导致的可见性问题和有序性问题，可以利用volatile关键字解决，因为volatile的另外一个作用就是禁止指令重排</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是JVM</title>
      <link href="2020/06/14/%E4%BB%80%E4%B9%88%E6%98%AFJVM/"/>
      <url>2020/06/14/%E4%BB%80%E4%B9%88%E6%98%AFJVM/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JVM"><a href="#什么是JVM" class="headerlink" title="什么是JVM"></a>什么是JVM</h1><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p><p>一句话，JVM可以用下图表达。</p><p><img src="https://i.loli.net/2020/06/14/UeHY4PuDzcNi387.png" alt="image-20200614160517465"></p><h1 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h1><p>如上面的图所示，其中中间区域，<strong>亮色的部分是共享区域，且存在垃圾回收机制；其余灰色部分是线程私有，不存在垃圾回收机制。</strong></p><h2 id="类加载器ClassLoader"><a href="#类加载器ClassLoader" class="headerlink" title="类加载器ClassLoader"></a>类加载器ClassLoader</h2><p>负责加载class文件，class文件在文件开头有特定的文件标示，将class文件字节码内容加载到内存中，并将这些内容转换成<strong>方法区</strong>中的运行时数据结构并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p><p><strong>方法区</strong>存放的是这个类的类模板，<strong>类的Class类</strong>、静态常量以及普通常量。</p><p>例如，下面的流程：</p><p><img src="https://i.loli.net/2020/06/14/sUM3eFiVlyXNDuo.png" alt="image-20200614160728184"></p><h3 id="ClassLoader的种类及作用"><a href="#ClassLoader的种类及作用" class="headerlink" title="ClassLoader的种类及作用"></a>ClassLoader的种类及作用</h3><p>ClassLoader的种类有3+1种：三种为Java自带、一种为用户自定义</p><p>Java自带的ClassLoader有：</p><ol><li>Bootstrap(C++)：启动类加载器，负责加载Java自带的类(<code>JAVA_HOME/jre/lib/tr.jar</code>中的)，例如java.lang就在这里面</li><li>Extension：扩展类加载器，扩展的类由这个加载器加载(<code>JAVA_HOME/jre/lib/ext/*.jar</code>)，例如swing的类就在这里</li><li>AppClassLoader：应用程序类加载器，用户编写的类由这个ClassLoader加载。加载当前项目classpath的类</li></ol><p>用户自定义的ClassLoader：</p><ol><li><code>Java.lang.ClassLoader</code>的子类，用户可以定制类的加载方式</li></ol><p>参考下面的图：</p><p><img src="https://i.loli.net/2020/06/14/XVNOFrPKmYvZdEg.png" alt="image-20200614161648514"></p><p>由图可知，这些类都是继承关系，其中<code>Bootstrap</code>是顶级类。</p><p>我们可以编写一个程序来证明上述说的类加载器的对错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        MyObject myObject = <span class="keyword">new</span> MyObject();</span><br><span class="line"></span><br><span class="line">        System.out.println(o.getClass().getClassLoader().getParent().getParent());<span class="comment">// java.lang.NullPointerException</span></span><br><span class="line">        System.out.println(o.getClass().getClassLoader().getParent());<span class="comment">// java.lang.NullPointerException</span></span><br><span class="line">        System.out.println(o.getClass().getClassLoader());<span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(myObject.getClass().getClassLoader().getParent().getParent());<span class="comment">// null</span></span><br><span class="line">        System.out.println(myObject.getClass().getClassLoader().getParent());<span class="comment">// jdk.internal.loader.ClassLoaders$PlatformClassLoader@58ceff1</span></span><br><span class="line">        System.out.println(myObject.getClass().getClassLoader());<span class="comment">// jdk.internal.loader.ClassLoaders$AppClassLoader@2437c6dc</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的结果可以说明：</p><ol><li>自带类<code>Object</code>的类加载器是<code>Bootstrap</code>，因为它是C++编写，所以Java的控制台无法展示。<code>Bootstrap</code>没有父类，所以会报错。</li><li>自定义类<code>MyObject</code>的类加载器是<code>AppClassLoader</code>，而查找它的父类分别是<code>PlatformClassLoader</code>、<code>Bootstrap</code>证明它们之间是有继承关系的。</li></ol><p>这里小伙伴们可能纳闷不是说是<code>Extension</code>吗，怎么成<code>PlatformClassLoader</code>了，这里是因为我是用的是jdk11版本。<code>PlatformClassLoader</code>是jdk9 之后用来代替<code>ExtClassLoader</code> 的加载器，用来加载 jdk 中的非核心模块类。</p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>双亲委派机制其实就是类加载器的加载顺序。</p><p>当一个类加载器收到了类加载请求，<strong>它首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成</strong>，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载器其中，<strong>只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载</strong>。如果所有的子类都无法加载这个类，会出现异常<code>ClassNotFound</code>。</p><p>举个例子，上面的代码中类<code>MyObject</code>的加载过程：</p><ol><li>因为是用户自己编的，所以交给<code>APPClassLoader</code>去加载这个类，但是因为双亲委派机制。它把这个类加载请求交给了<code>PlatformClassLoader</code></li><li>同上，它也把这个类加载请求交给了<code>Bootstrap</code></li><li><code>Bootstrap</code>收到了请求，它发现自己无法加载这个类(它没有找到这个类的.class)，它交给了<code>PlatformClassLoader</code></li><li>同上，它又交给了<code>APPClassLoader</code></li><li><code>APPClassLoader</code>加载成功。</li></ol><p><strong>双亲委派的好处</strong></p><p>对于任意使用者自定义的 ClassLoader，都会先去尝试让 jvm 的 Bootstrap ClassLoader 去尝试加载(自定义的 ClassLoader 都继承了它们)。那么就能保证 jvm 的类会被优先加载(保证用户编写的代码不会污染jdk源代码)，限制了使用者对 jvm 系统的影响。</p><p><strong>双亲委派机制导致的沙箱机制</strong></p><p>请运行一下代码jdk8环境：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;code is not run&quot;</span>);<span class="comment">// 找不到main错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们自己创建了<code>java.lang.String</code>这与jdk自带的冲突，代码报的错误却是找不到main函数错误。因为<code>APPClassLoader</code>收到了<code>java.lang.String</code>的加载请求，由于双亲委派机制，最后这个请求被<code>Bootstrap</code>加载了，然后这个类加载请求就结束了；它加载的是jdk中的String。因为它没有main，所以报出了这个错误。</p><p>沙箱机制就是以防自己写的代码覆盖了jdk的源代码，所以它首先加载jdk的类，一旦加载成功，就不加载了。</p><h2 id="本地方法栈-Native-Method-Stack"><a href="#本地方法栈-Native-Method-Stack" class="headerlink" title="本地方法栈(Native Method Stack)"></a>本地方法栈(Native Method Stack)</h2><p>它的具体做法是Native Method Stack中登记native方法，在Execution Engine 执行时加载本地方法库。</p><p>这里多说一句，执行的方法是被放入栈中的，但native方法是放入本地方法栈中的。</p><p>什么是本地方法？被native修饰的方法。这类方法只有声明，没有实现。实现靠的是第三方的库。</p><p>例如：<code>new Thread().start()</code>的<code>start()</code>调用的就是<code>private native void start0();</code></p><h2 id="本地方法接口-Native-Interface"><a href="#本地方法接口-Native-Interface" class="headerlink" title="本地方法接口(Native Interface)"></a>本地方法接口(Native Interface)</h2><p>本地接口的作用是融合不同的编程语言为 Java 所用，它的初衷是融合 C/C++程序，Java 诞生的时候是 C/C++横行的时候，要想立足，必须有调用 C/C++程序，于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是 Native Method Stack中登记 native方法，在Execution Engine 执行时加载native libraies。</p><p> 目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用 Socket通信，也可以使用Web Service等等，不多做介绍。    </p><h2 id="程序计数器-Program-Counter-Register"><a href="#程序计数器-Program-Counter-Register" class="headerlink" title="程序计数器(Program Counter Register)"></a>程序计数器(Program Counter Register)</h2><p>程序计数器是线程私有的，即每个线程都有一个程序计数器。他就是一个指针指向方法区中的方法字节码（用来存储指向下一条指令的地址,也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记。</p><p>这块内存区域很小，它是当前线程所执行的字节码的行号指示器，字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p><p>如果执行的是一个Native方法，那这个计数器是空的。</p><p>用以完成分支、循环、跳转、异常处理、线程恢复等基础功能。不会发生内存溢出(OutOfMemory=OOM)错误</p><h2 id="方法区-Method-Area"><a href="#方法区-Method-Area" class="headerlink" title="方法区(Method Area)"></a>方法区(Method Area)</h2><p>供各线程共享的运行时内存区域。它存储了每一个类的结构信息Class，例如运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容。上面讲的是规范，在不同虚拟机里头实现是不一样的，最典型的就是永久代(PermGen space,java7)和元空间(Metaspace,java8)。</p><p>But,实例变量存在堆内存中,和方法区无关</p><p>所有线程所共享的区域，存在较少的垃圾回收</p><p>虽然java虚拟机规范把方法区描述为堆的一部分，但是他还有个别名叫做Non-heap（非堆），目的应该是与java堆区分开来。</p><p>java7之前，方法区位于永久代(PermGen)，永久代和堆相互隔离，永久代的大小在启动JVM时可以设置一个固定值，不可变</p><p> java7中，只是把字符串池和类的静态变量移到堆</p><p>java8中，取消永久代，方法存放于元空间(Metaspace)，元空间仍然与堆不相连，但与堆共享物理内存，逻辑上可认为在堆中</p><h2 id="Java栈-Stack"><a href="#Java栈-Stack" class="headerlink" title="Java栈(Stack)"></a>Java栈(Stack)</h2><p>Java中栈管运行，堆管存储。</p><p>一般Java程序报错时，都是打印栈信息，因为栈保存着程序的运行轨迹。</p><p>栈是线程私有的，每个线程创建时都会创建一个独有的栈，线程结束栈内存释放。</p><p>栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，<strong>对于栈来说不存在垃圾回收问题</strong>，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。<strong>8种基本类型的变量+对象的引用变量+实例方法都是在函数的栈内存中分配。</strong></p><h3 id="栈运行原理"><a href="#栈运行原理" class="headerlink" title="栈运行原理"></a>栈运行原理</h3><p>栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个内存区块，是一个数据集，是一个有关方法(Method)和运行期数据的数据集，当一个方法A被调用时就产生了一个栈帧 F1，并被压入到栈中，</p><p>A方法又调用了 B方法，于是产生栈帧 F2 也被压入栈，</p><p>B方法又调用了 C方法，于是产生栈帧 F3 也被压入栈，</p><p>……</p><p>执行完毕后，先弹出F3栈帧，再弹出F2栈帧，再弹出F1栈帧……</p><p>遵循“先进后出”/“后进先出”原则。</p><p>每个方法执行的同时都会创建一个栈帧，<strong>用于存储局部变量表、操作数栈、动态链接、方法出口等信息</strong>，每一个方法从调用直至执行完毕的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。栈的大小和具体JVM的实现有关，通常在256K~756K之间,与等于1Mb左右。</p><p><img src="https://i.loli.net/2020/06/14/7o6mMQK8WFiygsa.png" alt="image-20200614204851497"></p><p>具体流程可见图：</p><p><img src="https://i.loli.net/2020/06/14/rGzFfoEv5mlqgTP.png" alt="image-20200614203637997"></p><ol><li>栈帧 2是最先被调用的方法，先入栈</li><li>然后方法 2 又调用了方法1，栈帧 1处于栈顶的位置</li><li>栈帧 2 处于栈底，执行完毕后，依次弹出栈帧 1和栈帧 2</li><li>线程结束，栈释放</li></ol><h3 id="栈能触发的异常"><a href="#栈能触发的异常" class="headerlink" title="栈能触发的异常"></a>栈能触发的异常</h3><p>说异常可能不太准确，它是错误。</p><p>其中异常(Exception)和错误(Error)都是Throwable的子类。</p><p>因为栈是线程独有的，他存放实例方法到栈也就是栈帧，所以当栈帧一直增加不减少时就会触发<code>java.lang.StackOverflowError</code>错误，可以通过递归实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">     m();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆-Heap-🔺"><a href="#堆-Heap-🔺" class="headerlink" title="堆(Heap)🔺"></a>堆(Heap)🔺</h2><p>堆是JVM中占用内存最大的地方，也是GC频繁触发的地方。它是所有线程共享的区域。</p><p>一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。</p><p>堆内存在逻辑上可以分为：新生代、老年代、元空间/永久区(JVM规范将<strong>方法区描述为堆的一个逻辑部分</strong>)</p><p>堆内存在物理上可以分为：新生代、老年代</p><p>java7及以前是永久区；Java8以及后是元空间；它们是<strong>方法区</strong>的实现，并不占用堆内存。而且方法区又称为非堆(Non-Heap)</p><p>下图描述了他们的关系：</p><p><img src="https://i.loli.net/2020/06/14/x6aRTJiHBndLoF7.png" alt="image-20200614212312812"></p><h3 id="堆内存的组成"><a href="#堆内存的组成" class="headerlink" title="堆内存的组成"></a>堆内存的组成</h3><p>物理上堆由新生代和老年代组成。它们的占用比例为1：2。其中，新生区又分为了伊甸区(Eden)、幸存0区(S0|from)、幸存1区(S1|to);他们所占空间的比例为8：1：1，其中from区和to区的大小必须一致。因为后续GC的复制算法需要。</p><p><img src="https://i.loli.net/2020/06/14/aPpmV5NiKfS8lGQ.png" alt="image-20200614210351571"></p><h3 id="堆中数据的清理"><a href="#堆中数据的清理" class="headerlink" title="堆中数据的清理"></a>堆中数据的清理</h3><p>这里只简单的介绍GC(分代收集算法)。</p><p>GC分为两种：</p><ol><li>YGC、Minor GC，轻GC；新生代中Eden区爆满后触发，复制Eden区和from区中存活的实例到to区，然后清空Eden区和from区。经常触发，执行速度是FGC的10倍。</li><li>FGC、MajorGC，重GC；堆中老年代爆满后触发，清除用不到的实例。<strong>若养老区执行了Full GC之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。</strong></li></ol><p><strong>YGC清理数据时的详细流程🔺</strong></p><p>说到这里，我们又得提到新生代中的from区和to区，这两个是动态交换的。from区会变为to区，反之如此。请记住：<strong>from、to谁空谁是to区。</strong></p><ol><li>eden、SurvivorFrom 复制到 SurvivorTo，年龄+1 。<ol><li>首先，当Eden区满的时候会触发第一次GC,把还活着的对象拷贝到SurvivorFrom区</li><li>当Eden区再次触发GC的时候会扫描Eden区和From区域,对这两个区域进行垃圾回收，经过这次回收后还存活的对象,则直接复制到To区域（如果有对象的年龄已经达到了老年的标准，则赋值到老年代区）</li><li>同时把这些对象的年龄+1</li></ol></li><li>清空 eden、SurvivorFrom <ol><li>清空Eden和SurvivorFrom中的对象，也即复制之后有交换，谁空谁是to</li></ol></li><li>SurvivorTo和 SurvivorFrom 互换 <ol><li>SurvivorTo和SurvivorFrom互换，原SurvivorTo成为下一次GC时的SurvivorFrom区</li><li>部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</li></ol></li></ol><p><strong>总结起来，YGC就是三部曲：复制-清空-交换。</strong></p><h3 id="堆参数调优"><a href="#堆参数调优" class="headerlink" title="堆参数调优"></a>堆参数调优</h3><p><strong>以JDK1.8+HotSpot为例</strong></p><p>HotSpot的正式发布名称为”Java HotSpot Performance Engine”，是Java虚拟机的一个实现，包含了服务器版和桌面应用程序版，现时由Oracle维护并发布。它利用JIT及自适应优化技术（自动查找性能热点并进行动态优化，这也是HotSpot名字的由来）来提高性能。</p><h4 id="jdk7-8"><a href="#jdk7-8" class="headerlink" title="jdk7|8"></a>jdk7|8</h4><p>jdk7和jdk8的区别是方法区的实现分别为永久代和元空间。而永久代和元空间的最大区别就是：</p><ol><li>永久代使用Java堆的内存存储字符串池和类的静态变量，类的描述数据使用方法区的内存</li><li>元空间使用的是本机物理内存，不是JVM内存</li></ol><p>因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入 native memory, 字符串池和类的静态变量放入 java 堆中，这样可以加载多少类的元数据就不再由MaxPermSize 控制, 而由系统的实际可用空间来控制。</p><p>如下图jdk7|8的调优参数：</p><p><img src="https://i.loli.net/2020/06/15/587u9oWsKxZCBy4.png" alt="jdk7"></p><br/><p><img src="https://i.loli.net/2020/06/15/bahMnJX7ArLS36F.png" alt="jdk8"></p><h4 id="调优简介"><a href="#调优简介" class="headerlink" title="调优简介"></a>调优简介</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-Xms</td><td>设置初始分配大小，默认物理内存的1/64</td></tr><tr><td>-Xmx</td><td>堆最大内存分配，默认物理内存的1/4</td></tr><tr><td>-XX:+PrintGCDetails</td><td>输出详细的GC处理日志</td></tr></tbody></table><p>ps：<code>-XX:+PrintGCDetails</code>在jdk11中已过时，需要使用<code>-Xlog:gc*</code>，再次声明本文章基于jdk8。</p><p><font color='red'>我们一般在调优时，Xms一般和Xmx的大小要一致！！！</font></p><ol><li>如果二者不等，最开始的时候堆大小是Xms，随着heap内存消耗，jvm很有可能需要申请更大的空间直到Xmx；相似的，jvm在申请到Xmx空间时可能又用不了，这时会缩小jvm空间，这样，虽然可以动态调整jvm堆申请的大小，但是每一次调整都需要一定的系统开销（jvm与os之间）。但是，注意前提——生产环境，生产环境意味着一台机器或者一个容器只有一个服务，独占机器意味着没有必要调整jvm大小，直接分配Xmx就行了。否则每一次调整都可能会有开销。只有在开发环境，比如个人电脑，运行的进程特别多，jvm内存动态调整才可能有必要。</li><li>另外，在产环境的这一前提下，如果最开始堆大小是Xms，也意味着可能会有比较多的gc，影响性能。</li></ol><p>为了验证默认值，我们不设置调优参数，查看堆的初始内存和最大内存为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> maxMemory = Runtime.getRuntime().maxMemory() ;<span class="comment">//返回 Java 虚拟机试图使用的最大内存量。</span></span><br><span class="line">        <span class="keyword">long</span> totalMemory = Runtime.getRuntime().totalMemory() ;<span class="comment">//返回 Java 虚拟机中的内存总量。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MAX_MEMORY = &quot;</span> + maxMemory + <span class="string">&quot;（字节）、&quot;</span> + (maxMemory / (<span class="keyword">double</span>)<span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);<span class="comment">// MAX_MEMORY = 2095054848（字节）、1998.0MB</span></span><br><span class="line">        System.out.println(<span class="string">&quot;TOTAL_MEMORY = &quot;</span> + totalMemory + <span class="string">&quot;（字节）、&quot;</span> + (totalMemory / (<span class="keyword">double</span>)<span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);<span class="comment">// TOTAL_MEMORY = 132120576（字节）、126.0MB</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电脑配置如下：</p><p><img src="https://i.loli.net/2020/06/15/ZyH6CsEuBVoGzjQ.png" alt="image-20200615102554114"></p><p>但是你可能说结果和你自己计算的有点出入，这是因为计算机计算大小是不是按照1024倍计算的，而是按照1000倍计算的。所以大小有点出入。</p><h4 id="idea如何调参"><a href="#idea如何调参" class="headerlink" title="idea如何调参"></a>idea如何调参</h4><p>选择指定运行的入口类，添加JVM调优参数<code>-Xms1024m -Xmx1024m -XX:+PrintGCDetails</code>，这里的参数只为了展示。</p><p><img src="https://i.loli.net/2020/06/15/xz9AQKHoh6YbU28.png" alt="image-20200615103152974"></p><p>然后运行程序，就会打印详细的GC信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MAX_MEMORY &#x3D; 1029177344（字节）、981.5MB</span><br><span class="line">TOTAL_MEMORY &#x3D; 1029177344（字节）、981.5MB</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 305664K, used 20971K [0x00000000eab00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 262144K, 8% used [0x00000000eab00000,0x00000000ebf7afb8,0x00000000fab00000)</span><br><span class="line">  from space 43520K, 0% used [0x00000000fd580000,0x00000000fd580000,0x0000000100000000)</span><br><span class="line">  to   space 43520K, 0% used [0x00000000fab00000,0x00000000fab00000,0x00000000fd580000)</span><br><span class="line"> ParOldGen       total 699392K, used 0K [0x00000000c0000000, 0x00000000eab00000, 0x00000000eab00000)</span><br><span class="line">  object space 699392K, 0% used [0x00000000c0000000,0x00000000c0000000,0x00000000eab00000)</span><br><span class="line"> Metaspace       used 3254K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 351K, capacity 388K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure><h4 id="如何查看GC日志"><a href="#如何查看GC日志" class="headerlink" title="如何查看GC日志"></a>如何查看GC日志</h4><p>因为我们堆内存有点大，不容易触发GC垃圾回收机制，所以我们手动把堆内存设置为10M，然后就能频繁的看到垃圾回收的日志了。</p><p>参数：<code>-Xms8m -Xmx8m -XX:+PrintGCDetails</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;www.atguigu.com&quot;</span> ;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            str += str + <span class="keyword">new</span> Random().nextInt(<span class="number">88888888</span>) + <span class="keyword">new</span> Random().nextInt(<span class="number">999999999</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不出意外，最后得定会出现<code>java.lang.OutOfMemoryError</code>错误！</p><p><img src="https://i.loli.net/2020/06/15/RUiG7Yq1SFQMh8P.png" alt="image-20200615150223412"></p><h5 id="YGC日志查看"><a href="#YGC日志查看" class="headerlink" title="YGC日志查看"></a>YGC日志查看</h5><p><img src="https://i.loli.net/2020/06/15/zWN6owGjseMJPLO.png" alt="image-20200615154014582"></p><h5 id="FGC日志查看"><a href="#FGC日志查看" class="headerlink" title="FGC日志查看"></a>FGC日志查看</h5><p><img src="https://i.loli.net/2020/06/15/bPnZpI7M9AesVJl.png" alt="image-20200615154451980"></p><h1 id="JVM中堆、栈、方法区的关系"><a href="#JVM中堆、栈、方法区的关系" class="headerlink" title="JVM中堆、栈、方法区的关系"></a>JVM中堆、栈、方法区的关系</h1><p>如下图：</p><p><img src="https://i.loli.net/2020/06/14/MOsHrGPNjxIWlTn.png" alt="image-20200614204823712"></p><ol><li>Java栈中存到的引用对象的指针，它指向堆中实例的地址</li><li>而堆中每个实例都存放着类模板(类元数据)的地址，可以通过实例获取类模板信息Class</li></ol><h1 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h1><p>上述在堆一节中说了GC的流程，那只是简单叙述流程。这里主要说一下GC(jdk1.8)本身。</p><p>jdk8的默认垃圾回收器为<code>ParallelGC/ParallelOld</code>，自jdk9及以后默认垃圾回收器为<code>G1</code>！！</p><p><font color='red'><strong><a href="GC2019.mmap" title="GC思维脑图">点击下载</a>思维脑图文件~！</strong></font></p><h2 id="如何确定垃圾"><a href="#如何确定垃圾" class="headerlink" title="如何确定垃圾"></a>如何确定垃圾</h2><blockquote><p><del>引用计数法</del></p></blockquote><blockquote><p>可达性分析</p></blockquote><p>为了解决引用计数法的循环引用问题，Java 使用了可达性分析的方法。通过一系列的“GC roots” 对象作为起点搜索。如果在“GC roots”和一个对象之间没有可达路径，则称该对象是不可达的。</p><p>要注意的是，不可达对象不等价于可回收对象，不可达对象变为可回收对象<strong>至少要经过两次标记 过程</strong>。<strong>两次标记后仍然是可回收对象，则将面临回收。</strong> </p><p>GCROOT包含：</p><ol><li>栈中的局部变量</li><li>本地方法栈中的引用对象</li><li>方法区中的常量</li><li>方法区中的静态引用</li></ol><h2 id="GC总体概述"><a href="#GC总体概述" class="headerlink" title="GC总体概述"></a>GC总体概述</h2><p><img src="https://i.loli.net/2020/06/15/3Ejz9whXLPIrZMY.png" alt="image-20200615155056616"></p><p>JVM在进行GC时，<strong>并非每次都对上面三个内存区域一起回收的</strong>，<strong>大部分时候回收的都是指新生代。</strong><br><strong>因此GC按照回收的区域又分了两种类型</strong>，一种是普通GC（minor GC），一种是全局GC（major GC or Full GC；它们分别在Eden区、老年代区满的时候触发。</p><p><strong><font color="blue">YGC与FGC的区别：</font></strong></p><ol><li>普通GC（minor GC）：只针对新生代区域的GC,指发生在新生代的垃圾收集动作，<strong>因为大多数Java对象存活率都不高，所以Minor GC非常频繁，一般回收速度也比较快</strong>。 </li><li>全局GC（major GC or Full GC）：指发生在老年代的垃圾收集动作，出现了Major GC，经常会伴随至少一次的Minor GC（但并不是绝对的）。<strong>Major GC的速度一般要比Minor GC慢上10倍以上，FGC会暂停应用执行</strong> </li></ol><h2 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h2><p>GC四大算法分别为：引用计数法、复制算法、标记清除算法、标记整理算法。</p><p>其中YGC采用的就是复制算法；FGC使用的是标记清除算法、标记整理算法的混合实现(分代收集算法)。</p><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器的值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。这也就是需要回收的对象。</p><p><code>引用计数算法</code>是对象记录自己被多少<strong>程序</strong>引用，引用计数为零的对象将被清除。</p><p><code>计数器</code>表示的是有多少程序引用了这个对象（被引用数）。计数器是无符号整数。</p><p><img src="https://i.loli.net/2020/06/15/ZdxNiOwt1JSLYnj.png" alt="image-20200615161600017"></p><p>由此描述可知，这个算法的<strong>缺点</strong>很明显：</p><ol><li>每次对象赋值时均要维护引用计数器，计数器本身也有消耗</li><li>很难处理循环引用</li></ol><p>所以JVM的实现一般不采用这种算法。</p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>年轻代中使用的是YGC，这种GC算法采用的是复制算法(Copying)</p><p><img src="https://i.loli.net/2020/06/15/qVmjPgIBw7LlaDU.png" alt="image-20200615163630713"></p><p><strong>原理</strong></p><p>Minor GC会把Eden中的所有活的对象都移到Survivor区域中，<strong>如果Survivor区中放不下，那么剩下的活的对象就被移到Old  generation中</strong>，也即一旦收集后，Eden是就变成空的了。<br>  当对象在 Eden ( 包括一个 Survivor 区域，这里假设是 from 区域 ) 出生后，在经过一次 Minor GC 后，如果对象还存活，并且能够被另外一块 Survivor 区域所容纳( 上面已经假设为 from 区域，这里应为 to 区域，即 to 区域有足够的内存空间来存储 Eden 和 from 区域中存活的对象 )，则使用复制算法将这些仍然还存活的对象复制到另外一块 Survivor 区域 ( 即 to 区域 ) 中，然后清理所使用过的 Eden 以及 Survivor 区域 ( 即 from 区域 )，并且将这些对象的年龄设置为1，以后对象在 Survivor 区每熬过一次 Minor GC，就将对象的年龄 + 1，当对象的年龄达到某个值时 ( 默认是 15 岁，通过-XX:MaxTenuringThreshold 来设定参数)，这些对象就会成为老年代。</p><p>-XX:MaxTenuringThreshold — 设置对象在新生代中存活的次数</p><p><strong>解释</strong></p><p> HotSpot JVM把年轻代分为了三部分：1个Eden区和2个Survivor区（分别叫from和to）。默认比例为8:1:1,一般情况下，新创建的对象都会被分配到Eden区(一些大对象特殊处理),这些对象经过第一次Minor GC后，如果仍然存活，将会被移到Survivor区。对象在Survivor区中每熬过一次Minor GC，年龄就会增加1岁，当它的年龄增加到一定程度时，就会被移动到年老代中。因为年轻代中的对象基本都是朝生夕死的(90%以上)，所以在<font color="red">年轻代的垃圾回收算法使用的是复制算法</font>，复制算法的基本思想就是将内存分为两块，每次只用其中一块，当这一块内存用完，就将还活着的对象复制到另外一块上面。<font color="red">复制算法不会产生内存碎片。</font></p><p><img src="https://i.loli.net/2020/06/15/uPftgIV8Bx5rls2.png" alt="image-20200615164021508"></p><p>在GC开始的时候，对象只会存在于Eden区和名为“From”的Survivor区，Survivor区“To”是空的。紧接着进行GC，Eden区中所有存活的对象都会被复制到“To”，而在“From”区中，仍存活的对象会根据他们的年龄值来决定去向。年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中，没有达到阈值的对象会被复制到“To”区域。经过这次GC后，Eden区和From区已经被清空。这个时候，“From”和“To”会交换他们的角色，也就是新的“To”就是上次GC前的“From”，新的“From”就是上次GC前的“To”。不管怎样，都会保证名为To的Survivor区域是空的。Minor GC会一直重复这样的过程，直到“To”区被填满，“To”区被填满之后，会将所有对象移动到年老代中。</p><p><img src="https://i.loli.net/2020/06/15/mDogrwKbJUveEGX.png" alt="image-20200615164046258"></p><p>因为Eden区对象一般存活率较低，一般的，使用两块10%的内存作为空闲和活动区间，而另外80%的内存，则是用来给新建对象分配内存的。一旦发生GC，将10%的from活动区间与另外80%中存活的eden对象转移到10%的to空闲区间，接下来，将之前90%的内存全部释放，以此类推。<strong>缺点</strong></p><ol><li>它浪费了一半的内存，这太要命了。</li><li>如果对象的存活率很高，我们可以极端一点，假设是100%存活，那么我们需要将所有对象都复制一遍，并将所有引用地址重置一遍。复制这一工作所花费的时间，在对象存活率达到一定程度时，将会变的不可忽视。 所以从以上描述不难看出，复制算法要想使用，最起码对象的存活率要非常低才行，而且最重要的是，我们必须要克服50%内存的浪费(to区)。</li></ol><h3 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h3><p><img src="https://i.loli.net/2020/06/15/z4LGqUaPE5XMBol.png" alt="image-20200615164224570"></p><p>用通俗的话解释一下标记清除算法，就是当程序运行期间，若可以使用的内存被耗尽的时候<strong>，GC线程就会被触发并将程序暂停</strong>，随后将要回收的对象标记一遍，最终统一回收这些对象，完成标记清理工作接下来便让应用程序恢复运行。</p><p>主要进行两项工作，第一项则是标记，第二项则是清除。<br>  标记：从引用根节点开始标记遍历所有的GC Roots， 先标记出要回收的对象。<br>  清除：遍历整个堆，把标记的对象清除。<br>  缺点：<strong>此算法需要暂停整个应用，会产生内存碎片</strong> </p><h3 id="标记整理法"><a href="#标记整理法" class="headerlink" title="标记整理法"></a>标记整理法</h3><p><img src="https://i.loli.net/2020/06/15/ehJvtqd5X7ZxBbw.png" alt="image-20200615164358786"></p><p>在整理压缩阶段，不再对标记的对像做回收，而是通过所有存活对像都向一端移动，然后直接清除边界以外的内存。<br>可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。 </p><p>　　标记/整理算法不仅可以弥补标记/清除算法当中，内存区域分散的缺点，也消除了复制算法当中，内存减半的高额代价</p><p><strong>缺点</strong></p><p>标记/整理算法唯一的缺点就是<strong>效率也不高</strong>，不仅要标记所有存活对象，还要整理所有存活对象的引用地址。<br><strong>从效率上来说，标记/整理算法要低于复制算法。</strong></p><p>最后，老年代FGC采用的是：</p><p><img src="https://i.loli.net/2020/06/15/AgHUXcsywQkeGon.png" alt="image-20200615164521365"></p><h2 id="GC-分代收集算法-VS-分区收集算法"><a href="#GC-分代收集算法-VS-分区收集算法" class="headerlink" title="GC 分代收集算法 VS 分区收集算法"></a>GC 分代收集算法 VS 分区收集算法</h2><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>当前主流 VM 垃圾收集都采用”分代收集”(Generational Collection)算法, 这种算法会根据 对象存活周期的不同将内存划分为几块, 如 JVM 中的 新生代、老年代、永久代，这样就可以根据 各年代特点分别采用最适当的 GC 算法    </p><h4 id="在新生代-复制算法"><a href="#在新生代-复制算法" class="headerlink" title="在新生代-复制算法"></a>在新生代-复制算法</h4><p>每次垃圾收集都能发现大批对象已死, 只有少量存活. 因此选用复制算法, 只需要付出少量 存活对象的复制成本就可以完成收集.</p><h4 id="在老年代-标记整理算法"><a href="#在老年代-标记整理算法" class="headerlink" title="在老年代-标记整理算法"></a>在老年代-标记整理算法</h4><p>因为对象存活率高、没有额外空间对它进行分配担保, 就必须采用“标记—清理”或“标 记—整理”算法来进行回收, 不必进行内存复制, 且直接腾出空闲内存</p><h3 id="分区收集算法"><a href="#分区收集算法" class="headerlink" title="分区收集算法"></a>分区收集算法</h3><p>分区算法则将整个堆空间划分为连续的不同小区间, 每个小区间独立使用, 独立回收. 这样做的 好处是可以控制一次回收多少个小区间 , 根据目标停顿时间, 每次合理地回收若干个小区间(而不是 整个堆), 从而减少一次 GC 所产生的停顿</p><h2 id="GC-垃圾收集器"><a href="#GC-垃圾收集器" class="headerlink" title="GC 垃圾收集器"></a>GC 垃圾收集器</h2><p>Java 堆内存被划分为新生代和年老代两部分，新生代主要使用复制和标记-清除垃圾回收算法； 年老代主要使用标记-整理垃圾回收算法，因此 java 虚拟中针对新生代和年老代分别提供了多种不 同的垃圾收集器，JDK1.6 中 Sun HotSpot 虚拟机的垃圾收集器如下：</p><p><img src="https://i.loli.net/2020/11/04/7RovBmiPsN29WnV.png" alt="Snipaste_2020-11-04_15-12-10"></p><h3 id="Serial-垃圾收集器（单线程、复制算法）"><a href="#Serial-垃圾收集器（单线程、复制算法）" class="headerlink" title="Serial 垃圾收集器（单线程、复制算法）"></a><del>Serial 垃圾收集器（单线程、复制算法）</del></h3><p><strong>Serial（英文连续）是最基本垃圾收集器</strong>，<strong>使用复制算法</strong>，曾经是JDK1.3.1 之前新生代唯一的垃圾 收集器。Serial 是一个单线程的收集器，<strong>它不但只会使用一个 CPU 或一条线程去完成垃圾收集工 作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。</strong> Serial 垃圾收集器虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限 定单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，<strong>因此 Serial 垃圾收集器依然是 java 虚拟机运行在 Client 模式下默认的新生代垃圾收集器。</strong></p><h3 id="ParNew-垃圾收集器（Serial-多线程）"><a href="#ParNew-垃圾收集器（Serial-多线程）" class="headerlink" title="ParNew 垃圾收集器（Serial+多线程）"></a>ParNew 垃圾收集器（Serial+多线程）</h3><p>ParNew 垃圾收集器其实是 <strong>Serial 收集器的多线程版本</strong>，<strong>也使用复制算法，</strong>除了使用多线程进行垃 圾收集之外，其余的行为和 Serial 收集器完全一样，<strong>ParNew 垃圾收集器在垃圾收集过程中同样也 要暂停所有其他的工作线程。</strong></p><p><strong>ParNew 收集器默认开启和 CPU 数目相同的线程数</strong>，可以通过-XX:ParallelGCThreads 参数来限 制垃圾收集器的线程数。</p><p> ParNew虽然是除了多线程外和Serial 收集器几乎完全一样。</p><h3 id="Parallel-Scavenge-收集器（多线程复制算法、高效）"><a href="#Parallel-Scavenge-收集器（多线程复制算法、高效）" class="headerlink" title="Parallel Scavenge 收集器（多线程复制算法、高效）"></a>Parallel Scavenge 收集器（多线程复制算法、高效）</h3><p>Parallel Scavenge 收集器也是一个新生代垃圾收集器，<strong>同样使用复制算法，也是一个多线程的垃 圾收集器</strong>，<font color="red">它重点关注的是程序达到一个可控制的吞吐量</font>（Thoughput，CPU 用于运行用户代码 的时间/CPU 总消耗时间，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)）， <font color="red">高吞吐量可以最高效率地利用 CPU 时间，尽快地完成程序的运算任务，主要适用于在后台运算而 <strong>不需要太多交互的任务</strong>。</font>自适应调节策略也是 ParallelScavenge 收集器与 ParNew 收集器的一个 重要区别。</p><h3 id="Serial-Old-收集器（单线程标记整理算法-）"><a href="#Serial-Old-收集器（单线程标记整理算法-）" class="headerlink" title="Serial Old 收集器（单线程标记整理算法 ）"></a>Serial Old 收集器（单线程标记整理算法 ）</h3><p><strong>Serial Old 是 Serial 垃圾收集器年老代版本，它同样是个单线程的收集器，使用标记-整理算法， 这个收集器也主要是运行在 Client 默认的 java 虚拟机默认的年老代垃圾收集器。</strong> </p><p>在 Server 模式下，主要有两个用途：</p><ol><li>在 JDK1.5 之前版本中与新生代的 Parallel Scavenge 收集器搭配使用。</li><li> 作为年老代中使用 CMS 收集器的后备垃圾收集方案。</li></ol><hr><p><strong>新生代 Serial 与年老代 Serial Old 搭配垃圾收集过程图</strong>：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-04_15-25-28.png" alt="Snipaste_2020-11-04_15-25-28"></p><p><strong>新生代 Parallel Scavenge 收集器与 ParNew 收集器工作原理类似，都是多线程的收集器，都使 用的是复制算法，在垃圾收集过程中都需要暂停所有的工作线程。新生代 Parallel Scavenge/ParNew 与年老代 Serial Old 搭配垃圾收集过程图：</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-04_15-27-01.png" alt="Snipaste_2020-11-04_15-27-01"></p><h3 id="Parallel-Old-收集器（多线程标记整理算法）"><a href="#Parallel-Old-收集器（多线程标记整理算法）" class="headerlink" title="Parallel Old 收集器（多线程标记整理算法）"></a>Parallel Old 收集器（多线程标记整理算法）</h3><p><strong>Parallel Old 收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法</strong>，在 JDK1.6 才开始提供。 在 JDK1.6 之前，新生代使用 ParallelScavenge 收集器只能搭配年老代的 Serial Old 收集器，只 能保证新生代的吞吐量优先，无法保证整体的吞吐量，<strong>Parallel Old 正是为了在年老代同样提供吞 吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代 Parallel Scavenge 和年老代 Parallel Old 收集器的搭配策略</strong>。 新生代 Parallel Scavenge 和年老代 Parallel Old 收集器搭配运行过程图</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-04_15-56-57.png" alt="Snipaste_2020-11-04_15-56-57"></p><h3 id="CMS-收集器（多线程标记清除算法）"><a href="#CMS-收集器（多线程标记清除算法）" class="headerlink" title="CMS 收集器（多线程标记清除算法）"></a>CMS 收集器（多线程标记清除算法）</h3><p>Concurrent mark sweep(CMS)收集器是一种年老代垃圾收集器，<font color="red">其最主要目标是获取最短垃圾 回收停顿时间，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法</font>。 最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。 CMS 工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下 4 个阶段：</p><ol><li>初始标记</li><li>并发标记（不需要暂停工作线程。）</li><li>重新标记</li><li>并发清除（不需要暂停工作线程。）</li></ol><h4 id="初始标记"><a href="#初始标记" class="headerlink" title="初始标记"></a>初始标记</h4><p>只是标记一下 <strong>GC Roots 能直接关联的对象</strong>，速度很快，<strong>仍然需要暂停所有的工作线程。</strong></p><h4 id="并发标记"><a href="#并发标记" class="headerlink" title="并发标记"></a>并发标记</h4><p>进行 GC Roots 跟踪的过程，和用户线程一起工作，<strong>不需要暂停工作线程。</strong></p><h4 id="重新标记"><a href="#重新标记" class="headerlink" title="重新标记"></a>重新标记</h4><p>为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记 记录，<strong>仍然需要暂停所有的工作线程。</strong></p><h4 id="并发清除"><a href="#并发清除" class="headerlink" title="并发清除"></a>并发清除</h4><p>清除 GC Roots 不可达对象，和用户线程一起工作，<strong>不需要暂停工作线程。由于耗时最长的并 发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看 CMS 收集器的内存回收和用户线程是一起并发地执行。</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2020-11-04_16-10-18.png" alt="Snipaste_2020-11-04_16-10-18"></p><h3 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h3><p>Garbage first 垃圾收集器是目前垃圾收集器理论发展的最前沿成果，相比与 CMS 收集器，G1 收 集器两个最突出的改进是：</p><ol><li>基于标记-整理算法，<strong>不产生内存碎片</strong>。 </li><li> 可以非常精确控制停顿时间，在<strong>不牺牲吞吐量前提下</strong>，实现低停顿垃圾回收。</li></ol><p><strong>G1 收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域，并且跟踪这些区域 的垃圾收集进度</strong>，同时在后台维护一个优先级列表，每次根据所允许的收集时间，<strong>优先回收垃圾 最多的区域</strong>。区域划分和优先级区域回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收 集效率。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次调用FFmpeg处理视频</title>
      <link href="2020/05/23/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B0%83%E7%94%A8FFmpeg%E5%A4%84%E7%90%86%E8%A7%86%E9%A2%91/"/>
      <url>2020/05/23/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B0%83%E7%94%A8FFmpeg%E5%A4%84%E7%90%86%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近我司要做一个课程培训管理系统，其中有一项是对视频添加水印的功能。当我们提到与视频处理相关的操作时，想到的肯定是通过软件，例如<code>Adobe Premiere Pro</code>来手动实现视频编辑。但是，要实现将使用者上传的无水印视频变为含水印视频，是得借助代码的实现的。这时就要依靠开源工具<code>FFmpeg</code>了。</p><a id="more"></a><p>以下来自于Wiki百科</p><p><strong>FFmpeg</strong> is a <a href="https://en.wikipedia.org/wiki/Free_and_open-source_software">free and open-source</a> project consisting of a vast software suite of <a href="https://en.wikipedia.org/wiki/Library_(computing)">libraries</a> and <a href="https://en.wikipedia.org/wiki/Computer_program">programs</a> for handling video, audio, and other <a href="https://en.wikipedia.org/wiki/Multimedia">multimedia</a> files and streams. At its core is the FFmpeg program itself, designed for <a href="https://en.wikipedia.org/wiki/Command-line_interface">command-line</a>-based processing of video and audio files, and widely used for format <a href="https://en.wikipedia.org/wiki/Transcoding">transcoding</a>, basic editing (trimming and <a href="https://en.wikipedia.org/wiki/Concatenation">concatenation</a>), <a href="https://en.wikipedia.org/wiki/Video_scaler">video scaling</a>, video <a href="https://en.wikipedia.org/wiki/Post-production">post-production</a> effects, and standards compliance (<a href="https://en.wikipedia.org/wiki/Society_of_Motion_Picture_and_Television_Engineers">SMPTE</a>, <a href="https://en.wikipedia.org/wiki/International_Telecommunication_Union">ITU</a>).</p><p>FFmpeg是一个免费的开源项目，由大量的库和程序组成，用于处理视频、音频和其他多媒体文件和流。其核心是FFmpeg程序本身，设计用于基于命令行的视频和音频文件处理，广泛用于格式转换、基本编辑(修剪和连接)、视频缩放、视频后期制作效果和标准遵从性(SMPTE、ITU)。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>在我在百度上的初步了解之后，<code>FFmpeg</code>可以在视频中直接添加文字水印、或者添加图片水印。它还支持在特定是的时间段添加。由于我的需求是添加水印(为了追责)，所以我需要的是一直存在的水印。</p><p>通过在命令行执行<code>FFmpeg</code>的特定命令就可以实现我需要的操作。首先我在<code>cmd</code>命令行中测验了一下命令的有效性。然后就是怎么通过程序调用的问题了。</p><p>通过百度得知，可以使用Java的<code>java.lang.Process</code>类实现：</p><p><code>ProcessBuilder.start()</code> 和 <code>Runtime.exec</code> 方法创建一个本机进程，并返回 <code>Process</code> 子类的一个实例，该实例可用来控制进程并获得相关信息。<code>Process</code> 类提供了执行从进程输入、执行输出到进程、等待进程完成、检查进程的退出状态以及销毁（杀掉）进程的方法。<br>创建进程的方法可能无法针对某些本机平台上的特定进程很好地工作，比如，本机窗口进程，守护进程，Microsoft Windows 上的 Win16/DOS 进程，或者 shell 脚本。创建的子进程没有自己的终端或控制台。它的所有标准 io（即 stdin、stdout 和 stderr）操作都将通过三个流 (<code>getOutputStream()</code>、<code>getInputStream()</code> 和 <code>getErrorStream()</code>) 重定向到父进程。父进程使用这些流来提供到子进程的输入和获得从子进程的输出。因为有些本机平台仅针对标准输入和输出流提供有限的缓冲区大小，如果读写子进程的输出流或输入流迅速出现失败，则可能导致子进程阻塞，甚至产生死锁。<br>当没有 <code>Process</code> 对象的更多引用时，不是删掉子进程，而是继续异步执行子进程。<br>对于带有 <code>Process</code> 对象的 Java 进程，没有必要异步或并发执行由 <code>Process</code> 对象表示的进程。</p><h2 id="文字水印"><a href="#文字水印" class="headerlink" title="文字水印"></a>文字水印</h2><p>一开始我想要的格式就是这种，简单明了。</p><p><img src="https://i.loli.net/2020/05/23/lTVKZiUfk1WIMwP.png" alt="Snipaste_2020-05-23_22-09-50"></p><h3 id="FFmpeg命令"><a href="#FFmpeg命令" class="headerlink" title="FFmpeg命令"></a>FFmpeg命令</h3><p>于是我就直接开始实现了，首先贴出可以执行的<code>FFmpeg</code>代码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf &quot;drawtext=fontfile=simhei.ttf: text=‘技术是第一生产力’:x=<span class="number">10</span>:y=<span class="number">10</span>:fontsize=<span class="number">24</span>:fontcolor=white:shadowy=<span class="number">2</span>&quot; output.mp4</span><br></pre></td></tr></table></figure><p>参数解析：</p><ol><li><code>-i</code>：一般表示输入</li><li><code>-vf </code>：滤镜相关，视频裁剪，水印等等操作都需要它完成</li><li><code>drawtext</code>：文字水印相关内容</li><li><code>output.mp4</code>：视频输出</li></ol><h3 id="Java调用"><a href="#Java调用" class="headerlink" title="Java调用"></a>Java调用</h3><p>通过上述简单描述的<code>java.lang.Process</code>来实现调用<code>FFmpeg</code>来执行命令，代码如下(是放在Linux中执行的)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addWaterToVideo</span><span class="params">(String ffmpegExePath, String inputFilePath, String outputFilePath, String waterMark)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构造命令</span></span><br><span class="line">        List&lt;String&gt; commond = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        commond.add(ffmpegExePath); <span class="comment">// &quot;/usr/local/ffmpeg2/bin/./ffmpeg&quot;</span></span><br><span class="line">        commond.add(<span class="string">&quot;-i&quot;</span>);</span><br><span class="line">        commond.add(inputFilePath); <span class="comment">// .../input.mp4</span></span><br><span class="line">        commond.add(<span class="string">&quot;-vf&quot;</span>);</span><br><span class="line">        commond.add(String.format(<span class="string">&quot;drawtext=fontfile=simhei.ttf: &quot;</span> +</span><br><span class="line">                <span class="string">&quot;text=‘%s’:x=10:y=10:fontsize=24:fontcolor=white:shadowy=2&quot;</span>, waterMark));</span><br><span class="line">        commond.add(outputFilePath); <span class="comment">// output.mp4</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process videoProcess = <span class="keyword">new</span> ProcessBuilder(commond).start();</span><br><span class="line">            dealStream(videoProcess);</span><br><span class="line">            videoProcess.waitFor();<span class="comment">// 使用后，在FFmpeg命令执行完毕前，此主线程一直阻塞。垦局需求调用</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;视频转换成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启线程处理Ffmpeg处理流，防止资源死锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> process</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dealStream</span><span class="params">(Process process)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (process == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理InputStream的线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;output: &quot;</span> + line);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">// 处理ErrorStream的线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            BufferedReader err = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getErrorStream()));</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> ((line = err.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;output: &quot;</span> + line);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    err.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的程序我们可以看出：</p><ol><li>通过<code>List</code>来构造命令，不需要空格</li><li>通过<code>Process</code>来执行命令</li><li>通过<code>dealStream</code>来处理命令返回值</li></ol><p>这个为视频添加水印的功能就完成了。</p><hr><p>然而，给客户爸爸看的时候，他们嫌弃这种水印太简单了，想要那种全屏水印，类似于下面这种：</p><p><img src="https://i.loli.net/2020/05/23/8hzIsEQmX3jZRaV.png" alt="Snipaste_2020-05-23_22-56-29"></p><p>这样可难道我了，因为文字水印<code>drawtext</code>，我查了一下他可以设置的有：</p><ol><li>fontcolor：文字颜色</li><li>fontsize：字体大小</li><li>fontfile：字体文件</li><li>text：加入文字的内容(text and textfile不能同时存在)</li><li>textfile：加入文字的文件(text and textfile不能同时存在)</li><li>x=0:y=100 在什么坐标加文字</li></ol><p>已知，没有使字体倾斜的方法。所以，<strong>文字水印，OUT！！！</strong></p><h2 id="图片水印"><a href="#图片水印" class="headerlink" title="图片水印"></a>图片水印</h2><p>上面讲到文字水印不能实现效果，所以我想设置一张比较大的图片，通过Java程序将图片修改为含有大部分倾斜水印的形式，这样通过Java还是很好实现的。然后，通过图片水印的方式加入到视频，就能实现以上效果！</p><h3 id="FFmpeg命令-1"><a href="#FFmpeg命令-1" class="headerlink" title="FFmpeg命令"></a>FFmpeg命令</h3><p><code>ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=5:5 output.mp4</code></p><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><h4 id="处理图片"><a href="#处理图片" class="headerlink" title="处理图片"></a>处理图片</h4><p>首先，我们需要一些东西：一张纯白背景图片(1920*1080，因为大部分电脑是这个分辨率)、纯白色图片去背景后形成的无背景图片。</p><p>如果没懂的话，请看白色背景图片和无背景图片的对比：</p><p><img src="https://i.loli.net/2020/05/23/lHAJRBtIVskzrQN.png" alt="Snipaste_2020-05-23_23-19-55"></p><p>通过以下代码实现将无背景图片变为指定水印格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEGRE = <span class="number">45</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Float ALPHA = <span class="number">0.8F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给图片添加水印文字、可设置水印文字的旋转角度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waterMark    要写入的文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcImgPath   源图片路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newImagePath 新图片路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fontsize     字体大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color        字体颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileExt      图片后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">markImageByText</span><span class="params">(String srcImgPath, String newImagePath, Integer fontsize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       Color color, String fileExt, String waterMark)</span> </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、源图片</span></span><br><span class="line">            java.awt.Image srcImg = ImageIO.read(<span class="keyword">new</span> File(srcImgPath));</span><br><span class="line">            BufferedImage buffImg = <span class="keyword">new</span> BufferedImage(srcImg.getWidth(<span class="keyword">null</span>),</span><br><span class="line">                    srcImg.getHeight(<span class="keyword">null</span>), BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2、得到画笔对象</span></span><br><span class="line">            <span class="comment">// 有效的解决背景发生变化的问题----------------</span></span><br><span class="line">            Graphics2D g = buffImg.createGraphics();</span><br><span class="line">            buffImg = g.getDeviceConfiguration().createCompatibleImage(srcImg.getWidth(<span class="keyword">null</span>),</span><br><span class="line">                    srcImg.getHeight(<span class="keyword">null</span>), Transparency.TRANSLUCENT);</span><br><span class="line">            g.dispose();</span><br><span class="line">            g = buffImg.createGraphics();</span><br><span class="line">            <span class="comment">// 解决背景发生变化的问题----------------</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3、设置对线段的锯齿状边缘处理</span></span><br><span class="line">            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,</span><br><span class="line">                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);</span><br><span class="line">            <span class="comment">// 4、把原图画到新画板上</span></span><br><span class="line">            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(<span class="keyword">null</span>), srcImg.getHeight(<span class="keyword">null</span>),</span><br><span class="line">                    java.awt.Image.SCALE_SMOOTH), <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 5、设置水印文字颜色</span></span><br><span class="line">            g.setColor(color);</span><br><span class="line">            <span class="comment">// 6、设置水印文字Font</span></span><br><span class="line">            Font font = <span class="keyword">new</span> Font(<span class="string">&quot;新宋体&quot;</span>, Font.BOLD, fontsize);</span><br><span class="line">            g.setFont(font);</span><br><span class="line">            <span class="comment">// 7、设置水印文字透明度  必须要用AlphaComposite.SRC_OVER</span></span><br><span class="line">            g.rotate(Math.toRadians(DEGRE));<span class="comment">//设置水印旋转</span></span><br><span class="line">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, ALPHA));</span><br><span class="line">            <span class="comment">// 8、循环打上多个水印</span></span><br><span class="line">            JLabel jLabel = <span class="keyword">new</span> JLabel(waterMark);</span><br><span class="line">            FontMetrics fontMetrics = jLabel.getFontMetrics(font);</span><br><span class="line">            <span class="keyword">int</span> width = fontMetrics.stringWidth(jLabel.getText()); <span class="comment">// 文字水印宽度</span></span><br><span class="line">            <span class="keyword">int</span> rowsNum = srcImg.getHeight(<span class="keyword">null</span>) / width; <span class="comment">// 图片的高/文字水印宽度，得到打印多少行水印</span></span><br><span class="line">            <span class="keyword">int</span> columnsNum = srcImg.getWidth(<span class="keyword">null</span>) / width;</span><br><span class="line">            <span class="comment">// 防止图片太小水印太长，保证至少打印一次</span></span><br><span class="line">            <span class="keyword">if</span> (rowsNum &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                rowsNum = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (columnsNum &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                columnsNum = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; rowsNum; m++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; columnsNum; p++) &#123;</span><br><span class="line">                    g.drawString(waterMark, m * width + p * width, -p * width + m * width);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 9、释放资源</span></span><br><span class="line">            g.dispose();</span><br><span class="line">            <span class="comment">// 10、生成图片</span></span><br><span class="line">            os = <span class="keyword">new</span> FileOutputStream(newImagePath);</span><br><span class="line">            ImageIO.write(buffImg, fileExt, os);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != is)</span><br><span class="line">                    is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != os)</span><br><span class="line">                    os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        markImageByText(<span class="string">&quot;K:\\1.png&quot;</span>, <span class="string">&quot;K:\\2.png&quot;</span>, <span class="number">35</span>, Color.red, <span class="string">&quot;png&quot;</span></span><br><span class="line">        , <span class="string">&quot;全拼水印&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果为：</p><p><img src="https://i.loli.net/2020/05/23/PKbpF675qz3EIWo.png" alt="Snipaste_2020-05-23_23-34-31"></p><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>相应的将上面的执行命令的代码的<code>List</code>变为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造命令</span></span><br><span class="line">      List&lt;String&gt; commond = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">      commond.add(ffmpegExePath); <span class="comment">// &quot;/usr/local/ffmpeg2/bin/./ffmpeg&quot;</span></span><br><span class="line">      commond.add(<span class="string">&quot;-i&quot;</span>);</span><br><span class="line">      commond.add(inputFilePath); <span class="comment">// .../input.mp4</span></span><br><span class="line">commond.add(<span class="string">&quot;-i&quot;</span>);</span><br><span class="line">commond.add(<span class="string">&quot;logo.png&quot;</span>);</span><br><span class="line">      commond.add(<span class="string">&quot;-filter_complex&quot;</span>);</span><br><span class="line">      commond.add(<span class="string">&quot;overlay=5:5&quot;</span>);</span><br><span class="line">      commond.add(outputFilePath); <span class="comment">// output.mp4</span></span><br></pre></td></tr></table></figure><p>这样就可以了</p><h1 id="进度导出"><a href="#进度导出" class="headerlink" title="进度导出"></a>进度导出</h1><p>客户希望的是，他们在下载一个视频时手动指定水印的内容，然后制定好后直接加水印，要返回水印添加进度。</p><p>额，有点难受…</p><p>但还是硬着头皮去做了，基本思路是在命令行执行<code>FFmpeg</code>程序时，会有一些信息的打印：</p><p><img src="https://i.loli.net/2020/05/24/EiapX8HDAb354oL.png" alt="Snipaste_2020-05-24_00-11-22"></p><p><img src="https://i.loli.net/2020/05/24/6cYQCZfJuToRt4N.png" alt="Snipaste_2020-05-24_00-11-50"></p><p>根据上面的图，我们只需要获取一次待处理视频的总长度(注意要掠过图片的这个属性)<code>Duration</code>，然后第二张图片上的<code>time</code>是当前已经处理的时间，我们不断获取这个时间，将这个时间与总长度相除得到当前进度。</p><p>由于我做的是web项目，然后通过<code>WebSocks</code>技术不断向用户界面推送进度，这样就实现了功能。</p><p>进度代码展示(在<code>dealStream</code>方法上修改)，因为此方法就是获取命令的返回信息，不知为什么命令返回信息在err流中，我没研究。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dealStream</span><span class="params">(Process process)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (process == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理InputStream的线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                BufferedReader in =</span><br><span class="line">                        <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">                String line = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        log.info(<span class="string">&quot;output: &quot;</span> + line);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理ErrorStream的线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                BufferedReader err =</span><br><span class="line">                        <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getErrorStream()));</span><br><span class="line">                String line = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//language=RegExp</span></span><br><span class="line">                    String regex = <span class="string">&quot;frame=\\s*\\w+.+&quot;</span>;</span><br><span class="line">                    String Duration;</span><br><span class="line">                    Long AllTime=<span class="number">0L</span>;</span><br><span class="line">                    Long currentTime;</span><br><span class="line">                    <span class="keyword">boolean</span> isVideo = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">// 创建一个数值格式化对象</span></span><br><span class="line">                    NumberFormat numberFormat = NumberFormat.getInstance();</span><br><span class="line">                    <span class="comment">// 设置精确到小数点后2位</span></span><br><span class="line">                    numberFormat.setMaximumFractionDigits(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> ((line = err.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (line.contains(<span class="string">&quot;Duration:&quot;</span>)&amp;&amp;isVideo)&#123;</span><br><span class="line">                            <span class="keyword">int</span> end = line.indexOf(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                            <span class="keyword">int</span> start = line.indexOf(<span class="string">&quot;Duration: &quot;</span>)+<span class="string">&quot;Duration: &quot;</span>.length();</span><br><span class="line">                            Duration = line.substring(start, end);</span><br><span class="line">                            AllTime = getTimestampOfDateTime(timeParse(Duration));</span><br><span class="line">                            isVideo = <span class="keyword">false</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Pattern.matches(regex, line))&#123;</span><br><span class="line">                            <span class="keyword">int</span> start = line.indexOf(<span class="string">&quot;time=&quot;</span>);</span><br><span class="line">                            <span class="keyword">int</span> end = line.indexOf(<span class="string">&quot; bit&quot;</span>);</span><br><span class="line">                            String substring = line.substring(start + <span class="string">&quot;time=&quot;</span>.length, end);</span><br><span class="line">                            currentTime =</span><br><span class="line">                                    getTimestampOfDateTime(timeParse(substring));</span><br><span class="line">                            <span class="keyword">double</span> v = currentTime * <span class="number">1.0</span> / AllTime * <span class="number">100</span>;</span><br><span class="line">                            String format = numberFormat.format(v);</span><br><span class="line">                            <span class="comment">// 这就是进度，具体怎么操作看业务</span></span><br><span class="line">                            System.out.println((format + <span class="string">&quot;%&quot;</span>));</span><br><span class="line">                        &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        err.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h1><p>可能是，但不一定是；我只是把我遇到的问题以及解决方法说出来了</p><h2 id="生成输出视频，大小为0"><a href="#生成输出视频，大小为0" class="headerlink" title="生成输出视频，大小为0"></a>生成输出视频，大小为0</h2><p>文字水印：</p><p>与直接执行<code>FFmpeg</code>不同的是，<code>FFmpeg</code>命令中<code>drawtext</code>是带引号的，但是在Java中的<code>List</code>不能添加双引号，即使是转义也不行(总之，不能出现<code>\&quot;</code>)，否则虽然在Linux会执行成功，但是生成的视频没有大小，是个失败的输入视频。</p><h2 id="中文成为□"><a href="#中文成为□" class="headerlink" title="中文成为□"></a>中文成为□</h2><p>原因是<code>FFmpeg</code>找不到字体库文件</p><p>文字水印：</p><ol><li>将字体库文件放到项目里，指定时使用绝对路径</li><li>或者将字体库文件放入命令文件夹中</li></ol><p>图片水印：</p><p>因为图片水印我直接使用Linux环境来测试的，当出现□时，证明你Linux没有你指定的中文字体，例如上面代码制定了<code>新宋体</code>字体，那么只需要在window的<code>C:\Windows\Fonts</code>中找到新宋体，复制到Linux中，然后安装此字体就可以，不会安装的可以自行百度。</p><h2 id="清晰度明显降低"><a href="#清晰度明显降低" class="headerlink" title="清晰度明显降低"></a>清晰度明显降低</h2><p>我在window环境(外网)操作时，没有这个问题；当我使用Linux(内网)操作时，清晰度明显下降。网上有的说是缺少参数，我加上也没用。</p><p>此时我对比了一下两个环境安装的<code>FFmpeg</code>的区别，此时发现</p><ol><li>Window系统安装的是官方编译好的版本，内容很全</li><li>而Linux是通过源码手动编译安装的，而自己<code>./configure</code>几乎没有带参数，这导致我Linux版本安装的<code>FFmpeg</code>少很多内容</li></ol><p>然后我更换了Linux的<code>FFmpeg</code>的版本，也是下载了一个官方编译好的版本，直接运行就没有问题了！具体缺了什么东西，由于什么导致清晰度下降，我没有研究，感兴趣的可以自己试试！</p>]]></content>
      
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis琐碎知识点</title>
      <link href="2020/05/07/Redis%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2020/05/07/Redis%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis的前世今生"><a href="#Redis的前世今生" class="headerlink" title="Redis的前世今生"></a>Redis的前世今生</h1><p>查询数据的影响因素有：带宽、硬盘寻址时间。</p><a id="more"></a><p><strong>数据放入硬盘中</strong></p><p>平时我们会把数据存储到关系型数据库中(例如：MySQL)，当数据量过大时，查询都会变慢。这时是因为它的寻址时间变长了，但是我们可以给数据库建立索引来加快数据的检索速度。</p><p>那么问题来了，如果一个表中的数据量很大时，它的增删查改会有什么影响？</p><p>首先，增删查改可以归为读、写两类操作。其中写的操作肯定会变慢，因为数据更新后会维护索引，在这大量数据下，维护索引很耗性能的。然后是读操作，正规来说，<font color='red'>如果数据库只有一个连接、只进行这次查询、且where命中索引，那么它的查询速度还是很快的</font>。但是如果假如有10w并发同时查询，虽然查询速度可以，但是因为同时对硬盘中拿数据，硬盘不可能一口气将所有数据吐给使用者，吞吐量成了问题，io成了瓶颈，硬盘的寻址时间是ms级别的。这就导致了查询变慢。！</p><p>因此，会出现将数据存到内存的技术。内存的寻址时间是ns级别的，它绝对比从磁盘中拿数据快一个数量级，所以它不惧怕高并发的读取。</p><h1 id="内存数据库的种类"><a href="#内存数据库的种类" class="headerlink" title="内存数据库的种类"></a>内存数据库的种类</h1><ol><li><strong>SAP HANA</strong></li><li><strong>Redis</strong></li><li><strong>Memcached</strong></li></ol><p><strong>SAP HANA</strong></p><p>是一个数据全部放入内容的关系型数据库，很贵。</p><p><strong>Redis</strong></p><p>是一个基于内存的k-v形式的持久化数据库 。</p><p><strong>Memcached</strong></p><p>Memcached 是一套高性能的、分布式内存对象缓存系统。</p><h2 id="Redis与Memcached对比"><a href="#Redis与Memcached对比" class="headerlink" title="Redis与Memcached对比"></a>Redis与Memcached对比</h2><p><strong>SAP HANA</strong>太贵不考虑。</p><p>区别：</p><ol><li>Redis支持的数据类型要丰富得多；而Memcached只支持string类型，所以不能实现计算向数据移动(需要客户端自己处理复杂对象 )</li><li>Redis可以设置持久化；memcache不支持数据持久存储 </li><li>Redis使用单核，无法发挥多核优势，但是保证了数据按顺序提交；而Memcached可以使用多核</li><li>虽然redis单线程模型只能使用一个cpu，但可以开启多个redis进程</li></ol><p>相同点：</p><p><strong>Redis与Memcached都是k-v形式的。</strong></p><p>模型为 key- value是为了做缓存(只针对于数据)，数据不完整(因为是基于内存不适合存放全部数据)，不宜存放组织数据关系(数据关系会造成内容存放数据冗余)</p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis的五种数据结构"><a href="#Redis的五种数据结构" class="headerlink" title="Redis的五种数据结构"></a><strong>Redis的五种数据结构</strong></h2><ol><li>string</li><li>hash</li><li>list</li><li>set</li><li>sorted set (zset)</li></ol><p>不光如此，每种数据结构都有自己的本地方法(有助于Redis计算向数据移动)</p><p><strong>什么是计算向数据移动/数据向计算移动？</strong></p><p>这里以Memcached、Redis举个例子。我们想存储一个数组。如果在Memcached中存储我们只能序列化成string存到其中，取得时候获取整个value，自己在程序里反序列化得到数组。如果存储在Redis中，我们直接使用它的list类型，这样我们传送个指令给它(index(x))，他会直接返回结果给我们，不需要我们自己计算(也是一种 IO优化)。</p><p><img src="https://i.loli.net/2020/05/09/keODq41hJCwPFx3.png" alt="计算向数据移动、数据向计算移动"></p><h2 id="Redis为什么使用单线程"><a href="#Redis为什么使用单线程" class="headerlink" title="Redis为什么使用单线程"></a><strong>Redis为什么使用单线程</strong></h2><p><strong>Redis是单线程的(主 worker为单线程)，但在6.x版本IO Threads多线程(需要主动开启)</strong></p><p>在回答这几个问题之前先问几个问题</p><p>多线程的本质是什么?</p><p>多线程的本质其实还是单线程,因为在任一个时间点其实只有一个线程在跑,只不过CPU切换线程速度太快,让我们感觉是多个线程在一起跑,其实所有的指令还是一个接着一个的跑的。</p><p>多线程一定比单线程快么？</p><p>答案肯定是否定的了。线程快,是因为其降低了不必要的耗时,耗时其实主要集中在两大块 磁盘IO 线程切换，磁盘IO耗时远远大于线程切换耗时，多线程有助于降低磁盘IO耗时；单线程没有线程切换耗时，日常开发涉及磁盘IO因此使用多线程,磁盘IO的耗时危害已经将线程切换的危害忽略了,因此会觉得多线程快。</p><p>Redis中没有磁盘IO,使用单线程没有CPU切换耗时,也不用考虑同步锁问题,因此速度更快</p><p><strong>Redis使用单线程，为什么速度还那么快？</strong></p><ol><li>内存访问，内存响应时间是100ns,这是达到每秒万级别访问的基础。而硬盘的响应时间是ms级别</li><li>非阻塞io,epoll作为io多路复用的实现，再加上redis中自身事件处理模型将epoll中连接，读写，关闭都转换成事件，不在网络io上浪费太多时间。有些地方也称这种IO方式为event driven IO(事件驱动IO)</li><li>单线程避免了线程切换和竞态产生的消耗</li></ol><h2 id="Redis是如何使用epoll多路复用的？"><a href="#Redis是如何使用epoll多路复用的？" class="headerlink" title="Redis是如何使用epoll多路复用的？"></a><strong>Redis是如何使用epoll多路复用的？</strong></h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在进行解释之前，首先要说明几个概念：</p><ul><li>kernel</li><li>用户空间和内核空间</li><li>进程切换</li><li>进程的阻塞</li><li>文件描述符</li><li>缓存 I/O</li></ul><p><strong>kernel</strong></p><p>Linux内核可以看作一个服务进程(管理软硬件资源，响应用户进程的种种合理以及不合理的请求)。</p><p>内核需要多个执行流并行，为了防止可能的阻塞，支持多线程是必要的。它运行在内存中的用户不可操作的区域。</p><p><strong>用户空间和内核空间</strong></p><p>操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p><p><strong>进程切换</strong></p><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。</p><p>从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p><ol><li><p>保存处理机上下文，包括程序计数器和其他寄存器。</p></li><li><p>更新PCB信息。</p></li><li><p>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。</p></li><li><p>选择另一个进程执行，并更新其PCB。</p></li><li><p>更新内存管理的数据结构。</p></li><li><p>恢复处理机上下文。</p></li></ol><p>注：<strong>总而言之就是很耗资源</strong></p><p><strong>进程的阻塞</strong></p><p>正在执行的进程，由于期待的某些事件未发生，(accept、read)如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。<code>当进程进入阻塞状态，是不占用CPU资源的</code>。</p><p><strong>文件描述符fd</strong></p><p>文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。</p><p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p><p><strong>缓存IO</strong></p><p>缓存 I/O 又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p><p><strong>系统方法<code>accept</code></strong></p><p><code>accept</code>是阻塞的，它返回客户端的<code>socket</code>链接的文件描述符</p><h3 id="Redis启动服务"><a href="#Redis启动服务" class="headerlink" title="Redis启动服务"></a>Redis启动服务</h3><ol><li>调用系统方法<code>socket</code>,获取Redis服务的文件描述符，例如<code>fd6</code></li><li>绑定端口号<code>bind 6379</code></li><li>监听端口号<code>listen 6379</code></li></ol><h3 id="使用epoll多路复用"><a href="#使用epoll多路复用" class="headerlink" title="使用epoll多路复用"></a>使用epoll多路复用</h3><ol><li>执行系统方法<code>epoll_create</code>方法，它返回一个文件描述符，例如<code>fd5</code>，它是在系统<code>kernel</code>中开辟的一个区域</li><li>执行系统方法<code>epoll_ctl(fd5, fd6, accept)</code>，在<code>fd5</code>的区域中监听<code>fd6</code>(Redis服务)的<code>accept</code>事件。(因为<code>accept</code>是阻塞方法，不能在Redis里面使用，这样的话如果Redis只要等通知就可以，Redis不用做到阻塞)</li><li>当内核中的<code>fd5</code>区域的文件描述符的事件被触发后，比如监听到了<code>fd6</code>的Redis服务事件<code>accept</code>，证明有了客户端连接，内核会把<code>fd6</code>描述符放入另外一个开辟的新空间</li><li>Redis疯狂的执行系统方法<code>epoll_wait</code>得到<code>fd6</code></li><li>Redis执行<code>accept(fd6)</code>，因为此时已经确定有客户端连接，调用会直接返回客户端的文件标识符，例如<code>fd9</code>；此时不会阻塞</li><li>Redis执行系统方法<code>epoll_ctl(fd5, fd9, read)</code>，监听客户端<code>fd9</code>的数据事件(因为虽然建立了客户端连接，但不能保证它立马发数据，如果在Redis端执行read(fd9)，那么它又是一个阻塞事件，因为Redis是单线程，不能容忍它线程阻塞)</li><li>当内核中的<code>fd5</code>区域的文件描述符的事件被触发后，比如监听到了<code>fd9</code>的事件<code>read</code>，证明有了客户端发送数据，内核会把<code>fd9</code>描述符放入另外一个开辟的新空间</li><li>Redis疯狂的执行系统方法<code>epoll_wait</code>得到<code>fd9</code></li><li>调用系统方法<code>read(fd9)</code>，这样就读取到了客户端的数据，而没有造成阻塞</li></ol><p>整个流程利用了内核的epoll方法，通过事件驱动实现了Redis的无阻塞</p><hr><p>简单来说，可以归为三步</p><p><img src="https://i.loli.net/2020/05/10/VRXclgbYPotxK6N.png" alt="Snipaste_2020-05-10_12-03-58"></p><ol><li>创建epoll</li><li>事件触发，读取</li><li>redis内部处理数据</li></ol><p>以下引申出：<strong>Redis是单线程的(主 worker为单线程)，但在6.x版本IO Threads多线程(需要主动开启)</strong></p><p>6.x版本中的IO Threads多线程是什么？</p><p>这里Redis还是工作线程单线程(上面的第三步，处理数据)，但是在第二步骤从内核中IO读取为多线程，在第二步读取完之后，所任任务排好队，等待第三步的工作线程一一处理。所以Redis还是单线程。</p><p>下面的图可以解释：</p><p><img src="https://i.loli.net/2020/05/10/N6a7bQO1q3PR4hC.png" alt="Snipaste_2020-05-10_12-11-11"></p><h2 id="Redis-zset结构"><a href="#Redis-zset结构" class="headerlink" title="Redis zset结构"></a>Redis zset结构</h2><p>zset特点：动态排序</p><p>他是怎么排序的呢？</p><p>数据小于64k时使用<code>ziplist</code></p><p>数据大于64k时使用<code>skiplist</code></p><p><code>skiplist</code>是跳跃表，本质是利用空间来节省时间(排序)</p><p>如下图，在一个有序的集合中，每个集合元素都向上造层，第一个元素层最大为64，其余造层为随机造层(1-64)，同层相连如果某个元素此层没有则跳过它。</p><p><img src="https://i.loli.net/2020/05/10/1ut8eiU7AkDMWXZ.png" alt="Snipaste_2020-05-10_12-45-44"></p><ol><li>30与首元素的最高层比较，大于它，应该往右走，因为右边是空，所以降层</li><li>往右走之后发现比22大，应该往右走，因为右边是空，所以降层</li><li>往右走发现比45小，它的位置就应该在22-45之间</li><li>类推</li></ol><p>因为过程中跳过了元素7，所以称为跳表。</p><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><p>Redis为持久化提供了两种方式：</p><ul><li>RDB：在指定的时间间隔能对你的数据进行快照存储。</li><li>AOF：记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据。</li></ul><p>持久化为了解决数据丢失。</p><p>Redis是默认开启RDB持久化，关闭AOF的。</p><p>在Redis4.x以前，如果同时使用两种方式，在重启Redis后只会使用AOF方式。</p><p>Redis4.x以后，如果同时使用两种方式，先对AOF文件进行重写，然后基于RDB快照进行AOF恢复。(混合持久化)</p><p><strong>然后，什么是重写AOF呢？</strong></p><p>这就提到了，如果Redis只使用AOF方式持久化，假设它运行了很久，这时AOF记录文件(此文件是追加内容)一定会很大，假设1T，那么重启Redis时，要执行这个1T文件内的所有命令，会很慢，但是AOF文件中应该是大部分已经失效的操作，这样很浪费。</p><p>此时，提出了重写概念。先处理此文件，将失效操作抵消掉，然后恢复数据。</p><h1 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h1><p>Redis可以认为是一个小程序时单机的，如果向让它做更重要的事情，单机是肯定不够的，肯定做成分布式的。</p><p>既然Redis是单机的，它肯定会有单点故障、压力/性能问题。</p><p>单点故障问题，我们可以使用<strong>主从复制集群</strong>来解决。</p><p>压力/性能问题，我们可以通过<strong>分片集群</strong>来搞定。</p><p>这两者的区别是数据的区别：</p><ol><li><strong>主从复制集群</strong>是因为单点不可靠出现的，集群中每个节点的数据是要同步的，全量的。</li><li><strong>分片集群</strong>是因为数据太多一个节点存储不来，所以集群中节点数据相加才能得到全量数据。</li></ol><p>集群，肯定涉及到了分布式，这里引申出分布式的几个概念：</p><ul><li>CAP</li><li>Paxos分布式协调技术</li><li>数据一致性：强一致性、弱一致性、最终一致性</li></ul><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p><strong>CAP</strong></p><p>2000 年 7 月，加州大学伯克利分校的 Eric Brewer 教授在 ACM PODC 会议上提出 CAP 猜想。2年后，麻省理工学院的 Seth Gilbert 和 Nancy Lynch 从理论上证明了 CAP。之后，CAP 理论正式成为分布式计算领域的公认定理。</p><p>CAP 理论为：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p><p>一致性（Consistency）</p><p>一致性指 “all nodes see the same data at the same time”，即更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致。</p><p>可用性（Availability）</p><p>可用性指“Reads and writes always succeed”，即服务一直可用，而且是正常响应时间。</p><p>分区容错性（Partition tolerance）</p><p>分区容错性指“the system continues to operate despite arbitrary message loss or failure of part of the system”，即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</p><p><strong>Paxos</strong></p><p>Paxos 是一种分布式共识算法，用于解决在异步通信网络中存在节点失效且本地存储可靠的情况下多个分布式节点达成一致的问题。它是一篇论文，所有的分布式协调技术都是使用它作为基础的。</p><p>它里面有两个点：投票机制和过半同意机制。</p><p>例如Zookeeper的ZAB、elasticSearch的raft就是这样实现的。</p><p>投票机制：</p><p>当集群内主节点挂掉之后，会触发投票，产生新得主节点。</p><p>可以参考<a href="/2020/02/29/Zookeeper%E5%AE%9E%E8%B7%B5/" title="ZAB实现集群故障回复一节">ZAB实现集群故障回复一节</a>。</p><p>过半同意机制：</p><p>分布式协调技术也是基于集群的，集群中的各个节点都会相互通信的，它的集群也不可靠。可能会因为网络原因造成它的集群分散了(脑裂)，这时候他们各自对外提供服务，这样提供的数据就很不正确。所以集群分散后的每一个小组肯定知道与自己通信的有几个节点，如果这个小组节点数大于半数以上则继续提供服务，否则不提供服务，自主消亡。所以一般集群都是单数节点。因为3个节点半数以上是2；4个节点半数以上得是3。3-4的集群你多加了一个节点还是只能容忍一个节点不能提供服务，很亏。所以一般是单数节点的集群。</p><p><strong>数据一致性</strong></p><p>假设我们有一个三节点的Redis主从集群，客户端写入数据，肯定是先写在其中一个节点。</p><p>如果使用强一致性：</p><p>这一个节点将数据同步到其余两个节点中去，这个时间段内，集群不对外提供服务。这样因为CAP定理，强一致性为了保证数据一致性(C)破坏了可用性(A)。</p><p>如果使用弱一致性：</p><p>节点数据也会同步，但是不管成功/失败。如果失败的话，加入下一次读取时读取这些信息时，读到了别的节点，然后数据就是错误的。这样因为CAP定理，弱一致性为了保证可用性(A)破坏了数据一致性(C)。</p><p>这时出现了最终一致性：(Redis这种第三方还没有出现，但是hadoop集群中有这种角色名为<code>JournalNode</code>，</p><p><code>JournalNode</code>就是用了分布式协调技术)</p><p>这一个节点将数据写入第三方，这个第三方需要保证(绝对可靠，不会挂，写入绝对成功)，这时继续提供服务，然后剩下的节点会从这个第三方拿取数据，这样能做到最终集群内的数据是一致的，符合CAP的AP。</p><h2 id="主从复制集群"><a href="#主从复制集群" class="headerlink" title="主从复制集群"></a>主从复制集群</h2><p>主从复制集群的节点因为存储全量数据，所以要数据同步。这就涉及到了数据一致性问题。</p><p>redis实现的是最终会一致性，具体选择强一致性还是弱一致性，取决于业务场景。</p><p>主从复制集群，当主节点挂掉之后，需要手动将从节点设置为主节点。可以通过哨兵模式来解决</p><h2 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h2><p><strong>分片集群</strong>是因为数据太多一个节点存储不来，所以集群中节点数据相加才能得到全量数据。</p><p>在redis中，我们的应用在存取数据的时候需要根据一定的算法(一致性hash)进行计算和存取 ，那么在redis中如何实现数据分片的呢? 首先Redis至少存在三个数据分片，每个分片称为master，假设整个cluster有N个节点，那么每个节点都和其他N-1个节点保持连接和心跳，节点之间相互通信主要确认节点是否存活、节点的数据版本、投票选择新的master等</p><p><img src="https://i.loli.net/2020/05/10/ETILnXYA2zQNUMk.jpg" alt="09f7141b213af64ebd17a36eeebb6b61"></p><p>如何分片，有三种方式：</p><ol><li>由用户写算法，算法存在于客户端程序之中</li><li>由第三方代理算法，起一个第三方线程</li><li>Redis Cluster</li></ol><h3 id="用户写算法"><a href="#用户写算法" class="headerlink" title="用户写算法"></a>用户写算法</h3><p>缺点：占用客户端的cpu资源，jvm资源，同布更新算法麻烦。</p><p>最终的集群结构大致如下：</p><p><img src="https://i.loli.net/2020/05/10/DgMp5jrs1aqZb3e.jpg" alt="e42fe470d4bb59125b1f3fcecf65ce83"></p><h3 id="代理算法"><a href="#代理算法" class="headerlink" title="代理算法"></a>代理算法</h3><p><strong>twemproxy处于客户端和服务器的中间，将客户端发来的请求，进行一定的处理后(如sharding)，再转发给后端真正的Redis服务器。也就是说，客户端不直接访问Redis服务器，而是通过twemproxy代理中间件间接访问。</strong></p><p>参照Redis Sharding架构，增加代理中间件的Redis集群架构如下：</p><p>twemproxy中间件的内部处理是无状态的，它本身可以很轻松地集群，这样可避免单点压力或故障。</p><p>twemproxy又叫nutcracker，起源于twitter系统中redis/memcached集群开发实践，运行效果良好，后代码奉献给开源社区。其轻量高效，采用<a href="http://lib.csdn.net/base/c"><strong>C语言</strong></a>开发，工程网址是：<a href="http://blog.csdn.net/link.zhihu.com/?target=https://github.com/twitter/twemproxy">GitHub - twitter/twemproxy: A fast, light-weight proxy for memcached and redis</a></p><p>twemproxy后端不仅支持redis，同时也支持memcached，这是twitter<a href="http://www.2cto.com/os/">系统</a>具体环境造成的。</p><p>由于使用了中间件，twemproxy可以通过共享与后端系统的连接，降低客户端直接连接后端服务器的连接数量。同时，它也提供sharding功能，支持后端服务器集群水平扩展。统一运维管理也带来了方便。</p><p>当然，也是由于使用了中间件代理，相比客户端直连服务器方式，性能上会有所损耗，实测结果大约降低了20%左右。</p><p><img src="https://i.loli.net/2020/05/10/ufVhtCSU9vWY8Jk.png" alt="20191018230035839"></p><h3 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h3><p>Redis Cluster是一种服务器Sharding技术，3.0版本开始正式提供。Redis Cluster中，Sharding采用<strong>slot(槽)的概念，一共分成16384个槽，这有点儿类似前面讲的pre sharding思路。对于每个进入Redis的键值对，根据key进行散列，分配到这16384个slot中的某一个中。使用的hash<a href="http://lib.csdn.net/base/datastructure">算法</a>也比较简单，就是\</strong>CRC16后16384取模。Redis集群中的每个node(节点)负责分摊这16384个slot中的一部分，也就是说，每个slot都对应一个node负责处理。当动态添加或减少node节点时，需要将16384个槽做个再分配，槽中的键值也要迁移。当然，这一过程，在目前实现中，还处于半自动状态，需要人工介入。****</p><p>Redis集群，要保证16384个槽对应的node都正常工作，如果某个node发生故障，那它负责的slots也就失效，整个集群将不能工作。为了增加集群的可访问性，官方推荐的方案是将node配置成主从结构，即一个master主节点，挂n个slave从节点。这时，如果主节点失效，Redis Cluster会根据选举算法从slave节点中选择一个上升为主节点，整个集群继续对外提供服务。这非常类似服务器节点通过Sentinel监控架构成主从结构，只是Redis Cluster本身提供了故障转移容错的能力。</p><p>Redis Cluster的新节点识别能力、故障判断及故障转移能力是通过集群中的每个node都在和其它nodes进行通信，这被称为集群总线(cluster bus)。它们使用特殊的端口号，即对外服务端口号加10000。例如如果某个node的端口号是6379，那么它与其它nodes通信的端口号是16379。nodes之间的通信采用特殊的二进制协议。</p><p>对客户端来说，整个cluster被看做是一个整体，客户端可以连接任意一个node进行操作，就像操作单一Redis实例一样，当客户端操作的key没有分配到该node上时，就像操作单一Redis实例一样，当客户端操作的key没有分配到该node上时，Redis会返回转向指令，指向正确的node，这有点儿像浏览器页面的302 redirect跳转。</p><p>Redis Cluster是Redis 3.0以后才正式推出，时间较晚，目前能证明在大规模生产环境下成功的案例还不是很多，需要时间检验。</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>上面描述的分片集群方案只是随口一说，具体没说。</p><p>因为分片集群每个节点的数据都没有备份，最好结合主从复制集群来使用。</p><p>搭建可以仿照</p><p><a href="https://mp.weixin.qq.com/s/1IYPmrq-PccmcVmA9_h3yg">https://mp.weixin.qq.com/s/1IYPmrq-PccmcVmA9_h3yg</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu常用操作</title>
      <link href="2020/05/05/Ubuntu%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>2020/05/05/Ubuntu%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><p>记录了安装Ubuntu Server18.04 TLS版本的常用操作，仅供自己平时查看。</p><a id="more"></a><h2 id="安装时"><a href="#安装时" class="headerlink" title="安装时"></a>安装时</h2><p>虚拟机安装时需要注意的地方：</p><h3 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h3><p><img src="1.PNG"></p><p><img src="2.PNG"></p><h3 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h3><p><img src="3.PNG"></p><h3 id="LVM设置"><a href="#LVM设置" class="headerlink" title="LVM设置"></a>LVM设置</h3><p>LVM是磁盘动态扩容技术。</p><p><img src="6.PNG"></p><p>但是，这样会有坑，如果你磁盘设置了20G，会因为LVM的原因，你只能使用4G，之后使用时你可以手动扩容到20G；<a href="https://www.funtl.com/zh/linux/Linux-LVM-%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9.html#lvm-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">具体参考</a>。否则，需要这样设置才能全部使用到20G</p><p><img src="4.PNG"></p><p><img src="5.PNG"></p><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>安装时，最好勾选ssh，其余一律不安装。安装ssh为了方便。不想安装后手动安装</p><h2 id="远程root登录"><a href="#远程root登录" class="headerlink" title="远程root登录"></a>远程root登录</h2><p><strong>给root账户设置密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p><strong>切换root用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><p><strong>修改ssh配置</strong></p><p>加入内容<code>PermitRootLogin yes</code></p><p><img src="7.PNG"></p><p><strong>重启ssh服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure><p>这样就成功了</p><h2 id="静态IP修改"><a href="#静态IP修改" class="headerlink" title="静态IP修改"></a>静态IP修改</h2><p>如果安装时，没有设置静态IP，则这样修改(Ubuntu server 18.04 ，其他版本不通用)：</p><p>进入到目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/netplan/</span><br></pre></td></tr></table></figure><p>修改目录中唯一的yaml文件(文件名是随机的)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim xxx.yaml</span><br></pre></td></tr></table></figure><p>内容格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      addresses:</span><br><span class="line">      - 192.168.58.200/24</span><br><span class="line">      gateway4: 192.168.58.2</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses:</span><br><span class="line">        - 192.168.58.2</span><br><span class="line">        - 114.114.114.114</span><br><span class="line">  version: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netplan apply</span><br></pre></td></tr></table></figure><p>这样就可以了</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>开启：<code>ufw enable</code></p><p>状态：<code>ufw status</code></p><p>关闭：<code>ufw disable</code></p><h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><p>在同一局域网中主机名不应该相同，所以我们需要做修改，下列操作步骤为修改 <strong>18.04</strong> 版本的 Hostname，如果是 16.04 或以下版本则直接修改 <code>/etc/hostname</code> 里的名称即可</p><p><strong>查看当前Hostname</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/etc/netplan<span class="comment"># hostnamectl</span></span><br><span class="line">   Static hostname: ubuntu</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p><strong>修改 Hostname</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 hostnamectl 命令修改，其中 kubernetes-master 为新的主机名</span></span><br><span class="line">hostnamectl set-hostname kubernetes-master</span><br></pre></td></tr></table></figure><p><strong>修改 cloud.cfg</strong></p><p>如果 <code>cloud-init package</code> 安装了，需要修改 <code>cloud.cfg</code> 文件。该软件包通常缺省安装用于处理 cloud</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果有该文件</span></span><br><span class="line">vi /etc/cloud/cloud.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该配置默认为 false，修改为 true 即可</span></span><br><span class="line">preserve_hostname: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kubernetes-master:~<span class="comment"># hostnamectl</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Spring常用注解</title>
      <link href="2020/04/17/Java-Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>2020/04/17/Java-Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。</p><p>Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。</p><p>使用注解能极大程度上简化开发！</p><a id="more"></a><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p><strong>注入配置类</strong></p><p>此注解写在类名上，在SpringBoot项目中得到广泛应用。类中的内容作为配置信息生效。</p><p>类似于<code>@Bean</code>都是作为这个Spring容器中的Bean！</p><p>下面是一个<code>Mybatis-Plus</code>的自动分页插件的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是SpringBoot项目的话，无需任何操作；</p><p>如果是SpringMVC项目的话，需要在xml配置中，声明注解的扫描包路径：<code>&lt;context:component-scan base-package=&quot;xxx&quot; /&gt;</code>，所有<a href="#%E6%B3%A8%E5%85%A5">注入型注解</a>都需要这样指定！</p><h3 id="Controller-Service-Component"><a href="#Controller-Service-Component" class="headerlink" title="@Controller,@Service,@Component"></a>@Controller,@Service,@Component</h3><p>目前3种注解意思是一样，并没有什么区别，区别只是名字不同。</p><p>他们的作用只是将注解声明的类，作为示例，交给Spring Ioc保管，以方便通过<code>@Autowired</code>注入。</p><p>其中<code>@RestController=@Controller+@ResponseBody</code></p><p><code>@ResponseBody</code>的作用是将controller层中的方法的返回值对象转换成相应的格式，然后将其写入到HttpServletResponse响应体中。使用此注解此次请求将不再走视图处理器，而是直接将此响应结果写入到输入流中，其效果等同于使用response对象输出指定格式的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNicknameController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果是SpringBoot项目的话，无需任何操作；</p><p>如果是SpringMVC项目的话，需要在xml配置中，声明注解的扫描包路径：<code>&lt;context:component-scan base-package=&quot;xxx&quot; /&gt;</code>，所有<a href="#%E6%B3%A8%E5%85%A5">注入型注解</a>都需要这样指定！</p><h3 id="Named"><a href="#Named" class="headerlink" title="@Named"></a>@Named</h3><p>@Named和Spring的@Component功能相同。@Named可以有值，如果没有值生成的Bean名称默认和类名相同。比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Named(&quot;cc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">Named</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Person</span></span></span><br></pre></td></tr></table></figure><h2 id="Before、After类型"><a href="#Before、After类型" class="headerlink" title="Before、After类型"></a>Before、After类型</h2><h3 id="PostConstruct-PreDestory"><a href="#PostConstruct-PreDestory" class="headerlink" title="@PostConstruct,@PreDestory"></a>@PostConstruct,@PreDestory</h3><p>实现初始化和销毁bean之前进行的操作，<font color='red'>只能有一个方法可以用此注释进行注释，方法不能有参数，返回值必需是void,方法需要是非静态的。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;初始化&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@PreDestroy</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">dostory</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;销毁&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动匹配"><a href="#自动匹配" class="headerlink" title="自动匹配"></a>自动匹配</h2><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p><code>@Autowired</code>默认先按byType(类型)，如果发现找到多个bean(注入类型中注入的bean)，则，又按照byName方式比对，如果还有多个，则报出异常。</p><ol><li>可以手动指定按byName方式注入，使用@Qualifier。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(value = &quot;objectRedisTemplate&quot;)</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, IPage&lt;PostInfoVO&gt;&gt; redisTemplate;</span><br></pre></td></tr></table></figure><ol start="2"><li>如果要允许null 值，可以设置它的required属性为false，如</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required=false)</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, IPage&lt;PostInfoVO&gt;&gt; redisTemplate;</span><br></pre></td></tr></table></figure><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>默认按 byName自动注入,如果找不到再按byType找bean,如果还是找不到则抛异常，无论按byName还是byType如果找到多个，则抛异常。</p><p>在使用<a href="#%E6%B3%A8%E5%85%A5">注入型注解</a>时，可以通过参数来指定Bean的名字</p><p>可以手动指定bean,它有2个属性分别是name和type，使用name属性，则使用byName的自动注入，而使用type属性时则使用byType自动注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name=”bean名字”)</span></span><br><span class="line"><span class="meta">@Resource(type=”bean的class”)</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, IPage&lt;PostInfoVO&gt;&gt; redisTemplate;</span><br></pre></td></tr></table></figure><p>这个注解是属于J2EE的，减少了与spring的耦合。</p><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><p>@Value的作用是通过注解将常量、配置文件中的值、其他bean的属性值注入到变量中，作为变量的初始值。</p><p>它能注入三种类型</p><ol><li><strong>常量注入</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Resource testUrl; <span class="comment">// 注入URL资源</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>bean属性、系统属性、表达式注入@Value(“#{}”)</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;os.name&#x27;]&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String systemPropertiesName; <span class="comment">// 注入操作系统属性</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>el表达式，注入配置文件中属性@Value(“${}”)</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;server.port&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String port; <span class="comment">// 注入servlet容器端口</span></span><br></pre></td></tr></table></figure><p>ps: @value不支持给static属性注入，此时得通过别的方法</p><ol><li>给参数注入，执行set方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String zhifuUrl;   </span><br><span class="line"><span class="meta">@Value(&quot;$&#123;zhifu.url&#125;&quot;)</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZhifuUrl</span><span class="params">(String url)</span> </span>&#123;  </span><br><span class="line">CrmUtil.zhifuUrl = url;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ol start="2"><li>通过中间变量赋值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String zhifuUrl;   </span><br><span class="line"><span class="meta">@Value(&quot;$&#123;zhifu.url&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> String zhifuUrlTmp;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@PostConstruct</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">zhifuUrl = zhifuUrlTmp;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="功能类型"><a href="#功能类型" class="headerlink" title="功能类型"></a>功能类型</h2><h3 id="Valid-Valided"><a href="#Valid-Valided" class="headerlink" title="@Valid,@Valided"></a>@Valid,@Valided</h3><p>参数验证。具体使用，请参照<a href="#">Post not found: JenkinsSpring参数校验 Spring参数校验一文</a></p><h3 id="CrossOrigin"><a href="#CrossOrigin" class="headerlink" title="@CrossOrigin"></a>@CrossOrigin</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法</title>
      <link href="2020/04/17/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>2020/04/17/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Python是一种通用的解释，交互式，面向对象和高级编程语言。它是由Guido van Rossum在1985年至1990年期间创建的。与Perl一样，Python源代码也可以在GNU通用公共许可证（GPL）下获得。本教程充分理解了Python编程语言。</p><a id="more"></a><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="python的六大数据类型"><a href="#python的六大数据类型" class="headerlink" title="python的六大数据类型"></a>python的六大数据类型</h2><h3 id="str字符串"><a href="#str字符串" class="headerlink" title="str字符串"></a>str字符串</h3><blockquote><blockquote><p><strong>内置函数</strong></p><ol><li>str.title()：首字母大写；</li><li>str.upper()：全部大写；</li><li>str.lower()：全部小写；</li><li>str.lstrip()：去除str左侧空白</li><li>str.rstrip()：去除str右侧空白</li><li>str.strip()：去除str两侧空白</li></ol></blockquote></blockquote><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><blockquote><p><strong>运算</strong></p><table><thead><tr><th>符号</th><th>计算</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>**</td><td>乘方</td></tr><tr><td>x // y</td><td>结果取商</td></tr><tr><td>x % y</td><td>取余</td></tr></tbody></table></blockquote><blockquote><p><strong>内置函数</strong></p><blockquote><p><strong>换算</strong></p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base ])</td><td>将x转换为一个整数</td></tr><tr><td>long(x [,base ])</td><td>将x转换为一个长整数</td></tr><tr><td>float(x )</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag ])</td><td>创建一个复数</td></tr><tr><td>str(x )</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x )</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td><code>eval(str )</code></td><td><code>用来计算在字符串中的有效Python表达式,并返回一个对象</code></td></tr><tr><td>tuple(s )</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s )</td><td>将序列 s 转换为一个列表</td></tr><tr><td>chr(x )</td><td>将一个整数转换为一个字符</td></tr><tr><td>unichr(x )</td><td>将一个整数转换为Unicode字符</td></tr><tr><td>ord(x )</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x )</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x )</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><p><font color='red'>注意str的123.4576不能直接转为int,例如int(‘123,456’)；而需要先转换为float在从float转为int这样才能直接丢失数字的精度</font>;</p></blockquote></blockquote><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><blockquote><p>列表由一系列按特定顺序排列的元素组成</p><blockquote><p><strong>创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = []</span><br><span class="line">ls_1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 列表解析</span></span><br><span class="line">ls_2 = [value ** <span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><hr><p><strong>遍历</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ls_2:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><hr><p><strong>修改</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls_2[索引] = ‘值’</span><br></pre></td></tr></table></figure><hr><p><strong>添加</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在列表末尾添加元素</span></span><br><span class="line">ls.append(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在列表的任何位置添加元素</span></span><br><span class="line">ls.insert(location, value)</span><br></pre></td></tr></table></figure><hr><p><strong>循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> ls:</span><br><span class="line">    do something...</span><br></pre></td></tr></table></figure><hr><p><strong>删除</strong></p><ul><li>根据索引删除<ul><li>del ls[i]：直接删除，无返回</li><li>ls.pop(i)：删除后返回被删除的元素</li></ul></li><li>根据值删除<ul><li>ls.remove(value)：列表中可有有多个相同的此值，他只会删除第一个出现的此值</li></ul></li></ul><hr><p><strong>排序</strong></p><ul><li>永久排序ls.sort()：直接对列表ls进行排序，不返回值，ls列表顺序发生变化<ul><li>正序：ls.sort()</li><li>倒序：ls.sort(reverse=True)</li></ul></li><li>临时排序sorted(ls)：返回排序好的列表，而不对原列表ls进行改变<ul><li>正序：sorted(ls)</li><li>倒序：sorted(ls,resever=True)</li></ul></li></ul><p>列表倒置：ls.resever()</p><hr><p>**切片， seq[start\:end:step] **</p><table><thead><tr><th>索引</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>p</td><td>y</td><td>t</td><td>h</td><td>o</td><td>n</td></tr><tr><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><p>常用：</p><ol><li>前三名：ls[:3]</li><li>后三名：ls[-3:]</li><li>隔三位显示一位ls[::3]</li></ol><hr><p><strong>复制列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls = [value ** <span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">ls_copy = ls[:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line">ls = [value ** <span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">ls_copy = ls</span><br><span class="line"><span class="comment"># 这样无论ls_copy还是ls的值发生改变的时候他们的值都发生变化</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>操作函数</strong></p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>ls.append(obj)</td><td>在列表末尾添加函数</td></tr><tr><td>list.insert(index, obj)</td><td>将对象插入列表</td></tr><tr><td>list.pop([index=-1])</td><td>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td>移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td>反向列表中元素</td></tr><tr><td>list.sort(cmp=None, key=None, reverse=False)</td><td>对原列表进行排序</td></tr><tr><td>sorted(list)</td><td>返回排序好的list</td></tr><tr><td>min(list)</td><td>只适用于用户相同元素类型的list</td></tr><tr><td>max(list)</td><td>只适用于用户相同元素类型的list</td></tr><tr><td>sum(list)</td><td>只适用于数字list</td></tr><tr><td>count(i)</td><td>计算i在列表中出现了几次</td></tr></tbody></table></blockquote></blockquote><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><blockquote><p>元组：不可变的列表，但是用圆括号而不是方括号来标识；</p><blockquote><p><strong>创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特性：元组不能修改</span></span><br><span class="line">dimensions[<span class="number">0</span>] = <span class="number">250</span></span><br><span class="line"><span class="comment"># 代码错误，&#x27;tuple&#x27; object does not supper item assignment!</span></span><br></pre></td></tr></table></figure><hr><p><strong>遍历</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dimensions:</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure></blockquote></blockquote><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><blockquote><p>字典：是一系列的键–值对，每个键都与一个值相关联。</p><blockquote><p><strong>创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;1&#x27;</span>]</span><br></pre></td></tr></table></figure><hr><p><strong>添加或修改键值对</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict[&#39;xxx&#39;] &#x3D; xxx</span><br></pre></td></tr></table></figure><hr><p><strong>删除键值对</strong></p><p>del dict[key]</p><hr><p><strong>遍历</strong></p><p><strong>遍历键值对</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for key,value in dict.items():</span><br><span class="line">    do somethings...</span><br></pre></td></tr></table></figure><p><strong>遍历所有键</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for key in dict.keys():</span><br><span class="line">    do somethings...</span><br></pre></td></tr></table></figure><p><strong>遍历所有值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for v in set(dict.values()):</span><br><span class="line">    do somethings...</span><br><span class="line"># 因为所有的值中肯定有重复的，这里使用set(集合)的特性来去重</span><br></pre></td></tr></table></figure></blockquote></blockquote><h2 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a>python函数</h2><blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>random.choice([])</td><td>从列表中返回一个值</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></blockquote><h3 id="特殊的形参"><a href="#特殊的形参" class="headerlink" title="特殊的形参"></a>特殊的形参</h3><blockquote><blockquote><ol><li>默认值：def method(a, b=’5’):</li></ol><ul><li>在调用时，可以不给形参b赋值，method(5)；– 默认参数</li><li>也可以method(5,6)来覆盖默认值 – 位置调用</li><li>也可以method(b=6, a=7)调用  – 关键字调用</li></ul></blockquote><blockquote><ol start="2"><li>无限制形参</li></ol><blockquote><p>2-1  def method(a, *b)</p><ul><li>*b被认为是一个元组</li><li>当调用method(5, 5,5,5)时，被认为 method(5, (5,5,5))</li></ul></blockquote><blockquote><p>2.2   def method(a, **b)</p><ul><li>*b被认为是一个字典</li><li>当调用method(5, a=5,b=5,c=5)时，被认为 method(5, {‘a’=5,’b’=5,’c’=5})</li></ul></blockquote></blockquote></blockquote><hr><h3 id="形参与实参的对应联系"><a href="#形参与实参的对应联系" class="headerlink" title="形参与实参的对应联系"></a>形参与实参的对应联系</h3><blockquote><blockquote><p>位置对应</p><p>让实参按照形参的位置一一对应传进去</p></blockquote><blockquote><p>关键字对应</p><p>调用时，声明形参名=实参，例如<code>method(b=6, a=7)</code>调用</p></blockquote></blockquote><hr><h3 id="函数修改列表以及禁止函数修改列表"><a href="#函数修改列表以及禁止函数修改列表" class="headerlink" title="函数修改列表以及禁止函数修改列表"></a>函数修改列表以及禁止函数修改列表</h3><blockquote><p>当调用method(ls,ls1)时，在函数内部修改ls，即对ls列表本身做了操作；</p><p>如果不想对原列表做出操作，需要把列表的副本传入参数</p><p><code>method(ls[:], ls1[:])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典的副本</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line">dict1 = <span class="built_in">dict</span>.copy()</span><br><span class="line">dict1[<span class="string">&#x27;c&#x27;</span>] = <span class="string">&#x27;d&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span></span><br><span class="line">Out[<span class="number">2</span>]: &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">dict1</span><br><span class="line">Out[<span class="number">3</span>]: &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;d&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="变量与对象"><a href="#变量与对象" class="headerlink" title="变量与对象"></a>变量与对象</h3><blockquote><p> 传值和传引用是函数参数传递的两种方式，在Python中参数是如何传递的？ </p><p> Python 中一切皆为对象，数字是对象，列表是对象，函数也是对象，任何东西都是对象。<strong>而变量是对象的一个引用</strong>（又称为名字或者标签），<strong>对象的操作都是通过引用来完成的</strong>。例如，<code>[]</code>是一个空列表对象，变量 <code>a</code> 是该对象的一个引用 </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">a.append(<span class="number">1</span>) <span class="comment"># 列表的新增数据通过引用a来完成，所有列表终究会变化的</span></span><br><span class="line">a =<span class="number">1</span> <span class="comment"># 这个操作只是给引用a换了一个数字对象1,不会对之前的列表做出改变</span></span><br></pre></td></tr></table></figure><p> 在 Python 中，「变量」更准确叫法是「名字」，赋值操作 <code>=</code> 就是把一个名字<strong>绑定</strong>到一个对象上。就像给对象添加一个标签。 </p></blockquote><h3 id="函数编写规范"><a href="#函数编写规范" class="headerlink" title="函数编写规范"></a>函数编写规范</h3><blockquote><ol><li>给函数描述性的名称，且只在其中使用小写字母和下划线</li><li>定义时，给定默认值时，等号两侧不要有空格</li><li>传递实参时，关键字实参调用等号两侧不要有空格</li></ol></blockquote><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="类的编写"><a href="#类的编写" class="headerlink" title="类的编写"></a>类的编写</h3><blockquote><ol><li>Python中，首字母的写的名称代表类；<code>class Dog():</code>，定义中括号是空的（除非他继承于某个类）</li><li>每当根据类创建示例时都会自动运行<code>__init__()</code>方法，相当于构造函数，Python的类只有一个构造函数，函数中必须有self形参，它代表着这个类当前的实例。</li><li>类中的每个属性都必须要有初始值，无论是在<code>__int__()</code>方法里赋值的还是在形参中设置默认值的。</li></ol></blockquote><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><blockquote><p><em>一个类继承另外一个类时，它将自动获得另一个类的所有属性和方法</em></p><ol><li>子类的<code>__init__()</code>方法需要父类施以援手；<code>super().__init__(xxx)</code></li><li>创建子类时，父类必须在此文件中，并且位于子类前面</li><li>定义子类时，必须在括号里指定父类的名称；<code>class ElectrucCar(Car):</code></li><li>子类可以重写父类的方法；<code>Ctrl + o</code></li></ol></blockquote><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><blockquote><p>如果要以任何方式使用文件：</p><ol><li>首先要打开文件 <code>with open(&#39;xxx.txt&#39;) as file:</code>，使用open()打开文件，默认以只读方式打开</li><li>关键字<code>with</code>在不需要访问文件资源后将其关闭</li><li>然后在使用<code>read()</code>方法来读取文件的内容</li></ol><p>读取文本文件时，python将其中的所有文本都解读为字符串。如果你读取的是数字，并要将其作为数值使用，就必须用<code>int()/float()</code>函数转换。</p></blockquote><table><thead><tr><th>函数</th><th>返回</th><th>描述</th></tr></thead><tbody><tr><td>read()</td><td>str</td><td>返回文件所有内容</td></tr><tr><td>readlines()</td><td>[]</td><td>返回文件各行内容构成的列表</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="按行读取"><a href="#按行读取" class="headerlink" title="按行读取"></a>按行读取</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;read.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file:</span><br><span class="line"> <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">     print(line)</span><br></pre></td></tr></table></figure><p><font color='red'>此时我们发现打印的空白行比文件中要多，因为他会把文件中的每行换行符打印出来，并且函数<code>print()</code>自带自带换行符，所以我们这样调用<code>print(line.rstrip())</code></font></p></blockquote><h3 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h3><blockquote><p>上一小节的<code>line</code>只能在<code>with</code>的范围内使用，如果要在<code>with</code>代码块外部访问文件内容，可在<code>with</code>代码块中将文件的各行存储在一个列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;read.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file:</span><br><span class="line">ls = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> ls:</span><br><span class="line"> print(line.rstrip())</span><br></pre></td></tr></table></figure></blockquote><h3 id="open-函数"><a href="#open-函数" class="headerlink" title="open()函数"></a>open()函数</h3><blockquote><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>无/r</td><td>只读模式(<font color='red'>当只读模式找不到文件时，会出FileNotFound异常</font>)</td></tr><tr><td>w</td><td>写入模式(<font color='red'>如果文件存在，他会清空文件并返回文件对象</font>)</td></tr><tr><td>a</td><td>追加模式</td></tr><tr><td>r+</td><td>读写模式</td></tr></tbody></table><p>写入文件：</p><ol><li>首先以写文件模式打开文件，例如返回的文件对象是<code>file</code></li><li>调用<code>file.write(&#39;&#39;)</code>，但是<font color='red'>此函数不会在你的文本末尾添加换行符</li><li>如果像写入多行需要<code>file.write(&#39;xxxx \n&#39;)</code></li></ol></blockquote><h3 id="使用json存储数据"><a href="#使用json存储数据" class="headerlink" title="使用json存储数据"></a>使用json存储数据</h3><blockquote><p>json模块的函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>dump(x,y)</td><td>将数据x保存到文件对象y中</td></tr><tr><td>dumps(x)</td><td>将字典类型{}/[{},{}]的变为json</td></tr><tr><td>load(x)</td><td>将json变为对象（列表或字典）</td></tr></tbody></table><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dumps   <span class="comment">#encode,将python对象转换为json对象</span></span><br><span class="line">loads   <span class="comment">#decode,将json对象转换为python对象</span></span><br><span class="line">dump    <span class="comment">#encode,将python对象转换为可以存储到文件的fp文件流</span></span><br><span class="line">load    <span class="comment">#decode,将fp文件流转换为python对象</span></span><br></pre></td></tr></table></figure><p>Encode过程，是把python对象转换成json对象的一个过程，常用的两个函数是dumps和dump函数。两个函数的唯一区别就是dump把python对象转换成json对象生成一个fp的文件流，而dumps则是生成了一个所有程序语言都认识的字符串。<br>Decode过程，是把json对象转换成python对象的一个过程，常用的两个函数是loads和load函数。区别跟dump和dumps是一样的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">filename = <span class="string">&#x27;zxj.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line"> json.dump(numbers, file)</span><br><span class="line"> </span><br><span class="line">filename = <span class="string">&#x27;zxj.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line"> print(<span class="built_in">type</span>(json.load(file)))</span><br></pre></td></tr></table></figure></blockquote><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="datatime时间"><a href="#datatime时间" class="headerlink" title="datatime时间"></a>datatime时间</h3><blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>datetime.strptime(str, ‘%Y-%m-%d’)</td><td>格式化字符串获得datetime类型时间</td></tr><tr><td>stamp = datetime(2017, 10, 7)&lt;br&gt;stamp.strftime(‘%Y-%m-%d’)</td><td>将datetime对象按照格式输出str</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></blockquote><h3 id="urllib-模拟请求"><a href="#urllib-模拟请求" class="headerlink" title="urllib 模拟请求"></a>urllib 模拟请求</h3><blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>from urllib.request import urlopen<br>response = urlopen(json_url)</td><td>打开url</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></blockquote><h3 id="requests第三方模块"><a href="#requests第三方模块" class="headerlink" title="requests第三方模块"></a>requests第三方模块</h3><blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>req = requests.get(url)<br>req.text()/req.json()</td><td>向url发出请求</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></blockquote><h3 id="很需要学习的第三方"><a href="#很需要学习的第三方" class="headerlink" title="很需要学习的第三方"></a>很需要学习的第三方</h3><blockquote><ol><li>Numpy数据计算</li><li>Pandas快速数据分析工具（快速读取json）</li></ol></blockquote><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="常见的异常"><a href="#常见的异常" class="headerlink" title="常见的异常"></a>常见的异常</h3><blockquote><ol><li>ZeroDivisionError异常：除以0异常</li><li>FileNootFoundError异常：文件未找到异常</li></ol></blockquote><h3 id="处理异常代码"><a href="#处理异常代码" class="headerlink" title="处理异常代码"></a>处理异常代码</h3><blockquote><p>try…except…else…finally…</p><p>捕捉到异常执行except中内容，否则执行else中内容；无论如何都执行finally中内容</p></blockquote><h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><h2 id="matplotlib画廊"><a href="#matplotlib画廊" class="headerlink" title="matplotlib画廊"></a>matplotlib画廊</h2><blockquote><p><strong>基本函数</strong></p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>plt.title()</td><td>设置图表标题</td></tr><tr><td>plt.xlabel()</td><td>设置x坐标轴名称</td></tr><tr><td>plt.ylabel()</td><td>设置y坐标轴名称</td></tr><tr><td>plt.tick_params(axis=’both’, which=’major’, labelsize=14)</td><td>设置刻度标记的大小</td></tr><tr><td>plt.savefig(‘xxx.png’, bbox_inches=’tight’)</td><td>保存图表，第二个参数去除多余空白</td></tr><tr><td>plt.axes().get_xaxis().set_visible(False)</td><td>去除x轴</td></tr><tr><td>plt.axes().get_yaxis().set_visible(False)</td><td>去除y轴</td></tr><tr><td>plt.figure(figsize=(10,6))</td><td>指定图标的高度，宽度</td></tr><tr><td>fig = plt.figure(dpi=128, figsize=(10, 6))<br>fig.autofmt_xdate()</td><td>在x轴绘制倾斜的日期标签</td></tr><tr><td>plt.fill_between(date_ls, high_ls, low_ls, facecolor=’blue’, alpha=0.5)</td><td>参数（x值，y值1，y值2，填充颜色，透明度[0完全透明，1完全不透明]）<br>填充2个曲线之间的区域</td></tr></tbody></table></blockquote><h3 id="绘制简单的折线图"><a href="#绘制简单的折线图" class="headerlink" title="绘制简单的折线图"></a>绘制简单的折线图</h3><blockquote><ol><li><code>import matplotlib.pyplot as plt</code></li><li>plt.plot(x_values, y_values, linewidth=xxx)</li><li>plt.show()</li></ol></blockquote><h3 id="绘制简单的散点图"><a href="#绘制简单的散点图" class="headerlink" title="绘制简单的散点图"></a>绘制简单的散点图</h3><blockquote><ol><li><code>import matplotlib.pyplot as plt</code></li><li>plt.scatter(x_values, y_values, c=’red’, edgecolor=’none’, s=40)</li><li>plt.show()</li></ol><hr><blockquote><p><strong><code>scatter</code>函数的参数</strong></p><p><code>edgecolor=&#39;none&#39;</code>删除数据点的轮廓</p><p><code>c=&#39;red&#39;</code>设置数据点的颜色为红色</p><p><code>s=40</code>设置数据点的粗细</p><blockquote><p><strong>颜色映射</strong></p><ol><li>设置<code>c=y_values</code></li><li>声明使用哪个颜色映射<code>cmap=plt.cm.Blues</code></li><li>根据c=[]中列表的值来确定该点的颜色的深浅，如果想表示先后顺序，c的列表可由小到大</li></ol></blockquote></blockquote></blockquote><h2 id="Pygal生产可视化图形"><a href="#Pygal生产可视化图形" class="headerlink" title="Pygal生产可视化图形"></a>Pygal生产可视化图形</h2><blockquote><p>对于需要在尺寸不同的屏幕上展示的图表，这很有用因为他们将自动缩放，意识和观看者的屏幕。</p><p>pygal的柱状图</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>hist = pygal.Bar()</td><td>返回实例hist</td></tr><tr><td>hist.xlabels = []</td><td>x轴坐标</td></tr><tr><td>hist.x_title = “”</td><td>x轴名字</td></tr><tr><td>hist.y_title = “”</td><td>y轴名字</td></tr><tr><td>hist.add(’D6‘, [])</td><td>向图表中加入值，可加入多个，有对比</td></tr><tr><td>hist.render_to_file(“xxx.svg”)</td><td>将图表渲染成文件，必须是svg格式</td></tr></tbody></table><p>pygal的折线图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Wed Nov 27 19:33:07 2019</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: qluzx</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"></span><br><span class="line">json_url = <span class="string">&#x27;https://raw.githubusercontent.com/muxuezi/btc/master/btc_close_2017.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">req = requests.get(json_url)</span><br><span class="line"><span class="comment"># 转换数据</span></span><br><span class="line">s = req.json()</span><br><span class="line">print(<span class="built_in">type</span>(s))</span><br><span class="line">date_ls, month_ls, week_ls, weekday_ls, close_ls = [], [], [], [], []</span><br><span class="line"><span class="keyword">for</span> json_object <span class="keyword">in</span> s:</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">     date = json_object[<span class="string">&#x27;date&#x27;</span>]</span><br><span class="line">     month = json_object[<span class="string">&#x27;month&#x27;</span>]</span><br><span class="line">     week = json_object[<span class="string">&#x27;week&#x27;</span>]</span><br><span class="line">     weekday = json_object[<span class="string">&#x27;weekday&#x27;</span>]</span><br><span class="line">     close = json_object[<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line"> <span class="keyword">except</span> ValueError:</span><br><span class="line">     print(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">&#x27;date:&#123;&#125;,month:&#123;&#125;,week:&#123;&#125;,wk:&#123;&#125;,cl:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(date,month,week,weekday,close))</span><br><span class="line">     date_ls.append(date)</span><br><span class="line">     month_ls.append(<span class="built_in">int</span>(month))</span><br><span class="line">     week_ls.append(<span class="built_in">int</span>(week))</span><br><span class="line">     weekday_ls.append(weekday)</span><br><span class="line">     close_ls.append(<span class="built_in">int</span>(<span class="built_in">float</span>(close)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># x_label_rotation：让x轴的每个标签顺时针旋转20度，show_minor_x_labels：声明不用显示所有的X轴标签</span></span><br><span class="line">line_chart = pygal.Line(x_label_rotation=<span class="number">20</span>, show_minor_x_labels=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 定义图的标题</span></span><br><span class="line">line_chart.title = <span class="string">&#x27;收盘价($)&#x27;</span></span><br><span class="line"><span class="comment"># x轴的标签</span></span><br><span class="line">line_chart.x_labels = date_ls</span><br><span class="line">N = <span class="number">20</span> <span class="comment"># x坐标轴每隔20天显示一次</span></span><br><span class="line">line_chart.x_labels_major = date_ls[::N]</span><br><span class="line"><span class="comment"># 添加y值</span></span><br><span class="line">line_chart.add(<span class="string">&#x27;收盘价&#x27;</span>, close_ls)</span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">line_chart.render_to_file(<span class="string">&#x27;收盘图折线图.svg&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\qluzx\OneDrive\Documents\md\收盘图折线图.svg" alt="收盘图折线图"></p></blockquote><blockquote><p>pygal还可以在一个html代码中展示多个svg图，详细上网搜</p></blockquote><h2 id="CSV格式文件阅读及画图"><a href="#CSV格式文件阅读及画图" class="headerlink" title="CSV格式文件阅读及画图"></a>CSV格式文件阅读及画图</h2><h3 id="阅读cvs文件"><a href="#阅读cvs文件" class="headerlink" title="阅读cvs文件"></a>阅读cvs文件</h3><blockquote><p><code>与文件读取不同的是，csv每行读取获得的是列表而不是str</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;sitka_weather_07-2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line"> reader = csv.reader(file)</span><br><span class="line"> <span class="comment"># 阅读第一行,与文件读取不同的是，csv每行读取获得的是列表而不是str</span></span><br><span class="line"> header = <span class="built_in">next</span>(reader)</span><br><span class="line"> print(<span class="built_in">type</span>(header))</span><br><span class="line"> print(header)</span><br><span class="line"> <span class="comment"># header是一个列表，我们使用enumerate来打印列表的索引和值</span></span><br><span class="line"> <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(header):</span><br><span class="line">     print(index, value)</span><br><span class="line"> <span class="comment"># 或者这样</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(header)):</span><br><span class="line">     print(i, header[i])</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>**获取数据**</code></p><p><font color='red'><code>header = next(reader)</code>为读取下一行，但一般不用于获得数据，一般<code>for i in reader</code>来获得数据，一般必须先读取第一行后，在遍历获取数据，因为第一行是头，和数据不一样</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> reader:    </span><br><span class="line">     date_ls.append(datetime.strptime(line[<span class="number">0</span>], <span class="string">&#x27;%Y-%m-%d&#x27;</span>))</span><br><span class="line">     high_ls.append(<span class="built_in">int</span>(line[<span class="number">1</span>]))</span><br><span class="line">     low_ls.append(<span class="built_in">int</span>(line[<span class="number">3</span>]))</span><br></pre></td></tr></table></figure></blockquote><h3 id="处理脏数据"><a href="#处理脏数据" class="headerlink" title="处理脏数据"></a>处理脏数据</h3><blockquote><p>在遍历读取数据时，不一定保证我们读到的数据一定正确，如果不做处理，当数据为空时，程序会异常</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;death_valley_2014.csv&#x27;</span></span><br><span class="line">date_ls, high_ls, low_ls = [], [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file:</span><br><span class="line"> reader = csv.reader(file)</span><br><span class="line"> <span class="built_in">next</span>(reader)</span><br><span class="line"> <span class="comment"># 遍历数据</span></span><br><span class="line"> <span class="keyword">for</span> line <span class="keyword">in</span> reader: </span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">         x = datetime.strptime(line[<span class="number">0</span>], <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">         y1 = <span class="built_in">int</span>(line[<span class="number">1</span>])</span><br><span class="line">         y2 = <span class="built_in">int</span>(line[<span class="number">3</span>])</span><br><span class="line">     <span class="keyword">except</span> ValueError:</span><br><span class="line">         print(<span class="string">&quot;loss&quot;</span>)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">          date_ls.append(x)</span><br><span class="line">          high_ls.append(y1)</span><br><span class="line">          low_ls.append(y2)</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></blockquote><h2 id="JSON格式数据阅读以及画图"><a href="#JSON格式数据阅读以及画图" class="headerlink" title="JSON格式数据阅读以及画图"></a>JSON格式数据阅读以及画图</h2><h3 id="读取网络中的-json文件"><a href="#读取网络中的-json文件" class="headerlink" title="读取网络中的.json文件"></a>读取网络中的.json文件</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">json_url = <span class="string">&#x27;https://raw.githubusercontent.com/muxuezi/btc/master/btc_close_2017.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">response = urlopen(json_url)</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">t = json.load(response)</span><br><span class="line"><span class="comment"># t是数组，t中是一堆的字典</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line"> print(i)</span><br><span class="line"> print(<span class="built_in">type</span>(i))</span><br><span class="line"> <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">json_url = <span class="string">&#x27;https://raw.githubusercontent.com/muxuezi/btc/master/btc_close_2017.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">req = requests.get(json_url)</span><br><span class="line"><span class="comment"># 转换数据</span></span><br><span class="line">s = req.json()</span><br><span class="line">print(<span class="built_in">type</span>(s))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次redis存储部门架构</title>
      <link href="2020/04/12/%E8%AE%B0%E4%B8%80%E6%AC%A1redis%E5%AD%98%E5%82%A8%E9%83%A8%E9%97%A8%E6%9E%B6%E6%9E%84/"/>
      <url>2020/04/12/%E8%AE%B0%E4%B8%80%E6%AC%A1redis%E5%AD%98%E5%82%A8%E9%83%A8%E9%97%A8%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近收到了一些业务需求，写几个查询部门人员信息的接口，通过把数据放进redis里面来进行高效查询。</p><a id="more"></a><h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><p>我们需要将一个关系型数据库表中的数据存储在redis中。</p><p>在数据存储在redis中后，还要同时满足以下几种查询方式：</p><ol><li>根据人员工号查询人员信息。</li><li>根据部门信息，查询部门人员信息(包括子部门的人员)</li><li>根据部门信息，查询部门所有的子部门信息</li></ol><p>我们来看一下关系型数据库的这张表的结构，以及存储了哪些信息。</p><p>数据库的涉及如下(假数据，只摘取了部分)：</p><p><img src="1.PNG"></p><p>数据内容：</p><p><img src="2.PNG"></p><p>其中，部门编号和直接父级部门编号类似于id、pid表示层级关系，而unit_path部门编号路径，则存储了它的所有父级部门的信息。</p><h1 id="如何存储"><a href="#如何存储" class="headerlink" title="如何存储"></a>如何存储</h1><p>一开始我以为是很简单的操作，以人/部门为key存储数据，但是这样不能同时满足上面的三个查询条件。</p><p>于是创建了一下几个k-v数据，来实现上述的三个查询需求</p><h2 id="用户部门信息k-v"><a href="#用户部门信息k-v" class="headerlink" title="用户部门信息k-v"></a>用户部门信息k-v</h2><p>采用redis的string数据类型，key为user_key。将一个Java中的数组存储的redis中的value中，数组的内容是**<em>每个人所在的部门编号路径信息**</em>。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;_X6003_/1/101/107/134/&quot;</span>,<span class="string">&quot;_X4734_/1/101/107/131/668/&quot;</span>,<span class="string">&quot;_X1385_/1/101/107/485/489/493/&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="用户个人信息k-v"><a href="#用户个人信息k-v" class="headerlink" title="用户个人信息k-v"></a>用户个人信息k-v</h2><p>使用redis的hash数据类型，<strong>存储每个人的个人信息</strong>，其中k为user_hash，value中：field为上述k-v中数组值的某个值(某个人)，value为Java中每个人的信息对象。</p><p>如：</p><p><img src="3.PNG"></p><h2 id="部门层级信息k-v"><a href="#部门层级信息k-v" class="headerlink" title="部门层级信息k-v"></a>部门层级信息k-v</h2><p>采用redis的string数据类型，key为unit。将一个Java中的数组存储的redis中的value中，数组的内容是**<em>每个部门 的信息和部门编号路径、父部门路径**</em>。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">&quot;unitCode&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;unitName&quot;</span>:<span class="string">&quot;根机构&quot;</span>,<span class="string">&quot;unitPath&quot;</span>:<span class="string">&quot;/1/&quot;</span>,<span class="string">&quot;unitType&quot;</span>:<span class="string">&quot;P&quot;</span>&#125;,&#123;<span class="string">&quot;parentUnit&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;unitCode&quot;</span>:<span class="string">&quot;101&quot;</span>,<span class="string">&quot;unitName&quot;</span>:<span class="string">&quot;烽火星空&quot;</span>,<span class="string">&quot;unitPath&quot;</span>:<span class="string">&quot;/1/101/&quot;</span>,<span class="string">&quot;unitType&quot;</span>:<span class="string">&quot;P&quot;</span>&#125;,&#123;<span class="string">&quot;parentUnit&quot;</span>:<span class="string">&quot;101&quot;</span>,<span class="string">&quot;unitCode&quot;</span>:<span class="string">&quot;107&quot;</span>,<span class="string">&quot;unitName&quot;</span>:<span class="string">&quot;组织&quot;</span>,<span class="string">&quot;unitPath&quot;</span>:<span class="string">&quot;/1/101/107/&quot;</span>,<span class="string">&quot;unitType&quot;</span>:<span class="string">&quot;Z&quot;</span>&#125;,&#123;<span class="string">&quot;parentUnit&quot;</span>:<span class="string">&quot;107&quot;</span>,<span class="string">&quot;unitCode&quot;</span>:<span class="string">&quot;120&quot;</span>,<span class="string">&quot;unitName&quot;</span>:<span class="string">&quot;各地研发中心&quot;</span>,<span class="string">&quot;unitPath&quot;</span>:<span class="string">&quot;/1/101/107/120/&quot;</span>,<span class="string">&quot;unitType&quot;</span>:<span class="string">&quot;D&quot;</span>&#125;]</span><br></pre></td></tr></table></figure><h1 id="如何查询"><a href="#如何查询" class="headerlink" title="如何查询"></a>如何查询</h1><h2 id="根剧用户id查用户信息"><a href="#根剧用户id查用户信息" class="headerlink" title="根剧用户id查用户信息"></a>根剧用户id查用户信息</h2><ol><li>组合用户id成为_xxx_</li><li>get(user_key)得到所有的用户部门信息</li><li>遍历上述，得到符合的个人信息的值</li><li>将这个值作为field去查询users_hash，得到这个field的值就是这个人的信息</li></ol><p>例如，查询：X6003，则得到以下所有的值，模糊查的_X6003_</p><p>;将得到的<code>_X6003_/1/101/107/134/</code>作为users_hash的field查询，则能得到此人的准确信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;_X6003_/1/101/107/134/&quot;</span>,<span class="string">&quot;_X4734_/1/101/107/131/668/&quot;</span>,<span class="string">&quot;_X1385_/1/101/107/485/489/493/&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="根剧部门id查用户信息"><a href="#根剧部门id查用户信息" class="headerlink" title="根剧部门id查用户信息"></a>根剧部门id查用户信息</h2><ol><li>组合用户id成为/xxx/</li><li>get(user_key)得到所有的用户部门信息</li><li>遍历上述，得到符合的部门-人员信息的值</li><li>将这多个值作为field去查询users_hash，得到这些field的值就是这些人的信息(因为是hash类型，redis可以直接查询多个filed)</li></ol><p>例如，查询：101，则得到以下所有的值，模糊查的/101/</p><p>;将得到的<code>_X6003_/1/101/107/134/</code>,<code>_X4734_/1/101/107/131/668/</code>,<code>X1385_/1/101/107/485/489/493/</code>作为users_hash的field查询，则能得到这些人的准确信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;_X6003_/1/101/107/134/&quot;</span>,<span class="string">&quot;_X4734_/1/101/107/131/668/&quot;</span>,<span class="string">&quot;_X1385_/1/101/107/485/489/493/&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="根据部门id查询子部门"><a href="#根据部门id查询子部门" class="headerlink" title="根据部门id查询子部门"></a>根据部门id查询子部门</h2><p>展示一下部门信息的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Unit</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">39591122092488169L</span>;</span><br><span class="line">    <span class="keyword">private</span> String unitCode;</span><br><span class="line">    <span class="keyword">private</span> String unitName;</span><br><span class="line">    <span class="keyword">private</span> String parentUnit;</span><br><span class="line">    <span class="keyword">private</span> String unitType;</span><br><span class="line">    <span class="keyword">private</span> String unitPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>查询部门层级信息得到所有部门</li><li>然后根据需要查询的部门id和所有部门信息对比，得到parentId=查的部门id的数据</li><li>上述为递归查询</li><li>得到子部门的所有层级数据。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归查询部门层级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unitCode    查询部门的编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unitAllList 部门数据集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 该部门的下属子部门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; getUnit(String unitCode, List&lt;Unit&gt; unitAllList) &#123;</span><br><span class="line">    List&lt;Unit&gt; unitList = unitAllList.stream().filter(unit -&gt;</span><br><span class="line">            unitCode.equals(unit.getParentUnit())).collect(Collectors.toList());</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unitList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        unitList.forEach(unit -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;unitCode&quot;</span>, unit.getUnitCode());</span><br><span class="line">            map.put(<span class="string">&quot;unitName&quot;</span>, unit.getUnitName());</span><br><span class="line">            map.put(<span class="string">&quot;parentUnit&quot;</span>, unit.getParentUnit());</span><br><span class="line">            map.put(<span class="string">&quot;unitType&quot;</span>, unit.getUnitType());</span><br><span class="line">            map.put(<span class="string">&quot;unitPath&quot;</span>, unit.getUnitPath());</span><br><span class="line">            map.put(<span class="string">&quot;childrenList&quot;</span>, getUnit(unit.getUnitCode(), unitAllList));</span><br><span class="line">            list.add(map);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>更好的使用微服务</title>
      <link href="2020/03/24/%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>2020/03/24/%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><a href="/2020/03/22/Spring-Cloud-Alibaba%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/" title="此篇文章的基础上">此篇文章的基础上</a>  ，让我们的微服务易于管理。<a id="more"></a><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><h2 id="分布式配置中心"><a href="#分布式配置中心" class="headerlink" title="分布式配置中心"></a>分布式配置中心</h2><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p>需要手动在Nacos服务器中写项目的配置文件，我们依然采用 YAML 的方式部署配置文件，操作流程如下：</p><ul><li>浏览器打开 <a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> ，访问 Nacos Server</li></ul><p><img src="12.PNG"></p><ul><li>新建配置文件，此处我们以之前创建的 [**服务提供者**](# 服务提供者) 项目为例（将此项目中的yml内容拷贝过来），发布</li></ul><p><img src="13.PNG"></p><p><strong>注意：Data ID 的默认扩展名为 <code>.properties</code> ，希望使用 YAML 配置，此处必须指明是 <code>.yaml</code></strong></p><ul><li>发布成功后在 “配置列表” 一栏即可看到刚才创建的配置项</li></ul><p><img src="14.PNG"></p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><h4 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h4><p>此处我们以之前创建的 [**服务提供者**](# 服务提供者) 项目为例，之后以外项目的配置，就不展示了</p><p>在 <code>pom.xml</code> 中增加 <code>org.springframework.cloud:spring-cloud-starter-alibaba-nacos-config</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="bootstrap-properties"><a href="#bootstrap-properties" class="headerlink" title="bootstrap.properties"></a>bootstrap.properties</h4><p>创建名为 <code>bootstrap.properties</code> 的配置文件并删除之前创建的 <code>application.yml</code> 配置文件，由于已经在服务端配置，此处不再赘述</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的应用名对应 Nacos Config 中的 Data ID，实际应用名称以配置中心的配置为准</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">nacos-provider-config</span></span><br><span class="line"><span class="comment"># 指定查找名为 nacos-provider-config.yaml 的配置文件</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.file-extension</span>=<span class="string">yaml</span></span><br><span class="line"><span class="comment"># Nacos Server 的地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p><strong>注意： Spring Boot 配置文件的加载顺序，依次为 <code>bootstrap.properties</code> -&gt; <code>bootstrap.yml</code> -&gt; <code>application.properties</code> -&gt; <code>application.yml</code> ，其中 <code>bootstrap.properties</code> 配置为最高优先级</strong></p><p><font color='red'>不采用bootstrap.properties最高优先级的话，配置文件是加载不到的</font></p><h4 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h4><p><img src="15.PNG"></p><h4 id="配置动态更新"><a href="#配置动态更新" class="headerlink" title="配置动态更新"></a>配置动态更新</h4><ul><li>添加配置user.name</li></ul><p><img src="16.PNG"></p><ul><li>修改controller读取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入配置文件上下文</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ConfigurableApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 从上下文中读取配置</span></span><br><span class="line">   <span class="meta">@GetMapping(value = &quot;/hi&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 直接读取的话，读取到的不是最新的值。只能通过上下文来读取</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + applicationContext.getEnvironment().getProperty(<span class="string">&quot;user.name&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>通过浏览器访问该接口，浏览器显示</li></ul><p><img src="17.PNG"></p><ul><li>修改值</li></ul><p><img src="18.PNG"></p><ul><li>通过浏览器访问该接口，浏览器显示</li></ul><p><img src="19.PNG"></p><p><strong>注意：你可以使用 <code>spring.cloud.nacos.config.refresh.enabled=false</code> 来关闭动态刷新</strong></p><h3 id="Nacos多环境配置"><a href="#Nacos多环境配置" class="headerlink" title="Nacos多环境配置"></a>Nacos多环境配置</h3><h4 id="Spring-Boot-Profile"><a href="#Spring-Boot-Profile" class="headerlink" title="Spring Boot Profile"></a>Spring Boot Profile</h4><p>我们在做项目开发的时候，生产环境和测试环境的一些配置可能会不一样，有时候一些功能也可能会不一样，所以我们可能会在上线的时候手工修改这些配置信息。但是 Spring 中为我们提供了 Profile 这个功能。我们只需要在启动的时候添加一个虚拟机参数，激活自己环境所要用的 Profile 就可以了。</p><p>操作起来很简单，只需要为不同的环境编写专门的配置文件，如：<code>application-dev.yml</code>、<code>application-prod.yml</code>， 启动项目时只需要增加一个命令参数 <code>--spring.profiles.active=环境配置</code> 即可，启动命令如下：</p><p><code>java -jar xxx.jar --spring.profiles.active=prod</code></p><h4 id="Nacos-Config-Profile"><a href="#Nacos-Config-Profile" class="headerlink" title="Nacos Config Profile"></a>Nacos Config Profile</h4><p>spring-cloud-starter-alibaba-nacos-config 在加载配置的时候，不仅仅加载了以 dataid 为 <code>$&#123;spring.application.name&#125;.$&#123;file-extension:properties&#125;</code> 为前缀的基础配置，还加载了 dataid 为 <code>$&#123;spring.application.name&#125;-$&#123;profile&#125;.$&#123;file-extension:properties&#125;</code> 的基础配置。在日常开发中如果遇到多套环境下的不同配置，可以通过 Spring 提供的 <code>$&#123;spring.profiles.active&#125;</code> 这个配置项来配置。</p><p>此处我们以之前创建的 [**服务提供者**](# 服务提供者) 项目为例</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><strong>添加发布配置</strong></p><p>增加一个名为 <code>nacos-provider-config-prod.yaml</code> 的配置</p><p><img src="20.PNG"></p><p>port: 9091-&gt;3333</p><p><strong>项目中添加配置</strong></p><p>增加一个名为 <code>bootstrap-prod.properties</code> 的配置文件，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取nacos中的pord文件</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">prod</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">nacos-provider-config</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.file-extension</span>=<span class="string">yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p>主要增加了 <code>spring.profiles.active=prod</code> 配置，用于指定访问 Nacos Server 中的 <code>nacos-provider-config-prod.yaml</code> 配置</p><p><strong>启动项目</strong></p><p>此时我们有两个配置文件，分别为 <code>bootstrap.properties</code> 和 <code>bootstrap-prod.properties</code> ，我们需要指定启动时加载哪一个配置文件，操作流程如下：</p><ul><li><code>Run</code> -&gt; <code>Edit Configurations..</code></li></ul><p><img src="21.png"></p><ul><li>设置需要激活的配置</li></ul><p><img src="22.png"></p><h2 id="Spring-Cloud-Alibaba链路追踪"><a href="#Spring-Cloud-Alibaba链路追踪" class="headerlink" title="Spring Cloud Alibaba链路追踪"></a>Spring Cloud Alibaba链路追踪</h2><p>引用<a href="https://www.funtl.com/zh/spring-cloud-alibaba/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA.html">为什么需要链路追踪</a></p><h3 id="服务端设置"><a href="#服务端设置" class="headerlink" title="服务端设置"></a>服务端设置</h3><ul><li><p>下载elasticsearch</p></li><li><p>下载skywalking发行包</p></li><li><p><code>bin/elasticsearch.bat</code>运行</p></li></ul><p><img src="25.PNG"></p><ul><li>修改skywalking的<code>elasticsearch</code>配置</li></ul><p><img src="27.PNG"></p><ul><li><code>bin/startup.bat</code>运行</li></ul><p><img src="26.PNG"></p><ul><li>效果</li></ul><p><img src="24.PNG"></p><h2 id="服务间异步通信"><a href="#服务间异步通信" class="headerlink" title="服务间异步通信"></a>服务间异步通信</h2><p>之前的feign/ribbon方式都是Http Client方式，不是异步的。这里我们通过Rocket MQ来实现异步通信</p><h3 id="RocketMQ-简介"><a href="#RocketMQ-简介" class="headerlink" title="RocketMQ 简介"></a>RocketMQ 简介</h3><p>Apache Alibaba RocketMQ 是一个消息中间件。消息中间件中有两个角色：消息生产者和消息消费者。RocketMQ 里同样有这两个概念，消息生产者负责创建消息并发送到 RocketMQ 服务器，RocketMQ 服务器会将消息持久化到磁盘，消息消费者从 RocketMQ 服务器拉取消息并提交给应用消费。</p><h3 id="RocketMQ-特点"><a href="#RocketMQ-特点" class="headerlink" title="RocketMQ 特点"></a>RocketMQ 特点</h3><p>RocketMQ 是一款分布式、队列模型的消息中间件，具有以下特点：</p><ul><li>支持严格的消息顺序</li><li>支持 Topic 与 Queue 两种模式</li><li>亿级消息堆积能力</li><li>比较友好的分布式特性</li><li>同时支持 Push 与 Pull 方式消费消息</li><li><strong>历经多次天猫双十一海量消息考验</strong></li></ul><h3 id="RocketMQ-优势"><a href="#RocketMQ-优势" class="headerlink" title="RocketMQ 优势"></a>RocketMQ 优势</h3><p>目前主流的 MQ 主要是 RocketMQ、kafka、RabbitMQ，其主要优势有：</p><ul><li>支持事务型消息（消息发送和 DB 操作保持两方的最终一致性，RabbitMQ 和 Kafka 不支持）</li><li>支持结合 RocketMQ 的多个系统之间数据最终一致性（多方事务，二方事务是前提）</li><li>支持 18 个级别的延迟消息（RabbitMQ 和 Kafka 不支持）</li><li>支持指定次数和时间间隔的失败消息重发（Kafka 不支持，RabbitMQ 需要手动确认）</li><li>支持 Consumer 端 Tag 过滤，减少不必要的网络传输（RabbitMQ 和 Kafka 不支持）</li><li>支持重复消费（RabbitMQ 不支持，Kafka 支持）</li></ul><h3 id="消息队列对比参照表"><a href="#消息队列对比参照表" class="headerlink" title="消息队列对比参照表"></a>消息队列对比参照表</h3><p><img src="https://www.funtl.com/assets1/12619159-ebd12b24d5ae33d9.png" alt="img"></p><h3 id="基于Docker快速安装"><a href="#基于Docker快速安装" class="headerlink" title="基于Docker快速安装"></a>基于Docker快速安装</h3><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p><strong>注意：启动 RocketMQ Server + Broker + Console 至少需要 2G 内存</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.5&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rmqnamesrv:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">foxiswho/rocketmq:server</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/logs:/opt/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/store:/opt/store</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">        <span class="attr">rmq:</span></span><br><span class="line">          <span class="attr">aliases:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">rmqnamesrv</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">rmqbroker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">foxiswho/rocketmq:broker</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqbroker</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10909</span><span class="string">:10909</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10911</span><span class="string">:10911</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/logs:/opt/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/store:/opt/store</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">NAMESRV_ADDR:</span> <span class="string">&quot;rmqnamesrv:9876&quot;</span></span><br><span class="line">        <span class="attr">JAVA_OPTS:</span> <span class="string">&quot; -Duser.home=/opt&quot;</span></span><br><span class="line">        <span class="attr">JAVA_OPT_EXT:</span> <span class="string">&quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mqbroker</span> <span class="string">-c</span> <span class="string">/etc/rocketmq/broker.conf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">rmq:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">rmqbroker</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">rmqconsole:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">styletang/rocketmq-console-ng</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqconsole</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">JAVA_OPTS:</span> <span class="string">&quot;-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">rmq:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">rmqconsole</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">rmq:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rmq</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h4 id="broker-conf"><a href="#broker-conf" class="headerlink" title="broker.conf"></a>broker.conf</h4><p>RocketMQ Broker 需要一个配置文件，按照上面的 Compose 配置，我们需要在 <code>./data/brokerconf/</code> 目录下创建一个名为 <code>broker.conf</code> 的配置文件，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"># contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"># this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"># the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">#  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">#  limitations under the License.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所属集群名字</span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">DefaultCluster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># broker 名字，注意此处不同的配置文件填写的不一样，如果在 broker-a.properties 使用: broker-a,</span></span><br><span class="line"><span class="comment"># 在 broker-b.properties 使用: broker-b</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">broker-a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 表示 Master，&gt; 0 表示 Slave</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nameServer地址，分号分割</span></span><br><span class="line"><span class="comment"># namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动IP,如果 docker 报 com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;192.168.0.120:10909&gt; failed</span></span><br><span class="line"><span class="comment"># 解决方式1 加上一句 producer.setVipChannelEnabled(false);，解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP</span></span><br><span class="line"><span class="comment"># brokerIP1=192.168.0.253</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="attr">defaultTopicQueueNums</span>=<span class="string">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭 ！！！这里仔细看是 false，false，false</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件时间点，默认凌晨4点</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件保留时间，默认48小时</span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">120</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># commitLog 每个文件的大小默认1G</span></span><br><span class="line"><span class="attr">mapedFileSizeCommitLog</span>=<span class="string">1073741824</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整</span></span><br><span class="line"><span class="attr">mapedFileSizeConsumeQueue</span>=<span class="string">300000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment"># redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment"># 检测物理文件磁盘空间</span></span><br><span class="line"><span class="attr">diskMaxUsedSpaceRatio</span>=<span class="string">88</span></span><br><span class="line"><span class="comment"># 存储路径</span></span><br><span class="line"><span class="comment"># storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store</span></span><br><span class="line"><span class="comment"># commitLog 存储路径</span></span><br><span class="line"><span class="comment"># storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog</span></span><br><span class="line"><span class="comment"># 消费队列存储</span></span><br><span class="line"><span class="comment"># storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue</span></span><br><span class="line"><span class="comment"># 消息索引存储路径</span></span><br><span class="line"><span class="comment"># storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index</span></span><br><span class="line"><span class="comment"># checkpoint 文件存储路径</span></span><br><span class="line"><span class="comment"># storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint</span></span><br><span class="line"><span class="comment"># abort 文件存储路径</span></span><br><span class="line"><span class="comment"># abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort</span></span><br><span class="line"><span class="comment"># 限制的消息大小</span></span><br><span class="line"><span class="attr">maxMessageSize</span>=<span class="string">65536</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment"># flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment"># flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment"># flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Broker 的角色</span></span><br><span class="line"><span class="comment"># - ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment"># - SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment"># - SLAVE</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">ASYNC_MASTER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷盘方式</span></span><br><span class="line"><span class="comment"># - ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment"># - SYNC_FLUSH 同步刷盘</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">ASYNC_FLUSH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发消息线程池数量</span></span><br><span class="line"><span class="comment"># sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment"># 拉消息线程池数量</span></span><br><span class="line"><span class="comment"># pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure><h4 id="RocketMQ-控制台"><a href="#RocketMQ-控制台" class="headerlink" title="RocketMQ 控制台"></a>RocketMQ 控制台</h4><p>访问 <a href="http://rmqip:8080/">http://rmqIP:8080</a> 登入控制台</p><p><img src="https://www.funtl.com/assets1/Lusifer_20190115014325.png" alt="img"></p><h3 id="生产端"><a href="#生产端" class="headerlink" title="生产端"></a>生产端</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>RocketMQ 是一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p><p>由于本教程整个案例基于 Spring Cloud，故我们采用 Spring Cloud Stream 完成一次发布和订阅</p><p><a href="https://github.com/spring-cloud-incubator/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/rocketmq-example/readme-zh.md">官方教程</a></p><h4 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h4><p>Spring Cloud Stream 是一个用于构建基于消息的微服务应用框架。它基于 Spring Boot 来创建具有生产级别的单机 Spring 应用，并且使用 <code>Spring Integration</code> 与 Broker 进行连接。</p><p>Spring Cloud Stream 提供了消息中间件配置的统一抽象，推出了 <code>publish-subscribe</code>、<code>consumer groups</code>、<code>partition</code> 这些统一的概念。</p><p>Spring Cloud Stream 内部有两个概念：</p><ul><li><strong>Binder：</strong> 跟外部消息中间件集成的组件，用来创建 Binding，各消息中间件都有自己的 Binder 实现。</li><li><strong>Binding：</strong> 包括 Input Binding 和 Output Binding。（用它来声明调用的topic）</li></ul><p>Binding 在消息中间件与应用程序提供的 Provider 和 Consumer 之间提供了一个桥梁，实现了开发者只需使用应用程序的 Provider 或 Consumer 生产或消费数据即可，屏蔽了开发者与底层消息中间件的接触。</p><p><img src="https://www.funtl.com/assets1/68747470733a2f2f646f63732e737072696e672e696f2f737072696e672d636c6f75642d73747265616d2f646f63732f63757272656e742f7265666572656e63652f68746d6c73696e676c652f696d616765.png" alt="img"></p><h4 id="解决连接超时问题"><a href="#解决连接超时问题" class="headerlink" title="解决连接超时问题"></a>解决连接超时问题</h4><p>在之前的 [基于 Docker 安装 RocketMQ](# 基于Docker快速安装) 章节中，我们采用 Docker 部署了 RocketMQ 服务，此时 RocketMQ Broker 暴露的地址和端口(10909，10911)是基于容器的，会导致我们开发机无法连接，从而引发 <code>org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout</code> 异常</p><p>注意下图中的 IP 地址，这个是容器的 IP，开发机与容器不在一个局域网所以无法连接。</p><p><img src="https://www.funtl.com/assets1/Lusifer_20190116045601.png" alt="img"></p><p>解决方案是在 <code>broker.conf</code> 配置文件中增加 <code>brokerIP1=宿主机IP</code> 即可</p><h4 id="pom-1"><a href="#pom-1" class="headerlink" title="pom"></a>pom</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rocketmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注解Source</span></span><br><span class="line"><span class="comment">//public interface Source &#123;</span></span><br><span class="line"><span class="comment">//    String OUTPUT = &quot;output&quot;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @Output(&quot;output&quot;)</span></span><br><span class="line"><span class="comment">//    MessageChannel output();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 看他的MessageChannel类，证明他是生产者使用的注解，它从配置文件中查找binging为output里面的topic</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sink</span></span><br><span class="line"><span class="comment">//public interface Sink &#123;</span></span><br><span class="line"><span class="comment">//    String INPUT = &quot;input&quot;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @Input(&quot;input&quot;)</span></span><br><span class="line"><span class="comment">//    SubscribableChannel input();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SubscribableChannel，证明他是消费者使用的注解，它从配置文件中查找binging为input里面的topic</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 配置 Input 和 Output 的 Binding 信息并配合 `@EnableBinding` 注解使其生效</span></span><br><span class="line"><span class="meta">@EnableBinding(&#123;Source.class, Sink.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudAlibabaRocketMqProviderApplication</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaRocketMqProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rocketmq-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="comment"># rocketmq服务地址</span></span><br><span class="line">          <span class="attr">name-server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9876</span></span><br><span class="line">      <span class="comment"># bingings写明调用的各个topic名，以及调用名output1,output2</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment"># 下面&#123;&#125;写法是yaml的独特Map写法</span></span><br><span class="line">        <span class="attr">output:</span> &#123;<span class="attr">destination:</span> <span class="string">test-topic1</span>, <span class="attr">content-type:</span> <span class="string">application/json</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试发送消息"><a href="#测试发送消息" class="headerlink" title="测试发送消息"></a>测试发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试发送消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现CommandLineRunner接口，即在spring boot项目启动时执行此方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMessageSend</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output; <span class="comment">// 获取name为output的binding</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        headers.put(MessageConst.PROPERTY_TAGS, <span class="string">&quot;tagStr&quot;</span>);</span><br><span class="line">        Message message = MessageBuilder.createMessage(<span class="string">&quot;asd&quot;</span>, <span class="keyword">new</span> MessageHeaders(headers));</span><br><span class="line">        output.send(message);</span><br><span class="line"><span class="comment">//        output.send(MessageBuilder.withPayload(&quot;asd&quot;).build());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h3><h4 id="pom-2"><a href="#pom-2" class="headerlink" title="pom"></a>pom</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rocketmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Application-1"><a href="#Application-1" class="headerlink" title="Application"></a>Application</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableBinding(&#123;Sink.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudAlibabaRocketmqConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaRocketmqConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="yml-1"><a href="#yml-1" class="headerlink" title="yml"></a>yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rocketmq-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input:</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">text/plain</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">test-topic1</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">test-group1</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">name-server:</span> <span class="number">192.168</span><span class="number">.174</span><span class="number">.134</span><span class="string">:9876</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="attr">input:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">orderly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7745</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试接收消息"><a href="#测试接收消息" class="headerlink" title="测试接收消息"></a>测试接收消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscribeMessageTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(&quot;input&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveInput1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Receive input: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义binding"><a href="#自定义binding" class="headerlink" title="自定义binding"></a>自定义binding</h3><p>如果每个生产者消费者都需要使用多个topic，则需要这样</p><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>较上面比，以下需要不同</p><h5 id="application"><a href="#application" class="headerlink" title="application"></a>application</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 配置 Input 和 Output 的 Binding 信息并配合 `@EnableBinding` 注解使其生效</span></span><br><span class="line"><span class="comment">// MySource自定义接口</span></span><br><span class="line"><span class="meta">@EnableBinding(&#123;MySource.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudAlibabaRocketMqProviderApplication</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaRocketMqProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="MySouce"><a href="#MySouce" class="headerlink" title="MySouce"></a>MySouce</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MySource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Output(&quot;output1&quot;)</span></span><br><span class="line">    <span class="function">MessageChannel <span class="title">output1</span><span class="params">()</span></span>; <span class="comment">// 获取name为output的binding</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(&quot;output2&quot;)</span></span><br><span class="line">    <span class="function">MessageChannel <span class="title">output2</span><span class="params">()</span></span>; <span class="comment">// 获取name为output的binding</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="yml-2"><a href="#yml-2" class="headerlink" title="yml"></a>yml</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rocketmq-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="comment"># rocketmq服务地址</span></span><br><span class="line">          <span class="attr">name-server:</span> <span class="number">192.168</span><span class="number">.174</span><span class="number">.134</span><span class="string">:9876</span></span><br><span class="line">      <span class="comment"># bingings写明调用的各个topic名，以及调用名output1,output2</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment"># 下面&#123;&#125;写法是yaml的独特Map写法</span></span><br><span class="line">        <span class="attr">output1:</span> &#123;<span class="attr">destination:</span> <span class="string">test-topic1</span>, <span class="attr">content-type:</span> <span class="string">application/json</span>&#125;</span><br><span class="line">        <span class="attr">output2:</span> &#123;<span class="attr">destination:</span> <span class="string">test-topic2</span>, <span class="attr">content-type:</span> <span class="string">application/json</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMessageSend</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MySource channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        headers.put(MessageConst.PROPERTY_TAGS, <span class="string">&quot;tagStr&quot;</span>);</span><br><span class="line">        Message message = MessageBuilder.createMessage(<span class="string">&quot;aaa&quot;</span>, <span class="keyword">new</span> MessageHeaders(headers));</span><br><span class="line">        channel.output1().send(message);</span><br><span class="line">        channel.output2().send(MessageBuilder.withPayload(<span class="string">&quot;ddd&quot;</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p>较上面比，以下需要不同</p><h5 id="application-1"><a href="#application-1" class="headerlink" title="application"></a>application</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableBinding(&#123;MySink.class&#125;)</span></span><br><span class="line"><span class="comment">// MySink自定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudAlibabaRocketmqConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaRocketmqConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="MySink"><a href="#MySink" class="headerlink" title="MySink"></a>MySink</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MySink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(&quot;input1&quot;)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(&quot;input2&quot;)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="yml-3"><a href="#yml-3" class="headerlink" title="yml"></a>yml</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rocketmq-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input1:</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">text/plain</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">test-topic1</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">test-group1</span></span><br><span class="line">        <span class="attr">input2:</span></span><br><span class="line">          <span class="attr">consumer:</span></span><br><span class="line">            <span class="attr">concurrency:</span> <span class="number">20</span></span><br><span class="line">            <span class="attr">maxAttempts:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">text/plain</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">test-topic2</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">test-group2</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">name-server:</span> <span class="number">192.168</span><span class="number">.174</span><span class="number">.134</span><span class="string">:9876</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="attr">input1:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">orderly:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">input2:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">orderly:</span> <span class="literal">false</span></span><br><span class="line">              <span class="comment"># 只接收tagStr标签的</span></span><br><span class="line"><span class="comment">#              tags: tagStr</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7745</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscribeMessageTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(&quot;input1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveInput1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Receive input: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(&quot;input2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveInput2</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Receive input: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><p><a href="https://www.funtl.com/zh/spring-cloud-alibaba/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E6%B5%81%E6%B4%BE.html#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91">RocketMQ 简介</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务架构解决方案 </category>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba应用实例</title>
      <link href="2020/03/22/Spring-Cloud-Alibaba%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
      <url>2020/03/22/Spring-Cloud-Alibaba%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><a id="more"></a><p>Spring Cloud是基于SpringBoot开发的，而Spring Cloud Alibaba是基于Spring Cloud开发的，所以Spring Cloud Alibaba必须使用SpringBoot</p><h1 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud Alibaba</h1><h2 id="Nacos服务"><a href="#Nacos服务" class="headerlink" title="Nacos服务"></a>Nacos服务</h2><p> 在 Spring Cloud Netflix 阶段我们采用 Eureka 做作为我们的服务注册与发现服务器，现利用 Spring Cloud Alibaba 提供的 Nacos 组件替代该方案。 </p><p><a href="https://nacos.io/zh-cn/">Nacos 官网</a> </p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><h4 id="源码构建安装"><a href="#源码构建安装" class="headerlink" title="源码构建安装"></a>源码构建安装</h4><p>Nacos 依赖 <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href="https://maven.apache.org/index.html">Maven</a>环境，请确保是在以下版本环境中安装使用:</p><ol><li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li><li>64 bit JDK 1.8+；<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">下载</a> &amp; <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">配置</a>。</li><li>Maven 3.2.x+；<a href="https://maven.apache.org/download.cgi">下载</a> &amp; <a href="https://maven.apache.org/settings.html">配置</a>。</li></ol><p><strong>拉取代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/alibaba/nacos.git</span><br><span class="line"><span class="built_in">cd</span> nacos/</span><br><span class="line">mvn -Prelease-nacos -Dmaven.test.skip=<span class="literal">true</span> clean install -U  </span><br><span class="line">ls -al distribution/target/</span><br><span class="line"></span><br><span class="line">// change the <span class="variable">$version</span> to your actual path</span><br><span class="line"><span class="built_in">cd</span> distribution/target/nacos-server-<span class="variable">$version</span>/nacos/bin</span><br></pre></td></tr></table></figure><h4 id="发行包安装"><a href="#发行包安装" class="headerlink" title="发行包安装"></a>发行包安装</h4><p> 您可以从 <a href="https://github.com/alibaba/nacos/releases">最新稳定版本</a> 下载 <code>nacos-server-$version.zip</code> 包。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip nacos-server-<span class="variable">$version</span>.zip 或者 tar -xvf nacos-server-<span class="variable">$version</span>.tar.gz</span><br><span class="line">  <span class="built_in">cd</span> nacos/bin</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p><strong>Linux/Unix/Mac</strong></p><p>启动命令(standalone代表着单机模式运行，非集群模式):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure><p>如果您使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash startup.sh -m standalone</span><br></pre></td></tr></table></figure><p><strong>Windows</strong></p><p>启动命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd startup.cmd</span><br></pre></td></tr></table></figure><p>或者双击startup.cmd运行文件。</p><h3 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h3><p> 打开浏览器访问：<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> </p><p><img src="1.PNG"></p><p><img src="2.PNG"></p><h3 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h3><p><strong>Linux/Unix/Mac</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh shutdown.sh</span><br></pre></td></tr></table></figure><p><strong>Windows</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd shutdown.cmd</span><br></pre></td></tr></table></figure><p>或者双击shutdown.cmd运行文件。</p><h2 id="统一依赖管理"><a href="#统一依赖管理" class="headerlink" title="统一依赖管理"></a>统一依赖管理</h2><p> Spring Cloud Alibaba 项目都是基于 Spring Cloud，而 Spring Cloud 项目又是基于 Spring Boot 进行开发，并且都是使用 Maven 做项目管理工具。在实际开发中，我们一般都会创建一个依赖管理项目作为 Maven 的 Parent 项目使用，这样做可以极大的方便我们对 Jar 包版本的统一管理。 </p><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><p>创建<code>spirng-cloud-alibaba-demo</code>项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-cloud-alibaba-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-cloud-alibaba-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Dependency Versions --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-openfeign.version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-openfeign.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-gateway.version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-gateway.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javax-servlet-api</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">javax-servlet-api</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j-api.version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">slf4j-api.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Apache Dubbo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.4.1<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">curator.version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">curator.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Apache RocketMQ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rocketmq.starter.version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">rocketmq.starter.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Maven Plugin Versions --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven-compiler-plugin.version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">maven-compiler-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven-deploy-plugin.version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">maven-deploy-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven-surefire-plugin.version</span>&gt;</span>2.21.0<span class="tag">&lt;/<span class="name">maven-surefire-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gmavenplus-plugin.version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">gmavenplus-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jacoco.version</span>&gt;</span>0.8.3<span class="tag">&lt;/<span class="name">jacoco.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Spring Dependencies --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--openfeign应该在springcloud之前--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-openfeign-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-openfeign.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.javaformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-javaformat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle-validation<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- Checkstyle rules inherited from spring-cloud-build --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">suppressionsLocation</span>&gt;</span>eclipse/checkstyle-suppressions.xml</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">suppressionsLocation</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">includeTestSourceDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeTestSourceDirectory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">consoleOutput</span>&gt;</span>true<span class="tag">&lt;/<span class="name">consoleOutput</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">failsOnError</span>&gt;</span>true<span class="tag">&lt;/<span class="name">failsOnError</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">failOnViolation</span>&gt;</span>true<span class="tag">&lt;/<span class="name">failOnViolation</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">violationSeverity</span>&gt;</span>warning<span class="tag">&lt;/<span class="name">violationSeverity</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-compiler-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">parameters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">parameters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-surefire-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">forkCount</span>&gt;</span>1<span class="tag">&lt;/<span class="name">forkCount</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">reuseForks</span>&gt;</span>false<span class="tag">&lt;/<span class="name">reuseForks</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 资源文件配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>package：<code>pom</code>，表示该项目仅当做依赖项目，没有具体的实现代码 </li></ul><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><p> 通过一个简单的示例来感受一下如何将服务注册到 Nacos，其实和 Eureka 没有太大差别。 </p><p>创建<code>spring-cloud-alibaba-provider</code>项目，此项目是依赖管理的子模块</p><h3 id="pom文件-1"><a href="#pom文件-1" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>top.awslzhang.provider.SpringCloudAlibabaProviderApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># nacos服务地址</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9091</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点检查</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudAlibabaProviderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="control"><a href="#control" class="headerlink" title="control"></a>control</h3><p>新建一个controller测试用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;provider/sout/&#123;content&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sout</span><span class="params">(<span class="meta">@PathVariable(value = &quot;content&quot;)</span> String sout)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;hello, %s ,this is Provider! by port %s&quot;</span>,sout ,port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动工程"><a href="#启动工程" class="headerlink" title="启动工程"></a>启动工程</h3><p> 通过浏览器访问 <code>http://localhost:8848/nacos</code>，即 Nacos Server 网址 </p><p><img src="3.PNG"></p><p>你会发现一个服务已经注册在服务中了，服务名为 <code>nacos-provider</code></p><p>这时打开 <code>http://127.0.0.1:9091/provider/sout/hello</code> ，你会在浏览器上看到：</p><p><img src="4.PNG"></p><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>创建<code>spring-cloud-alibaba-consumer</code>项目</p><p>此时要保证提供者服务为运行状态 ，否则调用不到。</p><h3 id="RestTemplate方式"><a href="#RestTemplate方式" class="headerlink" title="RestTemplate方式"></a>RestTemplate方式</h3><p> 服务消费者的创建与服务提供者大同小异，这里采用最原始的一种方式，即显示的使用 LoadBalanceClient 和 RestTemplate 结合的方式来访问。 </p><h4 id="pom文件-2"><a href="#pom文件-2" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9092</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Application-java-1"><a href="#Application-java-1" class="headerlink" title="Application.java"></a>Application.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudAlibabaConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>注入调用者的bean，同时设置负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Ribbon调用方式所需要配哦之</span></span><br><span class="line"><span class="comment">     * Nacos Discovery Starter 默认集成了 Ribbon ，所以对于使用了 Ribbon 做负载均衡的组件，可以直接使用 Nacos 的服务发现。</span></span><br><span class="line"><span class="comment">     * 添加 <span class="doctag">@LoadBlanced</span> 注解，使得 RestTemplate 接入 Ribbon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="control-1"><a href="#control-1" class="headerlink" title="control"></a>control</h4><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.aswlzhang.consumer.control;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="keyword">import</span> top.aswlzhang.consumer.service.NacosService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二种调用方式，Ribbon。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;test2/&#123;one&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(<span class="meta">@PathVariable(value = &quot;one&quot;)</span> String one)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://nacos-provider/provider/sout/&quot;</span> + one, String.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRestTemplate</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动工程-1"><a href="#启动工程-1" class="headerlink" title="启动工程"></a>启动工程</h4><p> 通过浏览器访问 <code>http://localhost:8848/nacos</code>，即 Nacos Server 网址 </p><p><img src="5.PNG"></p><p>你会发现一个服务已经注册在服务中了，服务名为 <code>nacos-consumer</code></p><p>这时打开 <code>http://127.0.0.1:9092/consumer/test2/ribbon</code> ，你会在浏览器上看到：</p><p><img src="6.PNG"></p><h3 id="Feign方式"><a href="#Feign方式" class="headerlink" title="Feign方式"></a>Feign方式</h3><p>Feign 是一个声明式的伪 Http 客户端，它使得写 Http 客户端变得更简单。使用 Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用 Feign 注解和 JAX-RS 注解。Feign 支持可插拔的编码器和解码器。Feign 默认集成了 Ribbon，Nacos 也很好的兼容了 Feign，默认实现了负载均衡的效果</p><ul><li>Feign 采用的是基于接口的注解</li><li>Feign 整合了 ribbon</li></ul><h4 id="pom文件-3"><a href="#pom文件-3" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="application-yml-2"><a href="#application-yml-2" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9092</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Application-java-2"><a href="#Application-java-2" class="headerlink" title="Application.java"></a>Application.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudAlibabaConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明调用的服务提供者名字</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;nacos-provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NacosService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把服务调用者的方法拿过来调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sout 输出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;provider/sout/&#123;content&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">sout</span><span class="params">(<span class="meta">@PathVariable(value = &quot;content&quot;)</span> String sout)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="control-2"><a href="#control-2" class="headerlink" title="control"></a>control</h4><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> NacosService nacosService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二种调用方式，Feign。推荐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;test1/&#123;one&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(<span class="meta">@PathVariable(value = &quot;one&quot;)</span> String one)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nacosService.sout(one);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动工程-2"><a href="#启动工程-2" class="headerlink" title="启动工程"></a>启动工程</h4><p> 通过浏览器访问 <code>http://localhost:8848/nacos</code>，即 Nacos Server 网址 </p><p><img src="5.PNG"></p><p>你会发现一个服务已经注册在服务中了，服务名为 <code>nacos-consumer</code></p><p>这时打开 <code>http://127.0.0.1:9092/consumer/test1/feign</code> ，你会在浏览器上看到：</p><p><img src="7.PNG"></p><h2 id="Sentinel分布式系统的流量防卫组件"><a href="#Sentinel分布式系统的流量防卫组件" class="headerlink" title="Sentinel分布式系统的流量防卫组件"></a>Sentinel分布式系统的流量防卫组件</h2><p>本项目演示如何使用 Sentinel starter 完成 Spring Cloud 应用调用。</p><p><a href="https://github.com/alibaba/Sentinel">Sentinel</a> 是阿里巴巴开源的分布式系统的流量防卫组件，Sentinel 把流量作为切入点，从流量控制，熔断降级，系统负载保护等多个维度保护服务的稳定性。</p><p><a href="https://github.com/spring-cloud/spring-cloud-openfeign">OpenFeign</a>是一款声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API。</p><h3 id="服务消费方"><a href="#服务消费方" class="headerlink" title="服务消费方"></a>服务消费方</h3><p>在启动示例进行演示之前，我们先了解一下 Feign 如何接入 Sentinel。</p><ol><li>首先，修改 pom.xml 文件，引入 Sentinel starter 。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>其次, 使用nacos 注册中心</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>定义FeignClient,及其降级配置</li></ol><ul><li>定义FeignClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明调用的服务提供者名字</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;nacos-provider&quot;, fallback = NacosServiceFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NacosService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把服务调用者的方法拿过来调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sout 输出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;provider/sout/&#123;content&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">sout</span><span class="params">(<span class="meta">@PathVariable(value = &quot;content&quot;)</span> String sout)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>定义具体的fallback 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosServiceFallback</span> <span class="keyword">implements</span> <span class="title">NacosService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sout</span><span class="params">(String sout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好，熔断服务！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>yml添加内容</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="服务提供方"><a href="#服务提供方" class="headerlink" title="服务提供方"></a>服务提供方</h3><ol><li>首先， 依赖nacos 注册中心</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>定义服务提供方接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;provider/sout/&#123;content&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sout</span><span class="params">(<span class="meta">@PathVariable(value = &quot;content&quot;)</span> String sout)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;hello, %s ,this is Provider! by port %s&quot;</span>,sout ,port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong>同时启动提供者和消费者</strong></p><p> 通过浏览器访问 <code>http://localhost:8848/nacos</code>，即 Nacos Server 网址 </p><p><img src="5.PNG"></p><p><strong>关闭提供者服务</strong></p><p> 通过浏览器访问 <code>http://127.0.0.1:9092/consumer/test1/one</code></p><p><img src="8.PNG"></p><p>至此，成功</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p><a href="https://github.com/alibaba/Sentinel/issues/1345">参考GitHub</a></p><p><strong>问题描述</strong></p><p>当我在集成 Sentinel 和 Feign 时</p><p>具体问题日志如下：<br>org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name ‘echoController’: Unsatisfied dependency expressed through field ‘echoService’; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘com.jmlee.hello.sentinel.feign.service.EchoService’: FactoryBean threw exception on object creation; nested exception is java.lang.AbstractMethodError: <strong>com.alibaba.cloud.sentinel.feign.SentinelContractHolder.parseAndValidateMetadata(Ljava/lang/Class;)Ljava/util/List</strong>;</p><p><strong>所用版本：</strong></p><p>Spring Cloud Version：Hoxton.SR3<br>Spring Cloud Alibaba Version：2.2.0.RELEASE</p><p><strong>解决方案</strong></p><p>By reproducing it, I found two ways to solve this:</p><ol><li>Change Spring Cloud Version from <code>Hoxton.SR3</code> to <code>Hoxton.RELEASE</code></li><li>Remain using <code>Hoxton.SR3</code>, and specified the version of <code>spring-cloud-openfeign-dependencies</code> to <code>2.2.0.RELEASE</code>.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-openfeign-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;Hoxton.SR3&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>Note that the <code>spring-cloud-openfeign-dependencies</code> should be in front of <code>spring-cloud-dependencies</code>.</p><h2 id="Sentinel控制台"><a href="#Sentinel控制台" class="headerlink" title="Sentinel控制台"></a>Sentinel控制台</h2><p>Sentinel 提供一个轻量级的开源控制台，它提供机器发现以及健康情况管理、监控（单机和集群），规则管理和推送的功能。另外，鉴权在生产环境中也必不可少。这里，我们将会详细讲述如何通过<a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#2-%E5%90%AF%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8F%B0">简单的步骤</a>就可以使用这些功能。</p><p>接下来，我们将会逐一介绍如何整合 Sentinel 客户端和 Dashboard，让它发挥最大的作用。同时我们也提供阿里云上版本控制台：<a href="https://github.com/alibaba/Sentinel/wiki/AHAS-Sentinel-%E6%8E%A7%E5%88%B6%E5%8F%B0">AHAS Sentinel 控制台</a>，您只需要几个简单的步骤，就能最直观地看到控制台如何实现这些功能。</p><p>Sentinel 控制台最少应该包含如下功能:</p><ul><li><a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#4-%E6%9F%A5%E7%9C%8B%E6%9C%BA%E5%99%A8%E5%88%97%E8%A1%A8%E4%BB%A5%E5%8F%8A%E5%81%A5%E5%BA%B7%E6%83%85%E5%86%B5"><strong>查看机器列表以及健康情况</strong></a>：收集 Sentinel 客户端发送的心跳包，用于判断机器是否在线。</li><li><a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#5-%E7%9B%91%E6%8E%A7"><strong>监控 (单机和集群聚合)</strong></a>：通过 Sentinel 客户端暴露的监控 API，定期拉取并且聚合应用监控信息，最终可以实现秒级的实时监控。</li><li><a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#6-%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86%E5%8F%8A%E6%8E%A8%E9%80%81"><strong>规则管理和推送</strong></a>：统一管理推送规则。</li><li><a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#%E9%89%B4%E6%9D%83"><strong>鉴权</strong></a>：生产环境中鉴权非常重要。这里每个开发者需要根据自己的实际情况进行定制。</li></ul><h3 id="启动控制台"><a href="#启动控制台" class="headerlink" title="启动控制台"></a>启动控制台</h3><h4 id="获取Sentinel控制台"><a href="#获取Sentinel控制台" class="headerlink" title="获取Sentinel控制台"></a>获取Sentinel控制台</h4><p>您可以从 <a href="https://github.com/alibaba/Sentinel/releases">release 页面</a> 下载最新版本的控制台 jar 包。</p><p>您也可以从最新版本的源码自行构建 Sentinel 控制台：</p><ul><li>下载 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-dashboard">控制台</a> 工程</li><li>使用以下命令将代码打包成一个 fat jar: <code>mvn clean package</code></li></ul><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><blockquote><p><strong>注意</strong>：启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本。</p></blockquote><p>使用如下命令启动控制台：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port&#x3D;8080 -Dcsp.sentinel.dashboard.server&#x3D;localhost:8080 -Dproject.name&#x3D;sentinel-dashboard -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p>其中 <code>-Dserver.port=8080</code> 用于指定 Sentinel 控制台端口为 <code>8080</code>。</p><p>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的<strong>登录</strong>功能，默认用户名和密码都是 <code>sentinel</code>。可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#%E9%89%B4%E6%9D%83">鉴权模块文档</a> 配置用户名和密码。</p><blockquote><p>注：若您的应用为 Spring Boot 或 Spring Cloud 应用，您可以通过 Spring 配置文件来指定配置，详情请参考 <a href="https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Sentinel">Spring Cloud Alibaba Sentinel 文档</a>。</p></blockquote><h3 id="连接控制台"><a href="#连接控制台" class="headerlink" title="连接控制台"></a>连接控制台</h3><p>yml文件中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">      <span class="comment"># 与控制台交流的端口,自定义</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>再手动触发熔断时，查看控制台</p><p><img src="9.PNG"></p><p>qps为每秒查询的数量</p><h2 id="路由网关"><a href="#路由网关" class="headerlink" title="路由网关"></a>路由网关</h2><p>Spring Cloud Gateway 是 Spring 官方基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，Spring Cloud Gateway 旨在为微服务架构提供一种简单而有效的统一的 API 路由管理方式。</p><h3 id="pom文件-4"><a href="#pom文件-4" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要增加了 <code>org.springframework.cloud:spring-cloud-starter-gateway</code> 依赖</p><h3 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h3><ul><li>Spring Cloud Gateway 不使用 Web 作为服务器，而是 <strong>使用 WebFlux 作为服务器</strong>，Gateway 项目已经依赖了 <code>starter-webflux</code>，所以这里 <strong>千万不要依赖 <code>starter-web</code></strong></li><li>由于过滤器等功能依然需要 Servlet 支持，故这里还需要依赖 <code>javax.servlet:javax.servlet-api</code></li></ul><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@FeignClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudAlibabaGatewayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">        <span class="attr">discovery:</span></span><br><span class="line">          <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="comment"># 路由网关配置</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 设置与服务注册发现组件结合，这样可以采用服务名的路由策略</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 配置路由规则</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 采用自定义路由 ID（有固定用法，不同的 id 有不同的功能，详见：https://cloud.spring.io/spring-cloud-gateway/2.0.x/single/spring-cloud-gateway.html#gateway-route-filters）</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">NACOS-CONSUMER</span></span><br><span class="line">          <span class="comment"># 采用 LoadBalanceClient 方式请求，以 lb:// 开头，后面的是注册在 Nacos 上的服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://nacos-consumer</span></span><br><span class="line">          <span class="comment"># Predicate 翻译过来是“谓词”的意思，必须，主要作用是匹配用户的请求，有很多种用法</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="comment"># Method 方法谓词，这里是匹配 GET 和 POST 请求</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br><span class="line"><span class="comment">#        - id: NACOS-CONSUMER-FEIGN</span></span><br><span class="line"><span class="comment">#          uri: lb://nacos-consumer-feign</span></span><br><span class="line"><span class="comment">#          predicates:</span></span><br><span class="line"><span class="comment">#            - Method=GET,POST</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目前无效</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目前无效</span></span><br><span class="line"><span class="comment"># 配置日志级别，方别调试</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.cloud.gateway:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>依次运行 Nacos 服务、<code>NacosProviderApplication</code>、<code>NacosConsumerApplication</code>、<code>GatewayApplication</code></p><p>打开浏览器访问：<a href="http://localhost:9000/nacos-consumer/consumer/test1/lllllkkk%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BA">http://localhost:9000/nacos-consumer/consumer/test1/lllllkkk浏览器显示</a></p><p><img src="10.PNG"></p><p><strong>注意：请求方式是 <code>http://路由网关IP:路由网关Port/服务名/**</code></strong></p><p>至此说明 Spring Cloud Gateway 的路由功能配置成功</p><h2 id="路由网关全局过滤功能"><a href="#路由网关全局过滤功能" class="headerlink" title="路由网关全局过滤功能"></a>路由网关全局过滤功能</h2><p>全局过滤器作用于所有的路由，不需要单独配置，我们可以用它来实现很多统一化处理的业务需求，比如权限认证，IP 访问限制等等。</p><p>基于上面的gateway项目修改</p><h3 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h3><p><img src="1.jpg"></p><p>Spring Cloud Gateway 基于 Project Reactor 和 WebFlux，采用响应式编程风格，打开它的 Filter 的接口 GlobalFilter 你会发现它只有一个方法 filter。</p><h3 id="创建全局过滤器"><a href="#创建全局过滤器" class="headerlink" title="创建全局过滤器"></a>创建全局过滤器</h3><p>实现 <code>GlobalFilter</code>, <code>Ordered</code> 接口并在类上增加 <code>@Component</code> 注解就可以使用过滤功能了，非常简单方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鉴权过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        String token = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> || token.isEmpty()) &#123;</span><br><span class="line">            ServerHttpResponse response = exchange.getResponse();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 封装错误信息</span></span><br><span class="line">            Map&lt;String, Object&gt; responseData = Maps.newHashMap();</span><br><span class="line">            responseData.put(<span class="string">&quot;code&quot;</span>, <span class="number">401</span>);</span><br><span class="line">            responseData.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;非法请求&quot;</span>);</span><br><span class="line">            responseData.put(<span class="string">&quot;cause&quot;</span>, <span class="string">&quot;Token is empty&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将信息转换为 JSON</span></span><br><span class="line">                ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                <span class="keyword">byte</span>[] data = objectMapper.writeValueAsBytes(responseData);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 输出错误信息到页面</span></span><br><span class="line">                DataBuffer buffer = response.bufferFactory().wrap(data);</span><br><span class="line">                response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                response.getHeaders().add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> response.writeWith(Mono.just(buffer));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过滤器的执行顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><p>打开浏览器访问：<a href="http://localhost:9000/nacos-consumer/consumer/test1/lllllkkk%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BA">http://localhost:9000/nacos-consumer/consumer/test1/lllllkkk浏览器显示</a></p><p><img src="11.PNG"></p><p>至此，成功。</p><h1 id="更好的去做微服务"><a href="#更好的去做微服务" class="headerlink" title="更好的去做微服务"></a>更好的去做微服务</h1><p>如何更好的去做微服务。</p><a href="/2020/03/24/%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/" title="请看此篇文章">请看此篇文章</a>  <h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">Nacos官方文档</a></p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-examples">Spring Cloud Alibaba Example Github</a></p><p><a href="https://github.com/XiangJie-Zhang/spring-cloud-alibaba-demo">Spring Cloud Alibaba Demo Github</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务架构解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构解决方案之SpringCLoudAlibaba</title>
      <link href="2020/03/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8BSpringCLoudAlibaba/"/>
      <url>2020/03/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8BSpringCLoudAlibaba/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p> <strong>2018 年 10 月 31 日的凌晨，这个伟大的日子里，Spring Cloud Alibaba 正式入驻了 Spring Cloud 官方孵化器，并在 Maven 中央库发布了第一个版本。</strong> </p><a id="more"></a><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul><li><strong>服务限流降级</strong>：默认支持 Servlet、Feign、RestTemplate、Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li><strong>Sentinel</strong>：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li><li><strong>Nacos</strong>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li><strong>RocketMQ</strong>：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</li><li><strong>Alibaba Cloud ACM</strong>：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</li><li><strong>Alibaba Cloud OSS</strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>Alibaba Cloud SchedulerX</strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</li></ul><h1 id="如何解决微服务四大问题"><a href="#如何解决微服务四大问题" class="headerlink" title="如何解决微服务四大问题"></a>如何解决微服务四大问题</h1><h2 id="如何访问这些服务"><a href="#如何访问这些服务" class="headerlink" title="如何访问这些服务"></a>如何访问这些服务</h2><p><a href="https://spring.io/projects/spring-cloud-gateway">Spring Cloud Gateway</a> 是spring cloud 官方开源的一个在SpringMVC 上可以构建API网关的库。</p><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/">官方文档</a></p><h3 id="什么是-Spring-Cloud-Gateway"><a href="#什么是-Spring-Cloud-Gateway" class="headerlink" title="什么是 Spring Cloud Gateway"></a>什么是 Spring Cloud Gateway</h3><p>Spring Cloud Gateway 是 Spring 官方基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，Spring Cloud Gateway 旨在为微服务架构提供一种简单而有效的统一的 API 路由管理方式。<strong>Spring Cloud Gateway 作为 Spring Cloud 生态系中的网关，目标是替代 Netflix ZUUL</strong>，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p><p><img src="2.jpg"></p><p>Zuul 持续跳票 1 年多，1.x 是一个基于阻塞 IO 的 API Gateway 以及 Servlet；直到 2018 年 5 月，Zuul 2.x（基于 <strong>Netty</strong>，也是非阻塞的，支持长连接）才发布，但 Spring Cloud 暂时还没有整合计划。Spring Cloud Gateway (<strong>基于spring webflux，也是基于Netty</strong>，异步非阻塞)比 Zuul 1.x 系列的性能和功能整体要好。</p><h3 id="Spring-Cloud-Gateway-功能特征"><a href="#Spring-Cloud-Gateway-功能特征" class="headerlink" title="Spring Cloud Gateway 功能特征"></a>Spring Cloud Gateway 功能特征</h3><ul><li>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0</li><li>动态路由</li><li>Predicates 和 Filters 作用于特定路由</li><li><del>集成 Hystrix 断路器</del></li><li>集成 Spring Cloud DiscoveryClient</li><li>易于编写的 Predicates 和 Filters</li><li>限流</li><li>路径重写</li></ul><h3 id="Spring-Cloud-Gateway-工程流程"><a href="#Spring-Cloud-Gateway-工程流程" class="headerlink" title="Spring Cloud Gateway 工程流程"></a>Spring Cloud Gateway 工程流程</h3><p><img src="3.jpg"></p><p>客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。</p><p>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（<code>pre</code>）或之后（<code>post</code>）执行业务逻辑。</p><h2 id="服务之间如何通信"><a href="#服务之间如何通信" class="headerlink" title="服务之间如何通信"></a>服务之间如何通信</h2><h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><p>服务消费者的创建与服务提供者大同小异，这里采用最原始的一种方式，即显示的使用 LoadBalanceClient 和 RestTemplate 结合的方式来访问。 </p><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><p>Feign 是一个声明式的伪 Http 客户端，它使得写 Http 客户端变得更简单。使用 Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用 Feign 注解和 JAX-RS 注解。Feign 支持可插拔的编码器和解码器。Feign 默认集成了 Ribbon，Nacos 也很好的兼容了 Feign，默认实现了负载均衡的效果</p><ul><li>Feign 采用的是基于接口的注解</li><li>Feign 整合了 ribbon</li></ul><h2 id="如此多服务，如何实现"><a href="#如此多服务，如何实现" class="headerlink" title="如此多服务，如何实现"></a>如此多服务，如何实现</h2><p>Spring Cloud Alibaba使用了自己的组件Nacos</p><p><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">参照</a></p><h3 id="什么是Nacos"><a href="#什么是Nacos" class="headerlink" title="什么是Nacos"></a>什么是Nacos</h3><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p>一般集群部署！</p><h3 id="基本架构及概念"><a href="#基本架构及概念" class="headerlink" title="基本架构及概念"></a>基本架构及概念</h3><p><img src="1.jpg"></p><p><strong>服务</strong></p><p> 服务是指一个或一组软件功能（例如特定信息的检索或一组操作的执行），其目的是不同的客户端可以为不同的目的重用（例如通过跨进程的网络调用）。Nacos 支持主流的服务生态，如 Kubernetes Service、gRPC|Dubbo RPC Service 或者 Spring Cloud RESTful Service </p><p><strong>服务注册中心</strong></p><p> 服务注册中心，它是服务，其实例及元数据的数据库。服务实例在启动时注册到服务注册表，并在关闭时注销。服务和路由器的客户端查询服务注册表以查找服务的可用实例。服务注册中心可能会调用服务实例的健康检查 API 来验证它是否能够处理请求。 </p><p><strong>服务元数据</strong></p><p> 服务元数据是指包括服务端点(endpoints)、服务标签、服务版本号、服务实例权重、路由规则、安全策略等描述服务的数据 </p><p><strong>服务提供者</strong></p><p>是指提供可复用和可调用服务的应用方</p><p><strong>服务消费方</strong></p><p>是指会发起对某个服务调用的应用方</p><p><strong>配置</strong></p><p> 在系统开发过程中通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成这个步骤。配置变更是调整系统运行时的行为的有效手段之一。 </p><p><strong>配置管理</strong></p><p> 在数据中心中，系统中所有配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等所有与配置相关的活动统称为配置管理 </p><p><strong>名字服务</strong></p><p> 提供分布式系统中所有对象(Object)、实体(Entity)的“名字”到关联的元数据之间的映射管理服务，例如 ServiceName -&gt; Endpoints Info, Distributed Lock Name -&gt; Lock Owner/Status Info, DNS Domain Name -&gt; IP List, 服务发现和 DNS 就是名字服务的2大场景。 </p><p><strong>配置服务</strong></p><p>在服务或者应用运行过程中，提供动态配置或者元数据以及配置管理的服务提供者。</p><h2 id="服务挂了怎么办"><a href="#服务挂了怎么办" class="headerlink" title="服务挂了怎么办"></a>服务挂了怎么办</h2><p>Sentinel: 分布式系统的流量防卫兵</p><h3 id="什么是Sentinel"><a href="#什么是Sentinel" class="headerlink" title="什么是Sentinel"></a>什么是Sentinel</h3><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p><img src="1.png"></p><p>Sentinel 具有以下特征:</p><ul><li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p><strong>Sentinel 分为两个部分:</strong></p><ul><li>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li><li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li></ul><h1 id="更好的去做微服务"><a href="#更好的去做微服务" class="headerlink" title="更好的去做微服务"></a>更好的去做微服务</h1><h2 id="分布式配置中心"><a href="#分布式配置中心" class="headerlink" title="分布式配置中心"></a>分布式配置中心</h2><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。</p><p><strong>Nacos Config</strong></p><p>Nacos 提供用于存储配置和其他元数据的 key/value 存储，为分布式系统中的外部化配置提供服务器端和客户端支持。使用 Spring Cloud Alibaba Nacos Config，您可以在 Nacos Server 集中管理你 Spring Cloud 应用的外部属性配置。</p><p>Spring Cloud Alibaba Nacos Config 是 Spring Cloud Config Server 和 Client 的替代方案，客户端和服务器上的概念与 Spring Environment 和 PropertySource 有着一致的抽象，在特殊的 bootstrap 阶段，配置被加载到 Spring 环境中。当应用程序通过部署管道从开发到测试再到生产时，您可以管理这些环境之间的配置，并确保应用程序具有迁移时需要运行的所有内容</p>]]></content>
      
      
      <categories>
          
          <category> 微服务架构解决方案 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Solr</title>
      <link href="2020/03/19/SpringBoot%E6%95%B4%E5%90%88Solr/"/>
      <url>2020/03/19/SpringBoot%E6%95%B4%E5%90%88Solr/</url>
      
        <content type="html"><![CDATA[<h1 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h1><p>Solr简介：</p><a href="/2020/03/18/solr%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/" title="点击这里查看">点击这里查看</a><a id="more"></a><h1 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="1.PNG"></p><h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2974382656974325873L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@Field(&quot;item_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Field(&quot;item_sex&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="meta">@Field(&quot;item_address&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@Field(&quot;item_host&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer host;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">solr:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">http://localhost:8983/solr/mycore/</span></span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrServiceImpl</span> <span class="keyword">implements</span> <span class="title">SolrService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span> ; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">            user.setName(<span class="string">&quot;jack&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span>( i % <span class="number">2</span> ==<span class="number">0</span>) &#123;</span><br><span class="line">                user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                user.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            user.setAddress(<span class="string">&quot;兰州市安宁区666&quot;</span>+i);</span><br><span class="line">            user.setHost(<span class="number">73040</span>+i);</span><br><span class="line">            list.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SolrService solrService;</span><br><span class="line">    <span class="keyword">private</span> SolrClient solrClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量增加</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addUsers&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUsers</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = solrService.addUser();</span><br><span class="line"></span><br><span class="line">        solrClient.addBeans(users);</span><br><span class="line">        solrClient.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单个增加</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="string">&quot;456788&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;王强&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京市&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        user.setHost(<span class="number">456752</span>);</span><br><span class="line">        solrClient.addBean(user);</span><br><span class="line">        solrClient.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据di查询</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getByIdFromSolr/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getByIdFromSolr</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            SolrServerException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据id查询内容,获取到的是一个SolrDocument（MAP）对象</span></span><br><span class="line">        SolrDocument solrDocument = solrClient.getById(id);</span><br><span class="line">        <span class="comment">//获取filedName，获取到上述Map的所有key</span></span><br><span class="line">        Collection&lt;String&gt; fieldNames = solrDocument.getFieldNames();</span><br><span class="line">        <span class="comment">//获取file名和内容 MAP</span></span><br><span class="line">        Map&lt;String, Object&gt; fieldValueMap = solrDocument.getFieldValueMap();</span><br><span class="line"></span><br><span class="line"><span class="comment">//            int childDocumentCount = solrDocument.getChildDocumentCount();</span></span><br><span class="line"></span><br><span class="line">        List&lt;SolrDocument&gt; childDocuments = solrDocument.getChildDocuments();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;byId==================&quot;</span> + solrDocument);</span><br><span class="line">        System.out.println(<span class="string">&quot;MMMMMMM&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;fieldNames==================&quot;</span> + fieldNames);</span><br><span class="line">        System.out.println(<span class="string">&quot;MMMMMMM&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;fieldValueMap==================&quot;</span> + fieldValueMap);</span><br><span class="line"><span class="comment">//            System.out.println(&quot;childDocumentCount==================&quot;+childDocumentCount);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MMMMMMM&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;childDocuments==================&quot;</span> + childDocuments);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据di删除</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</span><br><span class="line">        <span class="comment">//根据id删除信息</span></span><br><span class="line">        UpdateResponse updateResponse = solrClient.deleteById(id);</span><br><span class="line">        <span class="comment">//执行的时间</span></span><br><span class="line">        <span class="keyword">long</span> elapsedTime = updateResponse.getElapsedTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> qTime = updateResponse.getQTime();</span><br><span class="line">        <span class="comment">//请求地址</span></span><br><span class="line">        String requestUrl = updateResponse.getRequestUrl();</span><br><span class="line">        <span class="comment">//请求的结果&#123;responseHeader=&#123;status=0,QTime=2&#125;&#125;</span></span><br><span class="line">        NamedList&lt;Object&gt; response = updateResponse.getResponse();</span><br><span class="line">        <span class="comment">//请求结果的头&#123;status=0,QTime=2&#125;</span></span><br><span class="line">        NamedList responseHeader = updateResponse.getResponseHeader();</span><br><span class="line">        <span class="comment">//请求的状态 0</span></span><br><span class="line">        <span class="keyword">int</span> status = updateResponse.getStatus();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;elapsedTime===========&quot;</span> + elapsedTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;qTime===========&quot;</span> + qTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;requestUrl===========&quot;</span> + requestUrl);</span><br><span class="line">        System.out.println(<span class="string">&quot;response===========&quot;</span> + response);</span><br><span class="line">        System.out.println(<span class="string">&quot;responseHeader===========&quot;</span> + responseHeader);</span><br><span class="line">        System.out.println(<span class="string">&quot;status===========&quot;</span> + status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryFromSolr&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">queryFromSolr</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</span><br><span class="line">        <span class="comment">//第一种方式</span></span><br><span class="line"><span class="comment">//        Map&lt;String, String&gt; queryParamMap = new HashMap&lt;String, String&gt;();</span></span><br><span class="line"><span class="comment">//        queryParamMap.put(&quot;q&quot;, &quot;*:*&quot;);</span></span><br><span class="line"><span class="comment">//        queryParamMap.put(&quot;f1&quot;,&quot;id,name&quot;);</span></span><br><span class="line"><span class="comment">//        queryParamMap.put(&quot;sort&quot;,&quot;id asc&quot;);</span></span><br><span class="line"><span class="comment">//        MapSolrParams mapSolrParams = new MapSolrParams(queryParamMap);</span></span><br><span class="line"><span class="comment">//        solrClient.query(mapSolrParams);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种方式</span></span><br><span class="line">        SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line">        <span class="comment">// 查询所有域</span></span><br><span class="line"><span class="comment">//        solrQuery.setQuery(&quot;*:*&quot;);</span></span><br><span class="line">        <span class="comment">// 查询条件</span></span><br><span class="line">        solrQuery.add(<span class="string">&quot;q&quot;</span>, <span class="string">&quot;item_address:兰州&quot;</span>);</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        solrQuery.setSort(<span class="string">&quot;id&quot;</span>, SolrQuery.ORDER.asc);</span><br><span class="line">        <span class="comment">//设置查询的条数</span></span><br><span class="line">        solrQuery.setRows(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//设置查询的开始</span></span><br><span class="line">        solrQuery.setStart(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//设置高亮</span></span><br><span class="line">        solrQuery.setHighlight(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置高亮的字段</span></span><br><span class="line">        solrQuery.addHighlightField(<span class="string">&quot;item_name&quot;</span>);</span><br><span class="line">        solrQuery.addHighlightField(<span class="string">&quot;item_address&quot;</span>);</span><br><span class="line">        <span class="comment">//设置高亮的样式</span></span><br><span class="line">        solrQuery.setHighlightSimplePre(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>);</span><br><span class="line">        solrQuery.setHighlightSimplePost(<span class="string">&quot;&lt;/font&gt;&quot;</span>);</span><br><span class="line">        System.out.println(solrQuery);</span><br><span class="line">        QueryResponse response = solrClient.query(solrQuery);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回高亮显示结果</span></span><br><span class="line">        Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; highlighting = response.getHighlighting();</span><br><span class="line">        <span class="comment">//response.getResults();查询返回的结果</span></span><br><span class="line">        SolrDocumentList documentList = response.getResults();</span><br><span class="line">        <span class="keyword">for</span> (SolrDocument solrDocument : documentList) &#123;</span><br><span class="line">            <span class="comment">// 设置高亮显示</span></span><br><span class="line">            <span class="keyword">if</span> (!(<span class="keyword">null</span> == highlighting.get(solrDocument.get(<span class="string">&quot;id&quot;</span>)))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (highlighting.get(solrDocument.get(<span class="string">&quot;id&quot;</span>)).get(<span class="string">&quot;item_name&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    solrDocument.setField(<span class="string">&quot;item_name&quot;</span>,</span><br><span class="line">                            highlighting.get(solrDocument.get(<span class="string">&quot;id&quot;</span>)).get(<span class="string">&quot;item_name&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (highlighting.get(solrDocument.get(<span class="string">&quot;id&quot;</span>)).get(<span class="string">&quot;item_address&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    solrDocument.setField(<span class="string">&quot;item_address&quot;</span>,</span><br><span class="line">                            highlighting.get(solrDocument.get(<span class="string">&quot;id&quot;</span>)).get(<span class="string">&quot;item_address&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;solrDocument==============&quot;</span> + solrDocument);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> documentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSolrService</span><span class="params">(SolrService solrService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.solrService = solrService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSolrClient</span><span class="params">(SolrClient solrClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.solrClient = solrClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-solr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p><img src="2.PNG"></p>]]></content>
      
      
      <categories>
          
          <category> 全文搜索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> Solr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solr搜索引擎</title>
      <link href="2020/03/18/solr%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
      <url>2020/03/18/solr%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Solr"><a href="#什么是Solr" class="headerlink" title="什么是Solr"></a>什么是Solr</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Solr 是一个开源搜索平台，用于构建搜索应用程序。它建立在 Lucene (全文搜索引擎)之上。Solr 是企业级的，快速的和高度可扩展的。使用 Solr 构建的应用程序非常复杂，可提供高性能。</p><a id="more"></a><p>为了在 CNET 网络的公司网站上添加搜索功能，Yonik Seely 于 2004 年创建了 Solr。并在 2006 年 1 月，它成为 Apache 软件基金会下的一个开源项目。并于2016年发布最新版本 Solr 6.0，支持并行SQL查询的执行。</p><p>Solr 可以和 Hadoop 一起使用。由于 Hadoop 处理大量数据，Solr 帮助我们从这么大的源中找到所需的信息。不仅限于搜索，Solr 也可以用于存储目的。像其他 NoSQL 数据库一样，它是一种非关系数据存储和处理技术。</p><p>总之，Solr 是一个可扩展的，可部署，搜索/存储引擎，优化搜索大量以文本为中心的数据库。</p><h2 id="Apache-Solr-特点"><a href="#Apache-Solr-特点" class="headerlink" title="Apache Solr 特点"></a>Apache Solr 特点</h2><p>Solr 是 Lucene 的 Java API 的包装。因此，使用 Solr，可以利用 Lucene 的所有功能。</p><ul><li>Restful APIs − 要与 Solr 通信，并非一定需要有 Java 编程技能。相反，您可以使用 RESTful 服务与它通信。可使用文件格式(如XML，JSON和.CSV)在 Solr 中作为输入文档，并以相同的文件格式获取结果。</li><li>全文搜索 - Solr 提供了全文搜索所需的所有功能，例如令牌，短语，拼写检查，通配符和自动完成。</li><li>企业准备 - 根据企业/组织的需要，Solr 可以部署在任何类型的系统(大或小)，如独立，分布式，云等。</li><li>灵活和可扩展 - 通过扩展 Java 类并相应配置，可以轻松地定制 Solr 的组件。</li><li>NoSQL 数据库 - Solr 也可以用作大数据量级的 NOSQL 数据库，可以沿着集群分布搜索任务。</li><li>管理界面 - Solr 提供了一个易于使用，用户友好，功能强大的用户界面，使用它可以执行所有可能的任务，如管理日志，添加，删除，更新和搜索文档。</li><li>高度可扩展 - 在使用 Solr 与 Hadoop 时，我们可以通过添加副本来扩展其容量。</li><li>以文本为中心并按相关性排序 - Solr 主要用于搜索文本文档，结果根据与用户查询的相关性按顺序传送。</li></ul><p>与 Lucene 不同，在使用 Apache Solr 时，可不需要具有 Java 编程技能。它提供了一个完整的准备部署服务，以构建一个自动完成的搜索框，Lucene 是不提供的。 使用 Solr 可以扩展，分配和管理大规模(大数据)应用程序的索引。</p><h1 id="什么是搜索引擎"><a href="#什么是搜索引擎" class="headerlink" title="什么是搜索引擎"></a>什么是搜索引擎</h1><p>搜索引擎是指一个庞大的互联网资源数据库，如网页，新闻组，程序，图像等。它有助于在万维网上定位信息。用户可以通过以关键字或短语的形式将查询传递到搜索引擎中来搜索信息。然后搜索引擎搜索其数据库并向用户返回相关链接。</p><h2 id="搜索引擎组件"><a href="#搜索引擎组件" class="headerlink" title="搜索引擎组件"></a>搜索引擎组件</h2><p>一般来说，搜索引擎有三个基本组件</p><ul><li>Web爬虫 - Web爬虫也称为蜘蛛或机器人。 它是一个收集网络信息的软件组件。</li><li>数据库 - Web上的所有信息都存储在数据库中。它们包含大量的 Web 资源。</li><li>搜索接口 - 此组件是用户和数据库之间的接口。它帮助用户搜索数据库。</li></ul><h2 id="搜索引擎是如何工作的？"><a href="#搜索引擎是如何工作的？" class="headerlink" title="搜索引擎是如何工作的？"></a>搜索引擎是如何工作的？</h2><p>任何搜索应用程序都需要执行以下一些或全部操作</p><table><thead><tr><th>步骤</th><th>标题或名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>获取原始内容</td><td>任何搜索应用程序的第一步是收集要进行搜索的目标内容</td></tr><tr><td>2</td><td>构建文档</td><td>从原始内容构建文档，让搜索应用程序可以很容易地理解和解释</td></tr><tr><td>3</td><td>分析文档</td><td>在索引开始之前，将对文档进行分析</td></tr><tr><td>4</td><td>索引文档</td><td>当文档被构建和分析后，下一步是对它们建立索引，以便可以基于特定键而不是文档的全部内容来检索该文档。索引类似于在书开始页或末尾处的目录索引，其中常见单词以其页码显示，使得这些单词可以快速跟踪，而不是搜索整本书</td></tr><tr><td>5</td><td>用于搜索的用户接口</td><td>当索引数据库就绪，应用程序可以执行搜索操作。 为了帮助用户进行搜索，应用必须提供用户接口，用户可以在其中输入文本并启动搜索过程</td></tr><tr><td>6</td><td>构建查询</td><td>当用户做出搜索文本的请求，应用程序应该使用该文本来准备查询对象，然后可以使用该查询对象来查询索引数据库以获得相关的细节</td></tr><tr><td>7</td><td>搜索查询</td><td>使用查询对象，检查索引数据库以获取相关详细信息和内容文档</td></tr><tr><td>8</td><td>渲染结果</td><td>当收到所需的结果，应用程序应决定如何使用其用户界面向用户显示结果</td></tr></tbody></table><h1 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>solr，<a href="https://lucene.apache.org/solr/downloads.html%E6%88%96%E8%80%85http://archive.apache.org/dist/lucene/solr/">https://lucene.apache.org/solr/downloads.html或者http://archive.apache.org/dist/lucene/solr/</a></li><li>ik-analyzer，<a href="https://github.com/magese/ik-analyzer-solr">https://github.com/magese/ik-analyzer-solr</a></li></ul><h2 id="solr"><a href="#solr" class="headerlink" title="solr"></a>solr</h2><p>运行环境：solr需要java8环境，且需要在环境变量中添加 JAVA_HOME变量。</p><p>　在solr5以前solr的启动都有tomcat作为容器，但是从solr5以后solr内部集成jetty服务器，可以通过bin目录中脚本直接启动。就是从solr5以后跟solr4最大的区别是被发布成一个独立的应用。</p><p>　　在solr5之后solr其实特别容易安装，有安装包，之后在解压，直接启动bin下solr，solr就这样完成的启动了。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\solr-7.7.0\bin&gt;solr.cmd start</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated <span class="keyword">in</span> version 9.0 and will likely be removed <span class="keyword">in</span> a future release.</span><br><span class="line">INFO  - 2020-03-19 08:52:46.585; org.apache.solr.util.configuration.SSLCredentialProviderFactory; Processing SSL Credential Provider chain: env;sysprop</span><br><span class="line">Waiting up to 30 to see Solr running on port 8983</span><br><span class="line">Started Solr server on port 8983. Happy searching!</span><br></pre></td></tr></table></figure><p>即可正常访问：</p><p><img src="1.PNG"></p><h2 id="ik-analyzer"><a href="#ik-analyzer" class="headerlink" title="ik-analyzer"></a>ik-analyzer</h2><p>分词技术就是搜索引擎针对用户提交查询的关键词串进行的查询处理后根据用户的关键词串用各种匹配方法进行分词的一种技术。</p><p>IKAnalyzer 是一个开源的，基于 Java 语言开发的轻量级的中文分词工具包，基于文本匹配，不需要投入大量人力进行训练和标注可以自定词典，方便加入特定领域的词语，能分出多粒度的结果</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>参考<a href="https://github.com/magese/ik-analyzer-solr7">IKAnalyzer使用说明</a></p><h3 id="下载并解压IKAnalyzer"><a href="#下载并解压IKAnalyzer" class="headerlink" title="下载并解压IKAnalyzer"></a>下载并解压IKAnalyzer</h3><p>使用上面的下载地址下载IK，并解压，将IK目录下src/main/resources中的5个文件拷贝到Solr的\server\solr-webapp\webapp\WEB-INF\classes目录下（没有classes，自己创建）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">① IKAnalyzer.cfg.xml </span><br><span class="line">② ext.dic </span><br><span class="line">③ stopword.dic </span><br><span class="line">④ ik.conf </span><br><span class="line">⑤ dynamicdic.txt </span><br></pre></td></tr></table></figure><p>将下载后的ik，打开所在目录，再有pom文件的目录，手动mvn 打包，打包后将jar拷贝到Solr的WEB-INF/lib目录下</p><p><img src="2.PNG"></p><h3 id="配置IK中文分词器"><a href="#配置IK中文分词器" class="headerlink" title="配置IK中文分词器"></a>配置IK中文分词器</h3><p>schema文件在每个域中的conf文件夹中，配置ik中文分词器，需要为每个域单独配置。首先请创建core，修改后，重启生效。</p><p>schema中加入IK分词器配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ik分词器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">&quot;text_ik&quot;</span> <span class="attr">class</span>=<span class="string">&quot;solr.TextField&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot;</span> <span class="attr">useSmart</span>=<span class="string">&quot;false&quot;</span> <span class="attr">conf</span>=<span class="string">&quot;ik.conf&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">&quot;query&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot;</span> <span class="attr">useSmart</span>=<span class="string">&quot;true&quot;</span> <span class="attr">conf</span>=<span class="string">&quot;ik.conf&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="core"><a href="#core" class="headerlink" title="core"></a>core</h2><p>core是Solr中的名词，相当于关系型数据库中的表，这里称之为域。在solr-ui界面不能直接创建core，需要在Solr项目目录结构中的/server/solr文件夹中创建一个新的文件夹。然后在ui界面创建core界面的instanceDir中输入，即可</p><p><strong>创建solr核心core</strong></p><p><img src="3.png"></p><ul><li>name：自定义的名字，建议和instanceDir保持一致</li><li>instanceDir： solrhome目录下的实例类目</li><li>dataDir：默认填data即可</li><li>config：指定配置文件，new_core/conf/solrconfig.xml</li><li>schema：指定schema.xml文件，new_core/conf/schema文件(实际上是managed-schema文件)</li></ul><p><strong>点击add</strong></p><p><img src="4.png"></p><p>这里看到上面提示 无法找打solrconfig.xml文件。这里注意下：创建的instanceDir和dataDir <strong>需存在</strong>，就是我们需在\server\solr 目录下先去创建目录</p><p>这里看到上面提示 无法找打solrconfig.xml文件。这里注意下：创建的instanceDir和dataDir 需存在，就是我们需在solr-7.4.0\server\solr 目录下先去创建目录</p><p><img src="11.png"></p><p>此目录下的conf文件我们可从server\solr\configsets\sample_techproducts_configs中复制</p><p><img src="12.png"></p><p>当创建与复制好后，我们在再页面上创建core  创建成功</p><p>创建成功后new_core目录下会生成你的core和一个properties文件</p><p><img src="13.png"></p><p>这个时候在去访问就可以添加上了。</p><p><img src="14.png"></p><h3 id="推荐使用命令创建"><a href="#推荐使用命令创建" class="headerlink" title="推荐使用命令创建"></a>推荐使用命令创建</h3><p>　先贴出官网怎么说的</p><p><img src="15.png"></p><p>首先打开dos命令窗口启动solr，启动成功后 输入 solr create -c test</p><p><img src="16.png"></p><p>点击回车执行，执行完成后会提示出 创建成功。</p><p><img src="17.png"></p><p>在server\solr目录下就会生成你所创建的core了</p><p><img src="18.png"></p><p>去浏览器验证查看　　成功</p><p><img src="19.png"></p><h1 id="Solr基本操作"><a href="#Solr基本操作" class="headerlink" title="Solr基本操作"></a>Solr基本操作</h1><h2 id="功能界面"><a href="#功能界面" class="headerlink" title="功能界面"></a>功能界面</h2><h3 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h3><p><img src="20.png"></p><h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><p><img src="21.png"></p><h3 id="Core-Admin"><a href="#Core-Admin" class="headerlink" title="Core Admin"></a>Core Admin</h3><p><img src="22.png"></p><h3 id="Thread-Dump"><a href="#Thread-Dump" class="headerlink" title="Thread Dump"></a>Thread Dump</h3><p><img src="23.png"></p><h3 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h3><p><img src="24.png"></p><h2 id="分析功能"><a href="#分析功能" class="headerlink" title="分析功能"></a>分析功能</h2><h3 id="修改-managed-schema-配置业务系统字段"><a href="#修改-managed-schema-配置业务系统字段" class="headerlink" title="修改 managed-schema 配置业务系统字段"></a>修改 managed-schema 配置业务系统字段</h3><p>需要用到的业务字段如下：</p><ul><li>商品 ID</li><li>商品分类 ID</li><li>分类名称</li><li>商品名称</li><li>商品卖点</li><li>商品详情</li></ul><p>由于 Solr 中自带 id 字段所以无需添加，其它字段需要手动添加 Solr 字段</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 字段域</span><br><span class="line">&lt;field name=&quot;tb_item_cid&quot; type=&quot;plong&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;tb_item_cname&quot;  type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;tb_item_title&quot;  type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;tb_item_sell_point&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;</span><br><span class="line">&lt;field name=&quot;tb_item_desc&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;</span><br><span class="line"></span><br><span class="line"># 复制域（Solr 的搜索优化功能，将多个字段域复制到一个域里，提高查询效率）</span><br><span class="line">&lt;field name=&quot;tb_item_keywords&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;false&quot; multiValued=&quot;true&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;tb_item_cname&quot; dest=&quot;tb_item_keywords&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;tb_item_title&quot; dest=&quot;tb_item_keywords&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;tb_item_sell_point&quot; dest=&quot;tb_item_keywords&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;tb_item_desc&quot; dest=&quot;tb_item_keywords&quot;/&gt;</span><br></pre></td></tr></table></figure><p><img src="25.png"></p><p>复制字段：一般搜索时需要制定某个字段，但有时我们想对某个关键字进行多个字段的同时搜索，这时复制字段解决了这个问题。在这个字段中搜索，相当于在每个字段中进行了搜索。</p><h3 id="复制配置到容器并重启"><a href="#复制配置到容器并重启" class="headerlink" title="复制配置到容器并重启"></a>复制配置到容器并重启</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 复制到容器</span><br><span class="line">docker cp managed-schema solr:/opt/solr/server/solr/ik_core/conf</span><br><span class="line"></span><br><span class="line"># 重启容器</span><br><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><h3 id="词效果图"><a href="#词效果图" class="headerlink" title="词效果图"></a>词效果图</h3><p><img src="26.png"></p><h2 id="维护功能"><a href="#维护功能" class="headerlink" title="维护功能"></a>维护功能</h2><p>维护功能即对数据库的 CRUD 操作</p><h3 id="添加索引库"><a href="#添加索引库" class="headerlink" title="添加索引库"></a>添加索引库</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 536563,</span><br><span class="line">    &quot;tb_item_cid&quot;: 560,</span><br><span class="line">    &quot;tb_item_cname&quot;: &quot;手机&quot;,</span><br><span class="line">    &quot;tb_item_title&quot;: &quot;new2 - 阿尔卡特 (OT-927) 炭黑 联通3G手机 双卡双待&quot;,</span><br><span class="line">    &quot;tb_item_sell_point&quot;: &quot;清仓！仅北京，武汉仓有货！&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="27.png"></p><h3 id="测试查询"><a href="#测试查询" class="headerlink" title="测试查询"></a>测试查询</h3><p><img src="https://www.funtl.com/assets/Lusifer_20181107021538.png"></p><h3 id="删除索引库"><a href="#删除索引库" class="headerlink" title="删除索引库"></a>删除索引库</h3><p>设置文档类型为 XML</p><p><img src="https://www.funtl.com/assets/Lusifer1520892036.png"></p><h3 id="根据-ID-删除"><a href="#根据-ID-删除" class="headerlink" title="根据 ID 删除"></a>根据 ID 删除</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete&gt;</span><br><span class="line">    &lt;id&gt;536563&lt;/id&gt;</span><br><span class="line">&lt;/delete&gt;</span><br><span class="line">&lt;commit /&gt;</span><br></pre></td></tr></table></figure><h3 id="根据查询删除"><a href="#根据查询删除" class="headerlink" title="根据查询删除"></a>根据查询删除</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete&gt;</span><br><span class="line">    &lt;query&gt;*:*&lt;/query&gt;</span><br><span class="line">&lt;/delete&gt;</span><br><span class="line">&lt;commit/&gt;</span><br></pre></td></tr></table></figure><h2 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h2><h3 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h3><p><img src="https://www.funtl.com/assets/Lusifer1520892126.png"></p><p>说明：</p><ul><li>q：查询条件，*:* 为查询所有域，单独查询某个域如：<code>tb_item_title:手机</code></li><li>fq: 过滤条件</li><li>sort：排序条件</li><li>start,rows：分页条件</li><li>fl：字段列表返回域，如只希望返回 <code>id</code></li><li>df：默认搜索域，如之前配置的复制域 <code>tb_item_keywords</code></li></ul><h3 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h3><p><img src="https://www.funtl.com/assets/Lusifer_20181107022036.png"></p><p><img src="https://www.funtl.com/assets/Lusifer_20181107022156.png"></p><p>说明：上图意为在默认搜索域 <code>tb_item_keywords</code> 中搜索关键字 <code>手机</code> 并指定需要高亮显示的结果域 <code>tb_item_title</code> 以 <code>红色</code> 显示</p><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><p><a href="https://www.funtl.com/zh/apache-dubbo-codeing/%E4%BB%80%E4%B9%88%E6%98%AF-Solr.html#%E4%BB%80%E4%B9%88%E6%98%AF-solr">什么是Solr</a></p><p><a href="https://www.cnblogs.com/yanfeiLiu/p/9267540.html">Solr学习篇</a></p>]]></content>
      
      
      <categories>
          
          <category> 全文搜索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apollo配置管理中心</title>
      <link href="2020/03/17/Apollo%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/"/>
      <url>2020/03/17/Apollo%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Apollo"><a href="#什么是-Apollo" class="headerlink" title="什么是 Apollo"></a>什么是 Apollo</h1><p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景</p><a id="more"></a><p>服务端基于Spring Boot和Spring Cloud开发，打包后可以直接运行，不需要额外安装Tomcat等应用容器。</p><p>Java客户端不依赖任何框架，能够运行于所有Java运行时环境，同时对Spring/Spring Boot环境也有较好的支持。</p><p>GitHub：<a href="https://github.com/ctripcorp/apollo">https://github.com/ctripcorp/apollo</a></p><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p><strong>背景</strong></p><p>随着程序功能的日益复杂，程序的配置日益增多：各种功能的开关、参数的配置、服务器的地址……</p><p>对程序配置的期望值也越来越高：配置修改后实时生效，灰度发布，分环境、分集群管理配置，完善的权限、审核机制……</p><p>在这样的大环境下，传统的通过配置文件、数据库等方式已经越来越无法满足开发人员对配置管理的需求。</p><p>Apollo配置中心应运而生！</p><h2 id="配置的基本概念"><a href="#配置的基本概念" class="headerlink" title="配置的基本概念"></a>配置的基本概念</h2><p>Apollo 支持 4 个维度管理 KV 格式的配置：</p><ul><li>application：应用（项目）</li><li>environment：环境（生产、测试、开发）</li><li>cluster：集群（一个项目开启多个示例）</li><li>namespace：命名空间（每个配置文件）</li></ul><h2 id="Apollo特性"><a href="#Apollo特性" class="headerlink" title="Apollo特性"></a>Apollo特性</h2><p>正是基于配置的特殊性，所以Apollo从设计之初就立志于成为一个有治理能力的配置发布平台，目前提供了以下的特性：</p><ul><li><strong>统一管理不同环境、不同集群的配置</strong><ul><li>Apollo提供了一个统一界面集中式管理不同环境（environment）、不同集群（cluster）、不同命名空间（namespace）的配置。</li><li>同一份代码部署在不同的集群，可以有不同的配置，比如zookeeper的地址等</li><li>通过命名空间（namespace）可以很方便地支持多个不同应用共享同一份配置，同时还允许应用对共享的配置进行覆盖</li></ul></li><li><strong>配置修改实时生效（热发布）</strong><ul><li>用户在Apollo修改完配置并发布后，客户端能实时（1秒）接收到最新的配置，并通知到应用程序</li></ul></li><li><strong>版本发布管理</strong><ul><li>所有的配置发布都有版本概念，从而可以方便地支持配置的回滚</li></ul></li><li><strong>灰度发布</strong><ul><li>支持配置的灰度发布，比如点了发布后，只对部分应用实例生效，等观察一段时间没问题后再推给所有应用实例</li></ul></li><li><strong>权限管理、发布审核、操作审计</strong><ul><li>应用和配置的管理都有完善的权限管理机制，对配置的管理还分为了编辑和发布两个环节，从而减少人为的错误。</li><li>所有的操作都有审计日志，可以方便地追踪问题</li></ul></li><li><strong>客户端配置信息监控</strong><ul><li>可以在界面上方便地看到配置在被哪些实例使用</li></ul></li><li><strong>提供Java和.Net原生客户端</strong><ul><li>提供了Java和.Net的原生客户端，方便应用集成</li><li>支持Spring Placeholder, Annotation和Spring Boot的ConfigurationProperties，方便应用使用（需要Spring 3.1.1+）</li><li>同时提供了Http接口，非Java和.Net应用也可以方便地使用</li></ul></li><li><strong>提供开放平台API</strong><ul><li>Apollo自身提供了比较完善的统一配置管理界面，支持多环境、多数据中心配置管理、权限、流程治理等特性。不过Apollo出于通用性考虑，不会对配置的修改做过多限制，只要符合基本的格式就能保存，不会针对不同的配置值进行针对性的校验，如数据库用户名、密码，Redis服务地址等</li><li>对于这类应用配置，Apollo支持应用方通过开放平台API在Apollo进行配置的修改和发布，并且具备完善的授权和权限控制</li></ul></li><li><strong>部署简单</strong><ul><li>配置中心作为基础服务，可用性要求非常高，这就要求Apollo对外部依赖尽可能地少</li><li>目前唯一的外部依赖是MySQL，所以部署非常简单，只要安装好Java和MySQL就可以让Apollo跑起来</li><li>Apollo还提供了打包脚本，一键就可以生成所有需要的安装包，并且支持自定义运行时参数</li></ul></li></ul><h2 id="Apollo-at-a-glance"><a href="#Apollo-at-a-glance" class="headerlink" title="Apollo at a glance"></a>Apollo at a glance</h2><h3 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h3><p>如下即是Apollo的基础模型：</p><ol><li>用户在配置中心对配置进行修改并发布</li><li>配置中心通知Apollo客户端有配置更新</li><li>Apollo客户端从配置中心拉取最新的配置、更新本地配置并通知到应用</li></ol><p><img src="1.png"></p><p><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D#32-%E7%95%8C%E9%9D%A2%E6%A6%82%E8%A7%88">点击查看Apollo界面操作</a></p><p><a href="https://github.com/ctripcorp/apollo/wiki/Quick-Start">Java快速开始使用</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/ctripcorp/apollo/wiki/Quick-Start">官方安装教程！</a></p><p>它的docker安装有问题，先不要用。</p><h2 id="运行成功效果图"><a href="#运行成功效果图" class="headerlink" title="运行成功效果图"></a>运行成功效果图</h2><p>通过 <a href="http://ip:8070/signin">http://ip:8070/signin</a> 访问 Apollo 配置中心</p><ul><li>登录账号：apollo</li><li>登录密码：admin</li></ul><p><img src="2.png"></p><p><img src="3.png"></p><h1 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h1><p><strong>项目结构</strong></p><p><img src="6.png"></p><p><strong>pom引用</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.ctrip.framework.apollo/apollo-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ctrip.framework.apollo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apollo-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>app.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Apollo Settings</span></span><br><span class="line"><span class="meta">app.id</span>=<span class="string">7777777</span></span><br><span class="line"><span class="meta">apollo.meta</span>=<span class="string">http://192.168.174.134:8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>application.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">apollo.bootstrap.eagerLoad.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">apollo.bootstrap.enabled</span> = <span class="string">true</span></span><br><span class="line"><span class="comment"># will inject &#x27;application&#x27;, &#x27;FX.apollo&#x27; and &#x27;application.yml&#x27; namespaces in bootstrap phase</span></span><br><span class="line"><span class="meta">apollo.bootstrap.namespaces</span> = <span class="string">application,system</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># put apollo initialization before logging system initialization</span></span><br></pre></td></tr></table></figure><p><strong>Apollo配置</strong></p><p><img src="7.png"></p><h2 id="可配置日志级别动态刷新"><a href="#可配置日志级别动态刷新" class="headerlink" title="可配置日志级别动态刷新"></a>可配置日志级别动态刷新</h2><p><a href="https://github.com/ctripcorp/apollo-use-cases/tree/master/spring-cloud-logger">https://github.com/ctripcorp/apollo-use-cases/tree/master/spring-cloud-logger</a></p>]]></content>
      
      
      <categories>
          
          <category> 配置管理中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apollo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS文件系统</title>
      <link href="2020/03/17/FastDFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/03/17/FastDFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是FastDFS"><a href="#什么是FastDFS" class="headerlink" title="什么是FastDFS"></a>什么是FastDFS</h1><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p><p>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。</p><p>存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。</p><p>跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。</p><p> 为了支持大容量，存储节点（服务器）采用了分卷（group）（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。 </p><p>在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。</p><p>当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。</p><p>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。</p><h2 id="上传交互过程"><a href="#上传交互过程" class="headerlink" title="上传交互过程"></a>上传交互过程</h2><ul><li>client 询问 tracker 上传到的 storage，不需要附加参数</li><li>tracker 返回一台可用的 storage</li><li>client 直接和 storage 通讯完成文件上传</li></ul><h2 id="下载交互过程"><a href="#下载交互过程" class="headerlink" title="下载交互过程"></a>下载交互过程</h2><ul><li>client 询问 tracker 下载文件的 storage，参数为文件标识（卷名和文件名）</li><li>tracker 返回一台可用的 storage</li><li>client 直接和 storage 通讯完成文件下载</li></ul><p>需要说明的是，client 为使用 FastDFS 服务的调用方，client 也应该是一台服务器，它对 tracker 和 storage 的调用均为服务器间的调用</p><h2 id="FastDFS-为什么要结合-Nginx"><a href="#FastDFS-为什么要结合-Nginx" class="headerlink" title="FastDFS 为什么要结合 Nginx"></a>FastDFS 为什么要结合 Nginx</h2><p>我们在使用 FastDFS 部署一个分布式文件系统的时候，通过 FastDFS 的客户端 API 来进行文件的上传、下载、删除等操作。同时通过 FastDFS 的 HTTP 服务器来提供 HTTP 服务。但是 FastDFS 的 HTTP 服务较为简单，无法提供负载均衡等高性能的服务，我们使用 FastDFS 的 Nginx 模块来弥补这一缺陷。</p><p>FastDFS 通过 Tracker 服务器,将文件放在 Storage 服务器存储,但是同组之间的服务器需要复制文件,有延迟的问题.假设 Tracker 服务器将文件上传到了 192.168.1.80,文件ID已经返回客户端,这时,后台会将这个文件复制到 192.168.1.30,如果复制没有完成,客户端就用这个 ID 在 192.168.1.30 取文件,肯定会出现错误。这个 fastdfs-nginx-module 可以重定向连接到源服务器取文件,避免客户端由于复制延迟的问题,出现错误。</p><h1 id="简单安装"><a href="#简单安装" class="headerlink" title="简单安装"></a>简单安装</h1><p>基于Docker简单安装，即我们把tracker、storage、client三合一并且搭建nginx（富含fastdfs-nginx-module ）模块的节点。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>libfastcommon.tar.gz</li><li>fastdfs.tar.gz</li><li>nginx.tar.gz</li><li>fastdfs-nginx-module.tar.gz</li></ul><p><font color='red'><strong><a href="fastdfs.tar.gz" title="构建环境下载">点击下载</a>已设置好的所有环境~！</strong></font></p><h2 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h2><p>在 Linux 服务器上创建 <code>/usr/local/docker/fastdfs/environment</code> 目录</p><p>说明：</p><ul><li><code>/usr/local/docker/fastdfs</code>：用于存放 <code>docker-compose.yml</code> 配置文件及 FastDFS 的数据卷</li><li><code>/usr/local/docker/fastdfs/environment</code>：用于存放 <code>Dockerfile</code> 镜像配置文件及 FastDFS 所需环境</li></ul><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><strong>docker-compose.yml</strong></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">fastdfs:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">environment</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">fastdfs</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./storage:/fastdfs/storage</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><strong>Dockerfile</strong></h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:xenial</span><br><span class="line"><span class="keyword">MAINTAINER</span> qluzxj@outlook.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据源</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /etc/apt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse&#x27;</span> &gt; sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse&#x27;</span> &gt;&gt; sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse&#x27;</span> &gt;&gt; sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse&#x27;</span> &gt;&gt; sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install make gcc libpcre3-dev zlib1g-dev --assume-yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制工具包</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> libfastcommon.tar.gz /usr/<span class="built_in">local</span>/src</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> fastdfs.tar.gz /usr/<span class="built_in">local</span>/src</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> fastdfs-nginx-module.tar.gz /usr/<span class="built_in">local</span>/src</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx-1.6.3.tar.gz /usr/<span class="built_in">local</span>/src</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libfatscommon</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/src/libfastcommon</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./make.sh &amp;&amp; ./make.sh install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装fastdfs</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/src/fastdfs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./make.sh &amp;&amp; ./make.sh install</span></span><br><span class="line"><span class="comment"># 配置 FastDFS 跟踪器</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> tracker.conf /etc/fdfs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /fastdfs/tracker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 FastDFS 存储</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> storage.conf /etc/fdfs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /fastdfs/storage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 FastDFS 客户端</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> client.conf /etc/fdfs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 fastdfs-nginx-module</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> config /usr/<span class="built_in">local</span>/src/fastdfs-nginx-module/src</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># FastDFS 与 Nginx 集成</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/src/nginx-1.6.3</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./configure --add-module=/usr/<span class="built_in">local</span>/src/fastdfs-nginx-module/src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> mod_fastdfs.conf /etc/fdfs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/src/fastdfs/conf</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cp http.conf mime.types /etc/fdfs/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Nginx</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx.conf /usr/<span class="built_in">local</span>/nginx/conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> entrypoint.sh /usr/<span class="built_in">local</span>/bin/</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/usr/local/bin/entrypoint.sh&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8888</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color='red'>ps：请根据自己下载的包的路径自行修改Dockerfile，我的路径是修改过的。直接套用肯定失败！！</font></p><p><font color='red'><strong>如果你下载了上面链接的内容，(需要更换配置文件中的IP后)直接构建就可以，下面的就不用看了</strong></font></p><h2 id="entrypoint-sh"><a href="#entrypoint-sh" class="headerlink" title="entrypoint.sh"></a>entrypoint.sh</h2><p>启动脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">/etc/init.d/fdfs_trackerd start /etc/fdfs/tracker.conf</span><br><span class="line">/etc/init.d/fdfs_storaged start  /etc/fdfs/storage.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -g <span class="string">&#x27;daemon off;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="各种配置文件"><a href="#各种配置文件" class="headerlink" title="各种配置文件"></a>各种配置文件</h2><p>请注意以下文件都是从原有的基础（编译后会自动生成）上，对某些值做修改(其余的也不要删除)，请不要自己创建这些配置文件。会有问题的。</p><p><font color="red">一定要cp过来修改，不要自行创建！！！</font></p><p><font color="red">一定要cp过来修改，不要自行创建！！！</font></p><p><font color="red">一定要cp过来修改，不要自行创建！！！</font></p><h3 id="tracker配置"><a href="#tracker配置" class="headerlink" title="tracker配置"></a>tracker配置</h3><p><strong>tracker.conf</strong></p><p> FastDFS 跟踪器配置，容器中路径为：/etc/fdfs，修改为： </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">base_path</span>=<span class="string">/fastdfs/tracker</span></span><br></pre></td></tr></table></figure><h3 id="storage配置"><a href="#storage配置" class="headerlink" title="storage配置"></a>storage配置</h3><p><strong>storage.conf</strong></p><p>FastDFS 存储配置，容器中路径为：/etc/fdfs，修改为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">base_path</span>=<span class="string">/fastdfs/storage</span></span><br><span class="line"><span class="attr">store_path0</span>=<span class="string">/fastdfs/storage</span></span><br><span class="line"><span class="attr">tracker_server</span>=<span class="string">192.168.75.128:22122</span></span><br><span class="line"><span class="meta">http.server_port</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure><h3 id="client配置"><a href="#client配置" class="headerlink" title="client配置"></a>client配置</h3><p><strong>client.conf</strong></p><p>FastDFS 客户端配置，容器中路径为：/etc/fdfs，修改为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">base_path</span>=<span class="string">/fastdfs/tracker</span></span><br><span class="line"><span class="attr">tracker_server</span>=<span class="string">192.168.75.128:22122</span></span><br></pre></td></tr></table></figure><h3 id="Nginx与-fastdfs-nginx-module-配置"><a href="#Nginx与-fastdfs-nginx-module-配置" class="headerlink" title="Nginx与 fastdfs-nginx-module 配置"></a>Nginx与 fastdfs-nginx-module 配置</h3><h4 id="fastdfs-nginx-module模块配置"><a href="#fastdfs-nginx-module模块配置" class="headerlink" title="fastdfs-nginx-module模块配置"></a>fastdfs-nginx-module模块配置</h4><p><strong>config</strong></p><p>fastdfs-nginx-module 配置文件，容器中路径为：/usr/local/src/fastdfs-nginx-module/src，修改为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改前</span><br><span class="line">CORE_INCS=&quot;$CORE_INCS /usr/local/include/fastdfs /usr/local/include/fastcommon/&quot;</span><br><span class="line">CORE_LIBS=&quot;$CORE_LIBS -L/usr/local/lib -lfastcommon -lfdfsclient&quot;</span><br><span class="line"></span><br><span class="line"># 修改后</span><br><span class="line">CORE_INCS=&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/&quot;</span><br><span class="line">CORE_LIBS=&quot;$CORE_LIBS -L/usr/lib -lfastcommon -lfdfsclient&quot;</span><br></pre></td></tr></table></figure><p> <font color="red">ps:请注意，要在原来文件的基础上改变这两行！！不能覆盖其他内容</font></p><p> <font color="red">ps:请注意，要在原来文件的基础上改变这两行！！不能覆盖其他内容</font></p><p> <font color="red">ps:请注意，要在原来文件的基础上改变这两行！！不能覆盖其他内容</font></p><p><strong>mod_fastdfs.conf</strong></p><p>fastdfs-nginx-module 配置文件，容器中路径为：/usr/local/src/fastdfs-nginx-module/src，修改为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">connect_timeout</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">tracker_server</span>=<span class="string">192.168.75.128:22122</span></span><br><span class="line"><span class="attr">url_have_group_name</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">store_path0</span>=<span class="string">/fastdfs/storage</span></span><br></pre></td></tr></table></figure><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p> Nginx 配置文件，容器中路径为：/usr/local/src/nginx-1.13.6/conf，修改为： </p><p><strong>这个文件可以自己创建，只有这一个</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">user  root;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8888;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location ~/group([0-9])/M00 &#123;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="交互进入容器"><a href="#交互进入容器" class="headerlink" title="交互进入容器"></a>交互进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it fastdfs /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /usr/<span class="built_in">local</span>/src/fastdfs/INSTALL</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">group1/M00/00/00/wKhLi1oHVMCAT2vrAAAeSwu9TgM3976771</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.75.128:8888/group1/M00/00/00/wKhLi1oHVMCAT2vrAAAeSwu9TgM3976771</span><br></pre></td></tr></table></figure><h1 id="集群安装"><a href="#集群安装" class="headerlink" title="集群安装"></a>集群安装</h1><p>这里就不多加叙述了，看明白上面的内容。请参考<a href="http://www.ityouknow.com/fastdfs/2017/10/10/cluster-building-fastdfs.html">FastDFS集群安装配置</a>这篇文章。</p><h1 id="转载和引用"><a href="#转载和引用" class="headerlink" title="转载和引用"></a>转载和引用</h1><p><a href="http://www.ityouknow.com/fastdfs/2017/10/10/cluster-building-fastdfs.html">FastDFS集群安装配置</a></p><p><a href="https://www.funtl.com/zh/apache-dubbo-codeing/FastDFS-%E5%AE%89%E8%A3%85.html">基于Docker安装FastDFS</a></p>]]></content>
      
      
      <categories>
          
          <category> DFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> FastDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx解决跨域问题</title>
      <link href="2020/03/14/Nginx%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>2020/03/14/Nginx%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p> 在浏览器端进行 Ajax 请求时会出现跨域问题，那么什么是跨域，如何解决跨域呢？先看浏览器端出现跨域问题的现象，如下图所示 </p><a id="more"></a><p><img src="1.png"></p><h1 id="什么是跨域问题"><a href="#什么是跨域问题" class="headerlink" title="什么是跨域问题"></a>什么是跨域问题</h1><p> 跨域，指的是浏览器不能执行其他网站的脚本。它是由<strong>浏览器的同源策略</strong>造成的，是浏览器对 JavaScript 施加的安全限制 </p><p><font color='red'><strong>这里说了跨域是浏览器的同源策略造成的，也就是只有浏览器会存在跨域，这是浏览器行为！！！</strong></font></p><h2 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h2><p> 所谓同源是指，域名，协议，端口均相同 ；只要有一个不同浏览器就认为跨域。</p><ul><li><a href="http://www.funtl.com/">http://www.funtl.com</a> –&gt; <a href="http://admin.funtl.com/">http://admin.funtl.com</a> 跨域</li><li><a href="http://www.funtl.com/">http://www.funtl.com</a> –&gt; <a href="http://www.funtl.com/">http://www.funtl.com</a> 非跨域</li><li><a href="http://www.funtl.com/">http://www.funtl.com</a> –&gt; <a href="http://www.funtl.com:8080/">http://www.funtl.com:8080</a> 跨域</li><li><a href="http://www.funtl.com/">http://www.funtl.com</a> –&gt; <a href="https://www.funtl.com/">https://www.funtl.com</a> 跨域</li></ul><h2 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题"></a>如何解决跨域问题</h2><h3 id="使用-CORS（跨资源共享）解决跨域问题"><a href="#使用-CORS（跨资源共享）解决跨域问题" class="headerlink" title="使用 CORS（跨资源共享）解决跨域问题"></a>使用 CORS（跨资源共享）解决跨域问题</h3><p>CORS 是一个 W3C 标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。</p><p>CORS 需要<strong>浏览器和服务器</strong>同时支持。目前，所有浏览器都支持该功能，<strong>IE 浏览器不能低于 IE10</strong>。整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信（在 <code>header</code> 中设置：<code>Access-Control-Allow-Origin</code>）</p><p>所以说CORS方案的瓶颈在于服务器是否支持，如果自己开发的服务端可以使用这种方法；如果是第三方服务端，我们没法修改，所以需要采取其他方法</p><h3 id="使用-JSONP-解决跨域问题"><a href="#使用-JSONP-解决跨域问题" class="headerlink" title="使用 JSONP 解决跨域问题"></a>使用 JSONP 解决跨域问题</h3><p> JSONP（JSON with Padding）是 JSON 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。由于同源策略，一般来说位于 <code>server1.example.com</code> 的网页无法与 <code>server2.example.com</code> 的服务器沟通，而 HTML 的 <code>元素是一个例外。利用</code> 元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的 JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析（需要目标服务器配合一个 <code>callback</code> 函数）。 </p><h3 id="CORS-与-JSONP-的比较"><a href="#CORS-与-JSONP-的比较" class="headerlink" title="CORS 与 JSONP 的比较"></a>CORS 与 JSONP 的比较</h3><p>CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。</p><p>JSONP 只支持 GET 请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据</p><h3 id="使用-Nginx-反向代理解决跨域问题"><a href="#使用-Nginx-反向代理解决跨域问题" class="headerlink" title="使用 Nginx 反向代理解决跨域问题"></a>使用 Nginx 反向代理解决跨域问题</h3><a href="/2020/03/14/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/" title="什么是Nginx">什么是Nginx</a><p>以上跨域问题解决方案都需要服务器支持，当服务器无法设置 <code>header</code> 或提供 <code>callback</code> 时我们就可以采用 Nginx 反向代理的方式解决跨域问题。</p><p><strong>环境</strong></p><p><a href="http://192.168.0.104:8888：本地文件上传服务接口">http://192.168.0.104:8888：本地文件上传服务接口</a></p><p><a href="http://192.168.0.104:8080：本地界面，需要使用上传服务接口">http://192.168.0.104:8080：本地界面，需要使用上传服务接口</a></p><p>upload.myshop.com：nginx服务器，在本地修改Host得来的域名</p><p>以下为文件上传的跨域配置方案：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name upload.myshop.com;</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Origin&#x27;  &#x27;*&#x27;;</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range&#x27;;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass  http://192.168.0.104:8888;</span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">                add_header Access-Control-Allow-Origin  *;</span><br><span class="line">                add_header Access-Control-Allow-Headers X-Requested-With;</span><br><span class="line">                add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,PATCH,OPTIONS;</span><br><span class="line">                # 解决假请求问题，如果是简单请求则没有这个问题，但这里是上传文件，首次请求为 OPTIONS 方式，实际请求为 POST 方式</span><br><span class="line">                # Provisional headers are shown.</span><br><span class="line">                # Request header field Cache-Control is not allowed by Access-Control-Allow-Headers in preflight response.</span><br><span class="line">                add_header Access-Control-Allow-Headers DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range;</span><br><span class="line">                return 200;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx解决跨域原理"><a href="#Nginx解决跨域原理" class="headerlink" title="Nginx解决跨域原理"></a>Nginx解决跨域原理</h1><p><strong>环境</strong></p><p><a href="http://192.168.0.104:8888：本地文件上传服务接口，以下简称服务端">http://192.168.0.104:8888：本地文件上传服务接口，以下简称服务端</a></p><p><a href="http://192.168.0.104:8080：本地界面，需要使用上传服务接口，以下简称调用端">http://192.168.0.104:8080：本地界面，需要使用上传服务接口，以下简称调用端</a></p><p>upload.myshop.com：nginx服务器，在本地修改Host得来的域名</p><h2 id="没有Nginx情况下"><a href="#没有Nginx情况下" class="headerlink" title="没有Nginx情况下"></a>没有Nginx情况下</h2><p>此时，调用端直接通过Ajax或其他调用服务端，此时发生在浏览器，服务器会向服务端确认是否支持跨域，来决定请求生不生效</p><p>然后请求失败。</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>此时请求方式为，调用端直接通过Ajax或其他调用upload.myshop.com，此时发生在浏览器；浏览器向nginx确定他是否支持跨域，上面nginx的配置已经声明了支持跨域。</p><p>因为它加入了一些header，还判断了OPTIONS请求（这涉及简单请求和复杂请求，请自行百度）。不管哪一种方式，我们的配置足以。</p><p>然后nginx反向代理到服务端，注意~~。<font color='red'>此时nginx到服务端没有浏览器，不会触发跨域</font>。nginx将服务端的数据返回给调用端，即完成请求</p><p><img src="2.PNG"></p><p>以上为自我理解，如有不对，请多多包涵。</p><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><p><a href="https://www.funtl.com/zh/apache-dubbo-codeing/%E4%BD%BF%E7%94%A8-Nginx-%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%EF%BC%9F">Nginx解决跨域问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 代理服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx服务器</title>
      <link href="2020/03/14/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2020/03/14/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p> Nginx 是一款高性能的 HTTP 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师 Igor Sysoev 所开发，官方测试 Nginx 能够支支撑 5 万并发链接，并且 CPU、内存等资源消耗却非常低，运行非常稳定。 </p><a id="more"></a><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li>HTTP 服务器：Nginx 是一个 HTTP 服务可以独立提供 HTTP 服务。可以做网页静态服务器。</li><li>虚拟主机：可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</li><li>反向代理，负载均衡：当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用 Nginx 做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。</li></ul><h1 id="应用场景的实现"><a href="#应用场景的实现" class="headerlink" title="应用场景的实现"></a>应用场景的实现</h1><h2 id="统一环境"><a href="#统一环境" class="headerlink" title="统一环境"></a>统一环境</h2><p><strong>工作目录</strong></p><p>创建工作目录：<code>/usr/local/docker/nginx</code>，配置文件<code>/usr/local/docker/nginx/conf/nginx.conf</code>，docker-compose文件<code>/usr/local/docker/nginx/docker-compose.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/docker/nginx/conf</span><br><span class="line">touch /usr/<span class="built_in">local</span>/docker/nginx/conf/nginx.conf</span><br><span class="line">touch /usr/<span class="built_in">local</span>/docker/nginx/docker-compose.yml</span><br></pre></td></tr></table></figure><p><strong>docker-compose.yml</strong></p><p>此文件固定内容为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wwwroot:/usr/share/nginx/wwwroot</span></span><br></pre></td></tr></table></figure><h2 id="Http服务器"><a href="#Http服务器" class="headerlink" title="Http服务器"></a>Http服务器</h2><p>使用nginx实现HTTP服务器。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>/usr/local/docker/nginx/conf/nginx.conf</code>\</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 启动进程,通常设置成和 CPU 的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    # epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式</span><br><span class="line">    # 但是仅用于 linux2.6 以上内核,可以大大提高 nginx 的性能</span><br><span class="line">    use epoll;</span><br><span class="line">    # 单个后台 worker process 进程的最大并发链接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    # 设定 mime 类型,类型由 mime.type 文件定义</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">    # 必须设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的 uptime.</span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    # 连接超时时间</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    # 设定请求缓冲</span><br><span class="line">    client_header_buffer_size 2k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        # 通过80端口的根访问，nginx机器内的/usr/share/nginx/html文件夹</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动、展示"><a href="#启动、展示" class="headerlink" title="启动、展示"></a>启动、展示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/docker/nginx/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="1.PNG"></p><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p>首先我们需要搞懂什么是虚拟主机</p><h3 id="什么是虚拟主机"><a href="#什么是虚拟主机" class="headerlink" title="什么是虚拟主机"></a>什么是虚拟主机</h3><p>虚拟主机是一种特殊的软硬件技术，它可以将网络上的每一台计算机分成多个虚拟主机，每个虚拟主机可以独立对外提供 www 服务，这样就可以实现一台主机对外提供多个 web 服务，每个虚拟主机之间是独立的，互不影响的。</p><p>通过 Nginx 可以实现虚拟主机的配置，Nginx 支持三种类型的虚拟主机配置</p><ul><li>基于 IP 的虚拟主机</li><li>基于域名的虚拟主机</li><li>基于端口的虚拟主机</li></ul><p>这里我们只能演示一下，域名通过修改Hosts来实现。我们做一下后两者的演示，第一种就不演示了</p><h3 id="基于端口的虚拟主机"><a href="#基于端口的虚拟主机" class="headerlink" title="基于端口的虚拟主机"></a>基于端口的虚拟主机</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul><li>Nginx 对外提供 80 和 8080 两个端口监听服务</li><li>请求 80 端口则请求 html80 目录下的 html</li><li>请求 8080 端口则请求 html8080 目录下的 html</li></ul><h4 id="创建目录及文件"><a href="#创建目录及文件" class="headerlink" title="创建目录及文件"></a>创建目录及文件</h4><p>在 <code>/usr/local/docker/nginx/wwwroot</code> 目录下创建 <code>html80</code> 和 <code>html8080</code> 两个目录，并分辨创建两个 index.html 文件</p><h4 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h4><p> 修改 <code>/usr/local/docker/nginx/conf</code> 目录下的 nginx.conf 配置文件： </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    # epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式</span><br><span class="line">    # 但是仅用于 linux2.6 以上内核,可以大大提高 nginx 的性能</span><br><span class="line">    use epoll;</span><br><span class="line">    # 单个后台 worker process 进程的最大并发链接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    # 设定 mime 类型,类型由 mime.type 文件定义</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">    # 必须设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的 uptime.</span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    # 连接超时时间</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    # 设定请求缓冲</span><br><span class="line">    client_header_buffer_size 2k;</span><br><span class="line"></span><br><span class="line">    # 配置虚拟主机 192.168.58.132</span><br><span class="line">    server &#123;</span><br><span class="line">        # 监听的ip和端口，配置 192.168.58.132:80</span><br><span class="line">        listen       80;</span><br><span class="line">        # 虚拟主机名称这里配置ip地址</span><br><span class="line">        server_name  192.168.58.132;</span><br><span class="line">        # 所有的请求都以 / 开始，所有的请求都可以匹配此 location</span><br><span class="line">        location / &#123;</span><br><span class="line">            # 使用 root 指令指定虚拟主机目录即网页存放目录</span><br><span class="line">            # 比如访问 http://ip/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/index.html</span><br><span class="line">            # 比如访问 http://ip/item/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/item/index.html</span><br><span class="line"></span><br><span class="line">            root   /usr/share/nginx/wwwroot/html80;</span><br><span class="line">            # 指定欢迎页面，按从左到右顺序查找</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    # 配置虚拟主机 192.168.75.245</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  192.168.58.132;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/wwwroot/html8080;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 修改 <code>/usr/local/docker/nginx</code> 目录下的 docker-compose.yml 配置文件： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8888</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wwwroot:/usr/share/nginx/wwwroot</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动、展示-1"><a href="#启动、展示-1" class="headerlink" title="启动、展示"></a>启动、展示</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p>访问ip:80</p><p><img src="2.PNG"></p><p>访问ip:8080</p><p><img src="3.PNG"></p><h3 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h4><ul><li>两个域名指向同一台 Nginx 服务器，用户访问不同的域名显示不同的网页内容</li><li>两个域名是 test.service.top 和 test.web.top</li><li>Nginx 服务器使用虚拟机 192.168.18.132</li></ul><h4 id="配置-Windows-Hosts-文件"><a href="#配置-Windows-Hosts-文件" class="headerlink" title="配置 Windows Hosts 文件"></a>配置 Windows Hosts 文件</h4><ul><li>通过 host 文件指定  test.service.top 和 test.web.top对应  192.168.18.132虚拟机：</li><li>修改 window 的 hosts 文件：（C:\Windows\System32\drivers\etc）</li></ul><p><img src="4.PNG"></p><h4 id="创建目录及文件-1"><a href="#创建目录及文件-1" class="headerlink" title="创建目录及文件"></a>创建目录及文件</h4><p>在 <code>/usr/local/docker/nginx/wwwroot</code> 目录下创建 <code>htmlservice</code> 和 <code>htmlweb</code> 两个目录，并分辨创建两个 index.html 文件</p><h4 id="配置虚拟主机-1"><a href="#配置虚拟主机-1" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h4><p> 修改 <code>/usr/local/docker/nginx/conf</code> 目录下的 nginx.conf 配置文件： </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  admin.service.itoken.funtl.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/wwwroot/htmlservice;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  admin.web.itoken.funtl.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/wwwroot/htmlweb;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 修改 <code>/usr/local/docker/nginx</code> 目录下的 docker-compose.yml 配置文件： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wwwroot:/usr/share/nginx/wwwroot</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动、展示-2"><a href="#启动、展示-2" class="headerlink" title="启动、展示"></a>启动、展示</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p>访问<code>test.service.top</code></p><p><img src="5.PNG"></p><p>访问<code>test.web.top</code></p><p><img src="6.PNG"></p><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p>想要知道什么是反向代理，首先我们要理解几个概念：代理、正向代理、反向代理。</p><h2 id="什么是代理服务器"><a href="#什么是代理服务器" class="headerlink" title="什么是代理服务器"></a>什么是代理服务器</h2><p> 代理服务器，客户机在发送请求时，不会直接发送给目的主机，而是先发送给代理服务器，代理服务接受客户机请求之后，再向主机发出，并接收目的主机返回的数据，存放在代理服务器的硬盘中，再发送给客户机。 </p><p>例如：我们想访问谷歌，我们会自己发送请求<code>https://xxx.daili.cn?path=www.google.com</code></p><p>其中<code>xxx.daili.cn</code>就是代理服务器，他去访问谷歌并且将数据返回给我们。</p><p><img src="7.png"></p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p><strong>提高访问速度</strong></p><p>由于目标主机返回的数据会存放在代理服务器的硬盘中，因此下一次客户再访问相同的站点数据时，会直接从代理服务器的硬盘中读取，起到了缓存的作用，尤其对于热门站点能明显提高请求速度。</p><p><strong>防火墙作用</strong></p><p>由于所有的客户机请求都必须通过代理服务器访问远程站点，因此可在代理服务器上设限，过滤某些不安全信息。</p><p><strong>通过代理服务器访问不能访问的目标站点</strong></p><p>互联网上有许多开放的代理服务器，客户机在访问受限时，可通过不受限的代理服务器访问目标站点，通俗说，我们使用的翻墙浏览器就是利用了代理服务器，虽然不能出国，但也可直接访问外网。</p><h2 id="什么是正向代理"><a href="#什么是正向代理" class="headerlink" title="什么是正向代理"></a>什么是正向代理</h2><p>正向代理，架设在客户机与目标主机之间，只用于代理内部网络对 Internet 的连接请求，客户机必须指定代理服务器,并将本来要直接发送到 Web 服务器上的 Http 请求发送到代理服务器中。</p><p>打个比方来说，我们想访问谷歌<code>www.google.com</code>，我们会在浏览器直接请求它的网站，但是我们本地安装了代理软件并且设置了代理服务器地址，他会拦截我们的请求，然后发送请求给代理服务器（连带上我们需要访问的谷歌地址），由它代理访问。</p><p>重点在于，正向代理，就是代理软件要和客户机绑定在一起。</p><p><img src="8.PNG"></p><h2 id="什么是反向代理"><a href="#什么是反向代理" class="headerlink" title="什么是反向代理"></a>什么是反向代理</h2><p> 反向代理服务器架设在服务器端，通过缓冲经常被请求的页面来缓解服务器的工作量，将客户机请求转发给内部网络上的目标服务器；并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器与目标主机一起对外表现为一个服务器。 </p><p>重点在于，反向代理，就是反向代理服务器与目标服务器在一个局域网中，由反向代理服务器去与目标服务器交互。一般来说客户机是连接不上目标机的。</p><p><img src="9.png"></p><h2 id="反向代理有哪些主要应用？"><a href="#反向代理有哪些主要应用？" class="headerlink" title="反向代理有哪些主要应用？"></a>反向代理有哪些主要应用？</h2><p> 现在许多大型 web 网站都用到反向代理。除了可以防止外网对内网服务器的恶性攻击、缓存以减少服务器的压力和访问安全控制之外，还可以进行负载均衡，将用户请求分配给多个服务器。 </p><h1 id="使用Nginx反向代理tomcat"><a href="#使用Nginx反向代理tomcat" class="headerlink" title="使用Nginx反向代理tomcat"></a>使用Nginx反向代理tomcat</h1><h2 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h2><ul><li>两个 tomcat 服务通过 nginx 反向代理</li><li>nginx 服务器：192.168.58.132:80</li><li>tomcat1 服务器：192.168.58.132:9090</li><li>tomcat2 服务器：192.168.58.132:9091</li></ul><h2 id="开启tomcat服务器"><a href="#开启tomcat服务器" class="headerlink" title="开启tomcat服务器"></a>开启tomcat服务器</h2><p> 启动两个 Tomcat 容器，映射端口为 9090 和 9091，docker-compose.yml 如下： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wwwroot:/usr/share/nginx/wwwroot</span></span><br><span class="line">  <span class="attr">tomcat1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tomcat2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里将两个tomcat的界面做一个修改，区别一下。先不开开启，一会配置文件修改好了在开启！！！</p><h2 id="配置-Nginx-反向代理"><a href="#配置-Nginx-反向代理" class="headerlink" title="配置 Nginx 反向代理"></a>配置 Nginx 反向代理</h2><p> 修改 <code>/usr/local/docker/nginx/conf</code> 目录下的 nginx.conf 配置文件： </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">        # 配置一个代理即 tomcat1 服务器</span><br><span class="line">        #upstream tomcatServer1 &#123;</span><br><span class="line">        #        server 192.168.58.132:9090;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # 配置一个代理即 tomcat2 服务器</span><br><span class="line">        #upstream tomcatServer2 &#123;</span><br><span class="line">        #        server 192.168.58.132:9091;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # 配置一个虚拟主机</span><br><span class="line">        server &#123;</span><br><span class="line">                listen 80;</span><br><span class="line">                server_name test.web.top;</span><br><span class="line">                location / &#123;</span><br><span class="line">                                # 域名 admin.service.itoken.funtl.com 的请求全部转发到 tomcat_server1 即 tomcat1 服务上</span><br><span class="line">                                proxy_pass http://tomcat1:8080;</span><br><span class="line">                                # 欢迎页面，按照从左到右的顺序查找页面</span><br><span class="line">                                index index.jsp index.html index.htm;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        server &#123;</span><br><span class="line">                listen 80;</span><br><span class="line">                server_name test.service.top;</span><br><span class="line"></span><br><span class="line">                location / &#123;</span><br><span class="line">                        # 域名 admin.web.itoken.funtl.com 的请求全部转发到 tomcat_server2 即 tomcat2 服务上</span><br><span class="line">                        proxy_pass http://tomcat2:8080;</span><br><span class="line">                        index index.jsp index.html index.htm;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ps：两个tomcat的项目test需要手动创建，自己区分就行了。我这里就输出了一句话。</p><h3 id="启动、展示-3"><a href="#启动、展示-3" class="headerlink" title="启动、展示"></a>启动、展示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p>访问<code>test.service.top/test</code></p><p><img src="10.PNG"></p><p>访问<code>test.web.top/test</code></p><p><img src="11.PNG"></p><br/><hr><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="什么是负载均衡"><a href="#什么是负载均衡" class="headerlink" title="什么是负载均衡"></a>什么是负载均衡</h2><p>负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。</p><p>负载均衡，英文名称为 Load Balance，其意思就是分摊到多个操作单元上进行执行，例如 Web 服务器、FTP 服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><h2 id="Nginx-实现负载均衡"><a href="#Nginx-实现负载均衡" class="headerlink" title="Nginx 实现负载均衡"></a>Nginx 实现负载均衡</h2><ul><li>nginx 作为负载均衡服务器，用户请求先到达 nginx，再由 nginx 根据负载配置将请求转发至 tomcat 服务器</li><li>nginx 负载均衡服务器：192.168.58.132:80</li><li>tomcat1 服务器</li><li>tomcat2 服务器</li></ul><p>注：本次实现反向代理+负载均衡，这时两个tomcat和nginx在一个局域网，我们外部访问不到tomcat</p><h2 id="Nginx-配置负载均衡"><a href="#Nginx-配置负载均衡" class="headerlink" title="Nginx 配置负载均衡"></a>Nginx 配置负载均衡</h2><p>修改 <code>/usr/local/docker/nginx/conf</code> 目录下的 nginx.conf 配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    upstream myapp &#123;</span><br><span class="line">        server tomcat1:8080 weight=10;</span><br><span class="line">        server tomcat2:8080 weight=10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name test.web.top;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://myapp;</span><br><span class="line">            index index.jsp index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">tomcat1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tomcat2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat2</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wwwroot:/usr/share/nginx/wwwroot</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意我访问路径中的/test是我自己项目，请自己添加。</p><p><strong>结果</strong></p><p>访问<code>test.web.top</code>，刷新展示不同的内容</p><h3 id="相关配置说明"><a href="#相关配置说明" class="headerlink" title="相关配置说明"></a>相关配置说明</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 定义负载均衡设备的 Ip及设备状态 </span><br><span class="line">upstream myServer &#123;</span><br><span class="line">    server 127.0.0.1:9090 down;</span><br><span class="line">    server 127.0.0.1:8080 weight=2;</span><br><span class="line">    server 127.0.0.1:6060;</span><br><span class="line">    server 127.0.0.1:7070 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要使用负载的 Server 节点下添加</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass http://myServer;</span><br></pre></td></tr></table></figure><ul><li><code>upstream</code>：每个设备的状态:</li><li><code>down</code>：表示当前的 <code>server</code> 暂时不参与负载</li><li><code>weight</code>：默认为 1 <code>weight</code> 越大，负载的权重就越大。</li><li><code>max_fails</code>：允许请求失败的次数默认为 1 当超过最大次数时，返回 <code>proxy_next_upstream</code> 模块定义的错误</li><li><code>fail_timeout</code>:<code>max_fails</code> 次失败后，暂停的时间。</li><li><code>backup</code>：其它所有的非 <code>backup</code> 机器 <code>down</code> 或者忙的时候，请求 <code>backup</code> 机器。所以这台机器压力会最轻</li></ul><h1 id="Nginx指令"><a href="#Nginx指令" class="headerlink" title="Nginx指令"></a>Nginx指令</h1><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>【alias】——别名配置，用于访问文件系统，在匹配到location配置的URL路径后，指向【alias】配置的路径。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /test/ </span><br><span class="line">&#123; </span><br><span class="line">    alias /first/second/img/; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即：请求/test/1.jpg（省略了协议与域名），将会返回文件/first/second/img/1.jpg。</p><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><p>【root】——根路径配置，用于访问文件系统，在匹配到location配置的URL路径后，指向【root】配置的路径，并把location配置路径附加到其后。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /test/ </span><br><span class="line">&#123; </span><br><span class="line">    root /first/second/img/; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即：请求/test/1.jpg（省略了协议与域名），将会返回文件/first/second/img/test/1.jpg，相较于alias，使用root会把/test/附加到根目录之后。</p><h2 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h2><p>【proxy_pass】——反向代理配置，用于代理请求，适用于前后端负载分离或多台机器、服务器负载分离的场景，在匹配到location配置的URL路径后，转发请求到【proxy_pass】配置的URL，是否会附加location配置路径与【proxy_pass】配置的路径后是否有”/“有关，有”/“则不附加，如：</p><p><strong>未附加</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /test/ </span><br><span class="line">&#123; </span><br><span class="line">    proxy_pass http:<span class="comment">//127.0.0.1:8080/; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即：请求/test/1.jpg（省略了协议与域名），将会被nginx转发请求到<a href="http://127.0.0.1:8080/1.jpg%EF%BC%88%E6%9C%AA%E9%99%84%E5%8A%A0/test/%E8%B7%AF%E5%BE%84%EF%BC%89%E3%80%82">http://127.0.0.1:8080/1.jpg（未附加/test/路径）。</a></p><hr><p>附加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /test/ </span><br><span class="line">&#123; </span><br><span class="line">    proxy_pass http:<span class="comment">//127.0.0.1:8080; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即：请求/test/1.jpg（省略了协议与域名），将会被nginx转发请求到<a href="http://127.0.0.1:8080/test/1.jpg%EF%BC%88%E9%99%84%E5%8A%A0/test/%E8%B7%AF%E5%BE%84%EF%BC%89%E3%80%82">http://127.0.0.1:8080/test/1.jpg（附加/test/路径）。</a></p>]]></content>
      
      
      <categories>
          
          <category> 代理服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven统一依赖管理</title>
      <link href="2020/03/11/maven%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
      <url>2020/03/11/maven%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Spring Cloud 项目都是基于 Spring Boot 进行开发，并且都是使用 Maven 做项目管理工具。在实际开发中，我们一般都会创建一个依赖管理项目作为 Maven 的 Parent 项目使用，这样做可以极大的方便我们对 Jar 包版本的统一管理。</p><a id="more"></a><p>我们所有的项目都会依赖这个 <code>myshop-dependencies</code> 项目，整个项目周期中的所有第三方依赖的版本也都由该项目进行管理。</p><ul><li>parent：继承了 Spring Boot 的 Parent，表示我们是一个 Spring Boot 工程</li><li>package：<code>pom</code>，表示该项目仅当做依赖项目，没有具体的实现代码</li><li><code>spring-cloud-dependencies</code>：在 <code>properties</code> 配置中预定义了版本号为 <code>Hoxton.SR3</code> ，表示我们的 Spring Cloud 使用的是 H 版</li><li>build：配置了项目所需的各种插件</li><li>repositories：配置项目下载依赖时的第三方库</li></ul><h1 id="统一依赖管理"><a href="#统一依赖管理" class="headerlink" title="统一依赖管理"></a>统一依赖管理</h1><h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h2><p><code>myshop-dependencies</code> 的pom如下（结构，我把内容删除了）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myshop-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://awslzhang.top<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Environment Settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Starter Settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">boot-dubbo.version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">boot-dubbo.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">boot-mapper.version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">boot-mapper.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">boot-pagehelper.version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">boot-pagehelper.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">boot-druid.version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">boot-druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cloud-hystrix.version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">cloud-hystrix.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Commons Settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kyro.version</span>&gt;</span>0.42<span class="tag">&lt;/<span class="name">kyro.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastdfs.version</span>&gt;</span>1.27<span class="tag">&lt;/<span class="name">fastdfs.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- excel poi--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">poi.version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">poi.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">               </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 资源文件配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    声明发布仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    声明第三方代理仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    声明第三方代理插件仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个简单的项目，只有一个<code>pom.xml</code>文件，用来管理项目中所需的依赖。</p><p><strong>重要的位置</strong></p><p>表示该项目仅当做依赖项目，没有具体的实现代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义各个依赖的版本号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Environment Settings --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Spring Boot Starter Settings --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">boot-dubbo.version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">boot-dubbo.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">boot-mapper.version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">boot-mapper.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">boot-pagehelper.version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">boot-pagehelper.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">boot-druid.version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">boot-druid.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Spring Cloud Settings --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">cloud-hystrix.version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">cloud-hystrix.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Commons Settings --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">kyro.version</span>&gt;</span>0.42<span class="tag">&lt;/<span class="name">kyro.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">fastdfs.version</span>&gt;</span>1.27<span class="tag">&lt;/<span class="name">fastdfs.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- excel poi--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">poi.version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">poi.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>管理依赖和插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 资源文件配置 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="被管理的项目"><a href="#被管理的项目" class="headerlink" title="被管理的项目"></a>被管理的项目</h2><p>pom：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;top.awslzhang&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;myshop-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&gt;..&#x2F;myshop-dependencies&#x2F;pom.xml&lt;&#x2F;relativePath&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;artifactId&gt;service-user-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;name&gt;service-user-api&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p><strong>重点</strong></p><p>声明parent为上述pom</p><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="1.PNG"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven依赖管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私服Nexus搭建</title>
      <link href="2020/03/09/%E7%A7%81%E6%9C%8DNexus%E6%90%AD%E5%BB%BA/"/>
      <url>2020/03/09/%E7%A7%81%E6%9C%8DNexus%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Nexus 是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。</p><p>2016 年 4 月 6 日 Nexus 3.0 版本发布，相较 2.x 版本有了很大的改变：</p><ul><li>对低层代码进行了大规模重构，提升性能，增加可扩展性以及改善用户体验。</li><li>升级界面，极大的简化了用户界面的操作和管理。</li><li>提供新的安装包，让部署更加简单。</li><li>增加对 Docker, NeGet, npm, Bower 的支持。</li><li>提供新的管理接口，以及增强对自动任务的管理。</li></ul><a id="more"></a><h1 id="基于Docker安装Nexus"><a href="#基于Docker安装Nexus" class="headerlink" title="基于Docker安装Nexus"></a>基于Docker安装Nexus</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Ubuntu Server</p><p>Docker</p><p>docker-compose</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/nexus/data:/nexus-data</span></span><br></pre></td></tr></table></figure><p><em>注：</em> 启动时如果出现权限问题可以使用：<code>chmod 777 /usr/local/docker/nexus/data</code> 赋予数据卷目录可读可写的权限</p><h2 id="登陆验证"><a href="#登陆验证" class="headerlink" title="登陆验证"></a>登陆验证</h2><p>地址：<a href="http://ip:port/">http://ip:port/</a> 用户名：admin 密码：</p><p><font color='red'>ps:密码在docker容其中的<code>/nexus-data/admin.password</code>，请复制登陆，并修改密码(我将密码改为了admin123)。</font></p><p><img src="1.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在项目中使用Maven私服</p><h2 id="配置认证信息"><a href="#配置认证信息" class="headerlink" title="配置认证信息"></a>配置认证信息</h2><p>在 Maven <code>settings.xml</code> 中添加 Nexus 认证信息(<code>servers</code> 节点下)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>releases和snapshots区别</strong></p><ul><li>nexus-releases: 用于发布 Release 版本</li><li>nexus-snapshots: 用于发布 Snapshot 版本（快照版）</li></ul><p>Release 版本与 Snapshot 定义如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Release</span>: <span class="string">1.0.0/1.0.0-RELEASE</span></span><br><span class="line"><span class="attr">Snapshot</span>: <span class="string">1.0.0-SNAPSHOT</span></span><br></pre></td></tr></table></figure><ul><li>在项目 <code>pom.xml</code> 中设置的版本号添加 <code>SNAPSHOT</code> 标识的都会发布为 <code>SNAPSHOT</code> 版本，没有 <code>SNAPSHOT</code> 标识的都会发布为 <code>RELEASE</code> 版本。</li><li><code>SNAPSHOT</code> 版本会自动加一个时间作为标识，如：<code>1.0.0-SNAPSHOT</code> 发布后为变成 <code>1.0.0-SNAPSHOT-20180522.123456-1.jar</code></li></ul><h2 id="配置自动化部署"><a href="#配置自动化部署" class="headerlink" title="配置自动化部署"></a>配置自动化部署</h2><p>在 <code>pom.xml</code> 中添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>ID 名称必须要与 <code>settings.xml</code> 中 Servers 配置的 ID 名称保持一致。</li><li>项目版本号中有 <code>SNAPSHOT</code> 标识的，会发布到 Nexus Snapshots Repository, 否则发布到 Nexus Release Repository，并根据 ID 去匹配授权账号。</li></ul><p>配置完毕后使用</p><p><code>mvn deploy</code>发布到私服</p><h2 id="配置代理仓库"><a href="#配置代理仓库" class="headerlink" title="配置代理仓库"></a>配置代理仓库</h2><p>当你本地仓库没有jar时，先从代理仓库下载，没有再从中央仓库下载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Plugin Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color='red'>ps：maven私服的id必须和上面setting中配置的id相同，否则会出现认证失败。</font></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Jenkins持续交付</title>
      <link href="2020/03/06/%E4%BD%BF%E7%94%A8Jenkins%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98/"/>
      <url>2020/03/06/%E4%BD%BF%E7%94%A8Jenkins%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p> Jenkins 的持续交付流程与 GitLab Runner 的持续集成差不多，但 GitLab Runner 已经默认是配置好了 Git，所以 Jenkins 需要额外配置多一个 GitLab 的 SSH 登录。按照之前 GitLab Runner 的持续集成流程，Jenkins 的持续交付流程大致如下：</p><a id="more"></a><ul><li>拉取代码</li><li>打包构建</li><li>上传镜像</li><li>运行容器</li><li>维护清理</li></ul><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>请按照</p><a href="/2020/01/16/Jenkins%E8%87%AA%E5%8A%A8%E6%8C%81%E7%BB%AD%E5%8C%96%E5%AE%9E%E8%B7%B5/" title="这篇文章">这篇文章</a>的Docker安装Jenkins，这里会安装插件超快。<p>Jenkins需要的插件：</p><ul><li>默认勾选的插件</li><li>Maven Integration</li><li>Publish Over SSH</li><li> GitLab </li><li> GitHub </li><li>Dashboard View</li><li>Localization: Chinese (Simplified)</li><li>Git</li></ul><p><strong>插件安装过慢解决</strong></p><ul><li><a href="https://community.jenkins-zh.cn/t/jenkins/26"><strong>插件安装过慢解决</strong></a></li></ul><p>建议使用<a href="/2020/01/16/Jenkins%E8%87%AA%E5%8A%A8%E6%8C%81%E7%BB%AD%E5%8C%96%E5%AE%9E%E8%B7%B5/" title="这篇文章">这篇文章</a>的Docker方式</p><h1 id="Jenkins免密登录GitLab"><a href="#Jenkins免密登录GitLab" class="headerlink" title="Jenkins免密登录GitLab"></a>Jenkins免密登录GitLab</h1><p>持续交付，即将代码一个阶段性的成果/里程碑发布到测试/类生产环境下。他还需要做到如果最新里程碑式的代码构建错误，需要秒级回滚到上一个里程碑没错误的版本。</p><p>我们通过ssh来拉取代码需要免密登录GitLab！</p><p><strong>jenkins服务器</strong></p><ul><li> 交互式进入 Jenkins 容器 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jenkins /bin/bash</span><br></pre></td></tr></table></figure><ul><li>生成 SSH KEY</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><ul><li>查看公钥</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>添加到GitLab</li></ul><p><img src="1.PNG"></p><ul><li> <strong>手动克隆一次项目</strong>，该步骤的主要作用是为了生成和服务器的验证信息 </li></ul><p><img src="2.PNG"></p><ul><li> 查看刚才生成的文件 </li></ul><p><img src="3.PNG"></p><h1 id="配置远程登录生产环境"><a href="#配置远程登录生产环境" class="headerlink" title="配置远程登录生产环境"></a>配置远程登录生产环境</h1><p>通过插件<code>Publish over SSH</code> 通过用户名密码登录远程测试、类生产环境</p><ul><li> <code>系统管理</code> -&gt; <code>系统设置</code> -&gt; <code>Publish over SSH</code> </li></ul><p><img src="4.PNG"></p><p> 其中 <code>Remote Directory</code> 是指 Jenkins 可以在目标服务器操作的目录 </p><ul><li>保存</li></ul><h1 id="持续交付项目"><a href="#持续交付项目" class="headerlink" title="持续交付项目"></a>持续交付项目</h1><h2 id="为项目创建标签"><a href="#为项目创建标签" class="headerlink" title="为项目创建标签"></a>为项目创建标签</h2><p> 在 GitLab 中为项目创建标签 </p><p><img src="5.PNG"></p><p><img src="6.PNG"></p><h1 id="创建-Maven-Project"><a href="#创建-Maven-Project" class="headerlink" title="创建 Maven Project"></a>创建 Maven Project</h1><p> 在 Jenkins 中创建一个基于 Maven 的任务 </p><p><img src="7.PNG"></p><h2 id="第一次构建"><a href="#第一次构建" class="headerlink" title="第一次构建"></a>第一次构建</h2><p><img src="8.png"></p><p>**构建项目 **</p><p><img src="9.png"></p><p><strong>查看构建日志</strong></p><p><img src="10.png"></p><h2 id="配置正式构建"><a href="#配置正式构建" class="headerlink" title="配置正式构建"></a>配置正式构建</h2><p>**增加参数化构建过程 **</p><p><img src="11.png"></p><p> 这里使用了 Groovy 脚本来查询最近的 tags 版本，代码如下： </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> ver_keys = [ <span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;cd /var/jenkins_home/workspace/hello-gitlab;git pull&gt;/dev/null; git remote prune origin &gt;/dev/null; git tag -l|sort -r |head -10 &#x27;</span> ]</span><br><span class="line">ver_keys.execute().text.tokenize(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>**关闭源码管理 **</p><p><img src="12.png"></p><p>**增加构建步骤 **</p><p><img src="13.png"></p><ul><li><p> Execute Shell（本地执行 Shell 脚本） </p></li><li><p>Send files or execute commands over SSH（发送文件或执行远程命令)</p><ul><li> Source files：需要传输到远程目标服务器的文件 <code>**/*.jar,docker/**</code></li><li> emove prefix：删除前缀。比如传输 <code>**/*.jar</code>，我们打包的 <code>.jar</code> 文件是在 <code>target</code> 目录下的，传输时会一并创建 <code>target</code> 目录，如果不希望创建 <code>target</code> 目录，则可以使用该参数屏蔽掉这些前缀文件夹。 </li><li> Remote directory：在远程目标服务器创建操作目录 <code>hello-gitalb</code></li><li> Exec command：在远程目标服务器执行控制台命令 ·</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo $RELEASE_VERSION</span><br><span class="line">cd /var/jenkins_home/workspace/hello-gitlab</span><br><span class="line">git checkout $RELEASE_VERSION</span><br><span class="line">git pull origin $RELEASE_VERSION</span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/workspace/hello-gitlab</span><br><span class="line">cp target/demo-0.0.1-SNAPSHOT.jar Docker/</span><br><span class="line">cd Docker</span><br><span class="line">docker build -t 192.168.0.111:5000/hello-gitlab .</span><br><span class="line">docker push 192.168.0.111:5000/hello-gitlab</span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker image prune -f</span><br></pre></td></tr></table></figure><p>**使用参数化构建项目 **</p><p><img src="14.png"></p><p><img src="15.png"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Gitlab持续集成</title>
      <link href="2020/03/05/%E4%BD%BF%E7%94%A8Gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
      <url>2020/03/05/%E4%BD%BF%E7%94%A8Gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p> 从 GitLab 8.0 开始，GitLab CI 就已经集成在 GitLab 中，我们只要在项目中添加一个 <code>.gitlab-ci.yml</code> 文件，然后添加一个 Runner，即可进行持续集成。 而且随着 GitLab 的升级，GitLab CI 变得越来越强大。 </p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="Pipline"><a href="#Pipline" class="headerlink" title="Pipline"></a>Pipline</h2><p>一次 Pipeline 其实相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。</p><p>任何提交或者 Merge Request 的合并都可以触发 Pipeline，如下图所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------------------+           +----------------+</span><br><span class="line">|                  |  trigger  |                |</span><br><span class="line">|   Commit / MR    +----------&gt;+    Pipeline    |</span><br><span class="line">|                  |           |                |</span><br><span class="line">+------------------+           +----------------+</span><br></pre></td></tr></table></figure><h2 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h2><p>Stages 表示构建阶段，说白了就是上面提到的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p><ul><li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始</li><li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li><li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li></ul><p>因此，Stages 和 Pipeline 的关系就是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------------------------+</span><br><span class="line">|                                                        |</span><br><span class="line">|  Pipeline                                              |</span><br><span class="line">|                                                        |</span><br><span class="line">|  +-----------+     +------------+      +------------+  |</span><br><span class="line">|  |  Stage 1  |----&gt;|   Stage 2  |-----&gt;|   Stage 3  |  |</span><br><span class="line">|  +-----------+     +------------+      +------------+  |</span><br><span class="line">|                                                        |</span><br><span class="line">+--------------------------------------------------------+</span><br></pre></td></tr></table></figure><h2 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h2><p>Jobs 表示构建工作，表示某个 Stage 里面执行的工作。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p><ul><li>相同 Stage 中的 Jobs 会并行执行</li><li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li><li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败</li></ul><p>所以，Jobs 和 Stage 的关系图就是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------------------+</span><br><span class="line">|                                          |</span><br><span class="line">|  Stage 1                                 |</span><br><span class="line">|                                          |</span><br><span class="line">|  +---------+  +---------+  +---------+   |</span><br><span class="line">|  |  Job 1  |  |  Job 2  |  |  Job 3  |   |</span><br><span class="line">|  +---------+  +---------+  +---------+   |</span><br><span class="line">|                                          |</span><br><span class="line">+------------------------------------------+</span><br></pre></td></tr></table></figure><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Ubuntu服务器：</p><p>GitLab搭建：<a href="/2020/02/14/GitLab%E7%9A%84%E6%90%AD%E5%BB%BA/" title="请查看此篇文章">请查看此篇文章</a></p><p>GitLabRunner：请看下面</p><p>Docker</p><p>Docker Compose</p><p>Docker Registry 私服：请看下面</p><p>ps:GitLab、GitLabRunner、Docker Registry 私服作为三个独立服务，分别部署在不同的服务器上。其中每台服务器中都要安装Docker和Docker Compose。</p><h1 id="Docker-Registry-私服"><a href="#Docker-Registry-私服" class="headerlink" title="Docker Registry 私服"></a>Docker Registry 私服</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p> 官方的 Docker Hub 是一个用于管理公共镜像的地方，我们可以在上面找到我们想要的镜像，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么你就需要 Docker Registry，它可以用来存储和管理自己的镜像。 </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里我们使用 <code>docker-compose</code> 来安装，配置如下： </p><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5000</span><span class="string">:5000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/registry/data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">konradkleine/docker-registry-frontend:v2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4444</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./certs/frontend.crt:/etc/apache2/server.crt:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./certs/frontend.key:/etc/apache2/server.key:ro</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ENV_DOCKER_REGISTRY_HOST=192.168.58.132</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ENV_DOCKER_REGISTRY_PORT=5000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="声明本地私服"><a href="#声明本地私服" class="headerlink" title="声明本地私服"></a>声明本地私服</h2><p>此服务器不需要修改，所有需要连接此仓库的“客户端需要修改”</p><p>修改<code>/etc/docker/daemon.json</code>文件添加私服地址</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;ip:5000&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 注意：该文件必须符合 json 规范，否则 Docker 将不能启动。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p><strong>检查客户端配置是否生效</strong></p><p> 使用 <code>docker info</code> 命令手动检查，如果从配置中看到如下内容，说明配置成功（192.168.75.133 为教学案例 IP） </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Insecure Registries:</span><br><span class="line"> 192.168.75.133:5000</span><br><span class="line"> 127.0.0.0/8</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们开启了两个服务，一个是私服后台<a href="http://ip:5000/v2/%EF%BC%9B%E4%B8%80%E4%B8%AA%E6%98%AFweb">http://ip:5000/v2/；一个是web</a> ui</p><p>浏览器访问私服后台：</p><p><img src="1.PNG"></p><p>浏览器访问Web UI：</p><p><img src="2.PNG"></p><h1 id="GitLab-Runer"><a href="#GitLab-Runer" class="headerlink" title="GitLab Runer"></a>GitLab Runer</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>理解了上面的基本概念之后，有没有觉得少了些什么东西 —— 由谁来执行这些构建任务呢？</p><p>答案就是 GitLab Runner 了！</p><p>想问为什么不是 GitLab CI 来运行那些构建任务？</p><p>一般来说，构建任务都会占用很多的系统资源 (譬如编译代码)，而 GitLab CI 又是 GitLab 的一部分，如果由 GitLab CI 来运行构建任务的话，在执行构建任务的时候，GitLab 的性能会大幅下降。</p><p>GitLab CI 最大的作用是管理各个项目的构建状态，因此，运行构建任务这种浪费资源的事情就交给 GitLab Runner 来做拉！</p><p>因为 GitLab Runner 可以安装到不同的机器上，所以在构建任务运行期间并不会影响到 GitLab 的性能</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p><strong>环境准备</strong></p><ul><li>创建工作目录 <code>/usr/local/docker/runner</code></li><li>创建构建目录 <code>/usr/local/docker/runner/environment</code></li><li>下载 <code>jdk-8u241-linux-x64.tar.gz</code> 并复制到 <code>/usr/local/docker/runner/environment</code></li><li>下载 <code>apache-maven-3.6.3-bin.tar.gz</code> 并复制到 <code>/usr/local/docker/runner/environment</code></li><li>将Docker仓库位置和加速复制到<code>/usr/local/docker/runner/environment</code></li><li>将Maven的setting的配置文件复制到<code>/usr/local/docker/runner/environment</code></li><li>将下载好的<code>docker-compose</code>复制到<code>/usr/local/docker/runner/environment</code></li></ul><p><font color='red'>ps:请根据自身的文件名称，来自行修改Dockerfile</font></p><p><strong>Docker私服地址</strong></p><p> 在 <code>/usr/local/docker/runner/environment</code> 目录下创建 <code>daemon.json</code>，用于配置加速器和仓库地址 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;192.168.58.132:5000&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dockerfile</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> gitlab/gitlab-runner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse&#x27;</span> &gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse&#x27;</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse&#x27;</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse&#x27;</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get update -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get clean</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Docker</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -y install wget  apt-transport-https ca-certificates curl software-properties-common &amp;&amp; \</span></span><br><span class="line"><span class="bash">    curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; \</span></span><br><span class="line"><span class="bash">    sh get-docker.sh --mirror Aliyun</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  mkdir -p /etc/docker/ &amp;&amp;\</span></span><br><span class="line"><span class="bash">    mkdir -p /usr/<span class="built_in">local</span>/java &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p /usr/<span class="built_in">local</span>/maven</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 加速</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> daemon.json /etc/docker/daemon.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/bin</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> docker-compose /usr/<span class="built_in">local</span>/bin</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x docker-compose</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Java</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> jdk-8u241-linux-x64.tar.gz  /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -zxvf jdk-8u241-linux-x64.tar.gz  &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -fr jdk-8u241-linux-x64.tar.gz</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Maven</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/maven</span></span><br><span class="line"><span class="comment"># RUN wget https://raw.githubusercontent.com/topsale/resources/master/maven/apache-maven-3.6.3-bin.tar.gz</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> apache-maven-3.6.3-bin.tar.gz /usr/<span class="built_in">local</span>/maven</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -zxvf apache-maven-3.6.3-bin.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -fr apache-maven-3.6.3-bin.tar.gz</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> settings.xml /usr/<span class="built_in">local</span>/maven/apache-maven-3.6.3/conf/settings.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_241</span><br><span class="line"><span class="keyword">ENV</span> MAVEN_HOME /usr/local/maven/apache-maven-<span class="number">3.6</span>.<span class="number">3</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$MAVEN_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br></pre></td></tr></table></figure><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab-runner:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">environment</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitlab-runner</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/etc/gitlab-runner</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure><h2 id="注册到GitLab"><a href="#注册到GitLab" class="headerlink" title="注册到GitLab"></a>注册到GitLab</h2><h3 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h3><p><strong>打开被集成的项目</strong></p><p><img src="3.PNG"></p><p><strong>项目 –&gt; 设置 –&gt; CI/CD –&gt; Runner 设置</strong></p><p><img src="4.PNG"></p><p><strong>获取GitLab CI 地址与令牌参数</strong></p><p><img src="5.PNG"></p><h3 id="GitLab-Runner"><a href="#GitLab-Runner" class="headerlink" title="GitLab Runner"></a>GitLab Runner</h3><p><strong>注册 Runner</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab-runner gitlab-runner register</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 GitLab 地址</span></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line">http://192.168.10.132/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 GitLab Token</span></span><br><span class="line">Please enter the gitlab-ci token for this runner:</span><br><span class="line">1Lxq_f1NRfCfeNbE5WRh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 Runner 的说明</span></span><br><span class="line">Please enter the gitlab-ci description for this runner:</span><br><span class="line">可以为空</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 Tag，可以用于指定在构建规定的 tag 时触发 ci</span></span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line">deploy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里选择 <span class="literal">true</span> ，可以用于代码上传后直接执行</span></span><br><span class="line">Whether to run untagged builds [true/false]:</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里选择 <span class="literal">false</span>，可以直接回车，默认为 <span class="literal">false</span></span></span><br><span class="line">Whether to lock Runner to current project [true/false]:</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择 runner 执行器，这里我们选择的是 shell</span></span><br><span class="line">Please enter the executor: virtualbox, docker+machine, parallels, shell, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh:</span><br><span class="line">shell</span><br></pre></td></tr></table></figure><p><img src="6.PNG"></p><p>此时项目已经注册到GitLab Runner</p><h1 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h1><p><strong>目录结构</strong></p><p><img src="7.PNG"></p><p>  <strong>.gitlab-ci.yml</strong> </p><p>在项目工程下编写 <code>.gitlab-ci.yml</code> 配置文件： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">push</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">run</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/usr/local/maven/apache-maven-3.6.3/bin/mvn</span> <span class="string">clean</span> <span class="string">package</span> <span class="string">-DskipTests</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cp</span> <span class="string">target/demo-0.0.1-SNAPSHOT.jar</span> <span class="string">Docker/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">Docker</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="number">192.168</span><span class="number">.58</span><span class="number">.132</span><span class="string">:5000/hello-gitlab</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">push:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">push</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="number">192.168</span><span class="number">.58</span><span class="number">.132</span><span class="string">:5000/hello-gitlab</span></span><br><span class="line"></span><br><span class="line"><span class="attr">run:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">run</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">Docker</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker-compose</span> <span class="string">down</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"></span><br><span class="line"><span class="attr">clean:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">clean</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">image</span> <span class="string">prune</span> <span class="string">-f</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Docker文件夹</strong></p><p><strong>编写Dockerfile构建镜像</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> zxj &lt;qluzxj@outlook.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> demo-0.0.1-SNAPSHOT.jar /app/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app/app.jar&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>编写docker-compose.yml执行</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">iToken-config:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.58</span><span class="number">.132</span><span class="string">:5000/hello-gitlab</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hello-gitlab</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1234</span><span class="string">:8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>提交代码，出发构建</p><p><img src="10.PNG"></p><p>构建成功</p><p><img src="11.PNG"></p><p>查看Docker Registry仓库</p><p><img src="12.PNG"></p><p>查看项目运行</p><p><img src="13.PNG"></p><h2 id="修改代码再次提交"><a href="#修改代码再次提交" class="headerlink" title="修改代码再次提交"></a>修改代码再次提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;hi&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Hi,this is first CI!&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;hi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hi,this is second CI!&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>再次运行</strong></p><p><img src="14.PNG"></p><p><strong>查看结果</strong></p><p><img src="15.PNG"></p><h1 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h1><p>至此，完结。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.funtl.com/zh/apache-dubbo-ci/">持续集成的基本概念</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>持续集成、持续交付、持续部署</title>
      <link href="2020/03/04/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E3%80%81%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98%E3%80%81%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
      <url>2020/03/04/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E3%80%81%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98%E3%80%81%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p> 互联网软件的开发和发布，已经形成了一套标准流程，最重要的组成部分就是持续集成（Continuous integration，简称CI）。 </p><a id="more"></a><h1 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h1><p> 持续集成指的是，频繁地（一天多次）将代码集成到主干。它的好处主要有两个： </p><ul><li>快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。</li><li>防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</li></ul><p>Martin Fowler 说过，”持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</p><p><img src="1.jpg"></p><p>持续集成强调<font color='red'>开发人员提交了新代码之后，立刻进行构建、（单元）测试。</font>根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p><p>持续集成就是将最新的代码变为可交付的形式，顶多在加部署在开发环境，供个人测试。</p><p>与持续集成相关的，还有两个概念，分别是持续交付和持续部署。</p><h1 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h1><p>持续交付（Continuous delivery，简称CD）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。</p><p>持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，<font color='red'>软件是随时随地可以交付的。</font></p><p><strong>持续交付的前提是，代码必须是一个里程碑式的完成，比如此阶段开发完成。持续交付就是将这个里程碑式的代码交付给测试、类生产环境（部署在这里）。</strong></p><p><img src="2.jpg"></p><p> 持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。 </p><h1 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h1><p>持续部署（continuous deployment）是持续交付的下一步，指的是代码<font color='red'>通过评审以后，自动部署到生产环境。</font></p><p>持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p><p>持续部署的前提是能自动化完成测试、构建、部署等步骤。</p><p><img src="3.jpg"></p><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><p><a href="https://www.funtl.com/zh/apache-dubbo-ci/">持续集成的基本概念</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo应用程序</title>
      <link href="2020/03/04/Dubbo%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>2020/03/04/Dubbo%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款<strong>高性能</strong>、轻量级的<strong>开源 Java RPC 分布式服务框架</strong>，它提供了三大核心能力：<strong>面向接口的远程方法调用</strong>，<strong>智能容错和负载均衡</strong>，以及<strong>服务自动注册和发现</strong>。她最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。</p><a id="more"></a><h1 id="Dubbo-Admin管理控制台"><a href="#Dubbo-Admin管理控制台" class="headerlink" title="Dubbo Admin管理控制台"></a>Dubbo Admin管理控制台</h1><p>管理控制台为内部裁剪版本，开源部分主要包含：路由规则，动态配置，服务降级，访问控制，权重调整，负载均衡，等管理功能。</p><p>GitHub：<a href="https://github.com/apache/incubator-dubbo-ops">https://github.com/apache/incubator-dubbo-ops</a></p><p><img src="1.png"></p><p><strong>克隆代码</strong></p><p><code>git clone https://github.com/apache/dubbo-admin.git</code></p><p><strong>修改配置文件</strong></p><p><code>dubbo-admin-server/src/main/resources/application.properties</code></p><p>中的服务注册与发现中心的配置(我的zookeeper是3.4.14版本，集群)</p><p>**Build and Start **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"><span class="built_in">cd</span> dubbo-admin-distribution/target</span><br><span class="line">java -jar dubbo-admin-0.1.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览</span></span><br><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><ul><li>现象：使用 <code>mvn clean package</code> 构建 DubboAdmin 控制台时会出现 <code>npm install</code> 操作</li><li>解决：新版控制台已改为前后分离模式，前端采用 Vue.js 开发，故需要 NodeJS 支持，请自行安装（运行到此处时会自动下载安装）。官网地址：<a href="http://nodejs.cn/">http://nodejs.cn/</a></li><li>其他：配置淘宝镜像加速。官网地址：<a href="http://npm.taobao.org/">http://npm.taobao.org/</a></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装 cnpm 命令行工具</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"># 安装模块</span><br><span class="line">cnpm install [name]</span><br></pre></td></tr></table></figure><h3 id="两处-npm-WARN"><a href="#两处-npm-WARN" class="headerlink" title="两处 npm WARN"></a>两处 npm WARN</h3><ul><li>现象：使用<code>mvn clean package</code>构建 DubboAdmin 控制台时会出现<code>npm install</code>操作，此时还会出现两处警告，分别为<ul><li><code>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents)</code></li><li><code>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</code></li></ul></li><li>解决：从警告说明中可以看出，<code>fsevents</code> 模块用于 <code>&#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125;</code> Mac 系统，当前系统为 <code>(current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</code> Windows 系统，不予理会即可</li></ul><h1 id="Dubbo应用程序"><a href="#Dubbo应用程序" class="headerlink" title="Dubbo应用程序"></a>Dubbo应用程序</h1><p><img src="2.png"></p><h2 id="创建服务接口项目"><a href="#创建服务接口项目" class="headerlink" title="创建服务接口项目"></a>创建服务接口项目</h2><p>创建一个名为 <code>dubbo-service-user-api</code> 的项目，该项目只负责<strong>定义接口</strong></p><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>api<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>目录结构</strong></p><p><img src="3.PNG"></p><p><strong>安装到本地仓库</strong></p><p>下面的两个项目需要依赖此jar，所以需要安装到本地仓库。</p><p>如果有条件的话，可以发布到自己的私服Nexus。并且在下面两个项目pom和maven配置中设置私服地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn install </span><br><span class="line"><span class="comment"># mvn deploy</span></span><br></pre></td></tr></table></figure><h2 id="创建服务提供者项目"><a href="#创建服务提供者项目" class="headerlink" title="创建服务提供者项目"></a>创建服务提供者项目</h2><p>创建一个名为 <code>dubbo-service-user-provider</code> 的项目，该项目主要用于实现接口</p><p>这里要依赖上述接口jar，请注意接口pom的groupId、artifactId、version</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Dubbo 依赖 Start--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Dubbo 依赖 End--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- User 服务接口依赖 Start--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- User 服务接口依赖 End--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要增加了以下依赖：</p><ul><li><code>com.alibaba.boot:dubbo-spring-boot-starter:0.2.0</code>：Dubbo Starter，0.2.0 版本支持 Spring Boot 2.x，是一个长期维护的版本。注：0.1.0 版本已经不推荐使用了，是个短期维护的版本，如果你还在用旧版，请大家尽快升级。</li><li><code>com.alibaba.boot:dubbo-spring-boot-actuator:0.2.0</code>：Dubbo 的服务状态检查</li><li>top.awslzhang:api:1.0.0-SNAPSHOT<code>：刚才创建的接口项目，如果无法依赖别忘记先 </code>mvn clean install` 到本地仓库。</li></ul><h3 id="通过-Service-注解实现服务提供方"><a href="#通过-Service-注解实现服务提供方" class="headerlink" title="通过 @Service 注解实现服务提供方"></a>通过 @Service 注解实现服务提供方</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.awslzhang.user.provider.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> top.awslzhang.api.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明版本</span></span><br><span class="line"><span class="meta">@Service(version = &quot;$&#123;user.service.version&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello ,This is Provider!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps：请注意实现的接口为上个项目的接口、注解@Service包为<code>com.alibaba.dubbo.config.annotation.Service;</code>请不要搞错。</p><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p><a href="#%E6%A6%82%E8%BF%B0">上述</a>提到过Provider服务要运行在Container容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.awslzhang.user.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.container.Main;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude= &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="comment">// 服务消费者没有数据库，springboot会默认加载数据库，不写会报错</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">        <span class="comment">// 启动 Provider 容器，注意这里的 Main 是 com.alibaba.dubbo.container 包下的</span></span><br><span class="line">        Main.main(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-service-user-provider</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">dubbo-service-user-provider</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-service-user-provider</span></span><br><span class="line">    <span class="attr">qos-enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">qos-port:</span> <span class="number">22222</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.174.132:2181?backup=192.168.174.132:2182,192.168.174.132:2183</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">zookeeper</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">12345</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">server</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">basePackages:</span> <span class="string">top.awslzhang.user.provider.impl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UserService service version</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enables Dubbo All Endpoints 健康状态管理</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">dubbo:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-configs:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-services:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-references:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-properties:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Dubbo Health</span></span><br><span class="line">  <span class="attr">health:</span></span><br><span class="line">    <span class="attr">dubbo:</span></span><br><span class="line">      <span class="attr">status:</span></span><br><span class="line">        <span class="comment">## StatusChecker Name defaults (default : &quot;memory&quot;, &quot;load&quot; )</span></span><br><span class="line">        <span class="attr">defaults:</span> <span class="string">memory</span></span><br><span class="line">        <span class="comment">## StatusChecker Name extras (default : empty )</span></span><br><span class="line">        <span class="attr">extras:</span> <span class="string">load,threadpool</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ps：需要十分注意上面的<code>base-packages</code>属性，虽然spring boot提示是这个，但其实不是，是<code>basePackages</code></p><h2 id="创建服务消费者项目"><a href="#创建服务消费者项目" class="headerlink" title="创建服务消费者项目"></a>创建服务消费者项目</h2><p>创建一个名为 <code>dubbo-service-user-consumer</code> 的项目，该项目用于消费接口（调用接口）</p><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Dubbo 依赖 Start--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Dubbo 依赖 End--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- User 服务接口依赖 Start--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- User 服务接口依赖 End--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="通过-Reference-注入-UserService"><a href="#通过-Reference-注入-UserService" class="headerlink" title="通过 @Reference 注入 UserService"></a>通过 @Reference 注入 UserService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.awslzhang.user.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> top.awslzhang.api.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.sayHi();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Spring boot application</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-service-user-consumer</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UserService service version</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dubbo Config properties</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="comment"># scan Reference</span></span><br><span class="line">    <span class="attr">basePackages:</span> <span class="string">top.awslzhang.user.consumer.controller</span></span><br><span class="line">  <span class="comment">## ApplicationConfig Bean</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">dubbo-service-user-consumer</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-service-user-consumer</span></span><br><span class="line">  <span class="comment">## RegistryConfig Bean</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.174.132:2181?backup=192.168.174.132:2182,192.168.174.132:2183</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dubbo Endpoint (default status is disable)</span></span><br><span class="line"><span class="attr">endpoints:</span></span><br><span class="line">  <span class="attr">dubbo:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9091</span></span><br><span class="line">  <span class="comment"># Dubbo Health</span></span><br><span class="line">  <span class="attr">health:</span></span><br><span class="line">    <span class="attr">dubbo:</span></span><br><span class="line">      <span class="attr">status:</span></span><br><span class="line">        <span class="comment">## StatusChecker Name defaults (default : &quot;memory&quot;, &quot;load&quot; )</span></span><br><span class="line">        <span class="attr">defaults:</span> <span class="string">memory</span></span><br><span class="line">  <span class="comment"># Enables Dubbo All Endpoints</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">dubbo:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-configs:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-services:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-references:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-properties:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建API-GATEWAY-服务聚合"><a href="#创建API-GATEWAY-服务聚合" class="headerlink" title="创建API GATEWAY/服务聚合"></a>创建API GATEWAY/服务聚合</h2><p>这里只有实现，<a href="/2020/03/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8BDubbo/" title="点击这里查看原理">点击这里查看原理</a></p><h3 id="API项目"><a href="#API项目" class="headerlink" title="API项目"></a>API项目</h3><p>在<code>dubbo-service-user-api</code>中加入一个接口</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.awslzhang.myshop.api.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RouterService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务消费端"><a href="#服务消费端" class="headerlink" title="服务消费端"></a>服务消费端</h3><p>在 <code>dubbo-service-user-provider</code>项目中修改</p><p>pom中依赖<code>dubbo-service-user-api</code></p><p><strong>yml</strong></p><p>因为这个消费者变成了服务聚合的提供者，所以修改它为服务提供者(注意端口不要和其他项目重复)</p><p>加入：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">30880</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">server</span></span><br><span class="line">    <span class="attr">serialization:</span> <span class="string">kryo</span></span><br></pre></td></tr></table></figure><p><strong>Application</strong></p><p>因为这个消费者变成了服务聚合的提供者，所以修改它为服务提供者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude= &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">        Main.main(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现API项目接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(version = &quot;$&#123;mydubbo.user.version&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterServiceImpl</span> <span class="keyword">implements</span> <span class="title">RouterService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'><strong>ps：还需要配置dubbo:  scan:      basePackages: xxx，使项目能扫描到@service和@control注解</strong></font></p><h3 id="服务聚合消费端"><a href="#服务聚合消费端" class="headerlink" title="服务聚合消费端"></a>服务聚合消费端</h3><p>创建<code>myshop-api-webadmin</code></p><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myshop-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../myshop-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>用户服务消费者<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBootText注解依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Junit依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- dubbo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myshop-commons-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.parent.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- user api--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service-user-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.parent.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        前台统一静态资源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.awslzhang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myshop-static-backend<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.parent.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mydubbo:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  <span class="attr">versions:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">v1:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">myshop-api-webadmin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="comment"># scan Reference</span></span><br><span class="line">    <span class="attr">basePackages:</span> <span class="string">top.awslzhang.myshop.api.webadmin</span></span><br><span class="line">  <span class="comment">## ApplicationConfig Bean</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">myshop-api-webadmin</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">myshop-api-webadmin</span></span><br><span class="line">  <span class="comment">## RegistryConfig Bean</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.174.134:2181?backup=192.168.174.134:2182,192.168.174.134:2183</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">serialization:</span> <span class="string">kryo</span></span><br><span class="line"><span class="comment"># Dubbo Endpoint (default status is disable)</span></span><br><span class="line"><span class="attr">endpoints:</span></span><br><span class="line">  <span class="attr">dubbo:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9092</span></span><br><span class="line">  <span class="comment"># Dubbo Health</span></span><br><span class="line">  <span class="attr">health:</span></span><br><span class="line">    <span class="attr">dubbo:</span></span><br><span class="line">      <span class="attr">status:</span></span><br><span class="line">        <span class="comment">## StatusChecker Name defaults (default : &quot;memory&quot;, &quot;load&quot; )</span></span><br><span class="line">        <span class="attr">defaults:</span> <span class="string">memory</span></span><br><span class="line">  <span class="comment"># Enables Dubbo All Endpoints</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">dubbo:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-configs:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-services:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-references:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">dubbo-properties:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>跳转方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/router&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference(version = &quot;$&#123;mydubbo.user.version&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> RouterService routerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mydubbo.user.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;user&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userService</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        routerService.info();</span><br><span class="line">        <span class="comment">// 本端是否为消费端，这里会返回true</span></span><br><span class="line">        <span class="keyword">boolean</span> isConsumerSide = RpcContext.getContext().isConsumerSide();</span><br><span class="line">        <span class="keyword">if</span> (isConsumerSide)&#123;</span><br><span class="line">            <span class="comment">// 获取最后一次调用的提供方IP地址</span></span><br><span class="line">            String serverIP = RpcContext.getContext().getRemoteHost();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;redirect:http://%s:%s%s&quot;</span>, serverIP, userPort, path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-Dubbo-Admin-控制台"><a href="#启动-Dubbo-Admin-控制台" class="headerlink" title="启动 Dubbo Admin 控制台"></a>启动 Dubbo Admin 控制台</h2><p>查看是否成功注册服务，效果图如下：</p><p><img src="4.png"></p><hr><h1 id="Dubbo的负载均衡"><a href="#Dubbo的负载均衡" class="headerlink" title="Dubbo的负载均衡"></a>Dubbo的负载均衡</h1><a href="/2020/03/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8BDubbo/" title="点击这里查看Duboo负载均衡">点击这里查看Duboo负载均衡</a><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 <code>random</code> 随机调用。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">provider:</span></span><br><span class="line">    <span class="attr">loadbalance:</span> <span class="string">roundrobin</span></span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">consumer:</span></span><br><span class="line">    <span class="attr">loadbalance:</span> <span class="string">roundrobin</span></span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在服务者代码中打印出本个服务是哪个端口，用于鉴别服务端负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明版本</span></span><br><span class="line"><span class="meta">@Service(version = &quot;$&#123;user.service.version&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取本地协议接口</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;dubbo.protocol.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello ,This is Provider! Consumer Post is ： &quot;</span> +port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改端口号并分别启动多个服务提供者，此时访问服务消费者：<a href="http://localhost:9090/hi">http://localhost:9090/hi</a></p><p>如下开启</p><p><img src="5.PNG"></p><p>浏览器会交替显示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello ,This is Provider! Consumer Post is ： 12345</span><br><span class="line">Hello ,This is Provider! Consumer Post is ： 12346</span><br></pre></td></tr></table></figure><p><strong>附：在 IDEA 中配置一个工程启动多个实例</strong></p><p>版本为<code>2019.3.3</code></p><p><img src="6.png"></p><p><img src="7.PNG"></p><p>勾选红色区域即可</p><p>通过修改 <code>application.yml</code> 配置文件的 <code>dubbo.protocol.port</code> 的端口，启动多个实例，需要多个端口，分别进行启动即可。</p><h1 id="Dubbo-Kryo高速序列化"><a href="#Dubbo-Kryo高速序列化" class="headerlink" title="Dubbo + Kryo高速序列化"></a>Dubbo + Kryo高速序列化</h1><a href="/2020/03/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8BDubbo/" title="点击这里查看Dubbo + Kryo告诉序列化">点击这里查看Dubbo + Kryo告诉序列化</a><h2 id="启用Kryo"><a href="#启用Kryo" class="headerlink" title="启用Kryo"></a>启用Kryo</h2><p>在 Provider 和 Consumer 项目启用 Kryo 高速序列化功能，两个项目的配置方式相同</p><h2 id="增加-Kryo-依赖"><a href="#增加-Kryo-依赖" class="headerlink" title="增加 Kryo 依赖"></a>增加 Kryo 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.javakaffee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kryo-serializers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.42<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加配置yml"><a href="#添加配置yml" class="headerlink" title="添加配置yml"></a>添加配置yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">serialization:</span> <span class="string">kryo</span></span><br><span class="line">    <span class="attr">optimizer:</span> <span class="string">top.awslzhang.user.provider.kryo.SerializationOptimizerImpl</span></span><br></pre></td></tr></table></figure><p><strong>注册被序列化类</strong></p><p>可有可无，可以对自己项目中需要被序列化的类来注册，不注册也没什么问题</p><p>要让 Kryo 和 FST 完全发挥出高性能，最好将那些需要被序列化的类注册到 dubbo 系统中，例如，我们可以实现如下回调接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationOptimizerImpl</span> <span class="keyword">implements</span> <span class="title">SerializationOptimizer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Class&gt; <span class="title">getSerializableClasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Class&gt; classes = <span class="keyword">new</span> LinkedList&lt;Class&gt;();</span><br><span class="line">        classes.add(User.class);</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在注册这些类后，序列化的性能可能被大大提升，特别针对小数量的嵌套对象的时候。</p><p>当然，在对一个类做序列化的时候，可能还级联引用到很多类，比如 Java 集合类。针对这种情况，我们已经自动将 JDK 中的常用类进行了注册，所以你不需要重复注册它们（当然你重复注册了也没有任何影响），包括：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GregorianCalendar</span><br><span class="line">InvocationHandler</span><br><span class="line">BigDecimal</span><br><span class="line">BigInteger</span><br><span class="line">Pattern</span><br><span class="line">BitSet</span><br><span class="line">URI</span><br><span class="line">UUID</span><br><span class="line">HashMap</span><br><span class="line">ArrayList</span><br><span class="line">LinkedList</span><br><span class="line">HashSet</span><br><span class="line">TreeSet</span><br><span class="line">Hashtable</span><br><span class="line">Date</span><br><span class="line">Calendar</span><br><span class="line">ConcurrentHashMap</span><br><span class="line">SimpleDateFormat</span><br><span class="line">Vector</span><br><span class="line">BitSet</span><br><span class="line">StringBuffer</span><br><span class="line">StringBuilder</span><br><span class="line">Object</span><br><span class="line">Object[]</span><br><span class="line">String[]</span><br><span class="line">byte[]</span><br><span class="line">char[]</span><br><span class="line">int[]</span><br><span class="line">float[]</span><br><span class="line">double[]</span><br></pre></td></tr></table></figure><p>由于注册被序列化的类仅仅是出于性能优化的目的，所以即使你忘记注册某些类也没有关系。事实上，即使不注册任何类，Kryo 和 FST 的性能依然普遍优于 hessian 和 dubbo 序列化。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>无参构造函数和 Serializable 接口</strong></p><p>如果被序列化的类中 <font color='red'>不包含无参的构造函数，则在 Kryo 的序列化中，性能将会大打折扣</font>，因为此时我们在底层将用 Java 的序列化来透明的取代 Kryo 序列化。所以，<code>尽可能为每一个被序列化的类添加无参构造函数是一种最佳实践</code>（当然一个 Java 类如果不自定义构造函数，默认就有无参构造函数）。</p><p>另外，Kryo 和 FST 都不需要被序列化类实现 Serializable 接口，<font color='red'>但我们还是建议每个被序列化类都去实现 Serializable 接口，因为这样可以保持和 Java 序列化以及 dubbo 序列化的兼容性</font>，另外也使我们未来采用上述某些自动注册机制带来可能。</p><h2 id="测试kryo"><a href="#测试kryo" class="headerlink" title="测试kryo"></a>测试kryo</h2><p>如何测试kryo是否生效，简单，我们Provider和Consumer两者，一个实现序列化一个不实现，如果有报错，就证明运用成功。</p><hr><h1 id="Dubbo-Hystrix-实现服务熔断"><a href="#Dubbo-Hystrix-实现服务熔断" class="headerlink" title="Dubbo + Hystrix 实现服务熔断"></a>Dubbo + Hystrix 实现服务熔断</h1><p>通过Hystrix 实现微服务的四大问题之一：服务挂了如何解决</p><p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 <code>RPC</code> 相互调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，<code>Servlet</code> 容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 <strong>“雪崩”</strong> 效应。</p><p>为了解决这个问题，业界提出了熔断器模型。</p><p>Netflix 开源了 Hystrix 组件，实现了熔断器模式，Spring Cloud 对这一组件进行了整合。在微服务架构中，一个请求需要调用多个服务是非常常见的，如下图：</p><p><img src="8.png"></p><p>较底层的服务如果出现故障，会导致连锁故障。当对特定的服务的调用的不可用达到一个阀值（Hystrix 是 <strong>5 秒 20 次</strong>） 熔断器将会被打开。</p><p><img src="9.png"></p><p>熔断器打开后，为了避免连锁故障，通过 <code>fallback</code> 方法可以直接返回一个固定值。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h3><p><strong>pom依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在 Application 中增加 @EnableHystrix 注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(xxx.class, args);</span><br><span class="line">        Main.main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 Service 中增加 @HystrixCommand 注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(version = &quot;$&#123;user.service.version&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取本地协议接口</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;dubbo.protocol.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;), // 尝试次数</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value =</span></span><br><span class="line"><span class="meta">                    &quot;2000&quot;) // 超时时间</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Exception to show hystrix enabled.&quot;</span>);</span><br><span class="line"><span class="comment">//        return &quot;Hello ,This is Provider! Consumer Post is ： &quot; +port;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>熔断方法必须和原方法相同参数！</font></p><p><strong>测试熔断器</strong></p><p>此时我们再次请求服务提供者，浏览器会报 500 异常</p><p><code>Exception to show hystrix enabled.</code></p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p><strong>pom依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在 Application 中增加 @EnableHystrix 注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(xxx.class, args);</span><br><span class="line">        Main.main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在调用方法上增加 @HystrixCommand 注解，并指定 fallbackMethod 方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference(version = &quot;$&#123;user.service.version&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;hiError&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.sayHi();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hystrix fallback&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>此时我们再次请求服务提供者，浏览器会显示：</p><p><code>Hystrix fallback</code></p><p>至此，Dubbo + Hystrix 配置完成</p><hr><h1 id="Dubbo-Hystrix-熔断器仪表盘"><a href="#Dubbo-Hystrix-熔断器仪表盘" class="headerlink" title="Dubbo + Hystrix 熔断器仪表盘"></a>Dubbo + Hystrix 熔断器仪表盘</h1><p>监控熔断器的界面</p><h2 id="使用熔断器仪表盘监控"><a href="#使用熔断器仪表盘监控" class="headerlink" title="使用熔断器仪表盘监控"></a>使用熔断器仪表盘监控</h2><p>在 Provider 和 Consumer 项目增加 Hystrix 仪表盘功能，两个项目的改造方式相同</p><p><strong>pom依赖</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在 Application 中增加 @EnableHystrixDashboard 注解</strong></p><p><code>@EnableHystrixDashboard</code></p><p><strong>创建 hystrix.stream 的 Servlet 配置</strong></p><p>Spring Boot 2.x 版本开启 Hystrix Dashboard 与 Spring Boot 1.x 的方式略有不同，需要增加一个 <code>HystrixMetricsStreamServlet</code> 的配置，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-Hystrix-Dashboard"><a href="#测试-Hystrix-Dashboard" class="headerlink" title="测试 Hystrix Dashboard"></a>测试 Hystrix Dashboard</h2><p>浏览器端访问 <a href="http://localhost:9090/hystrix">http://localhost:9090/hystrix</a> 界面如下：</p><p><img src="10.png"></p><p>点击 Monitor Stream，进入下一个界面，访问 <a href="http://localhost:9090/hi">http://localhost:9090/hi</a> 触发熔断后，监控界面显示效果如下：</p><p><img src="11.png"></p><h2 id="附：Hystrix-说明"><a href="#附：Hystrix-说明" class="headerlink" title="附：Hystrix 说明"></a>附：Hystrix 说明</h2><p><strong>什么情况下会触发 fallback 方法</strong></p><table><thead><tr><th>名字</th><th>描述</th><th>触发fallback</th></tr></thead><tbody><tr><td>EMIT</td><td>值传递</td><td>NO</td></tr><tr><td>SUCCESS</td><td>执行完成，没有错误</td><td>NO</td></tr><tr><td>FAILURE</td><td>执行抛出异常</td><td>YES</td></tr><tr><td>TIMEOUT</td><td>执行开始，但没有在允许的时间内完成</td><td>YES</td></tr><tr><td>BAD_REQUEST</td><td>执行抛出HystrixBadRequestException</td><td>NO</td></tr><tr><td>SHORT_CIRCUITED</td><td>断路器打开，不尝试执行</td><td>YES</td></tr><tr><td>THREAD_POOL_REJECTED</td><td>线程池拒绝，不尝试执行</td><td>YES</td></tr><tr><td>SEMAPHORE_REJECTED</td><td>信号量拒绝，不尝试执行</td><td>YES</td></tr></tbody></table><p><strong>Hystrix Dashboard 界面监控参数</strong></p><p><img src="12.png"></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://github.com/apache/dubbo-admin">Dubbo Admin管理控制台</a></p><p><a href="https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md">Dubbo Spring Boot 工程</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务架构解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构解决方案之Dubbo</title>
      <link href="2020/03/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8BDubbo/"/>
      <url>2020/03/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8BDubbo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近年来，微服务在应用开发和部署方面取得了显著的进步。将应用开发或者重构成微服务以分离服务，通过 API 以明确的方式来相互“对话” 。例如，每个微服务都是自包含（self-contained），各自维护自己的数据存储（这非常有意义），可以独立更新其他服务。</p><a id="more"></a><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>把一个大型的单个应用程序和服务拆分为数个甚至数十个的支持微服务，它可扩展单个组件而不是整个的应用程序堆栈，从而满足服务等级协议。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>围绕业务领域组件来创建应用，这些应用可独立地进行开发、管理和迭代。在分散的组件中使用云架构和平台式部署、管理和服务功能，使产品交付变得更加简单。</p><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>用一些功能比较明确、业务比较精练的服务去解决更大、更实际的问题。</p><p><strong>PS：</strong> 微服务这个概念是 2012 年出现的，作为加快 Web 和移动应用程序开发进程的一种方法，2014 年开始受到各方的关注，同年为微服务的元年；</p><h1 id="微服务实践"><a href="#微服务实践" class="headerlink" title="微服务实践"></a>微服务实践</h1><p>要实际的应用微服务，需要解决以下问题：</p><ul><li>客户端如何访问这些服务</li><li>每个服务之间如何通信</li><li>如此多的服务，如何实现？</li><li>服务挂了，如何解决？（备份方案，应急处理机制）</li></ul><hr><h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款<strong>高性能</strong>、轻量级的<strong>开源 Java RPC 分布式服务框架</strong>，它提供了三大核心能力：<strong>面向接口的远程方法调用</strong>，<strong>智能容错和负载均衡</strong>，以及<strong>服务自动注册和发现</strong>。她最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="1.jpg"></p><p><strong>节点角色说明</strong></p><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td><code>Provider</code></td><td>暴露服务的服务提供方</td></tr><tr><td><code>Consumer</code></td><td>调用远程服务的服务消费方</td></tr><tr><td><code>Registry</code></td><td>服务注册与发现的注册中心</td></tr><tr><td><code>Monitor</code></td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td><code>Container</code></td><td>服务运行容器</td></tr></tbody></table><p><strong>调用关系说明</strong></p><ol start="0"><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</li></ol><br/><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="启动时检查"><a href="#启动时检查" class="headerlink" title="启动时检查"></a>启动时检查</h3><p>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 <code>check=&quot;true&quot;</code>。</p><p>可以通过 <code>check=&quot;false&quot;</code> 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p><p>另外，如果你的 Spring 容器是懒加载的，或者通过 API 编程延迟引用服务，请关闭 check，否则服务临时不可用时，会抛出异常，拿到 null 引用，如果 <code>check=&quot;false&quot;</code>，总是会返回引用，当服务恢复时，能自动连上。</p><h4 id="通过配置文件配置"><a href="#通过配置文件配置" class="headerlink" title="通过配置文件配置"></a>通过配置文件配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">reference:</span></span><br><span class="line">    <span class="attr">com:</span></span><br><span class="line">      <span class="attr">foo:</span></span><br><span class="line">        <span class="attr">BarService:</span></span><br><span class="line">          <span class="attr">check:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">check:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">check:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">consumer:</span></span><br><span class="line">    <span class="attr">check:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p><code>dubbo.reference.check=false</code>，强制改变所有 reference 的 check 值，就算配置中有声明，也会被覆盖。</p><p><code>dubbo.consumer.check=false</code>，是设置 check 的缺省值，如果配置中有显式的声明，如：``，不会受影响。</p><p><code>dubbo.registry.check=false</code>，前面两个都是指订阅成功，但提供者列表是否为空是否报错，如果注册订阅失败时，也允许启动，需使用此选项，将在后台定时重试。</p><br/><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 <code>random</code> 随机调用。</p><p>可以自行扩展负载均衡策略，参见：<a href="https://dubbo.apache.org/zh-cn/docs/dev/impls/load-balance.html">负载均衡扩展</a></p><h4 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h4><h5 id="Random-LoadBalance"><a href="#Random-LoadBalance" class="headerlink" title="Random LoadBalance"></a>Random LoadBalance</h5><ul><li><strong>随机</strong>，按权重设置随机概率。</li><li>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</li></ul><h5 id="RoundRobin-LoadBalance"><a href="#RoundRobin-LoadBalance" class="headerlink" title="RoundRobin LoadBalance"></a>RoundRobin LoadBalance</h5><ul><li><strong>轮询</strong>，按公约后的权重设置轮询比率。</li><li>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</li></ul><h5 id="LeastActive-LoadBalance"><a href="#LeastActive-LoadBalance" class="headerlink" title="LeastActive LoadBalance"></a>LeastActive LoadBalance</h5><ul><li><strong>最少活跃调用数</strong>，相同活跃数的随机，活跃数指调用前后计数差。</li><li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</li></ul><h5 id="ConsistentHash-LoadBalance"><a href="#ConsistentHash-LoadBalance" class="headerlink" title="ConsistentHash LoadBalance"></a>ConsistentHash LoadBalance</h5><ul><li><strong>一致性 Hash</strong>，相同参数的请求总是发到同一提供者。</li><li>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</li><li>算法参见：<a href="http://en.wikipedia.org/wiki/Consistent_hashing">http://en.wikipedia.org/wiki/Consistent_hashing</a></li><li>缺省只对第一个参数 Hash，如果要修改，请配置 ``</li><li>缺省用 160 份虚拟节点，如果要修改，请配置 ``</li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="服务端Provider"><a href="#服务端Provider" class="headerlink" title="服务端Provider"></a>服务端Provider</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">provider:</span></span><br><span class="line">    <span class="attr">loadbalance:</span> <span class="string">roundrobin</span></span><br></pre></td></tr></table></figure><h5 id="客户端Consumer"><a href="#客户端Consumer" class="headerlink" title="客户端Consumer"></a>客户端Consumer</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">consumer:</span></span><br><span class="line">    <span class="attr">loadbalance:</span> <span class="string">roundrobin</span></span><br></pre></td></tr></table></figure><br/><h3 id="Dubbo-Kryo实现高速序列化"><a href="#Dubbo-Kryo实现高速序列化" class="headerlink" title="Dubbo + Kryo实现高速序列化"></a>Dubbo + Kryo实现高速序列化</h3><p>Dubbo RPC 是 Dubbo 体系中最核心的一种高性能、高吞吐量的远程调用方式，可以称之为多路复用的 TCP 长连接调用：</p><ul><li>长连接：避免了每次调用新建 TCP 连接，提高了调用的响应速度</li><li>多路复用：单个 TCP 连接可交替传输多个请求和响应的消息，降低了连接的等待闲置时间，从而减少了同样并发数下的网络连接数，提高了系统吞吐量</li></ul><p>Dubbo RPC 主要用于两个 Dubbo 系统之间的远程调用，特别适合高并发、小数据的互联网场景。而序列化对于远程调用的响应速度、吞吐量、网络带宽消耗等同样也起着至关重要的作用，是我们提升分布式系统性能的最关键因素之一。</p><p>Dubbo 中支持的序列化方式：</p><ul><li>dubbo 序列化：阿里尚未开发成熟的高效 java 序列化实现，阿里不建议在生产环境使用它</li><li>hessian2 序列化：hessian 是一种跨语言的高效二进制序列化方式。但这里实际不是原生的 hessian2 序列化，而是阿里修改过的 hessian lite，它是 dubbo RPC 默认启用的序列化方式</li><li>json 序列化：目前有两种实现，一种是采用的阿里的 fastjson 库，另一种是采用 dubbo 中自己实现的简单 json 库，但其实现都不是特别成熟，而且 json 这种文本序列化性能一般不如上面两种二进制序列化。</li><li>java 序列化：主要是采用 JDK 自带的 Java 序列化实现，性能很不理想。</li></ul><p>在通常情况下，这四种主要序列化方式的性能从上到下依次递减。对于 dubbo RPC 这种追求高性能的远程调用方式来说，实际上只有 1、2 两种高效序列化方式比较般配，而第 1 个 dubbo 序列化由于还不成熟，所以实际只剩下 2 可用，所以 dubbo RPC 默认采用 hessian2 序列化。</p><p>但 hessian 是一个比较老的序列化实现了，而且它是跨语言的，所以不是单独针对 Java 进行优化的。而 dubbo RPC 实际上完全是一种 Java to Java 的远程调用，其实没有必要采用跨语言的序列化方式（当然肯定也不排斥跨语言的序列化）。</p><p>最近几年，各种新的高效序列化方式层出不穷，不断刷新序列化性能的上限，最典型的包括：</p><ul><li>专门针对 Java 语言的：Kryo，FST 等等</li><li>跨语言的：Protostuff，ProtoBuf，Thrift，Avro，MsgPack 等等</li></ul><p>这些序列化方式的性能多数都显著优于 hessian2（甚至包括尚未成熟的 dubbo 序列化）</p><p>有鉴于此，我们为 dubbo 引入 Kryo 和 FST 这两种高效 Java 序列化实现，来逐步取代 hessian2。</p><p>其中，Kryo 是一种非常成熟的序列化实现，已经在 Twitter、Groupon、Yahoo 以及多个著名开源项目（如 Hive、Storm）中广泛的使用。而 FST 是一种较新的序列化实现，目前还缺乏足够多的成熟使用案例。</p><p><strong>在面向生产环境的应用中，目前更优先选择 Kryo。</strong></p><hr><h2 id="在线运维命令-QOS"><a href="#在线运维命令-QOS" class="headerlink" title="在线运维命令-QOS"></a>在线运维命令-QOS</h2><p>dubbo <code>2.5.8</code> 新版本增加了 QOS 模块，提供了新的 telnet 命令支持。</p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a><strong>端口</strong></h3><p>新版本的 telnet 端口 与 dubbo 协议的端口是不同的端口，默认为 <code>22222</code>，可通过配置文件<code>dubbo.yml</code> 修改:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">qos</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">port</span>: <span class="string">33333</span></span><br></pre></td></tr></table></figure><p>或者通过设置 JVM 参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Ddubbo.application.qos.port=33333</span><br></pre></td></tr></table></figure><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a><strong>安全</strong></h3><p>默认情况下，dubbo 接收任何主机发起的命令，可通过配置文件<code>dubbo.yml</code> 修改:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">qos:</span></span><br><span class="line">      <span class="attr">accept:</span></span><br><span class="line">        <span class="attr">foreign:</span></span><br><span class="line">          <span class="attr">ip:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>或者通过设置 JVM 参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Ddubbo.application.qos.accept.foreign.ip=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>拒绝远端主机发出的命令，只允许服务本机执行</p><br/><h3 id="telnet-与-http-协议"><a href="#telnet-与-http-协议" class="headerlink" title="telnet 与 http 协议"></a><strong>telnet 与 http 协议</strong></h3><p>telnet 模块现在同时支持 http 协议和 telnet 协议，方便各种情况的使用</p><p>示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ telnet localhost 22222</span><br><span class="line">Trying ::1...</span><br><span class="line">telnet: connect to address ::1: Connection refused</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line">  ████████▄  ███    █▄  ▀█████████▄  ▀█████████▄   ▄██████▄</span><br><span class="line">  ███   ▀███ ███    ███   ███    ███   ███    ███ ███    ███</span><br><span class="line">  ███    ███ ███    ███   ███    ███   ███    ███ ███    ███</span><br><span class="line">  ███    ███ ███    ███  ▄███▄▄▄██▀   ▄███▄▄▄██▀  ███    ███</span><br><span class="line">  ███    ███ ███    ███ ▀▀███▀▀▀██▄  ▀▀███▀▀▀██▄  ███    ███</span><br><span class="line">  ███    ███ ███    ███   ███    ██▄   ███    ██▄ ███    ███</span><br><span class="line">  ███   ▄███ ███    ███   ███    ███   ███    ███ ███    ███</span><br><span class="line">  ████████▀  ████████▀  ▄█████████▀  ▄█████████▀   ▀██████▀</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dubbo&gt;ls</span><br><span class="line">As Provider side:</span><br><span class="line">+----------------------------------+---+</span><br><span class="line">|       Provider Service Name      |PUB|</span><br><span class="line">+----------------------------------+---+</span><br><span class="line">|org.apache.dubbo.demo.DemoService| N |</span><br><span class="line">+----------------------------------+---+</span><br><span class="line">As Consumer side:</span><br><span class="line">+---------------------+---+</span><br><span class="line">|Consumer Service Name|NUM|</span><br><span class="line">+---------------------+---+</span><br><span class="line"></span><br><span class="line">dubbo&gt;</span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="ls-列出消费者和提供者"><a href="#ls-列出消费者和提供者" class="headerlink" title="ls 列出消费者和提供者"></a>ls 列出消费者和提供者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;ls</span><br><span class="line">As Provider side:</span><br><span class="line">+----------------------------------+---+</span><br><span class="line">|       Provider Service Name      |PUB|</span><br><span class="line">+----------------------------------+---+</span><br><span class="line">|org.apache.dubbo.demo.DemoService| Y |</span><br><span class="line">+----------------------------------+---+</span><br><span class="line">As Consumer side:</span><br><span class="line">+---------------------+---+</span><br><span class="line">|Consumer Service Name|NUM|</span><br><span class="line">+---------------------+---+</span><br></pre></td></tr></table></figure><p>列出 dubbo 的所提供的服务和消费的服务，以及消费的服务地址数</p><br/><h4 id="Online-上线服务命令"><a href="#Online-上线服务命令" class="headerlink" title="Online 上线服务命令"></a>Online 上线服务命令</h4><p>当使用延迟发布功能的时候(通过设置 org.apache.dubbo.config.AbstractServiceConfig#register 为 false)，后续需要上线的时候，可通过 Online 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//上线所有服务</span><br><span class="line">dubbo&gt;online</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">//根据正则，上线部分服务</span><br><span class="line">dubbo&gt;online com.*</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>常见使用场景：</p><ul><li>当线上的 QPS 比较高的时候，当刚重启机器的时候，由于没有进行JIT 预热或相关资源没有预热，可能会导致大量超时，这个时候，可通过分批发布服务，逐渐加大流量</li><li>当由于某台机器由于某种原因，需要下线服务，然后又需要重新上线服务</li></ul><br/><h4 id="Offline-下线服务命令"><a href="#Offline-下线服务命令" class="headerlink" title="Offline 下线服务命令"></a>Offline 下线服务命令</h4><p>由于故障等原因，需要临时下线服务保持现场，可以使用 Offline 下线命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;下线所有服务</span><br><span class="line">dubbo&gt;offline</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据正则，下线部分服务</span><br><span class="line">dubbo&gt;offline com.*</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h4 id="help-命令"><a href="#help-命令" class="headerlink" title="help 命令"></a>help 命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;列出所有命令</span><br><span class="line">dubbo&gt;help</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;列出单个命令的具体使用情况</span><br><span class="line">dubbo&gt;help online</span><br><span class="line">+--------------+----------------------------------------------------------------------------------+</span><br><span class="line">| COMMAND NAME | online                                                                           |</span><br><span class="line">+--------------+----------------------------------------------------------------------------------+</span><br><span class="line">|      EXAMPLE | online dubbo                                                                     |</span><br><span class="line">|              | online xx.xx.xxx.service                                                         |</span><br><span class="line">+--------------+----------------------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">dubbo&gt;</span><br></pre></td></tr></table></figure><h3 id="相关参数说明"><a href="#相关参数说明" class="headerlink" title="相关参数说明"></a>相关参数说明</h3><p>QoS提供了一些启动参数，来对启动进行配置，他们主要包括：</p><table><thead><tr><th>参数</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>qosEnable</td><td>是否启动QoS</td><td>true</td></tr><tr><td>qosPort</td><td>启动QoS绑定的端口</td><td>22222</td></tr><tr><td>qosAcceptForeignIp</td><td>是否允许远程访问</td><td>false</td></tr></tbody></table><blockquote><p>注意，从2.6.4/2.7.0开始，qosAcceptForeignIp默认配置改为false，如果qosAcceptForeignIp设置为true，有可能带来安全风险，请仔细评估后再打开。</p></blockquote><p>QoS参数可以通过如下方式进行配置：</p><ul><li>系统属性</li><li>dubbo.properties</li><li>XML方式</li><li>Spring-boot自动装配方式</li></ul><p><strong>Spring-boot自动装配方式</strong></p><p>如果是spring-boot的应用，可以在<code>application.properties</code>或者<code>application.yml</code>上配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">qosPort:</span> <span class="number">33333</span></span><br><span class="line">    <span class="attr">qosEnable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">qosAcceptForeignIp:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><h1 id="Dubbo如何解决微服务的四大问题"><a href="#Dubbo如何解决微服务的四大问题" class="headerlink" title="Dubbo如何解决微服务的四大问题"></a>Dubbo如何解决微服务的四大问题</h1><h2 id="客户端如何访问这些服务"><a href="#客户端如何访问这些服务" class="headerlink" title="客户端如何访问这些服务"></a>客户端如何访问这些服务</h2><p>API GATEWAY/服务聚合服务，怎么叫都可以</p><p><strong>Why</strong></p><p>在微服务架构中，每个服务都会存在消费者和提供者，我们调用这些服务时可以通过ip:port来调用，但是这样写的很死，而且每个服务要是有多个副本时，我们也很难做。也不可能让用户手动输入ip:port来调用，所以这时需要一个服务聚合服务/API GATEWAY来管理这些服务，用户访问此服务，此服务调用所有其他的服务，做到用户无感知。</p><p><img src="2.PNG"></p><p><strong>How</strong></p><p>API GATEWAY作为一个服务聚合服务，肯定是服务调用者，我们同时需要服务聚合服务的接口项目、提供者。其中<strong>服务聚合服务的提供者是所有服务的消费者</strong>。听着很费劲，请看下图。</p><p>在服务聚合API接口中写一个方法，在每个服务的消费者中实现它（空方体体即可），然后在服务聚合服务消费者中写每个服务的跳转方法。比如说，用户服务的跳转方法：先调用用户服务消费者实现的服务聚合API接口的实现方法，然后通过Dubbo提供的接口获得本次用户服务的IP地址，配合固定的端口，即可完成API GATEWAY的实现。</p><p><img src="3.PNG"></p><p><img src="4.PNG"></p><p><strong>为什么跳转方法需要调用服务聚合提供者的API</strong></p><p>因为每个服务都是服务聚合提供者，如果你想跳转到用户服务（消费者），就要先调用用户服务（消费者）实现的服务聚合方法，通过dubbo调用（默认负载均衡）获取它的IP，因为传递性，我们获取到的IP也是负载均衡的，然后跳转到用户服务的特定接口。</p><p><strong>为什么需要指定端口，这和写死有什么区别</strong></p><p>默认下每个服务都需要一个端口，一般相同的服务都会用一个端口，并且部署在不同的服务器上，所以这样没有什么影响</p><br/><h2 id="每个服务之间如何通信"><a href="#每个服务之间如何通信" class="headerlink" title="每个服务之间如何通信"></a>每个服务之间如何通信</h2><p>Dubbo本身就是RPC通信框架，它自身解决了这个问题，服务间通过RPC调用。</p><p>对内RPC，对外HTTP。</p><br/><h2 id="如此多的服务，如何实现"><a href="#如此多的服务，如何实现" class="headerlink" title="如此多的服务，如何实现"></a>如此多的服务，如何实现</h2><p>这种方案Dubbo使用Zookeeper，通过Zookeeper的服务注册与发现功能来实现鼓舞管理，Dubbo使用Zookeeper来管理服务。</p><br/><h2 id="服务挂了，如何解决"><a href="#服务挂了，如何解决" class="headerlink" title="服务挂了，如何解决"></a>服务挂了，如何解决</h2><p>Dubbo没有此功能，通过Spring Cloud Netflix Hystrix熔断器来实现服务熔断。</p><p>当提供者抛出异常/执行开始，但没有在允许的时间内完成时触发熔断机制。</p><br/><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://dubbo.apache.org/zh-cn/index.html">Apache Dubbo</a></p><p><a href="https://github.com/apache/dubbo-admin">Dubbo Admin管理控制台</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务架构解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins集群搭建</title>
      <link href="2020/03/02/Jenkins%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>2020/03/02/Jenkins%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Jenkins是当下比较流行的一款功能强大的持续集成工具，它支持搭建集群，来提高多项目的构建速度，模式为主从模式，master会将任务分配到各个从节点进行并发构建，从而提高速度，下面介绍一下如何搭建Jenkins集群。</p><a id="more"></a><h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>搭建slave节点，不需要安装Jenkins，只需要安装构建项目的环境变量即可（Java、maven）</p><p>两台服务器,一台作为master，一台作为slave，设A为master，设B为slave。</p><p>A已经搭建好，现在开始搭建B</p><p>Jenkins的安装教程：</p><a href="/2020/01/16/Jenkins%E8%87%AA%E5%8A%A8%E6%8C%81%E7%BB%AD%E5%8C%96%E5%AE%9E%E8%B7%B5/" title="点击这里查看这篇文章">点击这里查看这篇文章</a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h2><p>首先确保master节点能通过ssh免密登陆slave节点</p><p>这里的A节点是按照<a href="/2020/01/16/Jenkins%E8%87%AA%E5%8A%A8%E6%8C%81%E7%BB%AD%E5%8C%96%E5%AE%9E%E8%B7%B5/" title="这篇文章">这篇文章</a>的手动安装的，一定要看以下。</p><p><strong>A节点执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;jenkins&quot;</span></span><br></pre></td></tr></table></figure><p><img src="1.PNG"></p><p><strong>B节点执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /var/lib/jenkins jenkins</span><br><span class="line">passwd jenkins</span><br></pre></td></tr></table></figure><p>记住密码</p><p><strong>A节点执行</strong></p><p>A节点发送给B节点公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub jenkins@192.168.174.133</span><br></pre></td></tr></table></figure><p>验证成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh jenkins@192.168.174.133</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>启动master的Jenkins开始配置从节点</p><h2 id="添加新节点"><a href="#添加新节点" class="headerlink" title="添加新节点"></a>添加新节点</h2><p>打开Jenkins -&gt; 系统管理 -&gt; 管理节点 -&gt; 新建节点</p><p><img src="2.PNG"></p><p><img src="3.PNG"></p><h2 id="设置连接"><a href="#设置连接" class="headerlink" title="设置连接"></a>设置连接</h2><p><img src="4.PNG"></p><p><img src="5.PNG"></p><p>工作目录我写的是<code>/var/lib/jenkins</code>，<font color='red'>一定要保证有权限</font>。</p><p>结点名称：随意填</p><p>描述：随意填</p><p>并发构建数：同时进行构建的最大数量，我这里设置为2</p><p>工作目录：从节点上的jenkins工作目录，权限要给足。</p><p>标签：随意填，我们将项目关联到节点时，可以根据标签来。</p><p>用法：选择“尽可能的使用这个节点”，相当于设置结点优先级。</p><p>启动方式：“Launch slave agent via SSH”，使用SSH由master连接到slave来执行任务</p><p>主机：slave的ip</p><p>Credentials：见后文</p><p>Host Key Verification Strategy ：Manually trusted key Verification Strategy </p><p>Require manual verification of initial connection ：选中</p><p>可用性：尽量保持在线</p><p>工具位置：不设置</p><p>环境变量：不设置</p><h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>由于上面我们使用了“Manually Trusted Key Verification Strategy”策略，所以，这里我们需要手动验证一下从节点的身份。</p><p>点击我们刚刚新建的从节点 -&gt; 点击【Trust SSH Host Key】,点击【是】： </p><p><img src="6.PNG"></p><p>但是我却出现了一下错误(意思是权限被拒绝)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SSHLauncher&#123;host=<span class="string">&#x27;192.168.174.133&#x27;</span>, port=22, credentialsId=<span class="string">&#x27;test2&#x27;</span>, jvmOptions=<span class="string">&#x27;&#x27;</span>, javaPath=<span class="string">&#x27;&#x27;</span>, prefixStartSlaveCmd=<span class="string">&#x27;&#x27;</span>, suffixStartSlaveCmd=<span class="string">&#x27;&#x27;</span>, launchTimeoutSeconds=210, maxNumRetries=10, retryWaitTime=15, sshHostKeyVerificationStrategy=hudson.plugins.sshslaves.verifiers.ManuallyTrustedKeyVerificationStrategy, tcpNoDelay=<span class="literal">true</span>, trackCredentials=<span class="literal">true</span>&#125;</span><br><span class="line">[03/02/20 10:30:21] [SSH] Opening SSH connection to 192.168.174.133:22.</span><br><span class="line">[03/02/20 10:30:21] [SSH] SSH host key matches key seen previously <span class="keyword">for</span> this host. Connection will be allowed.</span><br><span class="line">ERROR: Server rejected the 1 private key(s) <span class="keyword">for</span> test2 (credentialId:test2/method:publickey)</span><br><span class="line">ERROR: Failed to authenticate as test2 with credential=test2</span><br><span class="line">java.io.IOException: Publickey authentication failed.</span><br><span class="line">    at com.trilead.ssh2.auth.AuthenticationManager.authenticatePublicKey(AuthenticationManager.java:302)</span><br><span class="line">    at com.trilead.ssh2.Connection.authenticateWithPublicKey(Connection.java:451)</span><br><span class="line">    at com.cloudbees.jenkins.plugins.sshcredentials.impl.TrileadSSHPublicKeyAuthenticator.doAuthenticate(TrileadSSHPublicKeyAuthenticator.java:109)</span><br><span class="line">    at com.cloudbees.jenkins.plugins.sshcredentials.SSHAuthenticator.authenticate(SSHAuthenticator.java:436)</span><br><span class="line">    at com.cloudbees.jenkins.plugins.sshcredentials.SSHAuthenticator.authenticate(SSHAuthenticator.java:473)</span><br><span class="line">    at hudson.plugins.sshslaves.SSHLauncher.openConnection(SSHLauncher.java:861)</span><br><span class="line">    at hudson.plugins.sshslaves.SSHLauncher<span class="variable">$1</span>.call(SSHLauncher.java:425)</span><br><span class="line">    at hudson.plugins.sshslaves.SSHLauncher<span class="variable">$1</span>.call(SSHLauncher.java:412)</span><br><span class="line">    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:628)</span><br><span class="line">    at java.base/java.lang.Thread.run(Thread.java:834)</span><br><span class="line">Caused by: java.io.IOException: PEM problem: it is of unknown <span class="built_in">type</span></span><br><span class="line">    at com.trilead.ssh2.crypto.PEMDecoder.decodeKeyPair(PEMDecoder.java:500)</span><br><span class="line">    at com.trilead.ssh2.auth.AuthenticationManager.authenticatePublicKey(AuthenticationManager.java:236)</span><br><span class="line">    ... 11 more</span><br><span class="line">[03/02/20 10:30:21] [SSH] Authentication failed.</span><br><span class="line">Authentication failed.</span><br><span class="line">[03/02/20 10:30:21] Launch failed - cleaning up connection</span><br><span class="line">[03/02/20 10:30:21] [SSH] Connection closed.</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong></p><p>请一定要按照<a href="#ssh%E8%BF%9E%E6%8E%A5">上述来写ssh连接</a></p><p>成功</p><p><img src="7.PNG"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper实践</title>
      <link href="2020/02/29/Zookeeper%E5%AE%9E%E8%B7%B5/"/>
      <url>2020/02/29/Zookeeper%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>ZooKeeper 是一种分布式协调服务 + 服务注册与发现，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程。ZooKeeper 通过其简单的架构和 API 解决了这个问题。ZooKeeper 允许开发人员专注于核心应用程序逻辑，而不必担心应用程序的分布式特性。</p><a id="more"></a><p>分布式协调服务，首先协调的是什么：</p><p>分布式环境中多个进程之间的同步控制，使它们有序的去访问某种临界资源</p><p>协调的本质：</p><p>分布式锁，碰巧Zookeeper就是实现了分布式锁的服务</p><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="Zookeeper的数据模型"><a href="#Zookeeper的数据模型" class="headerlink" title="Zookeeper的数据模型"></a>Zookeeper的数据模型</h2><p>Zookeeper 的数据模型是什么样子呢？它很像数据结构当中的树，也很像文件系统的目录。</p><p><img src="1.png"></p><p>树是由节点所组成，Zookeeper 的数据存储也同样是基于节点，这种节点叫做 <strong>Znode</strong></p><p>但是，不同于树的节点，Znode 的引用方式是<strong>路径引用</strong>，类似于文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/动物/猫</span><br><span class="line">/汽车/宝马</span><br></pre></td></tr></table></figure><p>这样的层级结构，让每一个 Znode 节点拥有唯一的路径，就像命名空间一样对不同信息作出清晰的隔离。</p><h3 id="Znode"><a href="#Znode" class="headerlink" title="Znode"></a>Znode</h3><p><img src="2.png"></p><ul><li>data：Znode 存储的数据信息。（最多1MB）</li><li>ACL：记录 Znode 的访问权限，即哪些人或哪些 IP 可以访问本节点。</li><li>stat：包含 Znode 的各种元数据，比如事务 ID、版本号、时间戳、大小等等。</li><li>child：当前节点的子节点引用</li></ul><p>这里需要注意一点，Zookeeper 是为读多写少的场景所设计。Znode 并不是用来存储大规模业务数据，而是用于存储少量的状态和配置信息，<code>每个节点的数据最大不能超过 1MB</code>。</p><p>读指的是客户端发现服务；写指的是新的服务注册进来。</p><h3 id="Znode类型"><a href="#Znode类型" class="headerlink" title="Znode类型"></a>Znode类型</h3><p>持久(Persistent)：客户端和服务端断开连接后，创建的节点不删除。</p><p>短暂(Ephemeral)：客户端和服务器端断开连接后，创建的节点自己删除。</p><ol><li>持久化目录节点</li><li>持久化顺序编号目录节点</li><li>临时目录节点</li><li>临时顺序编号目录节点</li></ol><p><img src="https://i.loli.net/2020/06/29/976KQSVO8h1efJs.png" alt="image-20200629152256737"></p><h2 id="Zookeeper的事件通知"><a href="#Zookeeper的事件通知" class="headerlink" title="Zookeeper的事件通知"></a>Zookeeper的事件通知</h2><p>Zookeeper是怎么实现每当有服务发生变化时，它的客户端是如何得知的？</p><p>主要靠Zookeeper的事件通知，<strong>Watch</strong> ！🔺</p><p><strong>首先介绍Zookeeper的基本操作</strong></p><p>创建节点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create</span><br></pre></td></tr></table></figure><p>删除节点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete</span><br></pre></td></tr></table></figure><p>判断节点是否存在</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists</span><br></pre></td></tr></table></figure><p>获得一个节点的数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getData</span><br></pre></td></tr></table></figure><p>设置一个节点的数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setData</span><br></pre></td></tr></table></figure><p>获取节点下的所有子节点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getChildren</span><br></pre></td></tr></table></figure><p>这其中，<code>exists</code>，<code>getData</code>，<code>getChildren</code> 属于读操作。Zookeeper 客户端在请求读操作的时候，可以选择是否设置 <strong>Watch</strong></p><p><strong>Watch</strong></p><p>我们可以把 <strong>Watch</strong> 理解成是注册在特定 Znode 上的触发器。当这个 Znode 发生改变，也就是调用了 <code>create</code>，<code>delete</code>，<code>setData</code> 方法的时候，将会触发 Znode 上注册的对应事件，请求 Watch 的客户端会接收到异步通知。</p><p>具体交互过程如下：</p><ul><li>客户端调用 <code>getData</code> 方法，<code>watch</code> 参数是 <code>true</code>。服务端接到请求，返回节点数据，并且在对应的哈希表里插入被 Watch 的 Znode 路径，以及 Watcher 列表。</li></ul><p><img src="3.png"></p><ul><li>当被 Watch 的 Znode 已删除，服务端会查找哈希表，找到该 Znode 对应的所有 Watcher，异步通知客户端，并且删除哈希表中对应的 Key-Value。</li></ul><p><img src="4.png"></p><h3 id="监听器Watch原理🔺"><a href="#监听器Watch原理🔺" class="headerlink" title="监听器Watch原理🔺"></a>监听器Watch原理🔺</h3><p><img src="https://i.loli.net/2020/06/29/OfpanoLWeNIgukb.png" alt="image-20200629155827521"></p><h2 id="Zookeeper的数据一致性"><a href="#Zookeeper的数据一致性" class="headerlink" title="Zookeeper的数据一致性"></a>Zookeeper的数据一致性</h2><p>Zookeeper 身为分布式系统协调服务，如果自身挂了如何处理呢？为了防止单机挂掉的情况，Zookeeper 维护了一个集群(默认/必须是2n+1个节点)。如下图：</p><p><img src="1.jpg"></p><p>而且这里Zookeeper的一致性是单调/顺序一致性。</p><p>Zookeeper Service 集群是一主多从结构。</p><p>在更新数据时，首先更新到主节点（这里的节点是指服务器，不是 Znode），再同步到从节点。</p><p>在读取数据时，直接读取任意从节点。</p><p>为了保证主从节点的数据一致性，Zookeeper 采用了 <strong>ZAB 协议</strong>，这种协议非常类似于一致性算法 <strong>Paxos</strong> 和 <strong>Raft</strong>。</p><p><strong>ZAB 协议</strong>：Zookeeper Automic Broadcast，主要负责广播同步数据以及集群故障修复。</p><h3 id="什么是ZAB协议"><a href="#什么是ZAB协议" class="headerlink" title="什么是ZAB协议"></a>什么是ZAB协议</h3><p>Zookeeper Atomic Broadcast，有效解决了 Zookeeper <strong>集群崩溃恢复</strong>，以及<strong>主从同步数据</strong>的问题。</p><p><strong>ZAB协议中定义的三种节点状态</strong></p><ul><li>Looking ：选举状态。</li><li>Following ：成为Follower状态之前的状态。</li><li>Leading ：成为Leader 状态之前的状态。</li></ul><p><strong>最大ZXID</strong></p><p>最大 ZXID 也就是节点本地的最新事务编号，包含 epoch 和计数两部分。epoch 是纪元的意思，相当于 Raft 算法选主时候的 term。</p><h3 id="ZAB协议实现同步数据🔺"><a href="#ZAB协议实现同步数据🔺" class="headerlink" title="ZAB协议实现同步数据🔺"></a>ZAB协议实现同步数据🔺</h3><p><a href="#Zookeeper%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7">如上面所说</a>，ZAB采用读写分离，读操作可以读任何一台节点，但是写操作只会写入到Leader节点，然后在同步给其他角色。</p><p><strong>Broadcast</strong></p><p>ZAB 的数据写入涉及到 Broadcast 阶段，简单来说，就是 Zookeeper 常规情况下更新数据的时候，由 Leader 广播到所有的 Follower。其过程如下：</p><ul><li>客户端发出写入数据请求给任意 Follower。</li><li>Follower 把写入数据请求转发给 Leader。</li><li>Leader 采用<strong>二阶段</strong>提交方式，先发送 Propose 广播（准备insert数据）给 Follower。</li><li>Follower 接到 Propose 消息，写入日志成功后（事务日志），返回 ACK 消息给 Leader。</li><li>Leader 接到半数以上ACK消息，返回成功给客户端，并且广播 Commit （提交）请求给 Follower，Follower开始执行写操作</li><li>然后Follower通知Client数据写成功了，这时可以认为整个写操作成功</li></ul><p><img src="2.jpg"></p><p>ZAB 协议既不是强一致性，也不是弱一致性，而是处于两者之间的<strong>单调一致性（顺序一致性）</strong>。它依靠事务 ID 和版本号，保证了数据的更新和读取是有序的</p><p><img src="https://i.loli.net/2020/06/29/oJCPulNcKDVOUha.png" alt="image-20200629160508494"></p><h3 id="ZAB实现集群故障回复🔺"><a href="#ZAB实现集群故障回复🔺" class="headerlink" title="ZAB实现集群故障回复🔺"></a>ZAB实现集群故障回复🔺</h3><p>ZAB实现崩溃回复的几个前提：主节点挂掉| 服务器刚启动时| 集群中半数以上的Follower不能与Leader正常通信。</p><p>ZAB 的崩溃恢复分成三个阶段：</p><ul><li><strong>Leader election</strong></li><li><strong>Discovery</strong></li><li><strong>Synchronization</strong></li></ul><h4 id="Leader-election"><a href="#Leader-election" class="headerlink" title="Leader election"></a>Leader election</h4><p>选举阶段有服务器启动时选举、崩溃期间选举。</p><p><strong>崩溃期间的选举阶段</strong></p><p>选举阶段，此时集群中的节点处于 Looking 状态。它们会各自向其他节点发起投票，投票当中包含自己的服务器 ID 和最新事务 ID（ZXID）。</p><ol><li><strong>变更状态</strong>。Leader挂后，余下的非Leader服务器都会将自己的服务器状态变更为LOOKING，然后开始进入Leader选举过程。</li><li> <strong>每个Server会发出一个投票</strong>。在运行期间，每个服务器上的ZXID可能不同，此时假定Server1的ZXID为123，Server3的ZXID为122；在第一轮投票中，Server1和Server3都会投自己，每次投票会包含所推举的服务器的myid和ZXID，使用(myid, ZXID)来表示，产生投票(1, 123)，(3, 122)，然后各自将投票发送给集群中所有机器。</li><li><strong>接受来自各个服务器的投票</strong>。集群的每个服务器收到投票后，首先判断该投票的有效性，如检查是否是本轮投票、是否来自LOOKING状态的服务器。</li><li><strong>处理投票</strong>。针对每一个投票，服务器都需要将别人的投票和自己的投票进行PK，PK规则如下<ol><li><strong>优先检查ZXID</strong>。ZXID比较大的服务器优先作为Leader。</li><li><strong>如果ZXID相同，那么就比较myid</strong>。myid较大的服务器作为Leader服务器。</li></ol></li><li><strong>统计投票</strong>。每次投票后，服务器都会统计投票信息，判断是否已经有过半机器接受到相同的投票信息，对于Server1、Server2而言，都统计出集群中已经有两台机器接受了(2, 0)的投票信息，此时便认为已经选出了Leader。</li><li><strong>改变服务器状态</strong>。一旦确定了Leader，每个服务器就会更新自己的状态，如果是Follower，那么就变更为FOLLOWING，如果是Leader，就变更为LEADING。</li></ol><p><strong>这里我们描述一个过程</strong></p><p>我们假设有五个节点的Zookeeper集群，其中第三个节点为Leader但是它挂掉了。我们分别假设它的myid和zxid为：<code>(1, 12)、(2, 10)、(3, 13)、(4, 11)、(5, 10)</code></p><p><img src="3.jpg"></p><h4 id="Discovery"><a href="#Discovery" class="headerlink" title="Discovery"></a><strong>Discovery</strong></h4><p>发现阶段，用于在从节点中发现最新的 ZXID 和事务日志。或许有人会问：既然 Leader 被选为主节点，已经是集群里数据最新的了，为什么还要从节点中寻找最新事务呢？</p><p>这是为了防止某些意外情况，比如因网络原因在上一阶段产生多个 Leader 的情况。（网络是不可靠的）</p><p>这个阶段能接触多Leading问题</p><p>所以这一阶段，Leader 集思广益，接收所有 Follower 发来各自的最新 epoch 值。Leader 从中选出最大的 epoch，基于此值加 1，生成新的 epoch 分发给各个 Follower。</p><p>各个 Follower 收到全新的 epoch 后，返回 ACK 给 Leader，带上各自最大的 ZXID 和历史事务日志。Leader 选出最大的 ZXID，并更新自身历史日志。</p><p>流程如下：</p><p><img src="4.jpg"></p><h4 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h4><p>同步阶段，把 Leader 刚才收集得到的最新历史事务日志，同步给集群中所有的 Follower。只有当半数 Follower 同步成功，这个准 Leader 才能成为正式的 Leader。</p><p>自此，故障恢复正式完成。</p><h3 id="初次开启Zookeeper集群的选举机制"><a href="#初次开启Zookeeper集群的选举机制" class="headerlink" title="初次开启Zookeeper集群的选举机制"></a>初次开启Zookeeper集群的选举机制</h3><ol><li><p>半数机制：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。</p></li><li><p>Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的。</p></li></ol><p>假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。假设这些服务器依序启动，来看看会发生什么，如图所示</p><p><img src="https://i.loli.net/2020/06/29/d5mUNlJ1GLFgTuf.png" alt="image-20200629160046552"></p><ol><li><p>服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数一票，不够半数以上（3票），选举无法完成，服务器1状态保持为LOOKING；</p></li><li><p>服务器2启动，再发起一次选举。服务器1和2分别投自己一票并交换选票信息：此时服务器1发现服务器2的ID比自己目前投票推举的（服务器1）大，更改选票为推举服务器2。此时服务器1票数0票，服务器2票数2票，没有半数以上结果，选举无法完成，服务器1，2状态保持LOOKING</p></li><li><p>服务器3启动，发起一次选举。此时服务器1和2都会更改选票为服务器3。此次投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数，服务器3当选Leader。服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING；</p></li><li><p>服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3，并更改状态为FOLLOWING；</p></li><li><p><strong>服务器5启动，同4一样当小弟。</strong></p></li></ol><h2 id="Zookeeper实现分布式锁"><a href="#Zookeeper实现分布式锁" class="headerlink" title="Zookeeper实现分布式锁"></a>Zookeeper实现分布式锁</h2><p>Zookeeper是如何实现分布式锁的，怎么实现它的三大操作，以及如何解决三大问题</p><p>操作：加锁、解锁、锁超时</p><p>问题：非原子性操作、误删锁、出现并发的可能性</p><p>说到如何实现分布式锁，就不得不提它的Znode的四种类型</p><p><strong>持久节点</strong></p><p>默认的节点类型。创建节点的客户端与 Zookeeper 断开连接后，该节点依旧存在。</p><p><strong>持久节点顺序节点（PERSISTENT_SEQUENTIAL）</strong></p><p> 所谓顺序节点，就是在创建节点时，Zookeeper 根据创建的时间顺序给该节点名称进行编号 </p><p><img src="5.png"></p><p><strong>临时节点（EPHEMERAL）</strong></p><p> 和持久节点相反，当创建节点的客户端与 Zookeeper 断开连接后，临时节点会被删除： </p><p><img src="6.png"></p><p><img src="8.png"></p><p><img src="7.png"></p><p><strong>临时顺序节点（EPHEMERAL_SEQUENTIAL）</strong></p><p> 顾名思义，临时顺序节点结合和临时节点和顺序节点的特点：在创建节点时，Zookeeper 根据创建的时间顺序给该节点名称进行编号；当创建节点的客户端与 Zookeeper 断开连接后，临时节点会被删除。 </p><h3 id="Zookeeper-分布式锁的原理"><a href="#Zookeeper-分布式锁的原理" class="headerlink" title="Zookeeper 分布式锁的原理"></a>Zookeeper 分布式锁的原理</h3><p>Zookeeper 分布式锁恰恰应用了临时顺序节点。具体如何实现呢？让我们来看一看详细步骤：</p><h4 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h4><p> 首先，在 Zookeeper 当中创建一个持久节点 ParentLock。当第一个客户端想要获得锁时，需要在 ParentLock 这个节点下面创建一个<strong>临时顺序节点</strong> Lock1。 </p><p><img src="9.png"></p><p> 之后，Client1 查找 ParentLock 下面所有的临时顺序节点并排序，判断自己所创建的节点 Lock1 是不是顺序最靠前的一个。如果是第一个节点，则成功获得锁。 </p><p><img src="10.png"></p><p> 这时候，如果再有一个客户端 Client2 前来获取锁，则在 ParentLock 下载再创建一个临时顺序节点 Lock2。 </p><p><img src="11.png"></p><p> Client2 查找 ParentLock 下面所有的临时顺序节点并排序，判断自己所创建的节点 Lock2 是不是顺序最靠前的一个，结果发现节点 Lock2 并不是最小的。 </p><p> 于是，Client2 向排序仅比它靠前的节点 Lock1 注册 Watcher(只注册比自己小一点的那个锁的Watch)，用于监听 Lock1 节点是否存在。这意味着 Client2 抢锁失败，进入了等待状态。</p><p> <img src="12.png"></p><p> 这时候，如果又有一个客户端 Client3 前来获取锁，则在 ParentLock 下载再创建一个临时顺序节点 Lock3 </p><p> <img src="13.png"></p><p>Client3 查找 ParentLock 下面所有的临时顺序节点并排序，判断自己所创建的节点 Lock3 是不是顺序最靠前的一个，结果同样发现节点 Lock3 并不是最小的。</p><p>于是，Client3 向排序仅比它靠前的节点 Lock2 注册 Watcher，用于监听 Lock2 节点是否存在。这意味着 Client3 同样抢锁失败，进入了等待状态。</p><p><img src="14.png"></p><p> 这样一来，Client1 得到了锁，Client2 监听了 Lock1，Client3 监听了 Lock2。这恰恰形成了一个等待队列， </p><h4 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h4><p> 释放锁分为两种情况 ：</p><p><strong>任务完成，客户端显示释放</strong></p><p> 当任务完成时，Client1 会显示调用删除节点 Lock1 的指令。 </p><p><img src="15.png"></p><p><strong>任务执行过程中，客户端崩溃</strong></p><p> 获得锁的 Client1 在任务执行过程中，如果崩溃，则会断开与 Zookeeper 服务端的链接。根据临时节点的特性，相关联的节点 Lock1 会随之自动删除。 </p><p><img src="16.png"></p><p> 由于 Client2 一直监听着 Lock1 的存在状态，当 Lock1 节点被删除，Client2 会立刻收到通知。这时候 Client2 会再次查询 ParentLock 下面的所有节点，确认自己创建的节点 Lock2 是不是目前最小的节点。如果是最小，则 Client2 顺理成章获得了锁。 </p><p><img src="17.png"></p><p>同理，如果 Client2 也因为任务完成或者节点崩溃而删除了节点 Lock2，那么 Client3 就会接到通知。</p><p><img src="18.png"></p><p>最终，Client3 成功得到了锁。</p><p><img src="19.png"></p><h3 id="Zookeeper分布式原理会有那三大问题么"><a href="#Zookeeper分布式原理会有那三大问题么" class="headerlink" title="Zookeeper分布式原理会有那三大问题么"></a>Zookeeper分布式原理会有那三大问题么</h3><p><strong>原子性问题</strong></p><p>原子性问题指的是加锁和锁超时操作要是一个操作，zookeeper的实现是连接上就创建一个临时顺序节点，断开就是释放。所以没有上述问题</p><p><strong>误删锁问题</strong></p><p>误删锁问题指的是用户1在执行任务中，锁超时时间过了，用户2申请到了锁，这时用户1执行完毕，却删除了用户2的锁。在这里zookeeper不会触发此问题，用户1执行过程中不会解锁，用户2根本申请不到锁，除非用户1主动解锁（执行完成）/用户1挂掉，用户2 才可申请加锁，此时用户1已经自动解锁</p><p><strong>存在的并发问题</strong></p><p>同上，不可能存在多用户申请到同一个资源的 锁</p><h1 id="Zookeeper的应用场景"><a href="#Zookeeper的应用场景" class="headerlink" title="Zookeeper的应用场景"></a>Zookeeper的应用场景</h1><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>这是雅虎研究员设计 Zookeeper 的初衷。利用 Zookeeper 的临时顺序节点，可以轻松实现分布式锁。</p><h2 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h2><p> 利用 Znode 和 Watcher，可以实现分布式服务的注册和发现。最著名的应用就是阿里的分布式 RPC 框架 Dubbo </p><h2 id="共享配置和状态信息"><a href="#共享配置和状态信息" class="headerlink" title="共享配置和状态信息"></a>共享配置和状态信息</h2><p>Redis 的分布式解决方案 Codis，就利用了 Zookeeper 来存放数据路由表和 codis-proxy 节点的元信息。同时 codis-config 发起的命令都会通过 ZooKeeper 同步到各个存活的 codis-proxy。</p><p>此外，Kafka、HBase、Hadoop，也都依靠Zookeeper同步节点信息，实现高可用。</p><hr><h1 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h1><p>Zookeeper 部署有三种方式，单机模式、集群模式、伪集群模式，以下采用 Docker 的方式部署</p><p><strong>注意：</strong> 集群为大于等于3个奇数，如 3、5、7,不宜太多，集群机器多了选举和数据同步耗时长，不稳定。</p><h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zoo1:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper:3.4.14</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span></span><br></pre></td></tr></table></figure><p><strong>验证测试</strong></p><p>交互进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it zookeeper_zoo1_1 /bin/bash</span><br></pre></td></tr></table></figure><p>使用客户端连接到服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">bash-4.3<span class="comment"># ./bin/zkCli.sh -server 192.168.75.130:2181</span></span><br><span class="line">Connecting to 192.168.75.130:2181</span><br><span class="line">2017-11-09 07:45:58,365 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.10-39d3a4f269333c922ed3db283be479f9deacaa0f, built on 03/23/2017 10:13 GMT</span><br><span class="line">2017-11-09 07:45:58,374 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=zoo1</span><br><span class="line">2017-11-09 07:45:58,374 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_131</span><br><span class="line">2017-11-09 07:45:58,380 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation</span><br><span class="line">2017-11-09 07:45:58,381 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/lib/jvm/java-1.8-openjdk/jre</span><br><span class="line">2017-11-09 07:45:58,381 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/zookeeper-3.4.10/bin/../build/classes:/zookeeper-3.4.10/bin/../build/lib/*.jar:/zookeeper-3.4.10/bin/../lib/slf4j-log4j12-1.6.1.jar:/zookeeper-3.4.10/bin/../lib/slf4j-api-1.6.1.jar:/zookeeper-3.4.10/bin/../lib/netty-3.10.5.Final.jar:/zookeeper-3.4.10/bin/../lib/log4j-1.2.16.jar:/zookeeper-3.4.10/bin/../lib/jline-0.9.94.jar:/zookeeper-3.4.10/bin/../zookeeper-3.4.10.jar:/zookeeper-3.4.10/bin/../src/java/lib/*.jar:/conf:</span><br><span class="line">2017-11-09 07:45:58,381 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64/server:/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64:/usr/lib/jvm/java-1.8-openjdk/jre/../lib/amd64:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line">2017-11-09 07:45:58,381 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp</span><br><span class="line">2017-11-09 07:45:58,381 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;</span><br><span class="line">2017-11-09 07:45:58,381 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux</span><br><span class="line">2017-11-09 07:45:58,382 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64</span><br><span class="line">2017-11-09 07:45:58,382 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=4.4.0-98-generic</span><br><span class="line">2017-11-09 07:45:58,386 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root</span><br><span class="line">2017-11-09 07:45:58,386 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root</span><br><span class="line">2017-11-09 07:45:58,386 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/zookeeper-3.4.10</span><br><span class="line">2017-11-09 07:45:58,389 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=192.168.75.130:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain<span class="variable">$MyWatcher</span>@3eb07fd3</span><br><span class="line">2017-11-09 07:45:58,428 [myid:] - INFO  [main-SendThread(192.168.75.130:2181):ClientCnxn<span class="variable">$SendThread</span>@1032] - Opening socket connection to server 192.168.75.130/192.168.75.130:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">JLine support is enabled</span><br><span class="line">2017-11-09 07:45:58,529 [myid:] - INFO  [main-SendThread(192.168.75.130:2181):ClientCnxn<span class="variable">$SendThread</span>@876] - Socket connection established to 192.168.75.130/192.168.75.130:2181, initiating session</span><br><span class="line">[zk: 192.168.75.130:2181(CONNECTING) 0] 2017-11-09 07:45:58,573 [myid:] - INFO  [main-SendThread(192.168.75.130:2181):ClientCnxn<span class="variable">$SendThread</span>@1299] - Session establishment complete on server 192.168.75.130/192.168.75.130:2181, sessionid = 0x15f9fbc12ec0000, negotiated timeout = 30000</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:None path:null</span><br></pre></td></tr></table></figure><p>使用服务端工具检查服务器状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash-4.3<span class="comment"># ./bin/zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Mode: standalone</span><br></pre></td></tr></table></figure><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><p>准备 3 台 Ubuntu Server 系统，并分别配置 Zookeeper</p><h3 id="node1"><a href="#node1" class="headerlink" title="node1"></a>node1</h3><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zoo1:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper:3.4.14</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=192.168.75.130:2888:3888</span> <span class="string">server.2=192.168.75.134:2888:3888</span> <span class="string">server.3=192.168.75.135:2888:3888</span></span><br><span class="line">        <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure><p><strong>验证测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@UbuntuBase:/usr/<span class="built_in">local</span>/docker/zookeeper<span class="comment"># docker exec -it zookeeper_zoo1_1 /bin/bash</span></span><br><span class="line">bash-4.3<span class="comment"># ./bin/zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure><h3 id="node2"><a href="#node2" class="headerlink" title="node2"></a>node2</h3><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zoo2:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper:3.4.14</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=192.168.75.130:2888:3888</span> <span class="string">server.2=192.168.75.134:2888:3888</span> <span class="string">server.3=192.168.75.135:2888:3888</span></span><br><span class="line">        <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure><p><strong>验证测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@UbuntuBase:/usr/<span class="built_in">local</span>/docker/zookeeper<span class="comment"># docker exec -it zookeeper_zoo2_1 /bin/bash</span></span><br><span class="line">bash-4.3<span class="comment"># ./bin/zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><h3 id="node3"><a href="#node3" class="headerlink" title="node3"></a>node3</h3><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zoo2:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper:3.4.14</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=192.168.75.130:2888:3888</span> <span class="string">server.2=192.168.75.134:2888:3888</span> <span class="string">server.3=192.168.75.135:2888:3888</span></span><br><span class="line">        <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure><p><strong>验证测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@UbuntuBase:/usr/<span class="built_in">local</span>/docker/zookeeper<span class="comment"># docker exec -it zookeeper_zoo3_1 /bin/bash</span></span><br><span class="line">bash-4.3<span class="comment"># ./bin/zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><h2 id="伪集群模式"><a href="#伪集群模式" class="headerlink" title="伪集群模式"></a>伪集群模式</h2><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zoo1:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper:3.4.14</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">zoo2:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper:3.4.14</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">2182</span><span class="string">:2181</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">zoo3:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper:3.4.14</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">zoo3</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">2183</span><span class="string">:2181</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br></pre></td></tr></table></figure><p><strong>验证如上</strong></p><h1 id="Zookeeper的配置"><a href="#Zookeeper的配置" class="headerlink" title="Zookeeper的配置"></a>Zookeeper的配置</h1><h2 id="Zookeeper的端口"><a href="#Zookeeper的端口" class="headerlink" title="Zookeeper的端口"></a>Zookeeper的端口</h2><ul><li>2181：客户端连接 Zookeeper 集群使用的监听端口号</li><li>3888：选举 leader 使用</li><li>2888：集群内机器通讯使用（Leader 和 Follower 之间数据同步使用的端口号，Leader 监听此端口）</li></ul><h2 id="Zookeeper-集群模式配置文件"><a href="#Zookeeper-集群模式配置文件" class="headerlink" title="Zookeeper 集群模式配置文件"></a>Zookeeper 集群模式配置文件</h2><p>配置文件路径：<code>/conf/zoo.cfg</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/data</span></span><br><span class="line"><span class="attr">dataLogDir</span>=<span class="string">/datalog</span></span><br><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">2</span></span><br><span class="line"><span class="meta">autopurge.snapRetainCount</span>=<span class="string">3</span></span><br><span class="line"><span class="meta">autopurge.purgeInterval</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">maxClientCnxns</span>=<span class="string">60</span></span><br><span class="line"><span class="meta">server.1</span>=<span class="string">192.168.0.1:2888:3888</span></span><br><span class="line"><span class="meta">server.2</span>=<span class="string">192.168.0.2:2888:3888</span></span><br><span class="line"><span class="meta">server.3</span>=<span class="string">192.168.0.3:2888:3888</span></span><br></pre></td></tr></table></figure><ul><li>initLimit：配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 initLimit（默认为 10） 个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 <code>5 * 2000 = 10</code> 秒</li><li>syncLimit：配置 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 <code>2 * 2000 = 4</code> 秒</li><li>定时清理（Zookeeper 从 3.4.0 开始提供了自动清理快照和事务日志的功能）以下两个参数配合使用：<ul><li>autopurge.purgeInterval：指定了清理频率，单位是小时，需要填写一个 1 或更大的整数，默认是 0，表示不开启自己清理功能。</li><li>autopurge.snapRetainCount：指定了需要保留的文件数目。默认是保留 3 个。</li></ul></li><li>maxClientCnxns：限制连接到 Zookeeper 的客户端的数量，限制并发连接的数量，它通过 IP 来区分不同的客户端。此配置选项可以用来阻止某些类别的 Dos 攻击。将它设置为 0 或者忽略而不进行设置将会取消对并发连接的限制。</li><li>server.A=B：C：D：其中 A 是一个数字，表示这个是第几号服务器。B 是这个服务器的 IP 地址。C 表示的是这个服务器与集群中的 Leader 服务器交换信息的端口(<code>2888</code>)；D 表示的是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口(<code>3888</code>)。如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同的端口号。</li></ul><p><strong>注意：</strong> <code>server.A</code> 中的 A 是在 <code>dataDir</code> 配置的目录中创建一个名为 <code>myid</code> 的文件里的值（如：1）</p><h1 id="Zookeeper常用命令"><a href="#Zookeeper常用命令" class="headerlink" title="Zookeeper常用命令"></a>Zookeeper常用命令</h1><p><strong>客户端</strong></p><table><thead><tr><th>命令基本语法</th><th>功能描述</th></tr></thead><tbody><tr><td><code>help  </code></td><td>显示所有操作命令</td></tr><tr><td><code>ls path [watch] </code></td><td>使用 ls 命令来查看当前znode中所包含的内容</td></tr><tr><td><code>ls2 path  [watch]  </code></td><td>查看当前节点数据并能看到更新次数等数据</td></tr><tr><td><code>create</code></td><td>普通创建  -s 含有序列  -e 临时（重启或者超时消失）</td></tr><tr><td><code>get path  [watch]</code></td><td>获得节点的值</td></tr><tr><td><code>set</code></td><td>设置节点的具体值</td></tr><tr><td><code>stat</code></td><td>查看节点状态</td></tr><tr><td><code>delete</code></td><td>删除节点</td></tr><tr><td><code>rmr</code></td><td>递归删除节点</td></tr></tbody></table><p>加上watch可选参数后，能监听节点数据变化</p><ul><li><code>get path watch</code>：监听节点数据变化</li><li><code>ls path watch</code>：监听子节点增减变化</li></ul><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><p>本次文章源于</p><p><a href="https://www.funtl.com/zh/apache-dubbo-zookeeper/%E4%BB%80%E4%B9%88%E6%98%AF-Zookeeper.html#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91">什么是Zookeeper</a></p><p><a href="https://hub.docker.com/_/zookeeper">Zookeeper Hub</a></p><p>并加入了个人理解。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式协调技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式协调技术</title>
      <link href="2020/02/28/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%8A%80%E6%9C%AF/"/>
      <url>2020/02/28/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>分布式协调技术主要用来解决分布式环境当中多个进程之间的同步控制，让他们有序的去访问某种临界资源，防止造成”脏数据”的后果。</p><a id="more"></a><p><img src="1.png"></p><p>在这图中有三台机器，每台机器各跑一个应用程序。然后我们将这三台机器通过网络将其连接起来，构成一个系统来为用户提供服务，对用户来说这个系统的架构是透明的，他感觉不到我这个系统是一个什么样的架构。那么我们就可以把这种系统称作一个<strong>分布式系统</strong>。</p><p>在这个分布式系统中如何对进程进行调度，我假设在第一台机器上挂载了一个资源，然后这三个物理分布的进程都要竞争这个资源，但我们又不希望他们同时进行访问，这时候我们就需要一个<strong>协调器</strong>，来让他们有序的来访问这个资源。这个协调器就是我们经常提到的那个<strong>锁</strong>，比如说”进程-1”在使用该资源的时候，会先去获得锁，”进程1”获得锁以后会对该资源保持<strong>独占</strong>，这样其他进程就无法访问该资源，”进程1”用完该资源以后就将锁释放掉，让其他进程来获得锁，那么通过这个锁机制，我们就能保证了分布式系统中多个进程能够有序的访问该临界资源。那么我们把这个分布式环境下的这个锁叫作<strong>分布式锁</strong>。这个分布式锁也就是我们<strong>分布式协调技术</strong>实现的核心内容。</p><h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><h2 id="什么是分布式锁"><a href="#什么是分布式锁" class="headerlink" title="什么是分布式锁"></a>什么是分布式锁</h2><p>为了防止分布式系统中的多个进程之间相互干扰，我们需要一种分布式协调技术来对这些进程进行调度。而这个分布式协调技术的核心就是来实现这个<strong>分布式锁</strong>。</p><p><img src="2.png"></p><h2 id="分布式锁应该做到什么"><a href="#分布式锁应该做到什么" class="headerlink" title="分布式锁应该做到什么"></a>分布式锁应该做到什么</h2><ol><li>在分布式系统下，同一方法在同一时间只能被一个机器的一个线程执行。</li><li>高可用的获取锁与释放锁</li><li>高性能的获取锁与释放锁</li><li>具备可重入特性（可理解为重新进入，由多于一个任务并发使用，而不必担心数据错误）</li><li>具备锁失效机制，防止死锁</li><li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败</li></ol><h2 id="分布式锁的实现"><a href="#分布式锁的实现" class="headerlink" title="分布式锁的实现"></a>分布式锁的实现</h2><ul><li>Memcached：利用 Memcached 的 <code>add</code> 命令。此命令是原子性操作，只有在 <code>key</code> 不存在的情况下，才能 <code>add</code> 成功，也就意味着线程得到了锁。</li><li>Redis：和 Memcached 的方式类似，利用 Redis 的 <code>setnx</code> 命令。此命令同样是原子性操作，只有在 <code>key</code> 不存在的情况下，才能 <code>set</code> 成功。</li><li><strong>Zookeeper</strong>：利用 Zookeeper 的顺序临时节点，来实现分布式锁和等待队列。Zookeeper 设计的初衷，就是为了实现分布式锁服务的。</li><li>Chubby：Google 公司实现的粗粒度分布式锁服务，底层利用了 Paxos 一致性算法。</li></ul><h1 id="通过-Redis-分布式锁的实现理解基本概念"><a href="#通过-Redis-分布式锁的实现理解基本概念" class="headerlink" title="通过 Redis 分布式锁的实现理解基本概念"></a>通过 Redis 分布式锁的实现理解基本概念</h1><h2 id="分布式锁的三要素"><a href="#分布式锁的三要素" class="headerlink" title="分布式锁的三要素"></a>分布式锁的三要素</h2><p>分布式锁实现的三大要素：加锁、解锁、锁超时。</p><p><strong>业务场景</strong></p><p><img src="3.png"></p><p>订单服务部署了多个，用户通过Nginx负载均衡来同时购买一个商品，但是此商品的数量很有限。这时通过分布式锁的技术来实现对临界资源的控制，让它们有序的访问。</p><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>最简单的方法是使用 <code>setnx</code> 命令。<code>key</code> 是锁的唯一标识，按业务来决定命名。比如想要给一种商品的秒杀活动加锁，可以给 <code>key</code> 命名为 “lock_sale_商品ID” 。而 <code>value</code> 设置成什么呢？我们可以姑且设置成 <code>1</code>。加锁的伪代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnx（lock_sale_商品ID，1）</span><br></pre></td></tr></table></figure><p>当一个线程执行 <code>setnx</code> 返回 <code>1</code>，说明 <code>key</code> 原本不存在，该线程成功得到了锁；当一个线程执行 <code>setnx</code> 返回 <code>0</code>，说明 <code>key</code> 已经存在，该线程抢锁失败。</p><h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><p>有加锁就得有解锁。当得到锁的线程执行完任务，需要释放锁，以便其他线程可以进入。释放锁的最简单方式是执行 <code>del</code> 指令，伪代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del（lock_sale_商品ID）</span><br></pre></td></tr></table></figure><p>释放锁之后，其他线程就可以继续执行 <code>setnx</code> 命令来获得锁。</p><h3 id="锁超时"><a href="#锁超时" class="headerlink" title="锁超时"></a>锁超时</h3><p>锁超时是什么意思呢？如果一个得到锁的线程在执行任务的过程中挂掉，来不及显式地释放锁，这块资源将会永远被锁住（<strong>死锁</strong>），别的线程再也别想进来。所以，<code>setnx</code> 的 <code>key</code> 必须设置一个超时时间，以保证即使没有被显式释放，这把锁也要在一定时间后自动释放。<code>setnx</code> 不支持超时参数，所以需要额外的指令，伪代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expire（lock_sale_商品ID， 30）</span><br></pre></td></tr></table></figure><p><strong>上述过程伪代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（setnx（lock_sale_商品ID，1） == 1）&#123;</span><br><span class="line">    expire（lock_sale_商品ID，30）</span><br><span class="line">    try &#123;</span><br><span class="line">        <span class="keyword">do</span> something ......</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        del（lock_sale_商品ID）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上述存在的问题"><a href="#上述存在的问题" class="headerlink" title="上述存在的问题"></a>上述存在的问题</h2><ol><li><code>setnx</code>和 <code>expire</code> 的非原子性</li><li><code>del</code>误删</li><li>出现并发的可能性</li></ol><h3 id="非原子性问题"><a href="#非原子性问题" class="headerlink" title="非原子性问题"></a>非原子性问题</h3><p>设想一个极端场景，当某线程执行 <code>setnx</code>，成功得到了锁：</p><p><img src="4.png"></p><p><code>setnx</code> 刚执行成功，还未来得及执行 <code>expire</code> 指令，节点 1 挂掉了。</p><p><img src="5.png"></p><p>这样一来，这把锁就没有设置过期时间，变成<strong>死锁</strong>，别的线程再也无法获得锁了。</p><p>怎么解决呢？<code>setnx</code> 指令本身是不支持传入超时时间的，<code>set</code> 指令增加了可选参数，伪代码如下：</p><p><strong>如下解决</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>（lock_sale_商品ID，1，30，NX）</span><br></pre></td></tr></table></figure><p>这样就可以取代 <code>setnx</code> 指令。</p><h3 id="del误删问题"><a href="#del误删问题" class="headerlink" title="del误删问题"></a>del误删问题</h3><p>又是一个极端场景，假如某线程成功得到了锁，并且设置的超时时间是 30 秒。</p><p><img src="6.png"></p><p>如果某些原因导致线程 A 执行的很慢很慢，过了 30 秒都没执行完，这时候锁过期自动释放，线程 B 得到了锁。</p><p><img src="7.png"></p><p>随后，线程 A 执行完了任务，线程 A 接着执行 <code>del</code> 指令来释放锁。但这时候线程 B 还没执行完，线程A实际上 <code>删除的是线程 B 加的锁</code>。</p><p><img src="8.png"></p><p>怎么避免这种情况呢？可以在 <code>del</code> 释放锁之前做一个判断，验证当前的锁是不是自己加的锁。至于具体的实现，可以在加锁的时候把当前的线程 ID 当做 <code>value</code>，并在删除之前验证 <code>key</code> 对应的 <code>value</code> 是不是自己线程的 ID。</p><p>加锁：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String threadId = Thread.currentThread().getId()</span><br><span class="line"><span class="built_in">set</span>（key，threadId ，30，NX）</span><br></pre></td></tr></table></figure><p>解锁：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（threadId .equals(redisClient.get(key))）&#123;</span><br><span class="line">    del(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这样做又隐含了一个新的问题，判断和释放锁是两个独立操作，不是原子性。</p><h3 id="出现并发的可能性"><a href="#出现并发的可能性" class="headerlink" title="出现并发的可能性"></a>出现并发的可能性</h3><p>还是刚才第二点所描述的场景，虽然我们避免了线程 A 误删掉 <code>key</code> 的情况，但是同一时间有 A，B 两个线程在访问代码块，仍然是不完美的。怎么办呢？我们可以让获得锁的线程开启一个<strong>守护线程</strong>，用来给快要过期的锁“续航”。</p><p><img src="9.png"></p><p>当过去了 29 秒，线程 A 还没执行完，这时候守护线程会执行 <code>expire</code> 指令，为这把锁“续命”20 秒。守护线程从第 29 秒开始执行，每 20 秒执行一次。</p><p><img src="10.png"></p><p>当线程 A 执行完任务，会显式关掉守护线程。</p><p><img src="11.png"></p><p>另一种情况，如果节点 1 忽然断电，由于线程 A 和守护线程在同一个进程，守护线程也会停下。这把锁到了超时的时候，没人给它续命，也就自动释放了。</p><p><img src="12.png"></p><hr><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><p>此文内容摘抄自</p><p><a href="https://www.funtl.com/zh/apache-dubbo-zookeeper/%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%8A%80%E6%9C%AF.html">什么是分布式协调技术</a></p>]]></content>
      
      
      <categories>
          
          <category> 分布式协调技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>消息队列MQ</title>
      <link href="2020/02/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97MQ/"/>
      <url>2020/02/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97MQ/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h1><p>Message Queue（MQ），消息队列中间件。<a id="more"></a>很多人都说：MQ 通过将消息的发送和接收分离来实现应用程序的异步和解偶，这个给人的直觉是——MQ 是异步的，用来解耦的，但是<font color='red'>这个只是 MQ 的效果而不是目的</font>。MQ 真正的目的是为了通讯，屏蔽底层复杂的通讯协议，定义了一套应用层的、更加简单的通讯协议。一个分布式系统中两个模块之间通讯要么是 HTTP，要么是自己开发的 TCP，但是这两种协议其实都是原始的协议。HTTP 协议很难实现两端通讯——模块 A 可以调用 B，B 也可以主动调用 A，如果要做到这个两端都要背上 WebServer，而且还<font color='red'>不支持长连接（HTTP 2.0 的库根本找不到）</font>。TCP 就更加原始了，粘包、心跳、私有的协议，想一想头皮就发麻。MQ 所要做的就是在这些协议之上构建一个简单的“协议”——生产者/消费者模型。MQ 带给我的“协议”不是具体的通讯协议，而是更高层次通讯模型。它定义了两个对象——发送数据的叫生产者；接收数据的叫消费者， 提供一个 SDK 让我们可以定义自己的生产者和消费者实现消息通讯而无视底层通讯协议。</p><p><strong>它一般用于线程、系统之间的通信。</strong></p><p><strong><code>Java EE</code>中应用场景：</strong></p><ol><li>异步</li><li>消峰：秒杀系统中从消息队列中取合适数量的请求</li><li>解耦</li></ol><h1 id="消息队列的流派"><a href="#消息队列的流派" class="headerlink" title="消息队列的流派"></a>消息队列的流派</h1><h2 id="有Borker的MQ"><a href="#有Borker的MQ" class="headerlink" title="有Borker的ＭＱ"></a>有Borker的ＭＱ</h2><p>这个流派通常有一台服务器作为 Broker，所有的消息都通过它中转。生产者把消息发送给它就结束自己的任务了，Broker 则把消息主动推送给消费者（或者消费者主动轮询）</p><h3 id="重Topic"><a href="#重Topic" class="headerlink" title="重Topic"></a>重Topic</h3><p>kafka、JMS（ActiveMQ）就属于这个流派，生产者会发送 key 和数据到 Broker，由 Broker 比较 key 之后决定给哪个消费者。这种模式是我们最常见的模式，是我们对 MQ 最多的印象。在这种模式下一个 topic 往往是一个比较大的概念，甚至一个系统中就可能只有一个 topic，topic 某种意义上就是 queue，生产者发送 key 相当于说：“hi，把数据放到 key 的队列中”</p><p><img src="1.png"></p><p>如上图所示，Broker 定义了三个队列，key1，key2，key3，生产者发送数据的时候会发送 key1 和 data，Broker 在推送数据的时候则推送 data（也可能把 key 带上）。</p><p>虽然架构一样但是 <strong>kafka 的性能要比 jms 的性能不知道高到多少倍</strong>，所以基本这种类型的 MQ 只有 kafka 一种备选方案。如果你需要一条暴力的数据流（在乎性能而非灵活性）那么 kafka 是最好的选择</p><p>但是Kafka会有丢包问题,重要数据请不要使用!</p><h3 id="轻Topic"><a href="#轻Topic" class="headerlink" title="轻Topic"></a>轻Topic</h3><p>这种的代表是 RabbitMQ（或者说是 AMQP）。生产者发送 key 和数据，消费者定义订阅的队列，Broker 收到数据之后会通过一定的逻辑计算出 key 对应的队列，然后把数据交给队列</p><p><img src="2.png"></p><p>这种模式下解耦了 key 和 queue，在这种架构中 queue 是非常轻量级的（在 RabbitMQ 中它的上限取决于你的内存），消费者关心的只是自己的 queue；生产者不必关心数据最终给谁只要指定 key 就行了，中间的那层映射在 AMQP 中叫 exchange（交换机）。</p><p>AMQP 中有四种 exchange</p><ul><li>Direct exchange：key 就等于 queue</li><li>Fanout exchange：无视 key，给所有的 queue 都来一份</li><li>Topic exchange：key 可以用“宽字符”模糊匹配 queue</li><li>Headers exchange：无视 key，通过查看消息的头部元数据来决定发给那个 queue（AMQP 头部元数据非常丰富而且可以自定义）</li></ul><p>这种结构的架构给通讯带来了很大的灵活性，我们能想到的通讯方式都可以用这四种 exchange 表达出来。如果你需要一个企业数据总线（在乎灵活性）那么 RabbitMQ 绝对的值得一用</p><h2 id="无Broker的MQ"><a href="#无Broker的MQ" class="headerlink" title="无Broker的MQ"></a>无Broker的MQ</h2><p>无 Broker 的 MQ 的代表是 ZeroMQ。该作者非常睿智，他非常敏锐的意识到——MQ 是更高级的 Socket，它是解决通讯问题的。所以 ZeroMQ 被设计成了一个“库”而不是一个中间件，这种实现也可以达到——没有 Broker 的目的</p><p><img src="3.png"></p><p>节点之间通讯的消息都是发送到彼此的队列中，每个节点都既是生产者又是消费者。ZeroMQ 做的事情就是封装出一套类似于 Socket 的 API 可以完成发送数据，读取数据</p><p>ZeroMQ 其实就是一个跨语言的、重量级的 Actor 模型邮箱库。你可以把自己的程序想象成一个 Actor，ZeroMQ 就是提供邮箱功能的库；ZeroMQ 可以实现同一台机器的 RPC 通讯也可以实现不同机器的 TCP、UDP 通讯，如果你需要一个强大的、灵活、野蛮的通讯能力，别犹豫 ZeroMQ</p><h1 id="消息队列的模式"><a href="#消息队列的模式" class="headerlink" title="消息队列的模式"></a>消息队列的模式</h1><h2 id="点对点"><a href="#点对点" class="headerlink" title="点对点"></a>点对点</h2><p><strong>一对一，消费者主动拉取数据，消息收到后消息清除，消息不会持久化</strong></p><p> 消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息。</p><p>消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p><img src="https://i.loli.net/2020/07/05/qPNaJZHignsDmRc.png" alt="image-20200705104209918"></p><h2 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布/订阅模式</h2><p><strong>一对多，消费者消费数据之后不会清除消息，消息会持久化，定时删除</strong></p><p>消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费。</p><p><img src="https://i.loli.net/2020/07/05/eX4DQWh8knvSEyr.png" alt="image-20200705104257352"></p><h1 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h1><h2 id="RabbitMQ-的优点"><a href="#RabbitMQ-的优点" class="headerlink" title="RabbitMQ 的优点"></a>RabbitMQ 的优点</h2><ul><li>基于 ErLang 语言开发具有高可用高并发的优点，适合辑群服务器</li><li>健壮、稳定、易用、跨平台、支持多种语言、文档齐全</li><li>有消息确认机制和持久化机制，可靠性高</li><li>开源</li></ul><p>ErLang能实现公平调度,它能开启好多线程,但Java调度不太好,最多开1000线程,多了就出各种问题</p><h2 id="RabbitMQ-的概念"><a href="#RabbitMQ-的概念" class="headerlink" title="RabbitMQ 的概念"></a>RabbitMQ 的概念</h2><h3 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h3><ul><li>Producer：消息的生产者</li><li>Consumer：消息的消费者</li></ul><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><ul><li>消息队列，提供了 FIFO 的处理机制，具有缓存消息的能力。RabbitMQ 中，队列消息可以设置为持久化，临时或者自动删除。</li><li>设置为持久化的队列，Queue 中的消息会在 Server 本地硬盘存储一份，防止系统 Crash，数据丢失</li><li>设置为临时队列，Queue 中的数据在系统重启之后就会丢失</li><li>设置为自动删除的队列，当不存在用户连接到 Server，队列中的数据会被自动删除</li></ul><h3 id="ExChange"><a href="#ExChange" class="headerlink" title="ExChange"></a>ExChange</h3><p>Exchange 类似于数据通信网络中的交换机，提供消息路由策略。RabbitMQ 中，Producer 不是通过信道直接将消息发送给 Queue，而是先发送给 ExChange。一个 ExChange 可以和多个 Queue 进行绑定，Producer 在传递消息的时候，会传递一个 ROUTING_KEY，ExChange 会根据这个 ROUTING_KEY 按照特定的路由算法，将消息路由给指定的 Queue。和 Queue 一样，ExChange 也可设置为持久化，临时或者自动删除</p><h3 id="ExChange-的-4-种类型"><a href="#ExChange-的-4-种类型" class="headerlink" title="ExChange 的 4 种类型"></a>ExChange 的 4 种类型</h3><ul><li>direct（默认）：直接交换器，工作方式类似于单播，ExChange 会将消息发送完全匹配 ROUTING_KEY 的 Queue（key 就等于 queue）</li><li>fanout：广播是式交换器，不管消息的 ROUTING_KEY 设置为什么，ExChange 都会将消息转发给所有绑定的 Queue（无视 key，给所有的 queue 都来一份）</li><li>topic：主题交换器，工作方式类似于组播，ExChange 会将消息转发和 ROUTING_KEY 匹配模式相同的所有队列（key 可以用“宽字符”模糊匹配 queue），比如，ROUTING_KEY 为 <code>user.stock</code> 的 Message 会转发给绑定匹配模式为 <code>* .stock,user.stock</code>， <code>* . *</code> 和 <code>#.user.stock.#</code> 的队列。（ * 表是匹配一个任意词组，# 表示匹配 0 个或多个词组）</li><li>headers：消息体的 header 匹配，无视 key，通过查看消息的头部元数据来决定发给那个 queue（AMQP 头部元数据非常丰富而且可以自定义）</li></ul><h3 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h3><p>所谓绑定就是将一个特定的 ExChange 和一个特定的 Queue 绑定起来。ExChange 和 Queue 的绑定可以是多对多的关系</p><h3 id="Virtual-Host"><a href="#Virtual-Host" class="headerlink" title="Virtual Host"></a>Virtual Host</h3><p>在 RabbitMQ Server 上可以创建多个虚拟的 Message Broker，又叫做 Virtual Hosts (vhosts)。每一个 vhost 本质上是一个 mini-rabbitmq server，分别管理各自的 ExChange，和 bindings。vhost 相当于物理的 Server，可以为不同 app 提供边界隔离，使得应用安全的运行在不同的 vhost 实例上，相互之间不会干扰。Producer 和 Consumer 连接 rabbit server 需要指定一个 vhost</p><h2 id="RabbitMQ-的使用过程"><a href="#RabbitMQ-的使用过程" class="headerlink" title="RabbitMQ 的使用过程"></a>RabbitMQ 的使用过程</h2><ul><li>客户端连接到消息队列服务器，打开一个 Channel。</li><li>客户端声明一个 ExChange，并设置相关属性。</li><li>客户端声明一个 Queue，并设置相关属性。</li><li>客户端使用 Routing Key，在 ExChange 和 Queue 之间建立好绑定关系。</li><li>客户端投递消息到 ExChange。</li><li>ExChange 接收到消息后，就根据消息的 key 和已经设置的 binding，进行消息路由，将消息投递到一个或多个队列里</li></ul><h1 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h1><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><p>创建<code>docker-compose.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:management</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_USER:</span> <span class="string">rabbit</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_PASS:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/rabbitmq</span></span><br></pre></td></tr></table></figure><p><code>docker-compose up -d</code></p><h2 id="RabbitMQ-WebUI"><a href="#RabbitMQ-WebUI" class="headerlink" title="RabbitMQ WebUI"></a>RabbitMQ WebUI</h2><h3 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址"></a>访问地址</h3><p><a href="http://ip:15672/">http://ip:15672</a></p><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p><img src="4.png"></p><h2 id="Global-counts"><a href="#Global-counts" class="headerlink" title="Global counts"></a>Global counts</h2><p><img src="5.png"></p><ul><li>Connections：连接数</li><li>Channels：频道数</li><li>Exchanges：交换机数</li><li>Queues：队列数</li><li>Consumers：消费者数</li></ul><h2 id="交换机界面"><a href="#交换机界面" class="headerlink" title="交换机界面"></a>交换机界面</h2><p><img src="6.png"></p><h2 id="队列界面"><a href="#队列界面" class="headerlink" title="队列界面"></a>队列界面</h2><p><img src="7.png"></p><ul><li>Name：消息队列的名称，这里是通过程序创建的</li><li>Features：消息队列的类型，durable:true为会持久化消息</li><li>Ready：准备好的消息</li><li>Unacked：未确认的消息</li><li>Total：全部消息</li><li>备注：如果都为 0 则说明全部消息处理完成</li></ul><h1 id="RabbitMQ使用"><a href="#RabbitMQ使用" class="headerlink" title="RabbitMQ使用"></a>RabbitMQ使用</h1><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-boot-amqp</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.174</span><span class="number">.132</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">rabbit</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置队列"><a href="#配置队列" class="headerlink" title="配置队列"></a>配置队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqQueenConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;FirstQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供者</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: HelloRabbitProvider&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloRabbitProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="string">&quot;hello&quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;FirstQueue&quot;</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmqpTemplate</span><span class="params">(AmqpTemplate amqpTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate = amqpTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;FirstQueue&quot;)</span>  <span class="comment">// 消费者订阅队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloRabbitConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span>  <span class="comment">// 处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Consumer: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="转载自"><a href="#转载自" class="headerlink" title="转载自"></a>转载自</h1><p><a href="https://www.funtl.com/zh/spring-cloud-itoken-codeing/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E6%B5%81%E6%B4%BE.html#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91">消息队列的流派</a></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> springboot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用undertow作为中间容器</title>
      <link href="2020/02/26/SpringBoot%E4%BD%BF%E7%94%A8undertow%E4%BD%9C%E4%B8%BA%E4%B8%AD%E9%97%B4%E5%AE%B9%E5%99%A8/"/>
      <url>2020/02/26/SpringBoot%E4%BD%BF%E7%94%A8undertow%E4%BD%9C%E4%B8%BA%E4%B8%AD%E9%97%B4%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>undertow,jetty和tomcat可以说是javaweb项目当下最火的三款服务器，tomcat是apache下的一款重量级的服务器，不用多说历史悠久，经得起实践的考验。然而：当下微服务兴起，spring boot ，spring cloud 越来越热的情况下，选择一款轻量级而性能优越的服务器是必要的选择。</p><a id="more"></a><h1 id="替换tomcat"><a href="#替换tomcat" class="headerlink" title="替换tomcat"></a>替换tomcat</h1><p>pom文件引用web依赖时，需要剔除tomcat</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">connection-timeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">undertow:</span></span><br><span class="line">    <span class="attr">max-http-post-size:</span> <span class="string">20MB</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> undertow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger2生成接口文档</title>
      <link href="2020/02/25/Swagger2%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
      <url>2020/02/25/Swagger2%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>手写文档的痛苦不说也能体会</p><ul><li>文档需要更新的时候，需要再次发送一份给前端，也就是文档更新交流不及时。</li><li>接口返回结果不明确</li><li>不能直接在线测试接口，通常需要使用工具，比如：<code>Postman</code></li><li>接口文档太多，不好管理</li></ul><a id="more"></a><h1 id="使用-Swagger-解决问题"><a href="#使用-Swagger-解决问题" class="headerlink" title="使用 Swagger 解决问题"></a>使用 Swagger 解决问题</h1><p>Swagger 也就是为了解决这个问题，当然也不能说 Swagger 就一定是完美的，当然也有缺点，<font color='red'>最明显的就是代码植入性比较强。</font></p><p>但是呢，我感觉植入性强也比手写代码要好。</p><h2 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h2><p>增加 Swagger2 所需依赖，<code>pom.xml</code> 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Swagger2 Begin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Swagger2 End --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置Swagger2"><a href="#配置Swagger2" class="headerlink" title="配置Swagger2"></a>配置Swagger2</h2><p>注意：<code>RequestHandlerSelectors.basePackage(&quot;com.example.demo.control&quot;)</code> 为 Controller 包路径，不然生成的文档扫描不到接口</p><p>创建一个名为 <code>Swagger2Configuration</code> 的 Java 配置类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Configuration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demo.control&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;API 文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;API 网关接口&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启用Swagger2"><a href="#启用Swagger2" class="headerlink" title="启用Swagger2"></a>启用Swagger2</h2><p>Application 中加上注解 <code>@EnableSwagger2</code> 表示开启 Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ValidationApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用Swagger2"><a href="#使用Swagger2" class="headerlink" title="使用Swagger2"></a>使用Swagger2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 存放用户发送的所有帖子 前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 04637@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-12-18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/postInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostInfoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PostInfoService postInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;首页帖子查询&quot;, notes = &quot;必须声明排序方式&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;sortType&quot;, value = &quot;排序方式&quot;, required = true, paramType =</span></span><br><span class="line"><span class="meta">                    &quot;query&quot;, dataType = &quot;String&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;current&quot;, value = &quot;当前页&quot;, required = false, paramType =</span></span><br><span class="line"><span class="meta">                    &quot;query&quot;,</span></span><br><span class="line"><span class="meta">                    dataType = &quot;String&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;size&quot;, value = &quot;size&quot;, required = false, paramType =</span></span><br><span class="line"><span class="meta">                    &quot;query&quot;,</span></span><br><span class="line"><span class="meta">                    dataType = &quot;String&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;Authorization&quot;, value = &quot;Authorization&quot;, required = false, paramType =</span></span><br><span class="line"><span class="meta">                    &quot;header&quot;,</span></span><br><span class="line"><span class="meta">                    dataType = &quot;String&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;selectHome&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">selectPostHome</span><span class="params">(<span class="meta">@NotBlank</span> String sortType, <span class="meta">@ApiIgnore</span> Page page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(sortType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.failed(<span class="string">&quot;排序方式不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        IPage&lt;PostInfoVO&gt; result = postInfoService.selectPostHome(sortType, page);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.failed(<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok().setData(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostInfoService</span><span class="params">(PostInfoService postInfoService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postInfoService = postInfoService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问Swagger2"><a href="#访问Swagger2" class="headerlink" title="访问Swagger2"></a>访问Swagger2</h2><p>访问地址：<a href="http://ip:port/swagger-ui.html">http://ip:port/swagger-ui.html</a></p><h1 id="Swagger2的使用问题"><a href="#Swagger2的使用问题" class="headerlink" title="Swagger2的使用问题"></a>Swagger2的使用问题</h1><p><strong>一般接口参数全部使用JavaBean来接受，但其中又不是所有的属性都会使用，这样每次生成的文档都会生成此JavaBean的所有属性，很乱</strong></p><p>如果使用Swagger2的对JavaBean的注解很麻烦，而且不同接口使用同一JavaBean接收，接受的属性有不同</p><p>我能找到的方法就是：使用<code>@ApiIgnore</code>注解手动忽略这个Bean，自己手动在方法上方使用<code>@ApiImplicitParams</code>手动把需要的Bean中的属性写出来</p><hr><p><strong>SpringBoot如果访问不到Swagger2的页面，请如下配置<code>Swagger2Configuration</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fh.colleagues.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fh.colleagues.auth.ParseToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.AuthorizationScope;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.SecurityReference;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Configuration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .useDefaultResponseMessages(<span class="keyword">false</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">// 忽略自定义注解</span></span><br><span class="line">                .ignoredParameterTypes(ParseToken.class)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.fh.colleagues.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .securitySchemes(securitySchemes())</span><br><span class="line">                .securityContexts(securityContexts());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ApiKey&gt; <span class="title">securitySchemes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;ApiKey&gt; apiKeys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        apiKeys.add(<span class="keyword">new</span> ApiKey(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;header&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> apiKeys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在Swagger2的securityContexts中通过正则表达式，设置去除掉不需要使用参数的接口</span></span><br><span class="line"><span class="comment">     * 如下列代码所示，通过PathSelectors.regex(&quot;^(?!auth).*$&quot;)，</span></span><br><span class="line"><span class="comment">     * 所有包含&quot;auth&quot;的接口不需要使用securitySchemes。</span></span><br><span class="line"><span class="comment">     * 即不需要使用上文中设置的名为“Authorization”，type为“header”的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;SecurityContext&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityContext&gt; <span class="title">securityContexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;SecurityContext&gt; apiKeys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        apiKeys.add(SecurityContext.builder()</span><br><span class="line">                .securityReferences(defaultAuth())</span><br><span class="line"><span class="comment">//                .forPaths(PathSelectors.regex(&quot;^(?!auth).*$&quot;))</span></span><br><span class="line">                .build());</span><br><span class="line">        <span class="keyword">return</span> apiKeys;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        List&lt;SecurityReference&gt; securityReferences=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        securityReferences.add(<span class="keyword">new</span> SecurityReference(<span class="string">&quot;Authorization&quot;</span>, authorizationScopes));</span><br><span class="line">        <span class="keyword">return</span> securityReferences;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;MyShop API 文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;zzzzz&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;asd&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;swagger-ui.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想对接口中的自定义注解的JavaBean忽略（比如：使用参数解析器自动解析得来的JavaBean不是用户传递的），请在conig中声明<code>ignoredParameterTypes(ParseToken.class)</code></p><p>如果所有（大部分）请求都需要请求头用于验证，参照上面注释，可设置正则排除不被token覆盖的方法！</p><p><img src="1.PNG"></p><p>在这里输入token，所有请求会自动带上它</p><hr><p><strong>SpringBoot如果访问Swagger2的页面，一直轮询弹窗</strong></p><p>在启动类上加上<code>@EnableSwagger2</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ValidationApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Swagger-常用注解说明"><a href="#Swagger-常用注解说明" class="headerlink" title="Swagger 常用注解说明"></a>Swagger 常用注解说明</h1><p>Swagger 通过注解表明该接口会生成文档，包括接口名、请求方法、参数、返回信息的等等。</p><p><strong>常用注解</strong></p><ul><li><code>@Api</code>：修饰整个类，描述 Controller 的作用</li><li><code>@ApiOperation</code>：描述一个类的一个方法，或者说一个接口</li><li><code>@ApiParam</code>：单个参数描述</li><li><code>@ApiModel</code>：用对象来接收参数</li><li><code>@ApiProperty</code>：用对象接收参数时，描述对象的一个字段</li><li><code>@ApiResponse</code>：HTTP 响应其中 1 个描述</li><li><code>@ApiResponses</code>：HTTP 响应整体描述</li><li><code>@ApiIgnore</code>：使用该注解忽略这个API</li><li><code>@ApiError</code>：发生错误返回的信息</li><li><code>@ApiImplicitParam</code>：一个请求参数</li><li><code>@ApiImplicitParams</code>：多个请求参数</li></ul><h2 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h2><p>说明：用在请求的类上，表示对类的说明</p><p>常用参数：</p><ul><li>tags=”说明该类的作用，非空时将覆盖 value 的值”</li><li>value=”描述类的作用”</li></ul><p>其他参数：</p><ul><li>description 对 api 资源的描述，在 1.5 版本后不再支持</li><li>basePath 基本路径可以不配置，在 1.5 版本后不再支持</li><li>position 如果配置多个 Api 想改变显示的顺序位置，在 1.5 版本后不再支持</li><li>produces 设置 MIME 类型列表（output），例：”application/json, application/xml”，默认为空</li><li>consumes 设置 MIME 类型列表（input），例：”application/json, application/xml”，默认为空</li><li>protocols 设置特定协议，例：http， https， ws， wss</li><li>authorizations 获取授权列表（安全声明），如果未设置，则返回一个空的授权值。</li><li>hidden 默认为 false，配置为 true 将在文档中隐藏</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&quot;登录请求&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h2><p>说明：用在请求的方法上，说明方法的用途、作用</p><p>常用参数：</p><ul><li>value=”说明方法的用途、作用”</li><li>notes=”方法的备注说明”</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping(value=&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;登录检测&quot;, notes=&quot;根据用户名、密码判断该用户是否存在&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserModel <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;, required = false)</span> String account,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="meta">@RequestParam(value = &quot;pass&quot;, required = false)</span> String password)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="ApiImplicitParams"><a href="#ApiImplicitParams" class="headerlink" title="@ApiImplicitParams"></a>@ApiImplicitParams</h2><p>说明：用在请求的方法上，表示一组参数说明；<code>@ApiImplicitParam</code>：用在 <code>@ApiImplicitParams</code> 注解中，指定一个请求参数的各个方面</p><p>常用参数：</p><ul><li>name：参数名，参数名称可以覆盖方法参数名称，路径参数必须与方法参数一致</li><li>value：参数的汉字说明、解释</li><li>required：参数是否必须传，默认为 false （路径参数必填）</li><li>paramType：参数放在哪个地方<ul><li>header 请求参数的获取：<code>@RequestHeader</code></li><li>query 请求参数的获取：<code>@RequestParam</code></li><li>path（用于 restful 接口）–&gt; 请求参数的获取：<code>@PathVariable</code></li><li>body（不常用）</li><li>form（不常用）</li></ul></li><li>dataType：参数类型，默认 String，其它值 dataType=”Integer”</li><li>defaultValue：参数的默认值</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping(value=&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;登录检测&quot;, notes=&quot;根据用户名、密码判断该用户是否存在&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户名&quot;, required = false, paramType = &quot;query&quot;, dataType = &quot;String&quot;),</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;pass&quot;, value = &quot;密码&quot;, required = false, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserModel <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;, required = false)</span> String account,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="meta">@RequestParam(value = &quot;pass&quot;, required = false)</span> String password)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="ApiModel"><a href="#ApiModel" class="headerlink" title="@ApiModel"></a>@ApiModel</h2><p>说明：用于响应类上，表示一个返回响应数据的信息（这种一般用在 POST 创建的时候，使用 <code>@RequestBody</code> 这样的场景，请求参数无法使用 <code>@ApiImplicitParam</code> 注解进行描述的时候）；<code>@ApiModelProperty</code>：用在属性上，描述响应类的属性</p><p>其他参数(@ApiModelProperty)：</p><ul><li>value 此属性的简要说明。</li><li>name 允许覆盖属性名称</li><li>allowableValues 限制参数的可接受值。1.以逗号分隔的列表 2.范围值 3.设置最小值/最大值</li><li>access 允许从 API 文档中过滤属性。<ul><li>notes 目前尚未使用。</li></ul></li><li>dataType 参数的数据类型。可以是类名或者参数名，会覆盖类的属性名称。</li><li>required 参数是否必传，默认为 false</li><li>position 允许在类中对属性进行排序。默认为 0</li><li>hidden 允许在 Swagger 模型定义中隐藏该属性。</li><li>example 属性的示例。</li><li>readOnly 将属性设定为只读。</li><li>reference 指定对相应类型定义的引用，覆盖指定的任何参数值</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(value=&quot;用户登录信息&quot;, description=&quot;用于判断用户是否存在&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@ApiModelProperty(value=&quot;用户名&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;密码&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>当我们<code>control</code>返回数据时会展示出每个字段的注释，前提是必须指定返回的类型(不能是Object)，最好是使用统一返回类<code>ResponseEntity&lt;T&gt;</code>的泛型！</font></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="如何传送基础类型的数组"><a href="#如何传送基础类型的数组" class="headerlink" title="如何传送基础类型的数组"></a>如何传送基础类型的数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping(value=&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;登录检测&quot;, notes=&quot;根据用户名、密码判断该用户是否存在&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;names&quot;, value = &quot;用户名&quot;, required = false, paramType = &quot;query&quot;, dataType = &quot;String&quot;, allowMultiple = true)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserModel <span class="title">login</span><span class="params">(String[] names)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>重点在于</strong></p><ol><li><code>ApiImplicitParam</code>中的<code>allowMultiple = true</code></li><li>参数中的<code>String[]</code></li></ol><h2 id="如何传送自定义Bean的数组"><a href="#如何传送自定义Bean的数组" class="headerlink" title="如何传送自定义Bean的数组"></a>如何传送自定义Bean的数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping(value=&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;CourseDateSearchs&quot;, value = &quot;用户名&quot;, required = false, paramType = &quot;body&quot;, dataType = &quot;CourseDateSearch&quot;, allowMultiple = true)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserModel <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> CourseDateSearch[] CourseDateSearchs)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(value=&quot;CourseDateSearch&quot;, description)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseDateSearch</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>重点在于</strong></p><ol><li><code>ApiImplicitParam</code>中的<code>allowMultiple = true</code></li><li><code>ApiImplicitParam</code>中的<code>dataType = &quot;CourseDateSearch&quot;</code>等于<code>@ApiModel(value=&quot;CourseDateSearch&quot;, description</code>)</li><li>参数中的<code>@RequestBody</code>（将传入的json字符串自动解析为<code>CourseDateSearch[]</code>）</li><li><code>ApiImplicitParam</code>中的<code>body</code></li><li>注意，使用<code>@RequestBody</code>必须为<code>POST</code>请求</li></ol><p>如何使用见图：</p><p><img src="1.jpg"></p><h2 id="如何传送时间"><a href="#如何传送时间" class="headerlink" title="如何传送时间"></a>如何传送时间</h2><p>我用时间戳来表示时间，数据库字段也是时间戳；这样能省去很多麻烦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;testTime&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">testTime</span><span class="params">(Test time)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>我们使用java8的<code>java.time.Instant</code>作为参数，他能将前台传送的ISO时间字符串映射成<code>Instant</code>时间</p><p>而前台只需要<code>new Date().toISOString()</code>构造值，然后<code>time:new Date().toISOString()</code>发送请求后台就能直接接收到。当我们返回值是<code>Instant</code>类型时，前台接收到的是10位时间戳！</p><p><code>Test</code>是一个实体类，Instant参数只能作为实体类中的属性接收，否则报错</p><p>或者，我们前台传送字符串，后台使用<code>@DateTimeFormat</code>注解标识，可以使用<code>Date</code>、<code>LocalDateTime</code>类型接收。</p>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> Swagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Redis二级缓存配置</title>
      <link href="2020/02/23/Mybatis-Redis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE/"/>
      <url>2020/02/23/Mybatis-Redis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h1><p>MyBatis 会在表示会话的 <code>SqlSession</code> 对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。</p><p>一级缓存是 <code>SqlSession</code> 级别的缓存。在操作数据库时需要构造 sqlSession 对象，在对象中有一个（内存区域）数据结构（HashMap）用于存储缓存数据。不同的 sqlSession 之间的缓存数据区域（HashMap）是互相不影响的。其作用域是同一个 SqlSession，在同一个 sqlSession 中两次执行相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率。当一个 sqlSession 结束后该 sqlSession 中的一级缓存也就不存在了。<font color='red'>Mybatis 默认开启一级缓存。</font></p><a id="more"></a><h1 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h1><p> 二级缓存是 mapper 级别的缓存，多个 <code>SqlSession</code> 去操作同一个 Mapper 的 sql 语句，多个 SqlSession 去操作数据库得到数据会存在二级缓存区域，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。其作用域是 mapper 的同一个 <code>namespace</code>，不同的 sqlSession 两次执行相同 namespace下的 sql 语句且向 sql 中传递参数也相同即最终执行相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率。 <font color='red'>Mybatis 默认没有开启二级缓存需要在 setting 全局参数中配置开启二级缓存。</font></p><h1 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h1><p> 在 Spring Boot 配置文件中开启 MyBatis 二级缓存，配置代码如下： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="设置实体类序列号"><a href="#设置实体类序列号" class="headerlink" title="设置实体类序列号"></a>设置实体类序列号</h2><p>因为数据需要放在Redis里面必然走网络传输，所以实体类一定要序列化，有序列号。</p><p><code>private static final long serialVersionUID = 8289770415244673535L;</code></p><p><strong>IDEA提示生成序列号</strong></p><p>默认情况下 Intellij IDEA 不会提示继承了 Serializable 接口的类生成 serialVersionUID 的警告。如果需要生成 serialVersionUID，需要手动配置。</p><p>File -&gt; Settings -&gt; Inspections -&gt; Serialization issues -&gt; Serialization class without ‘serialVersionUID’</p><p><img src="1.png"></p><h2 id="创建相关工具类"><a href="#创建相关工具类" class="headerlink" title="创建相关工具类"></a>创建相关工具类</h2><p><strong>实现 Spring ApplicationContextAware 接口，用于手动注入 Bean</strong></p><p> 创建一个名为 <code>ApplicationContextHolder</code> 的工具类，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.Validate;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextHolder</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ApplicationContextHolder.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取存储在静态变量中的 ApplicationContext</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertContextInjected();</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从静态变量 applicationContext 中获取 Bean，自动转型成所赋值对象的类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        assertContextInjected();</span><br><span class="line">        <span class="keyword">return</span> (T) applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从静态变量 applicationContext 中获取 Bean，自动转型成所赋值对象的类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        assertContextInjected();</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现 DisposableBean 接口，在 Context 关闭时清理静态变量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;清除 SpringContext 中的 ApplicationContext: &#123;&#125;&quot;</span>, applicationContext);</span><br><span class="line">        applicationContext = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现 ApplicationContextAware 接口，注入 Context 到静态变量中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        ApplicationContextHolder.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断言 Context 已经注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">assertContextInjected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Validate.validState(applicationContext != <span class="keyword">null</span>, <span class="string">&quot;applicationContext 属性未注入，请在 spring-context.xml 配置中定义 ApplicationContextHolder&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现 MyBatis Cache 接口，用于自定义缓存为 Redis</strong></p><p> 创建一个名为 <code>RedisCache</code> 的工具类，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis 缓存工具类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: RedisCache&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(RedisCache.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id; <span class="comment">// cache instance id</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE_TIME_IN_MINUTES = <span class="number">30</span>; <span class="comment">// redis过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCache</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cache instances require an ID&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Put query result to redis</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RedisTemplate redisTemplate = getRedisTemplate();</span><br><span class="line">            ValueOperations opsForValue = redisTemplate.opsForValue();</span><br><span class="line">            opsForValue.set(key, value, EXPIRE_TIME_IN_MINUTES, TimeUnit.MINUTES);</span><br><span class="line">            logger.debug(<span class="string">&quot;Put query result to redis&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Redis put failed&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get cached query result from redis</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RedisTemplate redisTemplate = getRedisTemplate();</span><br><span class="line">            ValueOperations opsForValue = redisTemplate.opsForValue();</span><br><span class="line">            logger.debug(<span class="string">&quot;Get cached query result from redis&quot;</span>);</span><br><span class="line"><span class="comment">//            System.out.println(&quot;****&quot; + opsForValue.get(key).toString());</span></span><br><span class="line">            <span class="keyword">return</span> opsForValue.get(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Redis get failed, fail over to db&quot;</span>, t);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove cached query result from redis</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">removeObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RedisTemplate redisTemplate = getRedisTemplate();</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">            logger.debug(<span class="string">&quot;Remove cached query result from redis&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Redis remove failed&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clears this cache instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisTemplate redisTemplate = getRedisTemplate();</span><br><span class="line">        redisTemplate.execute((RedisCallback) connection -&gt; &#123;</span><br><span class="line">            connection.flushDb();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        logger.debug(<span class="string">&quot;Clear all the cached query result from redis&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is not used</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readWriteLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedisTemplate <span class="title">getRedisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (redisTemplate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            redisTemplate = ApplicationContextHolder.getBean(<span class="string">&quot;redisTemplate&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Mapper 接口中增加注解</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@CacheNamespace(implementation = RedisCache.class)</span><br><span class="line">public interface TbSysUserMapper extends MyMapper&lt;TbSysUser&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis HA方案及实践</title>
      <link href="2020/02/21/Redis-HA%E6%96%B9%E6%A1%88%E5%8F%8A%E5%AE%9E%E8%B7%B5/"/>
      <url>2020/02/21/Redis-HA%E6%96%B9%E6%A1%88%E5%8F%8A%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>HA(High Available，高可用性群集)机集群系统简称，是保证业务连续性的有效解决方案，一般有两个或两个以上的节点，且分为活动节点及备用节点。通常把正在执 行业务的称为活动节点，而作为活动节点的一个备份的则称为备用节点。当活动节点出现问题，导致正在运行的业务（任务）不能正常运行时，备用节点此时就会侦测到，并立即接续活动节点来执行业务。从而实现业务的不中断或短暂中断。</p><a id="more"></a><p>Redis 一般以主/从方式部署（这里讨论的应用从实例主要用于备份，主实例提供读写）该方式要实现 HA 主要有如下几种方案：</p><ul><li><strong>keepalived：</strong> 通过 keepalived 的虚拟 IP，提供主从的统一访问，在主出现问题时， 通过 keepalived 运行脚本将从提升为主，待主恢复后先同步后自动变为主，该方案的好处是主从切换后，应用程序不需要知道(因为访问的虚拟 IP 不变)，坏处是引入 keepalived 增加部署复杂性，在有些情况下会导致数据丢失</li><li><strong>zookeeper：</strong> 通过 zookeeper 来监控主从实例， 维护最新有效的 IP， 应用通过 zookeeper 取得 IP，对 Redis 进行访问，该方案需要编写大量的监控代码</li><li><strong>sentinel：</strong> 通过 Sentinel 监控主从实例，自动进行故障恢复，该方案有个缺陷：因为主从实例地址( IP &amp; PORT )是不同的，当故障发生进行主从切换后，应用程序无法知道新地址，故在 Jedis2.2.2 中新增了对 Sentinel 的支持，应用通过 <code>redis.clients.jedis.JedisSentinelPool.getResource()</code> 取得的 Jedis 实例会及时更新到新的主实例地址</li></ul><h1 id="Sentinel方式-哨兵）"><a href="#Sentinel方式-哨兵）" class="headerlink" title="Sentinel方式(哨兵）"></a>Sentinel方式(哨兵）</h1><p> Redis-Sentinel是Redis官方推荐的高可用性(HA)解决方案。实际上这意味着你可以使用Sentinel模式创建一个可以不用人为干预而应对各种故障的Redis部署。 </p><p>它的主要功能有以下几点</p><ul><li>监控：Sentinel不断的检查master和slave是否正常的运行。</li><li>通知：如果发现某个redis节点运行出现问题，可以通过API通知系统管理员和其他的应用程序。</li><li>自动故障转移：能够进行自动切换。当一个master节点不可用时，能够选举出master的多个slave中的一个来作为新的master,其它的slave节点会将它所追随的master的地址改为被提升为master的slave的新地址。</li><li>配置提供者：哨兵作为Redis客户端发现的权威来源：客户端连接到哨兵请求当前可靠的master的地址。如果发生故障，哨兵将报告新地址。</li></ul><p><img src="1.jpg"></p><p><font color="red"> 一个健壮的部署至少需要三个哨兵实例 </font></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">26379</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/tmp</span></span><br><span class="line"><span class="comment"># 自定义集群名，其中 127.0.0.1 为 redis-master(redis集群中的主节点) 的 ip，6379 为 redis-master 的端口，2 为最小投票数（因为有 3 台 Sentinel 所以可以设置成 2），当redis master挂掉后Sentinel选举新的redis master</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 127.0.0.1 6379 2</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">down-after-milliseconds mymaster 30000</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">parallel-syncs mymaster 1</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">failover-timeout mymaster 180000</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">deny-scripts-reconfig yes</span></span><br></pre></td></tr></table></figure><h1 id="快速搭建Redis-Sentinel"><a href="#快速搭建Redis-Sentinel" class="headerlink" title="快速搭建Redis Sentinel"></a>快速搭建Redis Sentinel</h1><p>Redis 集群可以在一组 redis 节点之间实现高可用性和 sharding。在集群中会有 1 个 master 和多个 slave 节点。当 master 节点失效时，应选举出一个 slave 节点作为新的 master。然而 Redis 本身(包括它的很多客户端)没有实现自动故障发现并进行主备切换的能力，需要外部的监控方案来实现自动故障恢复。</p><p>Redis Sentinel 是官方推荐的高可用性解决方案。它是 Redis 集群的监控管理工具，可以提供节点监控、通知、自动故障恢复和客户端配置发现服务。</p><p><img src="2.jpg"></p><h2 id="搭建Redis集群"><a href="#搭建Redis集群" class="headerlink" title="搭建Redis集群"></a>搭建Redis集群</h2><p><strong>需要使用docker和docker compose，没有的请自行安装</strong></p><p> 搭建一主两从环境，docker-compose.yml 配置如下： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">master:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-master</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">slave1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-slave-1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6380</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--slaveof</span> <span class="string">redis-master</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">slave2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-slave-2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6381</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--slaveof</span> <span class="string">redis-master</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p><strong>创建好yml文件后，当前文件夹下使用命令<code>docker-compose up -d </code>启动</strong></p><h2 id="搭建-Sentinel-集群"><a href="#搭建-Sentinel-集群" class="headerlink" title="搭建 Sentinel 集群"></a>搭建 Sentinel 集群</h2><p> 我们至少需要创建三个 Sentinel 服务，docker-compose.yml 配置如下： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">sentinel1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-sentinel-1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26379</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sentinel1.conf:/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sentinel2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-sentinel-2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26380</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sentinel2.conf:/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sentinel3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-sentinel-3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26381</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sentinel3.conf:/usr/local/etc/redis/sentinel.conf</span></span><br></pre></td></tr></table></figure><p><font color='red'>例如：如果我们要在<code>/usr/local/docker/sentinel</code>，那我们在要在此文件夹下创建<code>sentinel1.confsentinel2.confsentinel3.conf</code>三个配置文件，用来启动Sentinel集群。</font></p><p>配置文件内容请看<a href="#%E9%85%8D%E7%BD%AE">配置</a></p><p><strong>创建好yml文件和三个配置文件后，当前文件夹下使用命令<code>docker-compose up -d </code>启动</strong></p><h1 id="验证集群是否生效"><a href="#验证集群是否生效" class="headerlink" title="验证集群是否生效"></a>验证集群是否生效</h1><p>进入 Sentinel 容器，使用 Sentinel API 查看监控情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis-sentinel-1 /bin/bash</span><br><span class="line">redis-cli -p 26379</span><br><span class="line">sentinel master mymaster</span><br><span class="line">sentinel slaves mymaster</span><br></pre></td></tr></table></figure><p><img src="3.png"></p><p>图片参数分别为：redis从节点、其他sentinel个数、最小投票值</p><h1 id="代码连接"><a href="#代码连接" class="headerlink" title="代码连接"></a>代码连接</h1><p>因为我们使用了Redis集群，那么我们连接时，就不能连接任何其中的一个Redis服务器，而是要连接3台（n）Sentinel集群服务器，通过Sentinel服务器来操控整个Redis集群。</p><p>当我们使用数据库时，连接数据库靠的是JDBC，现在我们连接Redis是靠的Jedis/Lettuce。现在大多数使用Lettuce。</p><p> <strong>在 springboot 1.5.x版本的默认的Redis客户端是 <code>Jedis</code>实现的，springboot 2.x版本中默认客户端是用 <code>lettuce</code>实现的。</strong> </p><p>SpringBoot配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="comment"># 集群名字</span></span><br><span class="line">      <span class="attr">master:</span> <span class="string">mymaster</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.131</span><span class="string">:26379,</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.131</span><span class="string">:26380,</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.131</span><span class="string">:26381</span></span><br></pre></td></tr></table></figure><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HA </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab的搭建</title>
      <link href="2020/02/14/GitLab%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>2020/02/14/GitLab%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-GitLab"><a href="#什么是-GitLab" class="headerlink" title="什么是 GitLab"></a>什么是 GitLab</h1><p>GitLab类似GitHub，都是代码管理平台。而GitHub是第三方的，有些项目我们不方便部署上去，比如各公司开发的代码，这时候我们可以自己搭建一个代码管理平台GitLab来存放内部代码。</p><a id="more"></a><h1 id="基于Docker安装GitLab"><a href="#基于Docker安装GitLab" class="headerlink" title="基于Docker安装GitLab"></a>基于Docker安装GitLab</h1><p>手动安装GitLab是一个非常麻烦的事情，这里我们使用一种轻松的方法<code>Docker</code>和<code>Docker-compose</code>。</p><p>这里运行内存必须&gt;=2G</p><p><strong>首先进入到指定目录</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/docker/gitlab</span><br></pre></td></tr></table></figure><p>**创建<code>Docker-compose.yml配置文件**</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="comment"># 使用的镜像</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">&#x27;twang2218/gitlab-ce-zh:10.5&#x27;</span></span><br><span class="line">      <span class="comment"># 每次重启服务器时，此项目也重启||开机启动的意思</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">&#x27;本机IP/域名&#x27;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">TZ:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">external_url</span> <span class="string">&#x27;http://192.168.75.145:8080&#x27;</span></span><br><span class="line">          <span class="string">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> <span class="string">=</span> <span class="number">2222</span></span><br><span class="line">          <span class="string">unicorn[&#x27;port&#x27;]</span> <span class="string">=</span> <span class="number">8888</span></span><br><span class="line">          <span class="comment"># nginx反向映射，需要和external_url的端口一致</span></span><br><span class="line">          <span class="string">nginx[&#x27;listen_port&#x27;]</span> <span class="string">=</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;8080:8080&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;8443:443&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;2222:22&#x27;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/config:/etc/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/data:/var/opt/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure><p><strong>运行等待</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure><h1 id="访问和配置GItLab"><a href="#访问和配置GItLab" class="headerlink" title="访问和配置GItLab"></a>访问和配置GItLab</h1><ol><li>访问地址：<a href="http://ip:8080/">http://ip:8080</a></li><li>初始化管理员密码，大于8位，账户名为<code>root</code></li><li>如果想关闭注册功能的话，可以在设置-注册限制中取消</li><li>注册新账户，使用新账户操作系统</li><li>接下来就可以正常使用了</li><li>还可以配置SSH免密拉取代码、提交代码</li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://www.funtl.com/zh/gitlab/GitLab-%E4%BD%BF%E7%94%A8-SSH-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.html#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91">视频教程</a></p><p><a href="https://hub.docker.com/r/twang2218/gitlab-ce-zh">镜像地址</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins自动持续化实践</title>
      <link href="2020/01/16/Jenkins%E8%87%AA%E5%8A%A8%E6%8C%81%E7%BB%AD%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
      <url>2020/01/16/Jenkins%E8%87%AA%E5%8A%A8%E6%8C%81%E7%BB%AD%E5%8C%96%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时在项目（前后端分离的）开发中，由于工期紧张，在后端接口未开发完成时，前端就要摄入开始进行数据绑定，此时因为后端一直在增加接口，需要不断地发布项目，部署项目；这个操作很简单，但是一直手动操作很麻烦。</p><p>又或者运行单元测试检验项目可用性，检查完之后打包交付给测试进行集成测试，可能中间还有<code>QA</code> 等质量检测阶段。在这些阶段中，我们会遇到很多情况，比如，项目中出现的<code>Bug</code>需要修复，有些遗漏的条件判断需要补充，产品经理临时变更需求，以及客户的需求变更等等。碰到上述这些情况，无疑我们需要再次进行开发，开发完成后又是验证，单元测试，打包交付等等一系列操作，可以看到，这些流程是非常长而且又繁琐的，手工进行这些流程难保不会错误，我们可以使用自动持续化集成打包来避免这些重复劳动又容易出错的事情。</p><a id="more"></a><h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><p>通常自动化项目部署的流程是这样：</p><p><img src="1.PNG"></p><p>通过搭建<code>Jenkins</code>构建环境，然后在<code>Github</code>上面注册<code>Jenkins</code>的<code>Hook</code>,每次代码的提交后，<code>Jenkins</code> 会自动拉取最新的代码进行自动化的打包和发布。</p><p><font color="red">但是我本次使用的是<code>SVN</code>，本次就以<code>SVN</code>完成此实践</font></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>系统：ubuntu-18.04.4-live-server-amd64_2.iso</p><p>需要安装docker、docker-compose</p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p><a href="https://yeasy.gitbooks.io/docker_practice/install/ubuntu.html">docker安装以及设置加速</a></p><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p><a href="https://github.com/docker/compose/releases/tag/1.26.0-rc2">下载地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains wget https://github.com/docker/compose/releases/download/1.26.0-rc2/docker-compose-Linux-x86_64</span><br><span class="line">mv docker-compose-Linux-x86_64 docker-compose</span><br><span class="line">chmod +x docker-compose</span><br><span class="line">cp docker-compose /usr/local/bin/</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h1 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h1><h2 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h2><p>安装Java，并配置环境变量</p><p><font color='red'>请注意，最好使用1.8来运行，我试过jdk11，有的版本运行不了的</font></p><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>判断是否成功</p><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p>安装maven，并配置环境变量</p><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure><p>判断是否成功</p><h2 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h2><p>下载地址（建议不要下载最新版本，插件不好安装）：</p><p> <a href="http://mirrors.jenkins.io/war-stable-rc">http://mirrors.jenkins.io/war-stable-rc</a> </p><p>流程：</p><p><img src="7.PNG"></p><p>直接运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jenkins.war</span><br></pre></td></tr></table></figure><p>等待日志中出现以下内容，我们就可以使用8080端口访问了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line"></span><br><span class="line">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class="line">Please use the following password to proceed to installation:</span><br><span class="line"></span><br><span class="line">ec1e5d2e9eff49d8b81d18c68d14f156</span><br><span class="line"></span><br><span class="line">This may also be found at: /root/.jenkins/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line"></span><br><span class="line">2020-01-16 06:19:46.487+0000 [id=39]    INFO    hudson.model.UpdateSite<span class="comment">#updateData: Obtained the latest update center data file for UpdateSource default</span></span><br><span class="line">2020-01-16 06:19:48.205+0000 [id=39]    INFO    h.m.DownloadService<span class="variable">$Downloadable</span><span class="comment">#load: Obtained the updated data file for hudson.tasks.Maven.MavenInstaller</span></span><br><span class="line">2020-01-16 06:19:48.205+0000 [id=39]    INFO    hudson.util.Retrier<span class="comment">#start: Performed the action check updates server successfully at the attempt #1</span></span><br><span class="line">2020-01-16 06:19:48.207+0000 [id=39]    INFO    hudson.model.AsyncPeriodicWork<span class="comment">#lambda$doRun$0: Finished Download metadata. 85,292 ms</span></span><br><span class="line">2020-01-16 06:21:31.868+0000 [id=26]    INFO    hudson.model.UpdateSite<span class="comment">#updateData: Obtained the latest update center data file for UpdateSource default</span></span><br><span class="line">2020-01-16 06:21:32.226+0000 [id=26]    INFO    jenkins.InitReactorRunner<span class="variable">$1</span><span class="comment">#onAttained: Completed initialization</span></span><br><span class="line">2020-01-16 06:21:32.311+0000 [id=19]    INFO    hudson.WebAppMain<span class="variable">$3</span><span class="comment">#run: Jenkins is fully up and running</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一定要出现<code>Jenkins is fully up and running</code>后才能访问，然后输入密码，密码在上述日志中：</p><p><code>ec1e5d2e9eff49d8b81d18c68d14f156</code></p><p>即可登录进去。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>我们安装推荐插件即可，当然也可通过需要手动安装。</p><ul><li><p><a href="https://community.jenkins-zh.cn/t/jenkins/26"><strong>插件安装过慢解决</strong></a></p></li><li><p><strong>强烈建议使用下面Docker方式安装，安装速度超快</strong></p></li></ul><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>首次登陆是匿名登陆，装完插件后，会提醒你新建一个用户；以后使用用户登陆，就不需要从日志中查看密码了</p><h3 id="全局安全设置"><a href="#全局安全设置" class="headerlink" title="全局安全设置"></a>全局安全设置</h3><p><img src="2.PNG"></p><h3 id="全局工具设置"><a href="#全局工具设置" class="headerlink" title="全局工具设置"></a>全局工具设置</h3><p>需要手动安装maven、Java</p><p><img src="3.PNG"></p><p>根据图来，要取消自动安装，使用我们自己安装的，声明他们的位置</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>在首页左侧点击新建任务-构建一个自由风格的软件项目</p><p><img src="4.PNG"></p><h4 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h4><p><strong><em>svn</em></strong></p><ol><li>url后需要加<code>@HEAD</code>才能部署最新版，否则是倒数第二版</li><li>输入svn账号密码并选择</li></ol><p><strong><em>git</em></strong></p><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><p>选择触发远程构建</p><p>通过设置token令牌，通过url链接访问即可实现自动构建</p><p>需要组装以下url:</p><p><code> JENKINS_URL/job/SpringSecurity/build?token=TOKEN_NAME</code></p><p>当提交svn时访问此url就完成了自动构建</p><h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><p>这里使用脚本来完成部署，部署在本机。需要安装<code>hudson post build task</code>插件，重要的是脚本怎么写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;stop springboot application&quot;</span></span><br><span class="line">pid=`ps -ef |grep demo-0.0.1-SNAPSHOT.jar|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$pid</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">java -jar /root/.jenkins/workspace/SpringSecurity/target/demo-0.0.1-SNAPSHOT.jar &gt;&gt; /logs/app.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color='red'>请更换路径，以及jar包名称</font></p><h3 id="配置钩子程序"><a href="#配置钩子程序" class="headerlink" title="配置钩子程序"></a>配置钩子程序</h3><p>找到svn服务端的仓库</p><p><img src="5.PNG"></p><p>进入<code>hooks</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp post-commit.tmpl post-commit</span><br><span class="line">vim  post-commit</span><br></pre></td></tr></table></figure><p>添加内容：</p><p><img src="6.PNG"></p><p>钩子程序由 post-commit.tmpl 复制得到 </p><ol><li>这里注意不要使用任何扩展名。如果按照我们习惯的使用.sh 扩展名则钩 子程序无法正常工作。</li><li>记得使用 chmod 命令设置为可执行权限</li><li>把原有内容注释，加入 curl 命令</li></ol><p><strong>curl</strong></p><p>Linux 的 curl 命令用来发送 HTTP 请求。</p><ul><li> -X 参数：指定请求方式</li><li> -v 参数：显示响应结果</li><li> -u 参数：携带用户名/密码</li><li> -H 参数：携带请求消息头信息</li></ul><p><code>curl -X post -v -u [Jenkins 用户名]:[Jenkins 密码] -H &quot;请求消息头信息&quot; http://[服务器 IP 地址]:[服务器端口 号]/jenkins/job/[Jenkins 项目名称]/build?token=[身份验证令牌]</code></p><hr><h1 id="Docker安装-推荐"><a href="#Docker安装-推荐" class="headerlink" title="Docker安装(推荐)"></a>Docker安装(推荐)</h1><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkinszh/jenkins-zh:lts</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50000</span><span class="string">:50000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/jenkins_home</span></span><br></pre></td></tr></table></figure><p>在含有上面文件的目录下运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">chown -R 1000:1000 data</span><br><span class="line">proxychains docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>接下来在<code>./data</code>目录中安装Java、maven并在Jenkins中设置即可。同上，不在叙述</p><p><strong>注：proxychains是我自己设置的代理，使用会加速安装速度，某些插件只能这样才能安装</strong></p><h1 id="插件-1"><a href="#插件-1" class="headerlink" title="插件"></a>插件</h1><h2 id="配置本地化（中文）"><a href="#配置本地化（中文）" class="headerlink" title="配置本地化（中文）"></a>配置本地化（中文）</h2><p> 安装 <code>Locale</code> 插件 </p><p><img src="8.png"></p><p> <code>Manage Jenkins</code> -&gt; <code>Configure System</code> -&gt; <code>Locale</code> </p><p><img src="9.png"></p><p> 本地化效果图 </p><p><img src="10.png"></p><h2 id="安装动态参数插件"><a href="#安装动态参数插件" class="headerlink" title="安装动态参数插件"></a>安装动态参数插件</h2><p> 该插件的主要目的是为了方便我们后面在做项目构建时可以按照版本进行构建（支持一键回滚哦） </p><p><img src="11.png"></p><h2 id="安装远程ssh"><a href="#安装远程ssh" class="headerlink" title="安装远程ssh"></a>安装远程ssh</h2><p>pubilsh over ssh</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.bilibili.com/video/av59639803?from=search&seid=12396727760971704431">持续集成Jenkins</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security开启防护csrf攻击</title>
      <link href="2020/01/10/Spring-Security%E5%BC%80%E5%90%AF%E9%98%B2%E6%8A%A4csrf%E6%94%BB%E5%87%BB/"/>
      <url>2020/01/10/Spring-Security%E5%BC%80%E5%90%AF%E9%98%B2%E6%8A%A4csrf%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在进行WEB开发的时候，时常听到资深的开发人员说要注意防范CSRF、XSS攻击，但是很多时候人们连什么是CSRF都不知道。本文将粗略地向大家介绍下CSRF的原理和防御手段。CSRF（Cross-site request forgery）跨站请求伪造</p><p><a href="https://github.com/XiangJie-Zhang/Spring-Security">上节的项目</a></p><a id="more"></a><h1 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h1><h2 id="什么是csrf"><a href="#什么是csrf" class="headerlink" title="什么是csrf"></a>什么是csrf</h2><p>请看<a href="https://docs.spring.io/spring-security/site/docs/4.2.0.BUILD-SNAPSHOT/reference/htmlsingle/#csrf">Spring Security官网介绍！</a></p><h2 id="csrf攻击原理"><a href="#csrf攻击原理" class="headerlink" title="csrf攻击原理"></a>csrf攻击原理</h2><p>csrf攻击的原理就是利用浏览器的机制，某个网站是采用cookie+session机制来验证用户登陆时，用户请求只需要携带cookie中的<em>JSESSIONID</em>，网站就认为你已经登陆，完成各种操作；</p><p>但是，因为cookie是存在在你电脑本地的，<font color='red'>当你发请求时会自动携带你请求域名的cookie，无论当前界面是否是当前域名！！</font></p><p>例如：你登陆了text.com本地存储了它的cookie，这时你访问了另外一个界面attack.com，这是一个攻击界面，它里面有个text.com/xxx的请求，你一点击就发送请求，因为浏览器的特性，浏览器会给请求自动携带上text.com的cookie，这就导致了跨站请求伪造。</p><p><font color='blue'>这是对上面链接上的例子的仿造，详细还请看上面的链接！</font></p><h2 id="如何抵御"><a href="#如何抵御" class="headerlink" title="如何抵御"></a>如何抵御</h2><p>每次请求要携带一个随机token，可以放cookie里，每次请求时手动把它作为参数或者请求头部，发送请求。</p><p>这时，可能会有疑问，发生csrf就是因为cookie的机制，为什么token还要放cookie里？</p><p>这里只是一种选择，此时，我们不光放在cookie里，还是设置http-only为false（可以通过js读取到），上述放在cookie被伪造是因为浏览器只会携带cookie，我们后端代码只验证参数/头部的token，不理会cookie里的这部分。csrf是无法直接构造参数或者伪造头部的，因为他们读取不到我们的token，虽然我们设置它为http-only：false了，但是也只有我们自己当前域名下的js能访问到，其他网址访问不到的。</p><h2 id="抵御原理"><a href="#抵御原理" class="headerlink" title="抵御原理"></a>抵御原理</h2><p>参考网址：<a href="https://www.jianshu.com/p/2cfb676c58b1">CSRF令牌为什么要通过HTTP头部而不是cookie来验证</a></p><ol><li>用户发送get请求</li><li>服务器生成token，放入session/cookie中</li><li>浏览器接受后保存</li><li>浏览器发送请求前，先使用js获取cookie值，构造X-XSRF-TOKEN头部</li><li>发送请求</li><li>服务器获取此请求头的内容与服务器的token对比</li><li>成功/失败</li></ol><h1 id="SpringSecurity开启csrf防护"><a href="#SpringSecurity开启csrf防护" class="headerlink" title="SpringSecurity开启csrf防护"></a>SpringSecurity开启csrf防护</h1><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>首先通过上述<a href="https://docs.spring.io/spring-security/site/docs/4.2.0.BUILD-SNAPSHOT/reference/htmlsingle/#csrf">Spring Security官网介绍！</a>总结了几点：</p><ol><li>开启csrf后，如果选择将csrf存储在cookie中且读取需要使用js的话，必须设置<code>cookieHttpOnly=false</code></li><li>如果将csrf保存在session里面，会有令牌随着session过期的风险，会返回403错误</li><li>使用csrf会将注销请求<code>/logout</code>变为 POST请求，如果非得用GET请求，需要配置<code>.logoutRequestMatcher(new AntPathRequestMatcher(&quot;/logout&quot;));</code></li><li>如果要配置CORS跨域，最好使用springsecurity自带的，并在最前面使用这样不会验证它的token，因为预检请求将不包含任何cookie</li><li>ss默认针对PATCH,POST,PUT,DELETE请求进行防护</li></ol><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>如果把csrf放在cookie里面，我们可以在类<code>CookieCsrfTokenRepository</code>看到默认配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieCsrfTokenRepository</span> <span class="keyword">implements</span> <span class="title">CsrfTokenRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CSRF_COOKIE_NAME = <span class="string">&quot;XSRF-TOKEN&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CSRF_PARAMETER_NAME = <span class="string">&quot;_csrf&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CSRF_HEADER_NAME = <span class="string">&quot;X-XSRF-TOKEN&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String parameterName = <span class="string">&quot;_csrf&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String headerName = <span class="string">&quot;X-XSRF-TOKEN&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String cookieName = <span class="string">&quot;XSRF-TOKEN&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> cookieHttpOnly = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String cookiePath;</span><br><span class="line">    <span class="keyword">private</span> String cookieDomain;</span><br><span class="line">    ....</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>意思是：</p><p>他会对请求的头部寻找X-XSRF-TOKEN的值或者参数为_csrf的值，找到对应value和服务器中的对比。</p><p>两者有一个就行。</p><h2 id="代码开启"><a href="#代码开启" class="headerlink" title="代码开启"></a>代码开启</h2><p><a href="https://github.com/XiangJie-Zhang/Spring-Security">在之前的项目</a>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.cors()</span><br><span class="line">               .and()</span><br><span class="line">               <span class="comment">// 开启csrf</span></span><br><span class="line">               <span class="comment">// ，并把csrf放如cookie中，vue无法读取session</span></span><br><span class="line">               .csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()).ignoringAntMatchers(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/public&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>我们看一下开启的效果，我的代码是将csrf放在了cookie里面的，<code>login</code>、<code>public</code>链接不走csrf过滤，我们访问一下：</p><p><font color='red'><strong>注意，我们这是用的cookie方式！！还有一种session方式，这里不做介绍。</strong></font></p><p>我们随便请求一个链接就会在cookie中看到我们的csrf令牌</p><p><img src="1.PNG"></p><p>因为我们csrf不对GET防护，我们post请求一个受保护的链接试试，首先先把我们的用户验证信息获取到：</p><p><img src="2.PNG"></p><p>然后访问一个受保护的请求，我们需要构造之前项目自定义的登陆token还有csrf令牌：</p><p><img src="3.PNG"></p><p>假如我们不传入csrf，服务器会返回一个最新的csrf 令牌:</p><p><img src="4.PNG"></p><p><img src="5.PNG"></p><h2 id="界面中如何使用"><a href="#界面中如何使用" class="headerlink" title="界面中如何使用"></a>界面中如何使用</h2><p>如果使用Thymeleaf 2.1+ ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">....</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/admin&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">value</span>=<span class="string">&quot;Log out&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">th:name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用xhr:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;_csrf&quot;</span> <span class="attr">th:content</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- default header name is X-CSRF-TOKEN --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;_csrf_header&quot;</span> <span class="attr">th:content</span>=<span class="string">&quot;$&#123;_csrf.headerName&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> token = $(<span class="string">&quot;meta[name=&#x27;_csrf&#x27;]&quot;</span>).attr(<span class="string">&quot;content&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> header = $(<span class="string">&quot;meta[name=&#x27;_csrf_header&#x27;]&quot;</span>).attr(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">$(<span class="built_in">document</span>).ajaxSend(<span class="function"><span class="keyword">function</span>(<span class="params">e, xhr, options</span>) </span>&#123;</span><br><span class="line">    xhr.setRequestHeader(header, token);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><font color='red'><strong>前后端分离，建议使用axios的拦截器，为每个请求发起时，从cookie手动读取并放在请求头！！</strong></font></p><hr><h1 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h1><p><a href="https://docs.spring.io/spring-security/site/docs/4.2.0.BUILD-SNAPSHOT/reference/htmlsingle/#csrf">Spring Security官网介绍！</a></p><p><a href="https://www.jianshu.com/p/2cfb676c58b1">CSRF令牌为什么要通过HTTP头部而不是cookie来验证</a></p>]]></content>
      
      
      <categories>
          
          <category> web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security入门：基于数据库验证</title>
      <link href="2020/01/04/Spring-Security%E5%85%A5%E9%97%A8%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AA%8C%E8%AF%81/"/>
      <url>2020/01/04/Spring-Security%E5%85%A5%E9%97%A8%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://github.com/XiangJie-Zhang/Spring-Security">项目地址</a></p><p> 本文是spring security与mybatis的整合，实现基于数据库的登录验证，使用postgres数据库，并取消了它自带的session验证而是用jwt(json web token)的token来验证，并且实现了 RBAC（Role-Based Access Control，基于角色的访问控制），希望对你有所帮助！ </p><a id="more"></a><p>这里引用了其他文章：</p><p><a href="https://learnku.com/articles/17883">为什么使用jwt，jwt是什么</a></p><p><a href="https://segmentfault.com/a/1190000017831088">彻底弄懂session，cookie，token</a></p><h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><p><strong>代码结构：</strong></p><p><img src="1.PNG"></p><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--JSON封装--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--JWT--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="登陆结果实体类"><a href="#登陆结果实体类" class="headerlink" title="登陆结果实体类"></a>登陆结果实体类</h3><p><code>AjaxResponseBody</code>:因使用前后端分离，我们要根据用户的登录返回不同的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前后端项目，返回给前端需要保存的信息，当前用户信息，token</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxResponseBody</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String status;    <span class="comment">// 状态</span></span><br><span class="line">    <span class="keyword">private</span> String msg;    <span class="comment">// 消息</span></span><br><span class="line">    <span class="keyword">private</span> Object result;    <span class="comment">// 结果</span></span><br><span class="line">    <span class="keyword">private</span> String jwtToken;    <span class="comment">// token</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登陆成功返回token"><a href="#登陆成功返回token" class="headerlink" title="登陆成功返回token"></a>登陆成功返回token</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TokenUtils tokenUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        AjaxResponseBody responseBody = <span class="keyword">new</span> AjaxResponseBody();</span><br><span class="line"></span><br><span class="line">        responseBody.setStatus(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">        responseBody.setMsg(<span class="string">&quot;Login Success!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        responseBody.setJwtToken(tokenUtils.generateToken(SecurityContextHolder.getContext().getAuthentication()));</span><br><span class="line"></span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(responseBody));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AjaxAuthenticationSuccessHandler</span><span class="params">(TokenUtils tokenUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tokenUtils = tokenUtils;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限不足时返回"><a href="#权限不足时返回" class="headerlink" title="权限不足时返回"></a>权限不足时返回</h3><p>需要写在<a href="#%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E9%85%8D%E7%BD%AE">配置</a>里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                       HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; rs = ResponseEntity.status(HttpStatus.FORBIDDEN).body(</span><br><span class="line">                <span class="string">&quot;Access Denied&quot;</span>);</span><br><span class="line"></span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(rs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户访问需要登录的接口且没有登陆"><a href="#用户访问需要登录的接口且没有登陆" class="headerlink" title="用户访问需要登录的接口且没有登陆"></a>用户访问需要登录的接口且没有登陆</h3><p>需要写在<a href="#%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E9%85%8D%E7%BD%AE">配置</a>里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; rs = ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(</span><br><span class="line">                <span class="string">&quot;Need Login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(rs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="token工具类"><a href="#token工具类" class="headerlink" title="token工具类"></a>token工具类</h3><p><font color='red'><strong>这部分需要用户手动更改生成token和解析token的方法！！！</strong></font></p><p>我这里token只存放了用户的角色信息和用户名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Secret密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">&quot;auth_chm&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//token有效期（分钟）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> VALIDATE_MINUTE = <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密算法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Algorithm algorithm;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SelfUserDetailsService selfUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenUtils</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        algorithm = Algorithm.HMAC256(SECRET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户信息生成token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 用户认证信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> jwt内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取权限列表</span></span><br><span class="line">        String authorities = authentication.getAuthorities()</span><br><span class="line">                .stream()</span><br><span class="line">                .map(GrantedAuthority::getAuthority)</span><br><span class="line">                .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Date now = Date.from(Instant.now());</span><br><span class="line">        Date expiration = Date.from(ZonedDateTime.now().plusMinutes(VALIDATE_MINUTE).toInstant());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//create jwt</span></span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">&quot;authorities&quot;</span>, authorities)</span><br><span class="line">                <span class="comment">// 添加用户名称</span></span><br><span class="line">                .withSubject(authentication.getName())</span><br><span class="line">                <span class="comment">// 签发时间</span></span><br><span class="line">                .withIssuedAt(now)</span><br><span class="line">                <span class="comment">// 过期时间</span></span><br><span class="line">                .withExpiresAt(expiration)</span><br><span class="line">                .sign(algorithm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证token有效性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token jwt内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 有效/失效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JWT.require(algorithm).build().verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中解析中用户信息</span></span><br><span class="line"><span class="comment">     *    根据token里面的用户名，调用方法查询此用户的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token jwt信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SelfUserDetails 用户认证信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">getAuthentication</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DecodedJWT decodedJWT = JWT.decode(token);</span><br><span class="line">        String userName = decodedJWT.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> userName != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> selfUserDetailsService.loadUserByUsername(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSelfUserDetailsService</span><span class="params">(SelfUserDetailsService selfUserDetailsService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.selfUserDetailsService = selfUserDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义数据库角色查询"><a href="#自定义数据库角色查询" class="headerlink" title="自定义数据库角色查询"></a>自定义数据库角色查询</h3><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p>数据库的SQL都在项目里，只有手动建好库，运行项目就会有数据插入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;role_info&quot;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;role_info&quot;</span> (</span><br><span class="line">  <span class="string">&quot;pk_ri_id&quot;</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> <span class="string">&quot;pg_catalog&quot;</span>.<span class="string">&quot;default&quot;</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span> int2,</span><br><span class="line">  <span class="string">&quot;delete_status&quot;</span> int2 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;auth&quot;</span> <span class="built_in">varchar</span>(<span class="number">200</span>)</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;role_info&quot;</span>.<span class="string">&quot;pk_ri_id&quot;</span> <span class="keyword">IS</span> <span class="string">&#x27;角色id&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;role_info&quot;</span>.<span class="string">&quot;type&quot;</span> <span class="keyword">IS</span> <span class="string">&#x27;角色类型，0：普通，1：管理；2：超级&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;role_info&quot;</span>.<span class="string">&quot;delete_status&quot;</span> <span class="keyword">IS</span> <span class="string">&#x27;删除状态0：未删除；1已删除&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user_info</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_info&quot;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_info&quot;</span> (</span><br><span class="line">                                      <span class="string">&quot;pk_ui_id&quot;</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> <span class="string">&quot;pg_catalog&quot;</span>.<span class="string">&quot;default&quot;</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                                      <span class="string">&quot;create_time&quot;</span> <span class="built_in">timestamp</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">now</span>(),</span><br><span class="line">                                      <span class="string">&quot;username&quot;</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> <span class="string">&quot;pg_catalog&quot;</span>.<span class="string">&quot;default&quot;</span>,</span><br><span class="line">                                      <span class="string">&quot;time&quot;</span> <span class="built_in">timestamp</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">now</span>(),</span><br><span class="line">                                      <span class="string">&quot;password&quot;</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> <span class="string">&quot;pg_catalog&quot;</span>.<span class="string">&quot;default&quot;</span></span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_info&quot;</span>.<span class="string">&quot;pk_ui_id&quot;</span> <span class="keyword">IS</span> <span class="string">&#x27;用户id&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_info&quot;</span>.<span class="string">&quot;username&quot;</span> <span class="keyword">IS</span> <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Table structure for user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_role&quot;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_role&quot;</span> (</span><br><span class="line">  <span class="string">&quot;pk_ur_id&quot;</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> <span class="string">&quot;pg_catalog&quot;</span>.<span class="string">&quot;default&quot;</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">&quot;user_id&quot;</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> <span class="string">&quot;pg_catalog&quot;</span>.<span class="string">&quot;default&quot;</span>,</span><br><span class="line">  <span class="string">&quot;role_id&quot;</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> <span class="string">&quot;pg_catalog&quot;</span>.<span class="string">&quot;default&quot;</span></span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_role&quot;</span>.<span class="string">&quot;pk_ur_id&quot;</span> <span class="keyword">IS</span> <span class="string">&#x27;角色关系对应表id&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Primary Key structure for table role_info</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;role_info&quot;</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">&quot;role_info_pkey&quot;</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">&quot;pk_ri_id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Primary Key structure for table user_info</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_info&quot;</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">&quot;user_info_pkey&quot;</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">&quot;pk_ui_id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Primary Key structure for table user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_role&quot;</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">&quot;user_role_pkey&quot;</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">&quot;pk_ur_id&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">&quot;role_info&quot;</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;ROLE_USER&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">&quot;role_info&quot;</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">&quot;role_info&quot;</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;ROLE_SUPER&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_info&quot;</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2019-12-29 18:57:14.771003&#x27;</span>, <span class="string">&#x27;zxj&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2019-12-29 18:57:14.771003&#x27;</span>,<span class="string">&#x27;$2a$10$LSfVTtXFx3V8V/LOfXUpAODNuYei4i6WtCW3X02LW84Kcx1eYAx5e&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_info&quot;</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2019-12-29 18:57:26.668548&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2019-12-29 18:57:26.668548&#x27;</span>,<span class="string">&#x27;$2a$10$LSfVTtXFx3V8V/LOfXUpAODNuYei4i6WtCW3X02LW84Kcx1eYAx5e&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_role&quot;</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;user_role&quot;</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;112&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实现UserDetails接口来存储用户数据"><a href="#实现UserDetails接口来存储用户数据" class="headerlink" title="实现UserDetails接口来存储用户数据"></a>实现<code>UserDetails</code>接口来存储用户数据</h4><p>主要要实现方法：<code>public Collection&lt;? extends GrantedAuthority&gt; getAuthorities()</code><font color='red'>把用户所有的角色放入其中！！</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.boot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  ① 定义 user 对象</span></span><br><span class="line"><span class="comment"> *  需要将用户的身份放入getAuthorities</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfUserDetails</span> <span class="keyword">implements</span> <span class="title">UserDetails</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们从数据库查询出以下信息</span></span><br><span class="line">    <span class="keyword">private</span> String pkUiId;</span><br><span class="line">    <span class="keyword">private</span> Timestamp createTime;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Timestamp time;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动实现，把用户角色放入其中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; simpleGrantedAuthorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String role : <span class="keyword">this</span>.roles) &#123;</span><br><span class="line">            simpleGrantedAuthorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> simpleGrantedAuthorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123; <span class="comment">// 最重点Ⅰ</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123; <span class="comment">// 最重点Ⅱ</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实现UserDetailsService接口来完成用户登录的逻辑"><a href="#实现UserDetailsService接口来完成用户登录的逻辑" class="headerlink" title="实现UserDetailsService接口来完成用户登录的逻辑"></a>实现<code>UserDetailsService</code>接口来完成用户登录的逻辑</h4><p>只有一个方法，通过用户名查找用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 我的数据库查询方法</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoService userInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//构建用户信息的逻辑(取数据库/LDAP等用户信息)</span></span><br><span class="line">        SelfUserDetails selfUserDetails = userInfoService.selectUserByName(username);</span><br><span class="line">        <span class="keyword">if</span> (selfUserDetails == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;数据库中无此用户！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> selfUserDetails;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserInfoService</span><span class="params">(UserInfoService userInfoService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userInfoService = userInfoService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最重要的配置"><a href="#最重要的配置" class="headerlink" title="最重要的配置"></a>最重要的配置</h3><p>Spring Security的配置</p><p>个人习惯在设置接口角色时，不喜欢在配置类里一一设置，我比较喜欢在control层的方法上使用注解：</p><p>使用注解需要注意：</p><ol><li><font color="red">下面类的三个注解必须要加！！</font></li><li>如果使用注解<code>@Secured(&quot;ROLE_USER&quot;)</code>，需要在注解<code>EnableGlobalMethodSecurity</code>加上参数<code>securedEnabled=true</code></li><li>如果使用注解<code> @PreAuthorize(&quot;hasRole(&#39;ADMIN&#39;)&quot;)</code>，需要在注解<code>EnableGlobalMethodSecurity</code>加上参数<code>prePostEnabled=true</code></li></ol><p>上述两个注解都是指定角色才可以访问，<font color='red'>但是有个大坑！！</font></p><ol><li><code> @PreAuthorize(&quot;hasRole(&#39;ADMIN&#39;)&quot;)</code>由于使用了<code>hasRole</code>方法，它所匹配的角色为<code>ROLE_ADMIN</code>，他会给你加个前缀，所以你数据库存储的角色也必须叫<code>ROLE_ADMIN</code>;Spring Security所有的<code>hasROle</code>方法都会给你加<code>ROLE_</code>前缀</li><li><code>@Secured(&quot;ROLE_USER&quot;)</code>这里就直接匹配你数据库里面的角色。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// securedEnabled=true, 开启 @Secured 注解.</span></span><br><span class="line"><span class="comment">//  @Secured(&quot;ROLE_USER&quot;)，这个注解中的角色就是数据库中的角色，应该与数据库一致</span></span><br><span class="line"><span class="comment">// prePostEnabled=true, 开启 prePostEnabled 相关的注解.</span></span><br><span class="line"><span class="comment">// @PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)，这个注解使用了hasRole，凡是使用这个方法的，会自动对参数加ROLE_前缀；这里就不需要自己加了</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConf</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AjaxAuthenticationEntryPoint authenticationEntryPoint;  <span class="comment">//  未登陆时返回 JSON 格式的数据给前端（否则为 html）</span></span><br><span class="line">    <span class="keyword">private</span> AjaxAuthenticationSuccessHandler ajaxAuthenticationSuccessHandler;  <span class="comment">// 登录成功返回的 JSON// 格式数据给前端（否则为 html）</span></span><br><span class="line">    <span class="keyword">private</span> AjaxAuthenticationFailureHandler authenticationFailureHandler;  <span class="comment">//  登录失败返回的 JSON 格式数据给前端（否则为 html）</span></span><br><span class="line">    <span class="keyword">private</span> AjaxLogoutSuccessHandler logoutSuccessHandler;  <span class="comment">// 注销成功返回的 JSON 格式数据给前端（否则为 登录时的 html）</span></span><br><span class="line">    <span class="keyword">private</span> AjaxAccessDeniedHandler accessDeniedHandler;    <span class="comment">// 无权访问返回的 JSON 格式数据给前端（否则为 403 html 页面）</span></span><br><span class="line">    <span class="keyword">private</span> SelfUserDetailsService userDetailsService; <span class="comment">// 自定义user</span></span><br><span class="line">    <span class="keyword">private</span> TokenAuthorizationFilter tokenAuthorizationFilter; <span class="comment">// 自定义jwt token验证</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 加入自定义的安全认证</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去掉 CSRF</span></span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="comment">// 使用 JWT，关闭token</span></span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 未登录时返回信息</span></span><br><span class="line">                .httpBasic().authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/public&quot;</span>).permitAll()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()  <span class="comment">//开启登录</span></span><br><span class="line">                .successHandler(ajaxAuthenticationSuccessHandler) <span class="comment">// 登录成功</span></span><br><span class="line">                .failureHandler(authenticationFailureHandler) <span class="comment">// 登录失败</span></span><br><span class="line">                .permitAll()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">                .permitAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记住我</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remember-me&quot;</span>)</span><br><span class="line">                .userDetailsService(userDetailsService).tokenValiditySeconds(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        http.exceptionHandling().accessDeniedHandler(accessDeniedHandler); <span class="comment">// 无权访问 JSON 格式的数据</span></span><br><span class="line">        http.addFilterBefore(tokenAuthorizationFilter,</span><br><span class="line">                UsernamePasswordAuthenticationFilter.class); <span class="comment">// JWT Filter</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticationEntryPoint</span><span class="params">(AjaxAuthenticationEntryPoint authenticationEntryPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationEntryPoint = authenticationEntryPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticationSuccessHandler</span><span class="params">(AjaxAuthenticationSuccessHandler authenticationSuccessHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ajaxAuthenticationSuccessHandler = authenticationSuccessHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticationFailureHandler</span><span class="params">(AjaxAuthenticationFailureHandler authenticationFailureHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationFailureHandler = authenticationFailureHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogoutSuccessHandler</span><span class="params">(AjaxLogoutSuccessHandler logoutSuccessHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logoutSuccessHandler = logoutSuccessHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessDeniedHandler</span><span class="params">(AjaxAccessDeniedHandler accessDeniedHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accessDeniedHandler = accessDeniedHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDetailsService</span><span class="params">(SelfUserDetailsService userDetailsService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTokenAuthorizationFilter</span><span class="params">(TokenAuthorizationFilter tokenAuthorizationFilter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tokenAuthorizationFilter = tokenAuthorizationFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用jwt代替session"><a href="#使用jwt代替session" class="headerlink" title="使用jwt代替session"></a>使用jwt代替session</h3><ol><li>登陆成功后返回token数据，使用上面的工具类生成，同时修改<a href="#%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E9%85%8D%E7%BD%AE">配置</a>，取消自带的session,<code>sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</code></li><li>根据自己需要修改<a href="#token%E5%B7%A5%E5%85%B7%E7%B1%BB">token工具类</a></li><li>设置filter，解析我们自己的token</li><li>把filter添加到<a href="#%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E9%85%8D%E7%BD%AE">配置</a>中，<code>http.addFilterBefore(tokenAuthorizationFilter,UsernamePasswordAuthenticationFilter.class); </code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 认证token的filter，这个filter就从请求头中拿到token字符串，</span></span><br><span class="line"><span class="comment"> * 然后用TokenUtils检验token的合法性，</span></span><br><span class="line"><span class="comment"> * 如果合法就解析出相应的信息，然后组装成Authentication，</span></span><br><span class="line"><span class="comment"> * 最后放到SecurityContext中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:system.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String HEADER_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenAuthorizationFilter</span><span class="params">(TokenUtils tokenUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tokenUtils = tokenUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    HttpServletResponse httpServletResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String token = resolveToken(httpServletRequest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tokenUtils.validateToken(token)) &#123;</span><br><span class="line">            <span class="comment">// 从用户传来的用户信息，这里不信任</span></span><br><span class="line">            SelfUserDetails userTo = (SelfUserDetails) tokenUtils.getAuthentication(token);</span><br><span class="line">            <span class="keyword">if</span> (userTo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 这个请求是已经通过验证的，把权限放进去</span></span><br><span class="line">                UsernamePasswordAuthenticationToken authentication =</span><br><span class="line">                        <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userTo, <span class="keyword">null</span>,</span><br><span class="line">                                userTo.getAuthorities());</span><br><span class="line">                authentication.setDetails(<span class="keyword">new</span> WebAuthenticationDetailsSource().buildDetails(httpServletRequest));</span><br><span class="line"></span><br><span class="line">                SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ResponseEntity&lt;String&gt; rs = ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(</span><br><span class="line">                    <span class="string">&quot;token has expired&quot;</span>);</span><br><span class="line"></span><br><span class="line">            httpServletResponse.getWriter().write(JSON.toJSONString(rs));</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">        cleanAuthentication();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从请求头解析出token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token 用户传送的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">resolveToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String token = request.getHeader(HEADER_NAME);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> || !token.startsWith(<span class="string">&quot;Bearer &quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> token.substring(<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cleanAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;head_name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHEADER_NAME</span><span class="params">(String HEADER_NAME)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.HEADER_NAME = HEADER_NAME;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这个项目讲解完了，登录之后每个请求都要带上请求头，否则认为没有登录，会跳转到登录页</p><p><img src="2.PNG"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization:Bearer xxx</span><br></pre></td></tr></table></figure><p>这里放一下<code>control</code>怎么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">// 使用hasRole会自动给角色设置ROLE_前缀，数据库最好也这么写，使用 @Secured数据库是什么就写什么</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    @Secured(&quot;ROLE_USER&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;USER&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        System.out.println(authentication);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="comment">//    @Secured(&quot;ROLE_ADMIN&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        System.out.println(authentication);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/public&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">public1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        System.out.println(authentication);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;public&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @Secured(&#123;&quot;ROLE_USER&quot;, &quot;ROLE_ADMIN&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/adminOrUser&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;ADMIN&#x27;, &#x27;USER&#x27;)&quot;)</span>  <span class="comment">// hasRole自动加ROLE前缀</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">adminOrUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        System.out.println(authentication);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;adminOrUser&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>请使用postmen测试：</p><p><strong>访问需要登陆的接口，未登录</strong></p><p><img src="3.PNG"></p><p><strong>访问此角色不能访问的接口</strong></p><p><img src="4.PNG"></p><p><strong>token过期或错误</strong></p><p><img src="5.PNG"></p>]]></content>
      
      
      <categories>
          
          <category> web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot简单使用redis</title>
      <link href="2019/12/12/springboot%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8redis/"/>
      <url>2019/12/12/springboot%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8redis/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot中除了对常用的关系型数据库提供了优秀的自动化支持之外，对于很多NoSQL数据库一样提供了自动化配置的支持，包括：Redis, MongoDB, Elasticsearch, Solr和Cassandra。</p><p><a href="https://github.com/XiangJie-Zhang/springboot-modules">项目传送门</a></p><a id="more"></a><h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库。</p><a href="/2019/12/11/Redis%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/" title="点击这里查看Redis">点击这里查看Redis</a><p><em>首先保证安装好redis，并开启远程访问权限**<code>bind 0.0.0.0</code>**</em></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Boot 的 spring-boot-starter-data-redis 为 Redis 的相关操作提供了一个高度封装的 <code>RedisTemplate</code> 类，。</p><p>而且对每种类型的数据结构都进行了归类，将同一类型操作封装为 operation 接口。</p><p>RedisTemplate 对五种数据结构分别定义了操作，如下所示：</p><ul><li>操作字符串：<code>redisTemplate.opsForValue()</code></li><li>操作 <code>Hash：redisTemplate.opsForHash()</code></li><li>操作 <code>List：redisTemplate.opsForList()</code></li><li>操作 <code>Set：redisTemplate.opsForSet()</code></li><li>操作 <code>ZSet：redisTemplate.opsForZSet()</code></li></ul><p>但是对于 string 类型的数据，Spring Boot 还专门提供了 <code>StringRedisTemplate</code> 类，而且官方也建议使用该类来操作 String 类型的数据。</p><p>那么它和 <code>RedisTemplate</code> 又有啥区别呢？</p><ol><li><code>RedisTemplate</code> 是一个泛型类，而 <code>StringRedisTemplate</code> 不是，后者只能对键和值都为 <code>String</code> 类型的数据进行操作，而前者则可以操作任何类型。</li><li>两者的数据是不共通的，<code>StringRedisTemplate</code> 只能管理 <code>StringRedisTemplate</code> 里面的数据，<code>RedisTemplate</code> 只能管理 <code>RedisTemplate</code> 中 的数据。</li></ol><h2 id="配置连接信息"><a href="#配置连接信息" class="headerlink" title="配置连接信息"></a>配置连接信息</h2><p>本次使用application.yml形式的配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.174</span><span class="number">.129</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">3000</span>       <span class="comment"># 连接超时时间 单位 ms（毫秒）</span></span><br><span class="line">    <span class="comment">#    cluster:</span></span><br><span class="line">    <span class="comment">#      nodes: 10.3.1.4:7000,10.3.1.4:7001,...,10.3.1.4:7008</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="RedisTemplate-的配置"><a href="#RedisTemplate-的配置" class="headerlink" title="RedisTemplate 的配置"></a><code>RedisTemplate</code> 的配置</h2><p>一个 Spring Boot 项目中，我们只需要维护一个 <code>RedisTemplate</code> 对象和一个 <code>StringRedisTemplate</code> 对象就可以了。所以我们需要通过一个 <code>Configuration</code> 类来初始化这两个对象并且交由的 <code>BeanFactory</code> 管理。</p><p>建立如下的<code>redisTemplate</code>配置类；这个配置类对操作<code>&lt;String,other&gt;</code>提供了支持，当我们想在value中添加T类型的时候，引入此Bean操作，他把T类型进行了<code>GenericJackson2JsonRedisSerializer</code>序列化，因为对象跨平台传输需要序列化，虽然存储在redis里不是我们想要看的对象样子，但是我们用对象接受的话就会变为原来的样子。</p><p>我们需只要这样引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Qualifier(&quot;objectRedisTemplate&quot;)</span></span><br><span class="line">  RedisTemplate&lt;String, User&gt; redisTemplate;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;objectRedisTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">RedisTemplate&lt;String, T&gt; <span class="title">objectRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, T&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        RedisSerializer&lt;String&gt; serializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        redisTemplate.setKeySerializer(serializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(serializer);</span><br><span class="line"></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(StringRedisTemplate.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过例子验证一下序列化的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xulie</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;1&quot;</span>, <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;zxj&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//opsForValue类型操作string对象，但是我们向里面加入对象</span></span><br></pre></td></tr></table></figure><p>redis获取值：</p><p><img src="get1.PNG"></p><p>用程序使用User对象接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=zxj)</span><br></pre></td></tr></table></figure><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">   RedisTemplate&lt;String, String&gt; redisTemplateForString;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;objectRedisTemplate&quot;)</span></span><br><span class="line">   RedisTemplate&lt;String, User&gt; redisTemplate;</span><br></pre></td></tr></table></figure><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>set(…)</td><td>添加k-v</td></tr><tr><td>2</td><td>setIfAbsent(k,v)</td><td>如果k不存在则新建，存在则不进行操作</td></tr><tr><td>3</td><td>multiGet(list)</td><td>批量获取key对应的值</td></tr><tr><td>4</td><td>multiSet(Map)</td><td>批量插入k-v</td></tr><tr><td>5</td><td>getAndSet(k,v)</td><td>设置键的字符串值并返回其旧值</td></tr><tr><td>6</td><td>size(k)</td><td>返回key所对应的value值得长度</td></tr></tbody></table><p><strong>使用不同的对象添加string数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addStringValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// set(key, value, 过期时间, 单位)</span></span><br><span class="line">      stringRedisTemplate.opsForValue().set(<span class="string">&quot;zxj&quot;</span>, <span class="string">&quot;main&quot;</span>);</span><br><span class="line">      stringRedisTemplate.opsForValue().set(<span class="string">&quot;zxj1&quot;</span>, <span class="string">&quot;main&quot;</span>);</span><br><span class="line">      redisTemplateForString.opsForValue().set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">      <span class="comment">// 如果不存在添加，存在不添加</span></span><br><span class="line">      redisTemplateForString.opsForValue().setIfAbsent(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;311&quot;</span>);</span><br><span class="line">      <span class="comment">// 设置k1的值，并返回旧值</span></span><br><span class="line">      String oldValue = stringRedisTemplate.opsForValue().getAndSet(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;心智&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;getAndSet函数返回值:&quot;</span> + oldValue);</span><br><span class="line"></span><br><span class="line">      List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      list.add(<span class="string">&quot;zxj&quot;</span>);</span><br><span class="line">      list.add(<span class="string">&quot;zxj1&quot;</span>);</span><br><span class="line">      list.add(<span class="string">&quot;k1&quot;</span>);</span><br><span class="line">      List&lt;String&gt; get = stringRedisTemplate.opsForValue().multiGet(list);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (String s : get) &#123;</span><br><span class="line">          System.out.println(s);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>两者都可操作成功，但是官网建议使用<code>StringRedisTemplate</code>来操作string类型。</p><p>因为指定泛型&lt;String,String&gt;的RedisTemplate==StringRedisTemplate。</p><p>请看定义<code>public class StringRedisTemplate extends RedisTemplate&lt;String, String&gt;</code></p><p><img src="string.PNG"></p><p><strong>删除key</strong></p><p>2种方法，通过key输出单个，通过Collection批量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByKeyOrCollection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;zxj&quot;</span>, <span class="string">&quot;main&quot;</span>);</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;zxj1&quot;</span>, <span class="string">&quot;main&quot;</span>);</span><br><span class="line">        redisTemplateForString.opsForValue().set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        stringRedisTemplate.delete(<span class="string">&quot;k1&quot;</span>);</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;zxj&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;zxj1&quot;</span>);</span><br><span class="line">        redisTemplateForString.delete(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过以上的代码，发现<code>stringRedisTemplate</code>创建的值可以被<code>redisTemplateForString</code>删除，反之亦如此。</p><p><strong>查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(stringRedisTemplate.opsForValue().get(<span class="string">&quot;zxj&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>批量插入和批量获取</strong></p><p>multiSetIfAbsent Boolean multiSetIfAbsent(Map&lt;? extends K, ? extends V&gt; m);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiForString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;p1&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;p2&quot;</span>, <span class="string">&quot;p2&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;p3&quot;</span>, <span class="string">&quot;p3&quot;</span>);</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;p2&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;p3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stringRedisTemplate.opsForValue().multiSet(map);</span><br><span class="line">    List&lt;String&gt; strings = stringRedisTemplate.opsForValue().multiGet(list);</span><br><span class="line">    <span class="keyword">for</span> (String s : strings) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><table><thead><tr><th>序号</th><th>list方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>range(key, start ,end)</td><td>返回key的列表索引start-end的元素</td></tr><tr><td>2</td><td>trim(key ,start, end)</td><td>修建key的列表，让他只存在索引内的元素</td></tr><tr><td>3</td><td>size(key)</td><td>返回长度</td></tr><tr><td>4</td><td>leftPush(k,v)</td><td>从左侧插入元素，如果列表不存在先创建后插入</td></tr><tr><td>5</td><td>leftPushAll(k,…V)</td><td>从左侧插入一个或多个元素</td></tr><tr><td>6</td><td>leftPushAll(k,Collection)</td><td>同上</td></tr><tr><td>7</td><td>rightPush(k,v)</td><td>将所有指定的值插入存储在键的列表的头部。如果键不存在，则在执行推送操作之前将其创建为空列表。（从右边插入）</td></tr><tr><td>8</td><td>rightPushAll(k,…V)</td><td>-</td></tr><tr><td>9</td><td>rightPushAll(k,Collection)</td><td>-</td></tr><tr><td>10</td><td>set(K key, long index, V value)</td><td>在列表中index的位置设置value值</td></tr><tr><td>11</td><td>Long remove(K key, long count, Object value);</td><td>从存储在键中的列表中删除等于值的元素的第一个计数事件。计数参数以下列方式影响操作：<br/>count&gt; 0：删除等于从头到尾移动的值的元素。<br/>count &lt;0：删除等于从尾到头移动的值的元素。<br/>count = 0：删除等于value的所有元素。</td></tr><tr><td>12</td><td>index(K key, long index)</td><td>根据下表获取列表中的值，下标是从0开始的</td></tr><tr><td>13</td><td>leftPop(K key);</td><td>弹出最左边的元素，弹出之后该值在列表中将不复存在</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;objectRedisTemplate&quot;)</span></span><br><span class="line">RedisTemplate&lt;String, User&gt; redisTemplate;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;objectRedisTemplate&quot;)</span></span><br><span class="line">RedisTemplate&lt;String, Integer&gt; redisList;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 因为定义该类型的时候是User，所以这个列表是针对User的</span></span><br><span class="line">       ListOperations&lt;String, User&gt; opsForUser = redisTemplate.opsForList();</span><br><span class="line">       ListOperations&lt;String, Integer&gt; opsForInt = redisList.opsForList();</span><br><span class="line"></span><br><span class="line">       opsForInt.rightPushAll(<span class="string">&quot;list&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;列表的长度&quot;</span> + opsForInt.size(<span class="string">&quot;list&quot;</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 从右侧删除第一个元素</span></span><br><span class="line">       Integer list = opsForInt.rightPop(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;已删除的右侧第一元素为&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">       List&lt;Integer&gt; range = opsForInt.range(<span class="string">&quot;list&quot;</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">       <span class="keyword">for</span> (Integer integer : range) &#123;</span><br><span class="line">           System.out.println(integer);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。<br>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。<br>public interface SetOperations&lt;K,V&gt;</p><table><thead><tr><th>序号</th><th>set方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>add(k, …v)</td><td>向k的集合加入一个或多个元素</td></tr><tr><td>2</td><td>remove(k, …v)</td><td>k对应的集合删除一个或多个元素</td></tr><tr><td>3</td><td>pop(k)</td><td>移除并返回集合的一个随机元素</td></tr><tr><td>4</td><td>move(k,v,k1)</td><td>将k集合中的元素移动到k1集合</td></tr><tr><td>5</td><td>size(k)</td><td></td></tr><tr><td>6</td><td>isMember(k,v)</td><td>判断元素v是否是k中的成员</td></tr><tr><td>7</td><td>members(k)</td><td>返回集合中所有成员</td></tr><tr><td>8</td><td>scan(K key, ScanOptions options);</td><td>遍历set</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SetOperations&lt;String, User&gt; setOperations = redisTemplate.opsForSet();</span><br><span class="line">       setOperations.add(<span class="string">&quot;set&quot;</span>, <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;zxj&quot;</span>), <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;xj&quot;</span>), <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;j&quot;</span>));</span><br><span class="line"></span><br><span class="line">       System.out.println(setOperations.size(<span class="string">&quot;set&quot;</span>));</span><br><span class="line"></span><br><span class="line">       User zxj = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;zxj&quot;</span>);</span><br><span class="line">       System.out.println(setOperations.isMember(<span class="string">&quot;set&quot;</span>, zxj));</span><br><span class="line"></span><br><span class="line">       setOperations.pop(<span class="string">&quot;set&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Set&lt;User&gt; set = setOperations.members(<span class="string">&quot;set&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (User user : set) &#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p><code>public interface HashOperations&lt;key,field,value&gt;</code></p><ol><li>key是k-hash的key</li><li>hash类型是k-hash，field是hash中的k</li><li>value是hash中的值</li></ol><table><thead><tr><th>序号</th><th>hash方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>put(key, Field, Value)</td><td>给key的hash添加field列值为Value</td></tr><tr><td>2</td><td>putAll(key, Map)</td><td>给key的hash表添加map中的所有field-value</td></tr><tr><td>3</td><td>delete(key, Object… fields)</td><td>删除key对应的Hash表的一个或多个field</td></tr><tr><td>4</td><td>hasKey(key, Object hashkey)</td><td>判断key对应的field列是否存在</td></tr><tr><td>5</td><td>get(key, Object hashkey)</td><td>得到Key的hash表里面的hashkey属性</td></tr><tr><td>6</td><td>multiGet(key, Collection fields)</td><td>批量获取key对应的hash表的一些列</td></tr><tr><td>7</td><td>keys(key)</td><td>获得key对应的hash的所有field</td></tr><tr><td>8</td><td>size(key)</td><td>返回hash中散列表的个数</td></tr><tr><td>9</td><td>putIfAbsent(key, field, value)</td><td>仅当field不存在时才设置散列value的值。</td></tr><tr><td>10</td><td>values(key)</td><td>获取整个hash中所有的value</td></tr><tr><td>11</td><td>entries(key)</td><td>获取整个hash数据</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hash</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 还是不要存自定义对象好,因为这里的自定义对象不会使用config设置的序列化，必须在定义User时序列化，而且这个序列化也不好用</span></span><br><span class="line">       HashOperations&lt;String, String, Object&gt; hos =</span><br><span class="line">               redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">       HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zxj&quot;</span>);</span><br><span class="line">       map.put(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">       map.put(<span class="string">&quot;obj&quot;</span>, <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;zxj&quot;</span>));</span><br><span class="line">       <span class="comment">// 插入数据</span></span><br><span class="line">       hos.putAll(<span class="string">&quot;hash&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 仅当field不存在时，才添加</span></span><br><span class="line">       hos.putIfAbsent(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">       hos.putIfAbsent(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;tesxt&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 批量获取数据</span></span><br><span class="line">       ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       list.add(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;tesxt&quot;</span>);</span><br><span class="line">       List&lt;Object&gt; hash = hos.multiGet(<span class="string">&quot;hash&quot;</span>, list);</span><br><span class="line">       System.out.println(<span class="string">&quot;multiGet获取指定多个列：&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (Object o : hash) &#123;</span><br><span class="line">           System.out.println(o);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// hash的大小</span></span><br><span class="line">       System.out.println(<span class="string">&quot;size获取大小:&quot;</span> + hos.size(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取整个hash数据</span></span><br><span class="line">       Map&lt;String, Object&gt; hash1 = hos.entries(<span class="string">&quot;hash&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取到hash中的所有的value</span></span><br><span class="line">       List&lt;Object&gt; hash2 = hos.values(<span class="string">&quot;hash&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><p>Redis有序集合和无序集合一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>有序集合的成员是唯一的,但分数(score)却可以重复。</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>add(K key, V value, double score);</td><td>新增一个有序集合，存在的话为false，不存在的话为true</td></tr><tr><td>2</td><td>add(K key, Set&lt;TypedTuple&lt;V&gt;tuples);</td><td>新增一个有序集合</td></tr><tr><td>3</td><td>remove(K key, Object… values);</td><td>从有序集合中移除一个或者多个元素</td></tr><tr><td>4</td><td>range(K key, long start, long end);</td><td>通过索引区间返回有序集合成指定区间内的成员，其中有序集成员按分数值递增(从小到大)顺序排列</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zset</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Integer&gt; operations = redisList.opsForZSet();</span><br><span class="line">        operations.add(<span class="string">&quot;z&quot;</span>, <span class="number">1</span> ,<span class="number">9</span>);</span><br><span class="line">        operations.add(<span class="string">&quot;z&quot;</span>, <span class="number">2</span> ,<span class="number">8</span>);</span><br><span class="line">        operations.add(<span class="string">&quot;z&quot;</span>, <span class="number">3</span> ,<span class="number">7</span>);</span><br><span class="line">        operations.add(<span class="string">&quot;z&quot;</span>, <span class="number">4</span> ,<span class="number">3</span>);</span><br><span class="line">        operations.add(<span class="string">&quot;z&quot;</span>, <span class="number">5</span> ,<span class="number">6</span>);</span><br><span class="line">        operations.add(<span class="string">&quot;z&quot;</span>, <span class="number">6</span> ,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(operations.range(<span class="string">&quot;z&quot;</span>, <span class="number">0</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(operations.rangeByScore(<span class="string">&quot;z&quot;</span>, <span class="number">3</span>, <span class="number">6</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/EasonJim/p/7803067.html">Spring中使用RedisTemplate操作Redis</a></p>]]></content>
      
      
      <categories>
          
          <category> web后端 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门到实践</title>
      <link href="2019/12/11/Redis%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
      <url>2019/12/11/Redis%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h1><p>Redis 全称为：Remote Dictionary Server（远程数据服务），是一个开源的使用C语言编写、支持网络、可基于内存还可以持久化的日志型、Key-Value数据库，并提供多种语言的API，官方推荐使用Linux部署。</p><p>官方网站：<a href="https://redis.io/"> https://redis.io/ </a></p><a id="more"></a><p>并且，Redis具有以下特征：</p><ol><li>数据的持久化（定期把内存中的数据写入磁盘中，重启时可以再次加载使用）</li><li>丰富的数据类型：string,list,hash,set,sorted set(zset)</li><li>原子性：单操作和事务都支持原子性，要么全部处理要么全不处理</li><li>主从同步</li></ol><p>Redis的特点：</p><ol><li>Redis 本质上是一个 key-value 类型的数据库</li><li>整个数据库都是在内存中进行操作，可定期刷新到磁盘进行持久化存储</li><li>由于是在内存操作，读写能力非常好，每秒可以处理 10 万次读写操作</li><li>Redis 支持多种数据结构，提供了丰富的数据类型选择</li><li>Redis 同时支持数据备份，主从配置</li><li>Redis 的所有操作都是原子性的</li></ol><br><p><strong>如果没有redis该怎么使用本地缓存</strong></p><ol><li>程序中定义内存数据结构来实现， 比如说定义一个成员变量Map 或者 List 均可以实现</li><li>使用开源的缓存框架 Ehcache，Ehcache 封装了对于内存操作的功能</li><li>Guava Cache 是 Google 开源的工具集， 提供了缓存的边界操作工具</li></ol><p><strong>Redis 通讯协议是什么？有什么特点？</strong></p><p>Redis 的通信协议是 Redis Serialization Protocol，简称 RESP。</p><p>有如下特性：</p><ol><li>是二进制安全的</li><li>在 TCP 层</li><li>基于请求—响应的模式</li></ol><h1 id="Redis安装和配置"><a href="#Redis安装和配置" class="headerlink" title="Redis安装和配置"></a>Redis安装和配置</h1><p>因为redis推荐Linux部署，所以本次以Ubuntu18.04LTS为例来安装redis：</p><p>首先，本次是编译安装我们要首先保证有编译环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install make</span><br><span class="line">sudo apt-get install make-build</span><br><span class="line">sudo apt-get install gcc</span><br></pre></td></tr></table></figure><p>如果嫌弃下载安装速度过慢，可以更换apt源，<a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/">清华源</a>；将内容替换<code>sources.list</code>的内容即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>下载和安装，自己挑选一个目录，我这里使用的是我自建的<code>/path</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /path</span><br><span class="line"><span class="built_in">cd</span> /path</span><br><span class="line">sudo wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br><span class="line">sudo tar -zxvf redis-5.0.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-5.0.7/</span><br><span class="line">sudo make</span><br></pre></td></tr></table></figure><p>编译安装完成，启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /path/redis.log</span><br><span class="line">sudo chmod 777 /path/redis.log</span><br><span class="line">sudo /path/redis-5.0.7/src/redis-server /path/redis-5.0.7/redis.conf &gt;&gt; /path/redis.log 2&gt;&amp;1 &amp;</span><br><span class="line">sudo ln -s /path/redis-5.0.7/src/redis-cli /bin/</span><br><span class="line">sudo ln -s /path/redis-5.0.7/src/redis-server /bin/</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>关闭redis，在cli中输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [SAVE|NOSAVE]</span><br></pre></td></tr></table></figure><br><p>待Redis安装之后，修改配置。查看配置：</p><p>Redis的配置文件位于Redis安装目录下，文件名为<code>redis.conf</code>，例如我的文件位置为：<code>/path/redis-5.0.7/redis.conf</code></p><table><thead><tr><th>redis.conf参数</th><th>说明</th></tr></thead><tbody><tr><td>daemonize no</td><td>Redis默认不是以守护进程的方式运行，可通过将no-&gt;yes，启动守护进程</td></tr><tr><td>pidfile /var/run/redis.pid</td><td>当redis以守护进程运行时，会把它进程的pid写入此文件里</td></tr><tr><td>port 6379</td><td>指定Redis监听端口，默认6379</td></tr><tr><td>bind 127.0.0.1</td><td>绑定的主机IP，127.0.0.1代表只允许本机连接，0.0.0.0代表允许其他主机连接</td></tr><tr><td>timeout 300</td><td>当客户端闲置300s后关闭连接，0为关闭此功能</td></tr><tr><td>loglevel notice</td><td>指定日志级别，共有四个：debug、verbose、notice、warning</td></tr><tr><td>logfile  “”</td><td>指定日志文件名，默认为标准输出，如果为守护进程运行，而日志记录为标准输出，则日志会发送给/dev/null</td></tr><tr><td>databases 16</td><td>设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;来再连接上指定数据库</td></tr><tr><td>save &lt;seconds&gt; &lt;changes&gt;</td><td>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br>Redis默认配置文件中提供了三个条件：<br>     save 900 1<br>     save 300 10<br>     sabe 60 10000<br>分别代表900秒(15min)内有一个更改，300秒(5min)内有10个更改以及60秒内有10000个更改。</td></tr><tr><td>rdbcompression yes</td><td>指定存储至本地数据库时是否压缩数据，默认为yes。采用LZF压缩。</td></tr><tr><td>dbfilename dump.rdb</td><td>本地数据库文件名，默认为dump.rdb</td></tr><tr><td>dir ./</td><td>指定本地数据库存放目录，请注意，必须在此处指定目录，而不是文件名。</td></tr><tr><td>appendonly no</td><td>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按照上面的save来同步的，所以可能有些数据在一段时间里只存在于内存</td></tr><tr><td>appendfilename “appendonly.aof”</td><td>指定更新文件名</td></tr><tr><td>appendfsync everysec</td><td>指定更新日志条件，3个可选值：<br>    no: 表示操作系统进行数据缓存同步到磁盘(快)<br>    alway: 表示每次更新操作后手动调用fsync()将数据写到磁盘(慢，安全)<br>    everysec:  每秒同步一次(默认值)</td></tr></tbody></table><p>当修改<code>daemonize yes</code>后，启动redis的命令不用像上述一样麻烦，直接<code>sudo /path/redis-5.0.7/src/redis-server /path/redis-5.0.7/redis.conf</code></p><p>日志级别：</p><p>　　1）debug：会打印出很多信息，适用于开发和测试阶段</p><p>　　2）verbose（冗长的）：包含很多不太有用的信息，但比debug要清晰一些</p><p>　　3）notice：适用于生产模式</p><p>　　4）warning : 警告信息</p><h1 id="Redis的数据类型和使用"><a href="#Redis的数据类型和使用" class="headerlink" title="Redis的数据类型和使用"></a>Redis的数据类型和使用</h1><p>上面提到过，redis支持的五种数据类型：</p><ol><li>string</li><li>list</li><li>hash</li><li>set</li><li>sorted set(zset)</li></ol><h2 id="Redis的key-value"><a href="#Redis的key-value" class="headerlink" title="Redis的key-value"></a>Redis的key-value</h2><p>key的值是二进制安全的</p><p>通常我们设置键值时，要遵守：</p><ol><li>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id</li><li>不要包含特殊字符，反例：包含空格、换行、单双引号以及其他转义字符</li><li>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视<ul><li><code>user:&#123;uid&#125;:friends:messages:&#123;mid&#125;简化为u:&#123;uid&#125;:fr:m:&#123;mid&#125;。</code></li></ul></li></ol><p>value设计：</p><ol><li>string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。</li><li>控制key的生命周期，redis不是垃圾桶。</li></ol><h2 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h2><p>命令语法：<code>COMMAND KEY_NAME</code></p><h3 id="KEYS命令"><a href="#KEYS命令" class="headerlink" title="KEYS命令"></a>KEYS命令</h3><p>详细命令见表格：</p><table><thead><tr><th align="center">序号</th><th>keys命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">1</td><td>DEL　key</td><td align="left">该命令用于在key存在时删除key</td></tr><tr><td align="center">2</td><td>DUMP key</td><td align="left">序列化给定key，并返回被序列化的值</td></tr><tr><td align="center">3</td><td>EXISTS key</td><td align="left">检查key是否存在</td></tr><tr><td align="center">4</td><td>EXPIRE key seconds</td><td align="left">给key设置过期时间</td></tr><tr><td align="center">5</td><td>PEXPIREAT key milliseconds-timestamp</td><td align="left">给key设置过期时间，毫秒时间戳</td></tr><tr><td align="center">6</td><td>PEXPIRE key milliseconds</td><td align="left">给key设置过期时间，毫秒</td></tr><tr><td align="center">7</td><td>EXPIREAT key timestamp</td><td align="left">给key设置过期时间，时间戳</td></tr><tr><td align="center">8</td><td>MOVE key db</td><td align="left">将此key移动到指定db中</td></tr><tr><td align="center">9</td><td>PERSIST key</td><td align="left">移除key的过期时间，key将持久保持</td></tr><tr><td align="center">10</td><td>RENAME key newkey</td><td align="left">修改key值</td></tr><tr><td align="center">11</td><td>TYPE key</td><td align="left">返回key存储值的类型</td></tr><tr><td align="center">12</td><td>keys *</td><td align="left">查看所有key</td></tr></tbody></table><h3 id="String命令"><a href="#String命令" class="headerlink" title="String命令"></a>String命令</h3><p>string是Redis最简单且最常用的数据类型之一。如果只使用这种数据类型，那么Redis就是一个加了持久化功能的memcached服务器。</p><p>二者区别</p><ol><li>Memcached 所有的值均是简单的字符串，Redis 作为其替代者，支持更为丰富的数据类型</li><li>Redis 的速度比 Memcached 快很多</li><li>Redis 可以持久化其数据</li></ol><p>在Redis中，我们<code>set key value</code>，然后<code>get key</code>来获取字符串值，value可以是任何类型的字符串，最长不可超过1G，但规范中让我们在10k内。</p><p>String类型也可以存储数字，并支持对数字的加减操作。</p><table><thead><tr><th>序号</th><th>字符串命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>SET key value</td><td>设置指定key的value</td></tr><tr><td>2</td><td>GET key</td><td>获取指定key的值</td></tr><tr><td>3</td><td>MGET key1 [key2…]</td><td>获取多个指定key的值</td></tr><tr><td>4</td><td>STRLEN key</td><td>返回key存储字符串的长度</td></tr><tr><td>5</td><td>MSET key value [key value…]</td><td>批量添加k-v对，如果存在已有key，则会覆盖之前的</td></tr><tr><td>6</td><td>MSETNX key value [key value…]</td><td>批量添加k-v对，与上述不同的是，所有key都必须不存在<br>返回0失败，1成功</td></tr><tr><td>7</td><td>INCR key</td><td>将key存储的数字值+1，如果不是数字会报错</td></tr><tr><td>8</td><td>INCRBY key increment</td><td>将key所存储的值加上给定的增量increment，如果increment不是数字会报错</td></tr><tr><td>9</td><td>INCRBYFLOAT key increment</td><td>将key所存储的值加上给定的浮点增量increment，如果increment不是数字会报错</td></tr><tr><td>10</td><td>DECR key</td><td>将key值存储的数字值-1</td></tr><tr><td>11</td><td>DECRBY key decrement</td><td>将key所存储的值减去给定的增量increment，如果increment不是数字会报错</td></tr><tr><td>12</td><td>APPEND key value</td><td>如果key值已存在并且是一个string，此命令会追加值<br>如果已存在，则会创建该k-v</td></tr></tbody></table><p><font color='red'>注意：批量操作mget、mset命令是原子性的，里面的批量操作要么都执行，要么都不执行</font></p><p>下面来总结一下上面的数字操作：</p><ol><li><code>INCR key</code>、<code>DECR key</code>命令、<code>INCRBY key increment</code>、<code>DECRBY key decrement</code>操作的key的值只能是纯数字，<font color='red'>不能是小数！！！不能是小数！！！不能是小数！！！</font></li><li><code>INCRBYFLOAT key increment</code>操作的key值对应的值可以是小数或者整数！！</li></ol><h3 id="Hash命令"><a href="#Hash命令" class="headerlink" title="Hash命令"></a>Hash命令</h3><p>Redis Hash是一个string类型的field和value的映射表，hash特别适合用于存储对象，能够存储key对多个属性的数据。</p><p><img src="hash.PNG"></p><table><thead><tr><th>序号</th><th>hash命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>HDEL key field1 [field2…]</td><td>删除一个或多个哈希表字段</td></tr><tr><td>2</td><td>HEXISTS key field</td><td>查看key存储的哈希表中是否有field属性</td></tr><tr><td>3</td><td>HGET key field</td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td>4</td><td>HGETALL key</td><td>获取哈希表中指定key的所有字段和值</td></tr><tr><td>5</td><td>HKEYS key</td><td>获取key中哈希表的所有field</td></tr><tr><td>6</td><td>HLEN key</td><td>获取哈希表中字段的数量</td></tr><tr><td>7</td><td>HINCRBY key field increment</td><td>为哈希表中field字段的值加increment</td></tr><tr><td>8</td><td>HINCRBYFLOAT key field increment</td><td>为哈希表中field字段的值加increment浮点数</td></tr><tr><td>9</td><td>HSET key field1 value1</td><td>将哈希表key中的字段field1设置为value1</td></tr><tr><td>10</td><td>HSETNX key field value</td><td>只有field字段不在时，设置它的值</td></tr><tr><td>11</td><td>HVALS key</td><td>获取哈希表中所有的value</td></tr><tr><td>12</td><td>HMGET key field1 [field2…]</td><td>同上string</td></tr><tr><td>13</td><td>HMSET key  field1 value1 [f2 v2…]</td><td>同上string</td></tr></tbody></table><h3 id="List命令"><a href="#List命令" class="headerlink" title="List命令"></a>List命令</h3><p>列表是有序元素的序列。Redis Lists基于Linked List实现。这意味着在十个元素的列表中添加新元素和千万元素中添加新元素的速度相同。</p><p>Redis列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头或尾。</p><p><img src="list.PNG"></p><table><thead><tr><th>序号</th><th>list命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>LINDEX key index</td><td>通过索引获取列表中的元素</td></tr><tr><td>2</td><td>LLEN key</td><td>获取列表长度</td></tr><tr><td>3</td><td>LPUSH key v1 [v2…]</td><td>将一个值或多个插入到列表头部</td></tr><tr><td>4</td><td>LPUSHX key v1</td><td>将一个值插入到已经存在的列表头部，列表不存在则不插入</td></tr><tr><td>5</td><td>LREM key count value</td><td>移除列表元素</td></tr><tr><td>6</td><td>LRANGE key start end</td><td>获取列表指定范围内的元素</td></tr><tr><td>7</td><td>LSET key index value</td><td>通过索引设置列表元素的值</td></tr></tbody></table><h3 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a>set命令</h3><p>set是string类型的无序集合。集合成员是唯一的，不会出现重复数据。</p><p><img src="set.PNG"></p><table><thead><tr><th>序号</th><th>set命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>SADD key member1 [member2…]</td><td>向集合添加一个或多个成员</td></tr><tr><td>2</td><td>SMEMBERS key</td><td>获取key的集合中的成员</td></tr><tr><td>3</td><td>SCARD key</td><td>获取key的集合中的成员数</td></tr></tbody></table><h3 id="zset命令"><a href="#zset命令" class="headerlink" title="zset命令"></a>zset命令</h3><p>zset与set不同的是它每个元素会关联一个double类型的分数，redis通过分数来为集合中的成员进行从小到大的排序。</p><p><img src="zset.PNG"></p><table><thead><tr><th>序号</th><th>zset命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>ZADD key score1 member1 [s2 m2… ]</td><td>添加一个或多个成员，或更新已存在成员的分数</td></tr><tr><td>2</td><td>ZCOUNT key min max</td><td>计算有序集合中指定区间分数的成员数</td></tr><tr><td>3</td><td>ZCARD key</td><td>获取有序集合的成员数</td></tr><tr><td>4</td><td>ZRANGE key start stop</td><td>通过索引区间返回有序集合指定区域的成员</td></tr><tr><td>5</td><td>ZSCORE key member</td><td>返回此成员的分数</td></tr></tbody></table><p><strong>总结</strong></p><p>以<code>NX</code>结尾的命令添加值时，必须不存在，也就是说这个命令不会覆盖已有内容</p><h1 id="Redis集群策略"><a href="#Redis集群策略" class="headerlink" title="Redis集群策略"></a>Redis集群策略</h1><p>Redis有三种集群策略</p><ol><li>主从</li><li>哨兵</li><li>主从组成的集群</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次postgres数据库like优化</title>
      <link href="2019/12/10/%E8%AE%B0%E4%B8%80%E6%AC%A1postgres%E6%95%B0%E6%8D%AE%E5%BA%93like%E4%BC%98%E5%8C%96/"/>
      <url>2019/12/10/%E8%AE%B0%E4%B8%80%E6%AC%A1postgres%E6%95%B0%E6%8D%AE%E5%BA%93like%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近我司要做一个内部贴吧，要对其中的所有文章进行标题和内容检索；原本打算使用ElasticSearch搜索引擎。但是我实在不甘心为了一个只有几千篇文章、用户数只有几百人的内部Web应用、让系统变得复杂化。这时候，这篇文章《<a href="http://rachbelaid.com/postgres-full-text-search-is-good-enough/">Postgres full-text search is Good Enough!</a>》映入了我的眼帘。需要额外配置中文分词器<code>zhparser</code>。</p><p>但是，由于某些原因(懒和分词器好久没被维护)，我接触到了一种使用like模糊查询而不必全文搜索差的方法(因为在大量数据下like效率很差，所以之前不用like)。毕竟，效率最大么。</p><a id="more"></a><h1 id="正确姿势"><a href="#正确姿势" class="headerlink" title="正确姿势"></a>正确姿势</h1><p>对like的字段添加GIN索引</p><p>pg_trgm模块提供函数和操作符测定字母，数字，文本基于三元模型匹配的相似性， 还有支持快速搜索相似字符串的索引操作符类。</p><p>Postgres使用trigram将字符串分解成更小的单元便于有效地索引它们。pg_trgm模块支持GIST或GIN索引，从9.1开始，这些索引支持LIKE/ILIKE查询。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>要使用pg_trgm模块，首先要启用该扩展，然后使用<code>gin_trgm_ops</code>创建索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE EXTENSION pg_trgm;</span><br><span class="line">Time: 42.206 ms</span><br><span class="line"></span><br><span class="line">&gt; CREATE INDEX trgm_idx_users_username ON users USING gin (username gin_trgm_ops);</span><br><span class="line">Time: 7082.474 ms</span><br></pre></td></tr></table></figure><h2 id="对比测试"><a href="#对比测试" class="headerlink" title="对比测试"></a>对比测试</h2><p><code>posts_copy2</code>和<code>posts</code>是两个数据相同的表。它们的数据为16w。</p><p>不同的是，<code>posts</code>使用了上述方式进行了加索引。</p><p><strong>对比未有索引的查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; select * from posts where content like &#x27;%hello%&#x27;;</span><br><span class="line">Time:0.015s</span><br><span class="line"></span><br><span class="line">&gt; select * from posts_copy2 where content like &#x27;%hello%&#x27;;</span><br><span class="line">Time: 6.8s</span><br></pre></td></tr></table></figure><p>或者解释两条SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> posts <span class="keyword">where</span> <span class="keyword">content</span> <span class="keyword">like</span> <span class="string">&#x27;%hello%&#x27;</span>;</span><br><span class="line">Bitmap Heap Scan on posts  (cost=69.98..1030.76 rows=256 width=562)</span><br><span class="line">  Recheck Cond: (content ~~ &#x27;%hello%&#x27;::text)</span><br><span class="line">  -&gt;  Bitmap Index Scan on gin_index  (cost=0.00..69.92 rows=256 width=0)</span><br><span class="line">        Index Cond: (content ~~ &#x27;%hello%&#x27;::text)</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> posts_copy2 <span class="keyword">where</span> <span class="keyword">content</span> <span class="keyword">like</span> <span class="string">&#x27;%hello%&#x27;</span></span><br><span class="line">Gather  (<span class="keyword">cost</span>=<span class="number">1000.00</span>.<span class="number">.13865</span><span class="number">.94</span> <span class="keyword">rows</span>=<span class="number">256</span> width=<span class="number">564</span>)</span><br><span class="line">  Workers Planned: <span class="number">2</span></span><br><span class="line">  -&gt;  <span class="keyword">Parallel</span> Seq <span class="keyword">Scan</span> <span class="keyword">on</span> posts_copy2  (<span class="keyword">cost</span>=<span class="number">0.00</span>.<span class="number">.12840</span><span class="number">.34</span> <span class="keyword">rows</span>=<span class="number">107</span> width=<span class="number">564</span>)</span><br><span class="line">        Filter: (<span class="keyword">content</span> ~~ <span class="string">&#x27;%hello%&#x27;</span>::<span class="built_in">text</span>)</span><br></pre></td></tr></table></figure><p>postgresql的查询计划大致有几种表的扫描计划：</p><ol><li>Seq Scan很好理解，就是按照表的记录的排列顺序从头到尾依次检索扫描，每次扫描要取到所有的记录。这也是最简单最基础的扫表方式，扫描的代价比较大；</li><li>Index Scan，我们也很熟悉，对于给定的查询，我们先扫描一遍索引，从索引中找到符合要求的记录的位置(指针)，再定位到表中具体的Page去取。等于是两次I/O，先走索引，再走取表记录。</li><li>bitmap scan 一次性将满足条件的索引项全部取<br>出，并在内存中进行排序, 然后根据取出的索引项访问表数据。</li><li>所谓index only scan ,就是因为 建立 index时，所包含的字段集合，囊括了我们查询语句中的字段，这样，提取出相应的index ，就不必再次提取数据块了。</li></ol><p>而上面一种使用了<code>Bitmap Heap Scan</code>，另外一种使用了<code>Parallel Seq Scan</code>，所以得出使用pg_trgm模块支持的gin索引，会大大提升效率.。</p><br><p><strong>对比默认索引(btree)的查询</strong></p><p>我们将<code>posts_copy2</code>添加btree索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> posts_copy2 <span class="keyword">where</span> <span class="keyword">content</span> <span class="keyword">like</span> <span class="string">&#x27;%hello%&#x27;</span></span><br><span class="line">Gather  (<span class="keyword">cost</span>=<span class="number">1000.00</span>.<span class="number">.13865</span><span class="number">.94</span> <span class="keyword">rows</span>=<span class="number">256</span> width=<span class="number">564</span>)</span><br><span class="line">  Workers Planned: <span class="number">2</span></span><br><span class="line">  -&gt;  <span class="keyword">Parallel</span> Seq <span class="keyword">Scan</span> <span class="keyword">on</span> posts_copy2  (<span class="keyword">cost</span>=<span class="number">0.00</span>.<span class="number">.12840</span><span class="number">.34</span> <span class="keyword">rows</span>=<span class="number">107</span> width=<span class="number">564</span>)</span><br><span class="line">        Filter: (<span class="keyword">content</span> ~~ <span class="string">&#x27;%hello%&#x27;</span>::<span class="built_in">text</span>)</span><br></pre></td></tr></table></figure><p>我们发现它竟然没有走索引。 这是由于一般的索引只能优化 <code>LIKE foo%</code>这类的向后的模糊查询。所以btree索引这里也达不到优化的效果。</p><p>建立的索引如下：</p><p>索引中的列：(last_name,first_name,dob)</p><p>下面是关于btree索引的限制：</p><p>A：如果不是按照索引的最左列开始查找的，则无法使用索引(注意，这里不是指的where条件的顺序，即where条件中，不管条件顺序，只要where中出现的列在多列索引中能够从最左开始连贯起来就能使用到多列索引)</p><p>B：不能跳过索引中的列，如：查询条件为姓和出生日期，跳过了名字列，这样，多列索引就只能使用到姓这一列</p><p>C：如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查询，如：where last_name=xxx and first_name like ‘xxx%’ and dob=’xxx’;这样，first_name列可以使用索引，这列之后的dob列无法使用索引。</p><p>D：只支持匹配某一列值的开头部分，如：匹配以J开头的姓的人。</p><hr><h1 id="联合字段的like"><a href="#联合字段的like" class="headerlink" title="联合字段的like"></a>联合字段的like</h1><p>有时候，我们可能需要联合多个字段来查询数据。例如：对文章的标题和内容。</p><p>首先，想到的是同时在两列加上索引，然后解释执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Gather  (cost=1000.00..13865.94 rows=256 width=564)</span><br><span class="line">  Workers Planned: 2</span><br><span class="line">  -&gt;  Parallel Seq Scan on posts_copy2  (cost=0.00..12840.34 rows=107 width=564)</span><br><span class="line">        Filter: (content ~~ &#x27;%hello%&#x27;::text)</span><br></pre></td></tr></table></figure><p>看来还是没有用到索引，由于查询的时候使用的是联合的字段，单独的索引并不起作用。那么我们可以考虑将字段联合起来，添加一个索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_users_full_name <span class="keyword">ON</span> <span class="keyword">table</span> <span class="keyword">using</span> gin ((Column1 || <span class="string">&#x27; &#x27;</span> || Column2) gin_trgm_ops);</span><br></pre></td></tr></table></figure><p>再次尝试查询，发现使用了<code>Bitmap Heap Scan</code>，看来成功使用了索引，速度极快。</p><h1 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h1><p><a href="https://razeencheng.com/post/pg-like-index-optimize.html">记一次PostgreSQL LIKE索引优化，联合字段LIKE查询优化。</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> like </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程池</title>
      <link href="2019/12/06/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>2019/12/06/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>程序的运行，其本质上，是对系统资源（CPU、内存、磁盘、网络等等）的使用。如何高效的使用这些资源是我们编程优化演进的一个方向。今天说的线程池就是一种对CPU利用的优化手段。</p><a id="more"></a><h1 id="池化思想"><a href="#池化思想" class="headerlink" title="池化思想"></a>池化思想</h1><p>说到“池”这个字眼，Java有由于多有关于“池”的名词，比如：数据库连接池、线程池、Java常量池。</p><p>这里我们以数据库连接池为例来说明为什么使用连接池。</p><p>当我们不使用数据库连接池时，每次进行查询数据库操作都需要进行初始化连接，查询，关闭连接操作，不仅繁琐，还因为每次进行相同的操作而造成资源的浪费。</p><p>我们使用数据库连接池时，可以初始化一批连接不释放放在池子里，每次拿来用，用完之后返回给池子，这样节省了连接创建和释放的时间，也方便了起来。</p><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>线程池顾名思义，就是由很多线程构成的池子，来一个任务，就从池子中取一个线程，处理这个任务。这个理解是我在第一次接触到这个概念时候的理解，虽然整体基本切入到核心，但是实际上会比这个复杂。例如线程池肯定不会无限扩大的，否则资源会耗尽；当线程数到达一个阶段，提交的任务会被暂时存储在一个队列中，如果队列内容可以不断扩大，极端下也会耗尽资源，那选择什么类型的队列，当队列满如何处理任务，都有涉及很多内容。线程池总体的工作过程如下图：</p><p><img src="https://pic3.zhimg.com/80/v2-10a39f5ab6ff4780007537e2e73ee106_hd.jpg"></p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>Jdk提供给外部的接口也很简单。直接调用ThreadPoolExecutor构造一个就可以了，也可以通过Executors静态工厂构建，但一般不建议。</p><h2 id="Executors的方式"><a href="#Executors的方式" class="headerlink" title="Executors的方式"></a>Executors的方式</h2><p>因为这种创建线程池的方式有很大的隐患，稍有不慎就有可能导致线上故障，如：一次Java线程池误用引发的血案和总结，请参考 <a href="https://zhuanlan.zhihu.com/p/32867181">这篇文章</a>。</p><p><font color="red">而且在阿里巴巴Java开发手册中也明确指出，『不允许』使用Executors创建线程池。</font></p><h3 id="Executors详解"><a href="#Executors详解" class="headerlink" title="Executors详解"></a>Executors详解</h3><p>Executors 是一个Java中的工具类。提供工厂方法来创建不同类型的线程池。</p><p><img src="https://www.hollischuang.com/wp-content/uploads/2018/10/15406248096737.jpg"></p><p>从上图中也可以看出，Executors的创建线程池的方法，创建出来的线程池都实现了ExecutorService接口。常用方法有以下几个：</p><ol><li><p><code>newFiexedThreadPool(int Threads)</code>：创建固定数目线程的线程池。</p></li><li><p><code>newCachedThreadPool()</code>：创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果没有可用的线程，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</p></li><li><p><code>newSingleThreadExecutor()</code>创建一个单线程化的Executor。</p></li><li><p><code>newScheduledThreadPool(int corePoolSize)</code>创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</p></li></ol><br><p>看起来它功能很强大，但为什么说它是有弊端的呢？</p><p>根据参考 <a href="https://zhuanlan.zhihu.com/p/32867181">上面的引用文章</a>和阿里巴巴开发手册，得出：</p><p>不允许使用Executors去创建线程池，而要用ThreadPoolExecutor的方式，这样的处理方式让人更加明确线程池的运行规则，规避资源耗尽的风险。</p><p>说明：Executors返回的线程池对象的弊端如下：</p><ol><li><code>FixedThreadPool</code>和<code>SingleThreadPool</code>：允许的请求队列长度为<code>Integer.MAX_VALUE</code>，可能会堆积大量的请求于队列中，从而导致OOM</li><li><code>CachedThreadPool</code>和<code>ScheduledThreadPool</code>：允许创建的线程数量为<code>Integer.MAX_VAULE</code>，可能会创建大量的线程，从而导致OOM</li></ol><h3 id="查看缺陷"><a href="#查看缺陷" class="headerlink" title="查看缺陷"></a>查看缺陷</h3><p>我们知道了<code>Executors</code>创建的线程池存在OOM的风险，那么到底是什么原因导致的呢？我们需要深入<code>Executors</code>的源码来分析一下。</p><p>我们以<code>newFixedThreadPool</code>方法为例，看他的方法实现：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br></pre></td></tr></table></figure><p>如果读者对Java中的阻塞队列有所了解的话，看到这里或许就能够明白原因了。</p><p>Java中的<code>BlockingQueue</code>主要有两种实现，分别是<code>ArrayBlockingQueue</code> 和 <code>LinkedBlockingQueue</code>。</p><p><code>ArrayBlockingQueue</code>是一个用数组实现的有界阻塞队列，必须设置容量。</p><p><code>LinkedBlockingQueue</code>是一个用链表实现的有界阻塞队列，容量可以选择进行设置，不设置的话，将是一个无边界的阻塞队列，最大长度为<code>Integer.MAX_VALUE</code>。</p><p>这里的问题就出在：<strong>不设置的话，将是一个无边界的阻塞队列，最大长度为Integer.MAX_VALUE。</strong>也就是说，如果我们不设置<code>LinkedBlockingQueue</code>的容量的话，其默认容量将会是<code>Integer.MAX_VALUE</code>。此时，<code>LinkedBlockingQueue</code>就是一个无边界队列，对于一个无边界队列来说，是可以不断的向队列中加入任务的，这种情况下就有可能因为任务过多而导致内存溢出问题。</p><hr><h2 id="ThreadPoolExecutor方式"><a href="#ThreadPoolExecutor方式" class="headerlink" title="ThreadPoolExecutor方式"></a>ThreadPoolExecutor方式</h2><p>上面的<code>Executors</code>方式在原理上使用的也是<code>ThreadPoolExecutor</code>方法，只是它的默认实现有缺陷，那我们自己使用<code>ThreadPoolExecutor</code>方法来创建线程池，并避免使用<code>Executors</code>中的默认实现就可以了。</p><p>我们首先查看ThreadPoolExecutor需要的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-10a39f5ab6ff4780007537e2e73ee106_hd.jpg"></p><p>下面我们根据线程池工作流程图来解释下面的参数：</p><p><strong>corePoolSize</strong>- 核心池大小，既然如前原理部分所述。需要注意的是在初创建线程池时线程不会立即启动，直到有任务提交才开始启动线程并逐渐时线程数目达到corePoolSize。若想一开始就创建所有核心线程需调用prestartAllCoreThreads方法。</p><p><strong>maximumPoolSize</strong>-池中允许的最大线程数。需要注意的是当核心线程满且阻塞队列也满时才会判断当前线程数是否小于最大线程数，并决定是否创建新线程。</p><p><strong>keepAliveTime</strong> - 当线程数大于核心时，多于的空闲线程最多存活时间</p><p><strong>unit</strong> - keepAliveTime 参数的时间单位。</p><p><strong>workQueue</strong> - 当线程数目超过核心线程数时用于保存任务的队列。主要有3种类型的BlockingQueue可供选择：无界队列，有界队列和同步移交。将在下文中详细阐述。从参数中可以看到，此队列仅保存实现Runnable接口的任务。 别看这个参数位置很靠后，但是真的很重要，因为楼主的坑就因这个参数而起，这些细节有必要仔细了解清楚。</p><p><strong>threadFactory</strong> - 执行程序创建新线程时使用的工厂。</p><p><strong>handler</strong> - 阻塞队列已满且线程数达到最大值时所采取的饱和策略。java默认提供了4种饱和策略的实现方式：<font color='red'>中止、抛弃、抛弃最旧的、调用者运行。</font></p><h3 id="创建线程池的正确姿势"><a href="#创建线程池的正确姿势" class="headerlink" title="创建线程池的正确姿势"></a>创建线程池的正确姿势</h3><p>避免使用Executors创建线程池，主要是避免使用其中的默认实现，那么我们可以自己直接调用<code>ThreadPoolExecutor</code>的构造函数来自己创建线程池。在创建的同时，给<code>BlockQueue</code>指定容量就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ExecutorService executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">10</span>,</span><br><span class="line">        <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">10</span>));</span><br><span class="line"><span class="comment">// 这里没有指定**threadFactory** 和**handler**</span></span><br><span class="line"><span class="comment">// 因为这个构造方法里，默认指定了threadFactory = Executors.defaultThreadFactory(), handler=new ThreadPoolExecutor.AbortPolicy()</span></span><br></pre></td></tr></table></figure><p>这种情况下，一旦提交的线程数超过当前可用线程数时，就会抛出<code>java.util.concurrent.RejectedExecutionException</code>，这是因为当前线程池使用的队列是有边界队列，队列已经满了便无法继续处理新的请求。但是异常（Exception）总比发生错误（Error）要好。</p><h3 id="使用开源类库"><a href="#使用开源类库" class="headerlink" title="使用开源类库"></a>使用开源类库</h3><p>推荐使用guava提供的ThreadFactoryBuilder来创建线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">        .setNameFormat(<span class="string">&quot;demo-pool-%d&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">200</span>,</span><br><span class="line">        <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">1024</span>), namedThreadFactory, <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            pool.execute(<span class="keyword">new</span> SubThread());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述方式创建线程时，不仅可以避免OOM的问题，还可以自定义线程名称，更加方便的出错的时候溯源。</p><hr><h1 id="实践多线程"><a href="#实践多线程" class="headerlink" title="实践多线程"></a>实践多线程</h1><p>线程池中的execute方法大家都不陌生，即开启线程执行池中的任务。</p><p>还有一个方法submit也可以做到，它的功能是提交指定的任务去执行并且返回Future对象，即执行的结果。</p><p>下面简要介绍一下两者的三个区别：</p><p>1、接收的参数不一样</p><p>2、submit有返回值，而execute没有</p><p><font color='red'>线程池<strong>记得关闭，记得关闭，记得关闭</strong>啊喂！！！重要的事情说三遍！！！</font></p><h2 id="无返回值"><a href="#无返回值" class="headerlink" title="无返回值"></a>无返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.ThreadFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringValidationApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadFactory namedThreadPoolFactort;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">&quot;demo&quot;</span> +</span><br><span class="line">                <span class="string">&quot;-pool-%d&quot;</span>).build();</span><br><span class="line">        namedThreadPoolFactort = threadFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor pools = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">200</span>), namedThreadPoolFactort,</span><br><span class="line">            <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testNoReturn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这里参数要是一个实现了Rubable接口的类，这里为了方便直接写的lambda表达式</span></span><br><span class="line">        pools.execute(()-&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行中...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 待任务执行完毕后，关闭线程池</span></span><br><span class="line">        pools.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="有返回值"><a href="#有返回值" class="headerlink" title="有返回值"></a>有返回值</h2><p>使用get()方法后，会对代码进行阻塞，知道该线程执行完毕后，才会执行下一步，也就是关闭线程池。</p><p>下面的关闭线程池是待执行完毕后关闭，还有一个方式是强制关闭：<code>shutdownNow()</code>。慎用！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.ThreadFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringValidationApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadFactory namedThreadPoolFactort;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">&quot;demo&quot;</span> +</span><br><span class="line">                <span class="string">&quot;-pool-%d&quot;</span>).build();</span><br><span class="line">        namedThreadPoolFactort = threadFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor pools = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">200</span>), namedThreadPoolFactort,</span><br><span class="line">            <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testHasReturn</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 这里参数要是一个实现了Callable接口的类，这里为了方便直接写的lambda表达式</span></span><br><span class="line">        FutureTask&lt;Integer&gt; integerFutureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行中...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        pools.submit(integerFutureTask);</span><br><span class="line">        <span class="comment">// 获取返回值</span></span><br><span class="line">        System.out.println(integerFutureTask.get());</span><br><span class="line">        <span class="comment">// 待任务执行完毕后，关闭线程池</span></span><br><span class="line">        pools.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Stack</title>
      <link href="2019/12/03/Elastic%20Stack/"/>
      <url>2019/12/03/Elastic%20Stack/</url>
      
        <content type="html"><![CDATA[<h1 id="Elastic-Stack介绍"><a href="#Elastic-Stack介绍" class="headerlink" title="Elastic Stack介绍"></a>Elastic Stack介绍</h1><p>Elastic Stack是一个统称ELK为核心的技术栈。</p><p> “ELK”是三个开源项目的首字母缩写：Elasticsearch、Logstash 和 Kibana。</p><ul><li>Elasticsearch 是一个搜索和分析引擎。</li><li>Logstash 是一个服务器端的数据处理管道，可以同时从多个源获取数。</li><li>ibana提供了数据可视化。</li></ul><a id="more"></a><p>下面是Elastic Stack的组成部分：</p><p><img src="1.PNG"></p><ol><li>核心是ElasticSearch，它提供了数据的存储、搜索和分析。</li><li>Kibana提供了数据可视化，和管理Elastic Search。</li><li>Beats、Logstash提供了数据摄取的功能。<ol><li>Beats是一个轻量级别的数据摄取工具。</li><li>Logstash提供了类似于ELT的功能。</li></ol></li></ol><br><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>而ElasticSearch作为Elastic Stack的核心，下面来介绍如何安装和使用ElasticSearch。</p><br><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p><a href="https://www.elastic.co/cn/downloads/elasticsearch">ElasticSearch链接</a>，根据对应系统选择下载并安装！</p><p>下面我以window为例子，进行安装。</p><ol><li>下载安装包后解压，打开bin目录。</li><li>运行<code>bin\elasticsearch.bat</code>文件</li><li>访问<code>http://localhost:9200</code></li></ol><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><p><a href="https://www.elastic.co/cn/downloads/kibana">ElasticSearch链接</a>，根据对应系统选择下载并安装！</p><p>下面我以window为例子，进行安装。</p><ol><li>下载安装包后解压，打开conf目录。</li><li>修改<code>elasticsearch.hosts</code>属性，如实填写其值</li><li>首先保证elasticSearch已经在启动</li><li>运行<code>bin/kibana.bat</code></li><li>访问<code>http://localhost:5601</code></li></ol><p>界面如下，它的简况状态为red：</p><p><img src="2.PNG"></p><p>我们从他的日志中获取到原因：</p><p><font color='red'>两者版本不同，我们需要安装一致的版本;</font></p><p>当我更换版本再次启动的时候，log日志提醒我：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span>   [01:59:01.769] [warning][migrations] Another Kibana instance appears to be migrating the index. Waiting <span class="keyword">for</span> that migration to complete. If no other Kibana instance is attempting migrations, you can get past this message by deleting index .kibana_task_manager_1 and restarting Kibana.</span><br></pre></td></tr></table></figure><p>此时，我只能手动删除索引：.kibana_task_manager_1。如图所示：</p><p><img src="3.PNG"></p><p>重启kibana后，正常的界面如下：</p><p><img src="4.PNG"></p><hr><h1 id="Kibana-1"><a href="#Kibana-1" class="headerlink" title="Kibana"></a>Kibana</h1><p>我们通过Kibana的插件<code>开发工具</code>来访问ElasticSearch，在windows中直接操作ElasticSearch太不方便，连删除索引都得通过postman，现在我们使用Kibana中的开发工具。</p><p>开发工具是通过json文档的形式来操作ElasticSearch的。</p><br><p>下面我们通过开发工具来对ElasticSearch进行增删查改。</p><p>首先我们熟悉一下ElasticSearch的各个术语：</p><p>相比于关系型数据库而言：</p><ol><li>ElasticSearch的索引相当于数据库的表</li><li>ElasticSearch的文档相当于数据库表的每条记录</li><li>ElasticSearch的mapping相当于表结构，也就是索引的结构</li></ol><br><h2 id="操作索引"><a href="#操作索引" class="headerlink" title="操作索引"></a>操作索引</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>首先介绍一下索引分片：</p><p>索引分片就是把索引数据切分成多个小的索引块，这些小的索引块能够分发到同一个集群中的不同节点。在检索时，检索的结果是该索引每个分片上检索结果的总和。默认情况下（7版本前），ElasticSearch会为每个索引创建5个主分片，就算是单结点集群亦是如此。</p><p><strong><em>一、创建分片为1的索引</em></strong></p><p>在7.x版本，索引的默认分片就是为1，但是在其他版本是5个</p><p><code>PUT 索引名</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;setting&quot;</span>:&#123;<span class="attr">&quot;number_of_shards&quot;</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>二、其他</em></strong></p><p>还有其他的方法，是给索引添加数据时，如果索引没有则会创建索引，这部分在<font color='green'><a href="#%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE">新增数据</a></font>一节讲到。</p><br><h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h3><p><strong><em>一、查询索引内单个文档</em></strong></p><p>索引内的每条记录就相当于一个文档。</p><p>语法：<code>GET 索引/_doc/id</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_doc/6</span><br></pre></td></tr></table></figure><p><strong><em>二、查询索引本身</em></strong></p><p>语法：<code>GET 索引/_search</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_search</span><br></pre></td></tr></table></figure><br><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>语法：<code>DELETE 索引</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现以上，证明删除成功</p><br><h3 id="索引的结构-mapping"><a href="#索引的结构-mapping" class="headerlink" title="索引的结构-mapping"></a>索引的结构-mapping</h3><p>mapping又分为dynamic mapping和mapping。</p><p>当你创建索引，没有声明mapping时，会自动给这个索引建立一个dynamic mapping，但这个mapping不一定是你想要的，有时你插入的坐标数据他不能识别为geo_point，而是text。</p><p>所以，一般创建索引后，需要手动设置其的结构。</p><p>下面演示一个例子：</p><p>首先，创建一个分片为1的索引</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;setting&quot;</span>:&#123;<span class="attr">&quot;number_of_shards&quot;</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动设置mapping</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_mapping</span><br><span class="line">&#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;address&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;long&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;city&quot;</span> : &#123; <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>&#125;,</span><br><span class="line">        <span class="attr">&quot;country&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;location&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;province&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;user&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看索引的mapping：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_mapping</span><br></pre></td></tr></table></figure><hr><h2 id="索引数据的操作"><a href="#索引数据的操作" class="headerlink" title="索引数据的操作"></a>索引数据的操作</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>应上面<a href="#%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95">创建索引</a>一节，下面的添加数据到索引，如果索引不存在的话，会自动创建。</p><h4 id="添加单个文档"><a href="#添加单个文档" class="headerlink" title="添加单个文档"></a>添加单个文档</h4><p>语法为：<code>POST 索引/type/id &#123;&#125;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST my_index/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;zx1j&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;uid&quot;</span>: <span class="number">11</span>,</span><br><span class="line">  <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;beijing&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;province&quot;</span>: <span class="string">&quot;Beijing&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;country&quot;</span>: <span class="string">&quot;China&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：ElasticSearch在6版本以前一个索引是可以有多个type的，但是7版本只能有一个，8版本会完全删除掉type。</p><p>当my_index有type为type1时，创建成功会给你提示，意思是不推荐你使用type，要用_doc或者_create来代替。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#! Deprecation: [types removal] Specifying types in document index requests is deprecated, use the typeless endpoints instead (&#x2F;&#123;index&#125;&#x2F;_doc&#x2F;&#123;id&#125;, &#x2F;&#123;index&#125;&#x2F;_doc, or &#x2F;&#123;index&#125;&#x2F;_create&#x2F;&#123;id&#125;).</span><br></pre></td></tr></table></figure><p>当你已经有type1时，创建<code>POST my_index/type2/3</code>，会出现错误</p><p><font color='red'>所以，还是推荐你使用 <code>POST 索引/_doc/id</code>来创建索引。</font></p><h4 id="批量添加"><a href="#批量添加" class="headerlink" title="批量添加"></a>批量添加</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;my_index&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;zxj1&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;message1&quot;</span>, <span class="attr">&quot;uid&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">20</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国北京市海淀区&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;中国北京市海淀区&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;39.970718&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;116.325747&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;my_index&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;zxj2&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;message2&quot;</span>,<span class="attr">&quot;uid&quot;</span>:<span class="number">3</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">20</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;上海&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;上海&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;中国上海市xx&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;39.970718&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;116.325747&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;my_index&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;zxj3&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;message3&quot;</span>,<span class="attr">&quot;uid&quot;</span>:<span class="number">3</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">20</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;济南&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;济南&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;中国济南市天桥区&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;39.970718&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;116.325747&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;my_index&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;zxj4&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;message4&quot;</span>,<span class="attr">&quot;uid&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">20</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;天津&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;天津&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;中国天津市&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;39.970718&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;116.325747&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>{“index” : {“_index”:”my_index”}}中<code>my_index</code>是添加到哪个索引</p><p>语法如上述。添加完成后我们可以查询索引本身</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_search</span><br></pre></td></tr></table></figure><p>应命令要求，添加的值，最好不要展开执行。</p><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><h4 id="通过id修改"><a href="#通过id修改" class="headerlink" title="通过id修改"></a>通过id修改</h4><p>语法：<code>PUT 索引/_doc/id &#123;&#125;</code> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/6</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;哲学家&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;uid&quot;</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;province&quot;</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;country&quot;</span>: <span class="string">&quot;China&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过条件修改"><a href="#通过条件修改" class="headerlink" title="通过条件修改"></a>通过条件修改</h4><p>语法：<code>POST 索引/_update_by_query &#123;&#125;</code></p><p><code>_update_by_query</code>是一个api，它的作用是通过{}的条件来更改document内容。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST my_index/_update_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;script&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lang&quot;</span>: <span class="string">&quot;painless&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;ctx._source.city = params.city;ctx._source.province = params.province;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;province&quot;</span>: <span class="string">&quot;上海&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;zxj&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ctx._source.city = params.city;ctx._source.province = params.province;</code>文档中的city=命令参数中的city，对user=zxj的文档进行修改</p><br><h2 id="索引内数据的查询"><a href="#索引内数据的查询" class="headerlink" title="索引内数据的查询"></a>索引内数据的查询</h2><p>上述我们讲了索引的增删查改，下面我们对某索引下的数据进行查询。</p><p>为了保证结果一致，这里我们在重新建立一个索引，并加入一下数据</p><p>建立索引：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT twitter</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;<span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动设置mappring:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">PUT twitter/_mapping</span><br><span class="line">&#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;address&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;long&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;city&quot;</span> : &#123; <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>&#125;,</span><br><span class="line">        <span class="attr">&quot;country&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;location&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;province&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;user&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;twitter&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;双榆树-张三&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;今天天气不错，出去转转去&quot;</span>, <span class="attr">&quot;uid&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">20</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国北京市海淀区&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;中国北京市海淀区&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;39.970718&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;116.325747&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;twitter&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;东城区-老刘&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;出发，下一站，云南！&quot;</span>,<span class="attr">&quot;uid&quot;</span>:<span class="number">3</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">30</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;中国北京市东城区太极广三条3号&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;39.904313&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;116.412754&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;twitter&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;东城区-李四&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;happy birthday!&quot;</span>,<span class="attr">&quot;uid&quot;</span>:<span class="number">4</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">30</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;中国北京市东城区&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;39.893801&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;116.408986&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;twitter&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;朝阳区-老贾&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;123,gogogo&quot;</span>,<span class="attr">&quot;uid&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">50</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;中国北京市朝阳区建国门&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;39.718256&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;116.367910&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;twitter&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;朝阳区-老王&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;Happy Birthday My Friend!&quot;</span>,<span class="attr">&quot;uid&quot;</span>:<span class="number">6</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">20</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;中国北京市朝阳区国贸&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;39.918256&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;116.467910&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;twitter&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;虹桥-老吴&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;好友来了都今天我生日，好友来了，什么birthday happy 就成！&quot;</span>,<span class="attr">&quot;uid&quot;</span>:<span class="number">7</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">90</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;上海&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;上海&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;中国上海xxx区&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;31.175927&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;121.383328&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;twitter&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:<span class="string">&quot;GB&quot;</span>,<span class="attr">&quot;uid&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;province&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国&quot;</span>,<span class="attr">&quot;location&quot;</span>:&#123;<span class="attr">&quot;lat&quot;</span>:<span class="string">&quot;29.084661&quot;</span>,<span class="attr">&quot;lon&quot;</span>:<span class="string">&quot;111.335210&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><h4 id="单条件查询"><a href="#单条件查询" class="headerlink" title="单条件查询"></a>单条件查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;happy birthday&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;happy birthday&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一条直接结果3条，第二天执行结果2条。</p><p>因为使用了match和match_phrase：</p><p>match是全文搜索，也就是说这里的搜索条件是针对这个字段的全文，只要发现和搜索条件相关的Document，都会出现在最终的结果集中；match_phrased是词条搜索，字段中必须包含该值。</p><h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;<span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">      &#123;<span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;北京&quot;</span></span><br><span class="line">      &#125;&#125;,</span><br><span class="line">      &#123;<span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;30&quot;</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有多个条件进行查询时，要放入bool标签中，其中must代表里面的条件要同时成立</p><h4 id="非查询"><a href="#非查询" class="headerlink" title="非查询"></a>非查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;<span class="attr">&quot;must_not&quot;</span>: [</span><br><span class="line">      &#123;<span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;30&quot;</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>must_not代表不等于，即age!=30</p><h4 id="或查询"><a href="#或查询" class="headerlink" title="或查询"></a>或查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;<span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">      &#123;<span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;北京&quot;</span></span><br><span class="line">      &#125;&#125;,&#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;上海&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="地址查询"><a href="#地址查询" class="headerlink" title="地址查询"></a>地址查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;<span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">      &#123;<span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;北京&quot;</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;post_filter&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;geo_distance&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;distance&quot;</span>: <span class="string">&quot;5km&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;lat&quot;</span>: <span class="number">39.920086</span>,</span><br><span class="line">        <span class="attr">&quot;lon&quot;</span>: <span class="number">116.45418</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询距离39.920086，116.45418坐标5km以内的人</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;<span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">      &#123;<span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;北京&quot;</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;post_filter&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;geo_distance&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;distance&quot;</span>: <span class="string">&quot;5km&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;lat&quot;</span>: <span class="number">39.920086</span>,</span><br><span class="line">        <span class="attr">&quot;lon&quot;</span>: <span class="number">116.45418</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;39.920086,116.45418&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;asc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;unit&quot;</span>: <span class="string">&quot;km&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将查询结果，按照距离某坐标的距离进行升序排序</p><h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;gte&quot;</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">&quot;lte&quot;</span>: <span class="number">40</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;uid&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>range查询年龄在30-40之间的人</p><h4 id="范围聚合分析-aggs"><a href="#范围聚合分析-aggs" class="headerlink" title="范围聚合分析(aggs)"></a>范围聚合分析(aggs)</h4><p>aggs结果单成一组，不与query是一起的，最后结果会成为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="range"><a href="#range" class="headerlink" title="range"></a>range</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;age&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ranges&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;from&quot;</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">&quot;to&quot;</span>: <span class="number">30</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;from&quot;</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">&quot;to&quot;</span>: <span class="number">40</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;from&quot;</span>: <span class="number">40</span>,</span><br><span class="line">            <span class="attr">&quot;to&quot;</span>: <span class="number">50</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;NAME&quot;: &#123;</span><br><span class="line">      &quot;range&quot;: &#123;</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">对name进行范围分析</span><br><span class="line"></span><br><span class="line">&quot;range&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ranges&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;from&quot;</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="attr">&quot;to&quot;</span>: <span class="number">100</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">对field进行划分范围</span><br><span class="line"></span><br><span class="line">&quot;size&quot;:0</span><br><span class="line">不展示命中结果，我们此时只关注范围的分析结果</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;buckets&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span> : <span class="string">&quot;20.0-30.0&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;from&quot;</span> : <span class="number">20.0</span>,</span><br><span class="line">          <span class="attr">&quot;to&quot;</span> : <span class="number">30.0</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> : <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span> : <span class="string">&quot;30.0-40.0&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;from&quot;</span> : <span class="number">30.0</span>,</span><br><span class="line">          <span class="attr">&quot;to&quot;</span> : <span class="number">40.0</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> : <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span> : <span class="string">&quot;40.0-50.0&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;from&quot;</span> : <span class="number">40.0</span>,</span><br><span class="line">          <span class="attr">&quot;to&quot;</span> : <span class="number">50.0</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> : <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure><h5 id="term"><a href="#term" class="headerlink" title="term"></a>term</h5><p>term相当于 数据库中的group by</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">0</span>, </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;city&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;buckets&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span> : <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> : <span class="number">6</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span> : <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> : <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure><h4 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;happy birthday&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;message&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后结果会有</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;highlight&quot; : &#123;</span><br><span class="line">          &quot;message&quot; : [</span><br><span class="line">            <span class="string">&quot;&lt;em&gt;Happy&lt;/em&gt; &lt;em&gt;Birthday&lt;/em&gt; My Friend!&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="分析器分词"><a href="#分析器分词" class="headerlink" title="分析器分词"></a>分析器分词</h2><p>一般在put mapping时都会指定分词器。默认standard;</p><p>还有专门的分词器.</p><p>常见的分词器：</p><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: [<span class="string">&quot;Hello World&quot;</span>]</span><br><span class="line">  , <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;world&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">11</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: [<span class="string">&quot;Hello.World&quot;</span>]</span><br><span class="line">  , <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;simple&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;word&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;world&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">11</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;word&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全文搜索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分组函数</title>
      <link href="2019/12/02/%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0/"/>
      <url>2019/12/02/%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h1><p> 本博客简单介绍一下rollup和cube、grouping sets的用法，这些函数常用于分组统计，也是属于分析函数的一种 。</p><p>目前，我们只针对于Oracle、和postgreSQL运用这两个参数，其他数据库可能会有这些函数，但是不一定有那么多用法。</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>很多时候我们除了需要在报表中罗列出每个具体项的数据，还需要进行汇总，并且是不同维度的汇总。如果在展示表格的时候汇总，可能会比较慢，我们一般是把结果计算出来之后，以’ALL’或者’总计’,’汇总’等字样作为项的名称，然后放入汇总值。如果仅仅是所有行的汇总，一次聚合就搞定。但是不同维度的汇总就会很麻烦，所幸我们有 cube, rollup，grouping sets 函数。</p><a id="more"></a><p> tips：可能有人不懂什么是不同维度的聚合。比如下表： </p><table><thead><tr><th>部门</th><th>员工</th><th>total</th></tr></thead><tbody><tr><td>A</td><td>ZHAO</td><td>400</td></tr><tr><td>A</td><td>WANG</td><td>300</td></tr><tr><td>A</td><td>LI</td><td>200</td></tr><tr><td>B</td><td>DUAN</td><td>1300</td></tr><tr><td>A</td><td>DUAN</td><td>500</td></tr><tr><td>A</td><td>ZHANG</td><td>100</td></tr><tr><td>A</td><td></td><td>1500</td></tr><tr><td></td><td></td><td>2800</td></tr><tr><td>B</td><td></td><td>1300</td></tr></tbody></table><p>如图，上述是部门，人的工资，其中：</p><p>部门和员工都有值的记录是对部门下人工资的统计</p><p>其中只有员工没有值的记录是对此部门工资的统计</p><p>其中两列都没有值的记录是对所有部门工资的统计</p><p><br>如果不适用分组函数，要想在sql中实现这样的结果，可能就要写三次查询通过<code>union all</code>来拼装结果，这样无疑没有上述的处理要好</p><hr><h1 id="rollup函数"><a href="#rollup函数" class="headerlink" title="rollup函数"></a>rollup函数</h1><p>rollup 通常和group by语句一起使用，是根据维度在分组的结果集中进行聚合操作（通常为汇总，这取决于SELECT后的聚合函数）。</p><p>最常用的场景是：<font color='red'>为每个分组返回一个小计，同时为所有分组返回总计。 </font></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p><strong>不带rollup的group by</strong></p><p>Group by A ,B产生的分组种数：1种；</p><ul><li>group by A,B</li></ul><p>返回结果集：也就是这一种分组的结果集。</p><br><p><strong>带rollup但group by与rollup之间没有任何内容</strong></p><p>1）Group by rollup(A ,B) 产生的分组种数：3种；</p><ul><li>第一种：group by A,B</li><li>第二种：group by A</li><li>第三种：group by NULL(不分组)</li></ul><p>返回结果集：为以上三种分组统计结果集的并集且未去掉重复数据。</p><blockquote><p><strong>NOTE</strong></p><p>根据A，B分组，肯定现根据A，后根据B，最后的结果里不会出现只根据B的分组</p></blockquote><p>2）Group by rollup(A ,B,C) 产生的分组种数：4种；</p><ul><li><p>第一种：group by A,B,C</p></li><li><p>第二种：group by A,B</p></li><li><p>第三种：group by A</p></li><li><p>第四种：group by NULL</p></li></ul><p>返回结果集：为以上四种分组统计结果集的并集且未去掉重复数据。</p><br><p><strong>带rollup但group by与rollup之间还包含有列信息</strong></p><p>1）Group by A , rollup(A ,B) 产生的分组种数：3种；</p><ul><li>第一种：group by A,A,B 等价于group by A,B</li><li>第二种：group by A,A 等价于group by A</li><li>第三种：group by A,NULL 等价于group by A</li></ul><p>返回结果集：为以上三种分组统计结果集的并集且未去掉重复数据。</p><p>2）Group by C , rollup(A ,B) 产生的分组种数：3种；</p><ul><li>第一种：group by C,A,B</li><li>第二种：group by C,A</li><li>第三种：group by C,NULL 等价于group by C</li></ul><p>返回结果集：为以上三种分组统计结果集的并集且未去掉重复数据。</p><br><p><strong>带rollup且rollup子句括号内又使用括号对列进行组合</strong></p><p>1）Group by rollup((A ,B)) 产生的分组种数：2种；</p><ul><li>第一种：group by A,B</li><li>第二种：group by NULL</li></ul><p>返回结果集：为以上两种分组统计结果集的并集且未去掉重复数据。</p><p>2）Group by rollup(A ,(B,C)) 产生的分组种数：3种；</p><ul><li>第一种：group by A,B,C</li><li>第二种：group by A</li><li>第三种：group by NULL</li></ul><p>返回结果集：为以上三种分组统计结果集的并集且未去掉重复数据。</p><p>对这种情况，<font color="blue">可以理解为几个列被括号括在一起时，就只能被看成一个整体，分组时不需要再细化。</font>因此也可推断rollup括号内也顶多加到一重括号，加多重了应该没有任何意义（这个推断我没有做验证的哦）。</p><hr><h2 id="请注意"><a href="#请注意" class="headerlink" title="请注意"></a>请注意</h2><ol><li> rollup的功能可以使用多个group by和union来实现；</li><li> <font color='red'>mysql中也有with rollup语法，但比较简单。只实现了上面的第二种功能。而且oracle中rollup可以和order by一起使用（mysql中不可以）</font></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPART </span><br><span class="line">(部门 <span class="built_in">char</span>(<span class="number">10</span>),员工 <span class="built_in">char</span>(<span class="number">6</span>),工资 <span class="built_in">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPART <span class="keyword">SELECT</span> <span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;ZHANG&#x27;</span>,<span class="number">100</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPART <span class="keyword">SELECT</span> <span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;LI&#x27;</span>,<span class="number">200</span> ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPART <span class="keyword">SELECT</span> <span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;WANG&#x27;</span>,<span class="number">300</span>; </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPART <span class="keyword">SELECT</span> <span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;ZHAO&#x27;</span>,<span class="number">400</span> ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPART <span class="keyword">SELECT</span> <span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;DUAN&#x27;</span>,<span class="number">500</span> ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPART <span class="keyword">SELECT</span> <span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;DUAN&#x27;</span>,<span class="number">600</span> ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPART <span class="keyword">SELECT</span> <span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;DUAN&#x27;</span>,<span class="number">700</span>;</span><br></pre></td></tr></table></figure><p><strong>不带rollup的group by</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 部门,员工,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span> DEPART </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 部门,员工;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    部门    |  员工  | total</span><br><span class="line"><span class="comment">------------+--------+-------</span></span><br><span class="line"> A          | ZHAO   |   400</span><br><span class="line"> A          | WANG   |   300</span><br><span class="line"> A          | LI     |   200</span><br><span class="line"> B          | DUAN   |  1300</span><br><span class="line"> A          | DUAN   |   500</span><br><span class="line"> A          | ZHANG  |   100</span><br><span class="line">(6 行记录)</span><br></pre></td></tr></table></figure><p><br><strong>带rollup但group by与rollup之间没有任何内容</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 部门,员工,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span> DEPART </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">rollup</span>(部门,员工);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    部门    |  员工  | total</span><br><span class="line"><span class="comment">------------+--------+-------</span></span><br><span class="line">            |        |  2800   group by null</span><br><span class="line"> A          | ZHAO   |   400   group by 部门，员工</span><br><span class="line"> A          | WANG   |   300   group by 部门，员工</span><br><span class="line"> A          | LI     |   200   group by 部门，员工</span><br><span class="line"> B          | DUAN   |  1300   group by 部门，员工</span><br><span class="line"> A          | DUAN   |   500   group by 部门，员工</span><br><span class="line"> A          | ZHANG  |   100   group by 部门，员工</span><br><span class="line"> B          |        |  1300   group by 部门</span><br><span class="line"> A          |        |  1500   group by 部门</span><br><span class="line">(9 行记录)</span><br></pre></td></tr></table></figure><p><br><strong>带rollup但group by与rollup之间还包含有列信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 部门,员工,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span> DEPART </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 部门, <span class="keyword">rollup</span>(部门,员工);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    部门    |  员工  | total</span><br><span class="line"><span class="comment">------------+--------+-------</span></span><br><span class="line"> A          | ZHAO   |   400</span><br><span class="line"> A          | WANG   |   300</span><br><span class="line"> A          | LI     |   200</span><br><span class="line"> B          | DUAN   |  1300</span><br><span class="line"> A          | DUAN   |   500</span><br><span class="line"> A          | ZHANG  |   100</span><br><span class="line"> B          |        |  1300   group by 部门，部门=group by 部门</span><br><span class="line"> A          |        |  1500   group by 部门，部门=group by 部门</span><br><span class="line"> B          |        |  1300  group by 部门，NULL=group by 部门</span><br><span class="line"> A          |        |  1500  group by 部门，NULL=group by 部门</span><br><span class="line">(10 行记录)</span><br></pre></td></tr></table></figure><p><br><strong>带rollup且rollup子句括号内又使用括号对列进行组合</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 部门,员工,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span> DEPART </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  <span class="keyword">rollup</span>((部门,员工));</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    部门    |  员工  | total</span><br><span class="line"><span class="comment">------------+--------+-------</span></span><br><span class="line">            |        |  2800</span><br><span class="line"> A          | ZHAO   |   400</span><br><span class="line"> A          | WANG   |   300</span><br><span class="line"> A          | LI     |   200</span><br><span class="line"> B          | DUAN   |  1300</span><br><span class="line"> A          | DUAN   |   500</span><br><span class="line"> A          | ZHANG  |   100</span><br><span class="line">(7 行记录)</span><br></pre></td></tr></table></figure><p><br><strong>如果不使用rollup函数，来计算是什么样子</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 部门,员工,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL</span><br><span class="line"><span class="keyword">FROM</span> DEPART</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  <span class="keyword">rollup</span>(部门,员工);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 部门,员工,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span> DEPART </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 部门,员工 </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">SELECT</span> 部门,<span class="string">&#x27;NULL&#x27;</span>,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span> DEPART </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  部门 </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;NULL&#x27;</span>,<span class="string">&#x27;NULL&#x27;</span>,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span> DEPART</span><br></pre></td></tr></table></figure><hr><h1 id="rollup辅助函数"><a href="#rollup辅助函数" class="headerlink" title="rollup辅助函数"></a>rollup辅助函数</h1><h2 id="grouping"><a href="#grouping" class="headerlink" title="grouping()"></a>grouping()</h2><p>当我们使用rollup(A,B)时，产生的</p><p>group by A这一分组，在结果值中B这一列肯定是空的</p><p>group by A，B这一分组，在结果值中A，B两列肯定是空的</p><p>我们可以通过此函数来解决问题：</p><p>必须接受一列且只能接受一列做为其参数。参数列值为空返回1，参数列值非空返回0。</p><p>原始sql:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 部门,员工,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span> DEPART </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">rollup</span>(部门,员工);</span><br></pre></td></tr></table></figure><p>改良后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">GROUPING</span></span><br><span class="line">    (部门) </span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">    <span class="string">&#x27;合计&#x27;</span> <span class="keyword">ELSE</span> 部门 </span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> 部门 ,</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">GROUPING</span> (员工) </span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">    <span class="string">&#x27;所有员工&#x27;</span> <span class="keyword">ELSE</span> 员工 </span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> 员工,</span><br><span class="line">    <span class="keyword">SUM</span> (工资) <span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    DEPART </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    <span class="keyword">ROLLUP</span> (部门,员工 );</span><br></pre></td></tr></table></figure><hr><h1 id="cube函数"><a href="#cube函数" class="headerlink" title="cube函数"></a>cube函数</h1><p>cube函数使用方法和rollup完全一致，只是分组的结果有点差距。</p><p>rollup是cube的一种特殊情况，和rollup一样，cube也是根据维度在分组的结果集中进行聚合操作。但是rollup只在层次上对数据进行聚合，而cube对所有的维度进行聚合。</p><p>具有N个维度的列，<font color='red'>cube需要2的N次方次分组操作，而rollup只需要N+1次分组操作。</font></p><p>例如：</p><p>带cube子句的group by会产生更多的分组统计数据。cube后的列有多少种组合（注意组合是与顺序无关的）就会有多少种分组。</p><ol><li>假设有n个维度，rollup会有n个聚合：<br>rollup(a,b) 统计列包含：(a,b)、(a)、()<br>rollup(a,b,c) 统计列包含：(a,b,c)、(a,b)、(a)、()<br>……以此类推ing……</li><li>假设有n个纬度，cube会有2的n次方个聚合：<br>cube(a,b) 统计列包含：(a,b)、(a)、(b)、()<br>cube(a,b,c) 统计列包含：(a,b,c)、(a,b)、(a,c)、(b,c)、(a)、(b)、(c)、()<br>……以此类推ing……</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 部门,员工,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span> DEPART </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">cube</span>(部门,员工);</span><br></pre></td></tr></table></figure><hr><h1 id="grouping-sets-…"><a href="#grouping-sets-…" class="headerlink" title="grouping sets(…)"></a>grouping sets(…)</h1><p>通过该语句可以实现rollup、cube同样的功能。</p><ol><li>Group by grouping sets(A ,B) 产生的分组种数：2种；<ul><li>第一种：group by A</li><li>第二种：group by B</li></ul></li></ol><p>返回结果集：为以上两种分组统计结果集的并集且未去掉重复数据。</p><ol><li>Group by grouping sets (（A ,B）,A) 产生的分组种数：2种；<ul><li>第一种：group by A,B,A 等价于group by A,B</li><li>第二种：group by A,NULL 等价于group by A</li></ul></li></ol><p>返回结果集：为以上二种分组统计结果集的并集且未去掉重复数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 部门,员工,<span class="keyword">SUM</span>(工资)<span class="keyword">AS</span> TOTAL </span><br><span class="line"><span class="keyword">FROM</span> DEPART </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">grouping</span> <span class="keyword">sets</span>(部门,员工);</span><br></pre></td></tr></table></figure><hr><h1 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h1><ol><li>rollup(A,B)：(A,B),(A),()</li><li>cube(A,B)：(A,B),(A),(B),()</li><li>grouping sets(A ,B)：(A),(B)</li></ol>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus简介</title>
      <link href="2019/12/01/MybatisPlus%E7%AE%80%E4%BB%8B/"/>
      <url>2019/12/01/MybatisPlus%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><hr><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑 </li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作 </li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现<font color='red'>单表</font>大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求 </li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询 </li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库 </li></ol><hr><h1 id="支持的数据库"><a href="#支持的数据库" class="headerlink" title="支持的数据库"></a>支持的数据库</h1><ul><li>mysql 、 mariadb 、 oracle 、 db2 、 h2 、 hsql 、 sqlite 、 postgresql 、 sqlserver</li><li>达梦数据库 、 虚谷数据库 、 人大金仓数据库</li></ul><a id="more"></a><hr><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h2><p>创建一个空的spring boot项目。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>引入 <code>spring-boot-starter</code>、<code>spring-boot-starter-test</code>、<code>mybatis-plus-boot-starter</code>、<code>lombok</code>、<code>mysql</code> 依赖： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color='red'> 注意： mybatis-plus 自动的维护了mybatis以及mybatis-spring的依赖，在springboot中这三者不能同时的出现，避免版本的冲突，表示：跳进过这个坑。。。 </font></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 <code>application.yml</code> 配置文件中添加 数据库设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DataSource Config</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.postgresql.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">org.postgresql.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p><font color='red'>不要忘记，在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹 </font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.example.demo.plus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>编写实体类 <code>User.java</code>（此处使用了 <a href="https://www.projectlombok.org/">Lombok</a> 简化代码） </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> Long id;</span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"> <span class="keyword">private</span> Integer age;</span><br><span class="line"> <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Mapper类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>添加测试类，进行功能测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">     List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">     Assert.assertEquals(<span class="number">5</span>, userList.size());</span><br><span class="line">     userList.forEach(System.out::println);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>@TableName</p><p>描述：表名注解，一般写在实体类上面</p><p>@TableId</p><p>描述：主键注解，一般写在主键属性上面</p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">主键字段名</td></tr><tr><td align="center">type</td><td align="center">Enum</td><td align="center">否</td><td align="center">IdType.NONE</td><td align="center">主键类型</td></tr></tbody></table><p>type值可以取：</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AUTO</td><td align="center">数据库自增</td></tr><tr><td align="center">INPUT</td><td align="center">自行输入</td></tr><tr><td align="center">ID_WORKER</td><td align="center">分布式全局唯一ID 长整型类型</td></tr><tr><td align="center">UUID</td><td align="center">32位UUID字符串</td></tr><tr><td align="center">NONE</td><td align="center">无状态</td></tr><tr><td align="center">ID_WORKER_STR</td><td align="center">分布式全局唯一ID 字符串类型</td></tr></tbody></table><p><font color='blue'>一般我们都是通过自己来设置主键的值的，不通过他的自动生成，但是我们需要对实体类中的主键做出注解，type一般AUTO/INPUT</font></p><hr><p>@TableLogic</p><p>描述：表字段逻辑处理注解（逻辑删除）</p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">逻辑未删除值</td></tr><tr><td align="center">delval</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">逻辑删除值</td></tr></tbody></table><p>注意，使用此注解后，使用mybatis plus提供的方法当时删除一个或者查询值的时候，会根据你设置的逻辑删的字段，但是如果你自己在xml中写内容时，写什么就是什么。</p><p>例如：</p><p>这是我生成的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Topic</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;title&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;content&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;tag&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tag;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;in_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime inTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除为1，未删除为0</span></span><br><span class="line">    <span class="meta">@TableField(&quot;delete_status&quot;)</span></span><br><span class="line">    <span class="meta">@TableLogic(value = &quot;0&quot;, delval = &quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleteStatus;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我执行了其自带的删除方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println((<span class="string">&quot;----- deleteBatchIds method test ------&quot;</span>));</span><br><span class="line">       ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       list.add(<span class="number">16</span>);</span><br><span class="line">       list.add(<span class="number">18</span>);</span><br><span class="line">       topicMapper.deleteBatchIds(list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这是控制台为我打印的自动生成的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> topic <span class="keyword">SET</span> delete_status=<span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span> ( ? , ? ) <span class="keyword">AND</span> delete_status=<span class="number">0</span> </span><br></pre></td></tr></table></figure><p>但是如果你自己在xml写sql执行，你写什么，执行内容就是什么</p><hr><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><h2 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h2><p>我们所有的sql现在是不可见的，我们希望知道它是怎么执行的，所以我们必须要看日志！</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201021193901213.png" alt="image-20201021193901213"></p><h3 id="ID-WORKER"><a href="#ID-WORKER" class="headerlink" title="ID_WORKER"></a>ID_WORKER</h3><p>全局唯一id，使用了雪花算法</p><p>雪花算法： snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为 毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味 着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。可以保证几乎全球唯 一！</p><h3 id="ID-WORKER-STR"><a href="#ID-WORKER-STR" class="headerlink" title="ID_WORKER_STR"></a>ID_WORKER_STR</h3><p>全局唯一id的字符串版本</p><h2 id="自动填充🔺"><a href="#自动填充🔺" class="headerlink" title="自动填充🔺"></a>自动填充🔺</h2><p><strong>创建时间、修改时间！这些个操作一遍都是自动化完成的，我们不希望手动更新！</strong> </p><p>阿里巴巴开发手册：所有的数据库表：gmt_create、gmt_modified几乎所有的表都要配置上！而且需 要自动化！</p><blockquote><p>方式一：数据库级别（工作中不允许你修改数据库）</p></blockquote><p>设置默认数据库字段的默认值，更新时间设置修改时更新</p><blockquote><p>方式二：代码级别</p></blockquote><ol><li>删除数据库的默认值、更新操作！</li><li>实体类字段属性上需要增加注解</li><li>编写处理器来处理这个注解即可！</li></ol><p>实体类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ID_WORKER)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtModified;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Long version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDel;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理自动填充的类如下：<strong>请注意一定要注入Ioc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 一定不要忘记把处理器加到IOC容器中！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldFillHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 插入时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill.....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;gmtCreate&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;gmtModified&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill.....&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;gmtModified&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>开始测试</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201021200231827.png" alt="image-20201021200231827"></p><h2 id="代码生成器🔺"><a href="#代码生成器🔺" class="headerlink" title="代码生成器🔺"></a>代码生成器🔺</h2><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。 </p><p>手动执行该代码来自动生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      数据库连接设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">&quot;jdbc:postgresql://localhost:5432/test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DERIVE_CLASS = <span class="string">&quot;org.postgresql.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_USERNAME = <span class="string">&quot;postgres&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_PASSWD = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_HOME = <span class="string">&quot;com.example.demo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODULE_NAME = <span class="string">&quot;plus&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] tables = &#123;<span class="string">&quot;user&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">// 配置策略</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath+<span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;zxj&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);<span class="comment">// 代码生成后不打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>); <span class="comment">// 是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>); <span class="comment">// 去Service的I前缀</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER);<span class="comment">// 使用全局的唯一序列（雪花算法）</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setSwagger2(<span class="keyword">false</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、设置数据源</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(DB_URL);</span><br><span class="line">        dsc.setDriverName(DERIVE_CLASS);</span><br><span class="line">        dsc.setUsername(DB_USERNAME);</span><br><span class="line">        dsc.setPassword(DB_PASSWD);</span><br><span class="line">        dsc.setDbType(DbType.POSTGRE_SQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、包的配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(MODULE_NAME);</span><br><span class="line">        pc.setParent(PACKAGE_HOME);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line"></span><br><span class="line">        strategy.setInclude(tables); <span class="comment">// 设置要映射的表名</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>); <span class="comment">// 自动lombok；</span></span><br><span class="line">        <span class="comment">// 设置逻辑删除字段</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;is_del&quot;</span>);</span><br><span class="line">        <span class="comment">// 在实体类中移除is前缀</span></span><br><span class="line">        strategy.setEntityBooleanColumnRemoveIsPrefix(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 自动填充配置</span></span><br><span class="line">        TableFill gmtCreate = <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_create&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        TableFill gmtModified = <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_modified&quot;</span>,</span><br><span class="line">                FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tableFills.add(gmtCreate);</span><br><span class="line">        tableFills.add(gmtModified);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line">        <span class="comment">// 乐观锁</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line"></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>); <span class="comment">//</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        mpg.execute(); <span class="comment">//执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行实例：</p><p><img src="1.png"></p><p>最后生成以下内容：</p><p><img src="2.png"></p><h2 id="乐观锁🔺"><a href="#乐观锁🔺" class="headerlink" title="乐观锁🔺"></a>乐观锁🔺</h2><p>在面试过程中，我们经常会被问道乐观锁，悲观锁！这个其实非常简单！</p><p>在多线程机制下，并发操作成了问题。举个例子来说多个线程对一个商品的访问量进行加1操作（逻辑为查到访问量，进行内存中+1后，更新到数据库）：</p><p>此时有一种场景：两个线程同时读到了商品的访问量为20，两者都要把21刷入数据库，这时就错了。造成了丢失更新，这时引入乐观锁版本的概念就能防止这种操作，在更新时判断是否是自己读到的那个版本！</p><blockquote><p>乐观锁 : 故名思意十分乐观，它总是认为不会出现问题，无论干什么不去上锁！如果出现了问题， 再次更新值测试 </p><p>悲观锁：故名思意十分悲观，它总是认为总是出现问题，无论干什么都会上锁！再去操作！</p></blockquote><p>我们这里主要讲解 乐观锁机制！ 乐观锁实现方式：</p><ul><li>取出记录时，获取当前 version </li><li>更新时，带上这个version </li><li>执行更新时， set version = newVersion where version = oldVersion </li><li>如果version不对，就更新失败(此时可以通过类似<code>CAS</code>的自旋来实现最终刷入成功)</li></ul><blockquote><p>测试一下MP的乐观锁插件</p></blockquote><p>1、给数据库中增加version字段！</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201021200839470.png" alt="image-20201021200839470"></p><p>2、我们实体类加对应的字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Long version;</span><br></pre></td></tr></table></figure><p>3、注册组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试一下</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201021201226520.png" alt="image-20201021201226520"></p><p>此时我们发现由于引入了version乐观锁来保证了它的操作不会覆盖了use2的插入。那么如何保证最后一个插入的成功呢？<strong>自旋锁</strong></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201021201456675.png" alt="image-20201021201456675"></p><h2 id="自动分页插件🔺"><a href="#自动分页插件🔺" class="headerlink" title="自动分页插件🔺"></a>自动分页插件🔺</h2><p>接下来就是重点戏了！</p><h3 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a>添加配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   分页插件有什么用？</span></span><br><span class="line"><span class="comment">       .在mapper.java中编写如下接口</span></span><br><span class="line"><span class="comment">           IPage&lt;User&gt; queryAll(Page page);</span></span><br><span class="line"><span class="comment">       在mapper.xml中实现普通的查询语句即可，这里以全查为例</span></span><br><span class="line"><span class="comment">           &lt;select id=&quot;queryAll&quot; resultType=&quot;com.entity.User&quot;&gt;</span></span><br><span class="line"><span class="comment">               select * from user</span></span><br><span class="line"><span class="comment">           &lt;/select&gt;</span></span><br><span class="line"><span class="comment">       如上便是分页的代码啦，与前台的交互，相信大家没有问题的，这里就不再赘述了。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setOverflow(false);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>当你想使用他的自动分页时，就在你的Mapper接口中定义的方法添加Page参数；</p><p>请注意page是com.baomidou.mybatisplus.extension.plugins.pagination包中的</p><p>请注意：</p><p><font color='red'>如果自定义分页函数的返回值为IPage&lt;T&gt;,则分页信息page一定要放在参数第一位！</font></p><p>请看我的Mapper层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Product</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertBlob</span><span class="params">(Product product)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Product&gt; <span class="title">selectByMe</span><span class="params">(Page&lt;Product&gt; page)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>ps:Mapper类的返回值可以填写<code>IPage&lt;Product&gt;</code>这样还会附带分页信息~</font></p><p>Mapper的xml，我的具体实现没有写分页：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.boot.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通用查询结果列 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">        product_id, category_id, shop_id, product_name, product_price, product_img_url, product_uprice, product_num, product_detail, product_comment_num, product_hot, product_special, product_search_hot, base</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByMe&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">        select * from product</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，看我执行此方法时，打印的sql：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: select * from product LIMIT ?,? </span><br><span class="line">&#x3D;&#x3D;&gt;  Parameters: 4(Long), 4(Long)</span><br></pre></td></tr></table></figure><p>以上，就是如何使用自动分页插件！</p><h2 id="逻辑删除🔺"><a href="#逻辑删除🔺" class="headerlink" title="逻辑删除🔺"></a>逻辑删除🔺</h2><blockquote><p>物理删除 ：从数据库中直接移除 </p><p>逻辑删除 ：再数据库中没有被移除，而是通过一个变量来让他失效！ is_del= 0 =&gt; is_del = 1</p></blockquote><p>管理员可以查看被删除的记录！防止数据的丢失，类似于回收站！ </p><p>测试一下： </p><p>1、在数据表中增加一个 is_del字段</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201021202059309.png" alt="image-20201021202059309"></p><p>2、实体类中增加属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer isDel;</span><br></pre></td></tr></table></figure><p>3、**<em>配置**</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   分页插件有什么用？</span></span><br><span class="line"><span class="comment">       .在mapper.java中编写如下接口</span></span><br><span class="line"><span class="comment">           IPage&lt;User&gt; queryAll(Page page);</span></span><br><span class="line"><span class="comment">       在mapper.xml中实现普通的查询语句即可，这里以全查为例</span></span><br><span class="line"><span class="comment">           &lt;select id=&quot;queryAll&quot; resultType=&quot;com.entity.User&quot;&gt;</span></span><br><span class="line"><span class="comment">               select * from user</span></span><br><span class="line"><span class="comment">           &lt;/select&gt;</span></span><br><span class="line"><span class="comment">       如上便是分页的代码啦，与前台的交互，相信大家没有问题的，这里就不再赘述了。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setOverflow(false);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逻辑删除组件！</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="comment"># 声明mybatis的xml位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>4、测试删除</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20201021202450112.png" alt="image-20201021202450112"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://mybatis.plus/">http://mybatis.plus/</a></p><p><a href="https://www.bilibili.com/video/BV17E411N7KN">https://www.bilibili.com/video/BV17E411N7KN</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring参数校验</title>
      <link href="2019/11/30/Spring%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
      <url>2019/11/30/Spring%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数据的校验是交互式网站一个不可或缺的功能，前端的js校验可以涵盖大部分的校验职责，如用户名唯一性，生日格式，邮箱格式校验等等常用的校验。</p><p>但是我们从前台得到的数据是不可相信的，因为可能有某些用户绕过浏览器使用http工具直接向后端请求一些违法数据，这时候如果我们后端没有任何操作，有可能就使脏数据落入我们数据库中，也有可能直接使我们项目运行出现错误。</p><a id="more"></a><p>但是如果我们每次进行参数校验的话都进行如下操作，那么也太累了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(param1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> xxx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(param2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> xxx;</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>所以，我们将介绍使用validation来对数据进行校验。</p><hr><h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h1><p>本次实例使用的是maven构建的spring boot项目。</p><p>demo项目地址： <a href="https://github.com/XiangJie-Zhang/SpringValid">https://github.com/XiangJie-Zhang/SpringValid</a> </p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建校验实体类"><a href="#创建校验实体类" class="headerlink" title="创建校验实体类"></a>创建校验实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;ParamsValided&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamsValided</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;字符串&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;测试字符串不得为空，可以为\&quot;\&quot;&quot;, groups = &#123;FirstGroup.class&#125;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;测试字符串不得为空,不可以没有内容&quot;, groups = &#123;SecondGroup.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String testString;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;数字&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;测试数字不得为空，可以为\&quot;\&quot;&quot;, groups = &#123;FirstGroup.class, SecondGroup.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Long testLong;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;格式必须为邮箱！&quot;, groups = &#123;FirstGroup.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String testEmail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Tip：这里使用了Lombok来简化开发，请自行解决如何使用Lombok。同时使用了Swagger来调试接口。</p><h2 id="control层校验实体类"><a href="#control层校验实体类" class="headerlink" title="control层校验实体类"></a>control层校验实体类</h2><p>这里我们科普一下 <a href="https://blog.csdn.net/qq_27680317/article/details/79970590">@Validated与@Valid的区别</a></p><p>最后，在 Controller 中给参数对象添加 @Validated注解，并处理校验结果： </p><h3 id="校验失败时"><a href="#校验失败时" class="headerlink" title="校验失败时"></a>校验失败时</h3><h4 id="直接抛异常-最简单-什么也不管"><a href="#直接抛异常-最简单-什么也不管" class="headerlink" title="直接抛异常(最简单,什么也不管)"></a>直接抛异常(最简单,什么也不管)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;testNotNull&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;notNull检验！&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;testString&quot;, value = &quot;字符串&quot;,required = true, dataType =</span></span><br><span class="line"><span class="meta">                &quot;String&quot;,</span></span><br><span class="line"><span class="meta">        paramType = &quot;query&quot;, example = &quot;132&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;testLong&quot;, value = &quot;数字&quot;,required = true, dataType = &quot;Long&quot;,</span></span><br><span class="line"><span class="meta">                paramType = &quot;query&quot;, example = &quot;132&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;testEmail&quot;, value = &quot;邮箱&quot;,required = true, dataType = &quot;String&quot;,</span></span><br><span class="line"><span class="meta">                paramType = &quot;query&quot;, example = &quot;132&quot;),</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">testNotNull</span><span class="params">(<span class="meta">@ApiIgnore</span> <span class="meta">@Validated(FirstGroup.class)</span> ParamsValided paramsValided)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;参数校验成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，如果传来的参数不符合规范，那么这个请求直接就变为<font color="red"><strong>请求400错误</strong></font>，说明参数不规范。</p><p><img src="1.PNG"></p><h4 id="手动处理结果-不建议"><a href="#手动处理结果-不建议" class="headerlink" title="手动处理结果(不建议)"></a>手动处理结果(不建议)</h4><p><font color='red'>Tip：如果你有多个校验的对象，一定要按照一个校验对象一个BindingResult来声明参数位置！</font></p><p>例如： foo(@Validated Foo foo, BindingResult fooBindingResult ，@Validated Bar bar, BindingResult barBindingResult);即一个校验类对应一个校验结果。 </p><p>使该请求为200，但是需要手动编写错误信息返回：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/page&quot;)</span><br><span class="line">    public String result(@Validated Page page, BindingResult result)&#123;</span><br><span class="line">        if (result.hasErrors())&#123;</span><br><span class="line">            List&lt;ObjectError&gt; allErrors = result.getAllErrors();</span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            allErrors.forEach(error -&gt; sb.append(error.getDefaultMessage()).append(&quot;;&quot;));</span><br><span class="line">            return sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        return page.getCurrentPage() + &quot;, &quot; + page.getPageSize();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 这样做，每个 Controller 方法都要处理结果，也是很麻烦。 </p><h2 id="control层校验嵌套类型🔺"><a href="#control层校验嵌套类型🔺" class="headerlink" title="control层校验嵌套类型🔺"></a>control层校验嵌套类型🔺</h2><h3 id="被校验类T中包含被校验类E🔺"><a href="#被校验类T中包含被校验类E🔺" class="headerlink" title="被校验类T中包含被校验类E🔺"></a>被校验类T中包含被校验类E🔺</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Info info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;desc&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记一次嵌套校验</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发送请求，如下图：<code>&#123;&quot;name&quot;:&quot;zxj&quot;&#125;</code></p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200821204434464.png" alt="image-20200821204434464"></p><p><strong>发现我们没有传递<code>info</code>类的信息，接口都可以通过。</strong></p><p><font color="red"><strong>原因是，我们<code> @Valid</code>是校验<code>Info</code>类的内容，但是如果它的内容本身没有被传递的话是不会被校验的，这时我们可以根据自身的业务来定制。</strong></font>&gt;</p><ul><li>如果希望此字段传入才校验，这样就可以</li><li>如果限制此字段必须传入，然后校验需要加入<code>@notnull</code></li></ul><p><code>User</code>修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Info info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次测试：</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200821204716123.png" alt="image-20200821204716123"></p><p>发现代码不通过，校验成功。</p><h3 id="被校验类中包含被校验集合List-lt-E-gt-🔺"><a href="#被校验类中包含被校验集合List-lt-E-gt-🔺" class="headerlink" title="被校验类中包含被校验集合List&lt;E&gt;🔺"></a>被校验类中包含被校验集合List&lt;E&gt;🔺</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Info&gt; infos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;desc&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;params&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> Users user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发起请求发现，无论list不传或者是传空的。都不会校验类E。因为类E没有传，所以不会校验。</p><p><img src="https://zxj-typora.oss-cn-shanghai.aliyuncs.com/img/image-20200821205051464.png" alt="image-20200821205051464"></p><p><strong>如果list不能为空，且还要校验list内的实体类E时，可以这样修改，保证list必传，且有内容：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span></span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="meta">@Size(min = 1)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;list 不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Info&gt; infos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就不演示了。。</p><h2 id="control层校验基本类型"><a href="#control层校验基本类型" class="headerlink" title="control层校验基本类型"></a>control层校验基本类型</h2><p>上述已经说明了我们control层使用Bean作为参数时，各个属性的校验，其实这中用Bean作为参数的情况并不多，一般都是什么基本类型(<code>Integer</code>、<code>Long</code>)和引用类型(<code>String</code>)，这时候上述的无法使用。</p><p>我们直接在参数中这样<code>@NotNull(message = &quot;testString不能为null&quot;) String testString</code>也不起作用</p><p>这时，我们要在Controller的类上加上注解<code>@Validated</code>，就有作用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;base&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBaseController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="校验失败时-1"><a href="#校验失败时-1" class="headerlink" title="校验失败时"></a>校验失败时</h3><h4 id="直接抛异常-最简单-什么也不管-1"><a href="#直接抛异常-最简单-什么也不管-1" class="headerlink" title="直接抛异常(最简单,什么也不管)"></a>直接抛异常(最简单,什么也不管)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;base&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;testNotNull&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;notNull检验！&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;testString&quot;, value = &quot;字符串&quot;,required = true, dataType =</span></span><br><span class="line"><span class="meta">                    &quot;String&quot;,</span></span><br><span class="line"><span class="meta">            paramType = &quot;query&quot;, example = &quot;132&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;testString1&quot;, value = &quot;字符串1&quot;,required = true, dataType =</span></span><br><span class="line"><span class="meta">                    &quot;String&quot;,</span></span><br><span class="line"><span class="meta">                    paramType = &quot;query&quot;, example = &quot;132&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">testNotNull</span><span class="params">(<span class="meta">@NotNull(message = &quot;testString不能为null&quot;)</span> String testString,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="meta">@NotNull(message = &quot;testString1不能为null&quot;)</span> String testString1)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;参数校验成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="2.PNG"></p><p>此时，如果传来的参数不符合规范，那么这个请求直接就变为<font color="red"><strong>请求500错误</strong></font>，说明参数不规范。</p><p><font color="red">重要的事情说三遍，请注意不同，和实体类校验失败时不光使用方法不同，而且返回值不同一个500一个400</font></p><p><font color="red">重要的事情说三遍，请注意不同，和实体类校验失败时不光使用方法不同，而且返回值不同一个500一个400</font></p><p><font color="red">重要的事情说三遍，请注意不同，和实体类校验失败时不光使用方法不同，而且返回值不同一个500一个400</font></p><p>这里做出对比</p><p><img src="3.PNG"></p><h4 id="手动处理结果-不建议-1"><a href="#手动处理结果-不建议-1" class="headerlink" title="手动处理结果(不建议)"></a>手动处理结果(不建议)</h4><p><font color='red'>Tip：如果你有多个校验的对象，一定要按照一个校验对象一个BindingResult来声明参数位置！</font></p><p>这里和上面一样，不做叙述</p><p>这样做，每个 Controller 方法都要处理结果，也是很麻烦。 </p><h2 id="最优解"><a href="#最优解" class="headerlink" title="最优解"></a>最优解</h2><p>首先，一开始我是建议直接使用直接抛出异常的，因为400错误就是参数不规范，这时我并没有意识到还有检验基本类型这一操作。</p><p>当我意识到有校验基本类型操作时，这时我意识到这两者校验失败时返回的错误完全不一样，一个系统中有两个校验失败的样式，很不好，此时我打消了使用异常操作的方法。</p><p>但是，因为程序员很懒，所以第二种，手动写处理，肯定想都不想</p><p>所有我写了一个全局处理器，来专门处理这些错误。不给前台返回错误，给前台一个提示。这样就做到了不管校验什么数据，都一致的返回信息。</p><p>这里写了三种异常的处理，都是和参数校验相关的异常(最好按顺序写这三个异常，虽然我没测；但是感觉顺序乱了可能会失效)：</p><ol><li><code>BindException</code>是Bean的检验失败时抛出的异常，注意包不要导错。</li><li><code>ConstraintViolationException</code>是基本类型(没有使用<code>@responseBody</code>)校验时错误的异常</li><li><code>MethodArgumentNotValidException</code>是基本类型(有使用<code>@responseBody</code>)校验时错误的异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.awslzhang.validation.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.DefaultMessageSourceResolvable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> top.awslzhang.validation.common.ResponseEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolationException;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BindException</span></span><br><span class="line"><span class="comment">     *  //处理Get请求中 使用<span class="doctag">@Valided</span> 验证路径中请求实体类校验失败后抛出的异常，详情继续往下看代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleBindException</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        String message =</span><br><span class="line">                e.getBindingResult().getAllErrors().stream().map(DefaultMessageSourceResolvable::getDefaultMessage).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>  ResponseEntity.failed(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * //处理请求参数格式错误 <span class="doctag">@RequestParam</span>上validate失败后抛出的异常是javax.validation.ConstraintViolationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ConstraintViolationException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleValidationException</span><span class="params">(ConstraintViolationException e)</span> </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        String message =</span><br><span class="line">                e.getConstraintViolations().stream().map(ConstraintViolation::getMessage).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>  ResponseEntity.failed(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求参数格式错误 <span class="doctag">@RequestBody</span>上validate失败后抛出的异常是MethodArgumentNotValidException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        String message =</span><br><span class="line">                e.getBindingResult().getAllErrors().stream().map(DefaultMessageSourceResolvable::getDefaultMessage).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.failed(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="bean校验效果"><a href="#bean校验效果" class="headerlink" title="bean校验效果"></a>bean校验效果</h3><p><img src="4.PNG"></p><p><img src="5.PNG"></p><p><img src="6.PNG"></p><h3 id="基本类型校验"><a href="#基本类型校验" class="headerlink" title="基本类型校验"></a>基本类型校验</h3><p><img src="7.PNG"></p><p><img src="8.PNG"></p><h1 id="常用注解约束"><a href="#常用注解约束" class="headerlink" title="常用注解约束"></a>常用注解约束</h1><table><thead><tr><th>注解</th><th>验证的数据类型</th><th>功能</th></tr></thead><tbody><tr><td>@AssertFalse</td><td>Boolean,boolean</td><td>验证注解的元素值是false</td></tr><tr><td>@AssertTrue</td><td>Boolean,boolean</td><td>验证注解的元素值是true</td></tr><tr><td>@NotNull</td><td>任意类型</td><td>验证注解的元素值不是null(但是String可以是””，数字类型不行)</td></tr><tr><td>@Null</td><td>任意类型</td><td>验证注解的元素值是null</td></tr><tr><td>@Min(value=值)</td><td>BigDecimal，BigInteger, byte,short, int, long，等任何Number或CharSequence（存储的是数字）子类型</td><td>验证注解的元素值大于等于@Min指定的value值</td></tr><tr><td>@Max（value=值）</td><td>和@Min要求一样</td><td>验证注解的元素值小于等于@Max指定的value值</td></tr><tr><td>@DecimalMin(value=值)</td><td>和@Min要求一样</td><td>验证注解的元素值大于等于@ DecimalMin指定的value值</td></tr><tr><td>@DecimalMax(value=值)</td><td>和@Min要求一样</td><td>验证注解的元素值小于等于@ DecimalMax指定的value值</td></tr><tr><td>@Digits(integer=整数位数, fraction=小数位数)</td><td>和@Min要求一样</td><td>验证注解的元素值的整数位数和小数位数上限</td></tr><tr><td>@Size(min=下限, max=上限)</td><td>字符串、Collection、Map、数组等</td><td>验证注解的元素值的在min和max（包含）指定区间之内，如字符长度、集合大小</td></tr><tr><td>@Past</td><td>java.util.Date,java.util.Calendar;类库的日期类型</td><td>验证注解的元素值（日期类型）比当前时间早</td></tr><tr><td>@Future</td><td>与@Past要求一样</td><td>验证注解的元素值（日期类型）比当前时间晚</td></tr><tr><td>@NotBlank</td><td>CharSequence子类型(数字不行，一般是String)</td><td>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的首位空格</td></tr><tr><td>@NotEmpty</td><td>CharSequence子类型、Collection、Map、数组</td><td>验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td></tr><tr><td>@Length(min=下限, max=上限)</td><td>CharSequence子类型</td><td>验证注解的元素值长度在min和max区间内</td></tr><tr><td>@Range(min=最小值, max=最大值)</td><td>BigDecimal,BigInteger,CharSequence, byte, short, int, long等原子类型和包装类型</td><td>验证注解的元素值在最小值和最大值之间</td></tr><tr><td>@Email(regexp=正则表达式,flag=标志的模式)</td><td>CharSequence子类型（如String）</td><td>验证注解的元素值是Email，也可以通过regexp和flag指定自定义的email格式</td></tr><tr><td>@Pattern(regexp=正则表达式,flag=标志的模式)</td><td>String，任何CharSequence的子类型</td><td>验证注解的元素值与指定的正则表达式匹配</td></tr><tr><td>@Valid</td><td>任何非原子类型</td><td>指定递归验证关联的对象如用户对象中有个地址对象属性，如果想在验证用户对象时一起验证地址对象的话，在地址对象上加@Valid注解即可级联验证</td></tr></tbody></table><p> 此处只列出Hibernate Validator提供的大部分验证约束注解，请参考hibernate validator官方文档了解其他验证约束注解和进行自定义的验证约束注解定义。 </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> web后端 </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> spring validation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开窗函数</title>
      <link href="2019/11/29/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/"/>
      <url>2019/11/29/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="开窗函数简介"><a href="#开窗函数简介" class="headerlink" title="开窗函数简介"></a>开窗函数简介</h1><h2 id="开窗函数定义"><a href="#开窗函数定义" class="headerlink" title="开窗函数定义"></a>开窗函数定义</h2><p>所谓开窗函数就是定义一个行为列。</p><p>简单讲，<font color='red'>就是在你查询的结果上，直接多出一列值（可以是聚合值或是排序号），特征就是带有over（）。 </font></p><p>就是为每一行开窗(指定范围)，在窗内处理范围内数据，并输出在这一行。</p><p>开窗函数里的”窗”，即”窗口”，表示分析函数分析时要处理的数据范围；比如分析函数sum()，它所针对的数据范围为窗口中的记录，而不是整个表的记录，要获取某个范围的sum值，则需在窗口指定具体的数据范围，比如指定该窗口从该分组中的第一行到最后一行,那么该组中的每一个sum值都会一样，即整个组的总和</p><hr><h2 id="函数执行时机"><a href="#函数执行时机" class="headerlink" title="函数执行时机"></a>函数执行时机</h2><p> FROM，JOIN，WHERE，GROUP BY，HAVING，<font color='red'>开窗</font>，ORDER BY，LIMIT，SELECT，DISTINCT</p><p> 换言之，执行时机为，已经确定好查询的数据后，分析这些数据</p><a id="more"></a><hr><h2 id="函数使用位置-规范"><a href="#函数使用位置-规范" class="headerlink" title="函数使用位置/规范"></a>函数使用位置/规范</h2><p>select 关键字后/子句</p><p>分析函数()  <code>over(partition by xxx order by yyy rows between zzz and zzz)</code></p><p>开窗函数就是over()，over()指定范围数据分区或者排序。</p><p>分析函数是只一些对窗口内的数据处理后返回一行的数据，可以是：<code>排序类(rank、row_number)、sum、count、avg</code></p><p>然后分析函数对over()函数设置的数据开始计算。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ROW_NUMBER ( ) <span class="keyword">OVER</span> ( <span class="keyword">ORDER</span> <span class="keyword">BY</span> fsalary <span class="keyword">DESC</span> ) <span class="keyword">AS</span> <span class="string">&quot;排序1&quot;</span> ,</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    T_PERSON</span><br></pre></td></tr></table></figure><p>OVER ( ORDER BY fsalary DESC )对所有数据根据fsalary降序排序后，然后使用ROW_NUMBER ( )来为每一条数据添加伪列。</p><hr><p><strong>窗口子句(rows)的相关关键字：</strong></p><ul><li><strong>preceding：表示在…之前</strong><ol><li><code>1 preceding</code>：表示当前记录的前1条记录</li><li><code>n preceding</code>：表示当前记录的前n条记录</li><li><code>unbounded preceding</code>：不受控制的，无限的<ul><li>若无分组，则表示所有记录的第1条记录</li><li>若有分组，则表示分组后，组内的第1条记录</li></ul></li></ol></li><li><strong>following：表示在…之后</strong><ol><li><code>1 following</code>：表示当前记录的后一条记录</li><li><code>n following</code>：表示当前记录的后n条记录</li><li><code>unbounded following</code>：不受控制的，无限的<ul><li>若无分组，则表示所有记录的最后一条记录</li><li>若有分组，则表示分组后，组内的最后一条记录</li></ul></li></ol></li></ul><p><strong>样例</strong></p><ol><li><code>rows between unbounded preceding and unbounded following</code>：针对所有记录</li><li><code>rows between unbounded preceding and current row</code>：针对第一条记录到当前记录</li><li><code>rows between current row and unbounded following</code>：针对当前记录到最后一条记录</li><li><code>rows between 1 preceding and current row</code>：针对当前记录的上一行记录到当前行记录</li><li><code>rows between current row and 3 following</code>：针对当前记录到当前行记录的后三条记录</li><li><code>rows between 1 preceding and 2 following</code>：针对当前记录的上一条记录 ~~ 当前行记录的后两条记录</li><li><strong>当开窗函数over()出现分组(partition by)子句时，<code>unbounded preceding</code>即表中一个分组里的第一行，<code>unbounded following</code>即表中一个分组里的最后一行</strong></li><li><strong>当开窗函数over()省略了分组(partition by)子句时，<code>unbounded preceding</code>即表中的第一行， <code>unbounded following</code>即表中的最后一行</strong></li></ol><h2 id="与聚合函数的区别"><a href="#与聚合函数的区别" class="headerlink" title="与聚合函数的区别"></a>与聚合函数的区别</h2><p>聚合函数将多行数据聚合成一行。</p><p>开窗函数输入行=输出行。</p><p>因此，使用开窗函数，可能要时常伴有去重distinct。</p><h2 id="支持的数据库"><a href="#支持的数据库" class="headerlink" title="支持的数据库"></a>支持的数据库</h2><p>Oracle、SQL Server、DB2、PostgreSQL。</p><hr><h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>我这里使用的是 Windows PostgreSQL 12.0 </p><p>排序需要使用的内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_scores(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">studentId <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">language</span> <span class="built_in">int</span>,</span><br><span class="line">math <span class="built_in">int</span>,</span><br><span class="line">english <span class="built_in">int</span>,</span><br><span class="line">classId <span class="built_in">text</span>,</span><br><span class="line">departmentId <span class="built_in">text</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 写入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  student_scores <span class="keyword">values</span> </span><br><span class="line">  (<span class="number">1</span>,<span class="number">111</span>,<span class="number">68</span>,<span class="number">69</span>,<span class="number">90</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department1&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>,<span class="number">112</span>,<span class="number">73</span>,<span class="number">80</span>,<span class="number">96</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department1&#x27;</span>),</span><br><span class="line">  (<span class="number">3</span>,<span class="number">113</span>,<span class="number">90</span>,<span class="number">74</span>,<span class="number">75</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department1&#x27;</span>),</span><br><span class="line">  (<span class="number">4</span>,<span class="number">114</span>,<span class="number">89</span>,<span class="number">94</span>,<span class="number">93</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department1&#x27;</span>),</span><br><span class="line">  (<span class="number">5</span>,<span class="number">115</span>,<span class="number">99</span>,<span class="number">93</span>,<span class="number">89</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department1&#x27;</span>),</span><br><span class="line">  (<span class="number">6</span>,<span class="number">121</span>,<span class="number">96</span>,<span class="number">74</span>,<span class="number">79</span>,<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;department1&#x27;</span>),</span><br><span class="line">  (<span class="number">7</span>,<span class="number">122</span>,<span class="number">89</span>,<span class="number">86</span>,<span class="number">85</span>,<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;department1&#x27;</span>),</span><br><span class="line">  (<span class="number">8</span>,<span class="number">123</span>,<span class="number">70</span>,<span class="number">78</span>,<span class="number">61</span>,<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;department1&#x27;</span>),</span><br><span class="line">  (<span class="number">9</span>,<span class="number">124</span>,<span class="number">76</span>,<span class="number">70</span>,<span class="number">76</span>,<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;department1&#x27;</span>),</span><br><span class="line">  (<span class="number">10</span>,<span class="number">211</span>,<span class="number">89</span>,<span class="number">93</span>,<span class="number">60</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>),</span><br><span class="line">  (<span class="number">11</span>,<span class="number">212</span>,<span class="number">76</span>,<span class="number">83</span>,<span class="number">75</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>),</span><br><span class="line">  (<span class="number">12</span>,<span class="number">213</span>,<span class="number">71</span>,<span class="number">94</span>,<span class="number">90</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>),</span><br><span class="line">  (<span class="number">13</span>,<span class="number">214</span>,<span class="number">94</span>,<span class="number">94</span>,<span class="number">66</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>),</span><br><span class="line">  (<span class="number">14</span>,<span class="number">215</span>,<span class="number">84</span>,<span class="number">82</span>,<span class="number">73</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>),</span><br><span class="line">  (<span class="number">15</span>,<span class="number">216</span>,<span class="number">85</span>,<span class="number">74</span>,<span class="number">93</span>,<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>),</span><br><span class="line">  (<span class="number">16</span>,<span class="number">221</span>,<span class="number">77</span>,<span class="number">99</span>,<span class="number">61</span>,<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>),</span><br><span class="line">  (<span class="number">17</span>,<span class="number">222</span>,<span class="number">80</span>,<span class="number">78</span>,<span class="number">96</span>,<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>),</span><br><span class="line">  (<span class="number">18</span>,<span class="number">223</span>,<span class="number">79</span>,<span class="number">74</span>,<span class="number">96</span>,<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>),</span><br><span class="line">  (<span class="number">19</span>,<span class="number">224</span>,<span class="number">75</span>,<span class="number">80</span>,<span class="number">78</span>,<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>),</span><br><span class="line">  (<span class="number">20</span>,<span class="number">225</span>,<span class="number">82</span>,<span class="number">85</span>,<span class="number">63</span>,<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;department2&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="开窗函数分类"><a href="#开窗函数分类" class="headerlink" title="开窗函数分类"></a>开窗函数分类</h1><p>根据使用的目的，开窗函数可以分为：排序开窗函数、最值函数、偏移函数</p><p><strong>三种常用的<font color='green'>排序开窗函数</font>:</strong> </p><ol><li>ROW_NUMBER() OVER () ;  </li><li>RANK() OVER ();</li><li>DENSE_RANK() OVER () ;</li></ol><p><strong>常用的分析函数取首值和尾值</strong>：</p><ol><li>FIRST_VALUE();  </li><li>LAST_VALUE ();</li></ol><p>用在开窗函数外：例如，对开窗函数的数据取特定行：<code>FIRST_VALUE ( english ) OVER ( PARTITION BY departmentid, classid ORDER BY english DESC ) AS sort </code></p><p><strong>常用的偏移函数</strong>：</p><ol><li>LAG(filed, num, defaultValue)：filed需要查找的字段；num往前查找的第num行的数据；defaultValue没有符合条件的默认值。</li><li>LEAG(filed, num, defaultValue)：filed需要查找的字段；num往后查找的第num行的数据；defaultValue没有符合条件的默认值。</li></ol><p>用在开窗函数外：例如，对开窗函数的数据中这一列延后展示一行：<code>LEAG ( english,1,NULL ) OVER ( PARTITION BY departmentid, classid ORDER BY english DESC ) AS sort </code></p><p><strong>如果想在开窗内指定某些行处理，则需要在开窗函数<code>over()</code>中使用<code>rows between</code> ，指定某些行</strong></p><h2 id="排序-开窗函数"><a href="#排序-开窗函数" class="headerlink" title="排序+开窗函数"></a>排序+开窗函数</h2><p>排序开窗函数有三种，其中的不同在于：</p><ol><li>ROW_NUMBER ( )：生成唯一的序号，值相同，序号也不同</li><li>RANK ( )：当值相同时，序号相同，跳过之前本应该有的值 ，例如：  5  5  7</li><li>DENSE_RANK() ：当值相同时，序号相同    ，例如：5 5 6</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span></span><br><span class="line">    ,</span><br><span class="line">    studentid,</span><br><span class="line">    english,</span><br><span class="line">    ROW_NUMBER () <span class="keyword">OVER</span> ( <span class="keyword">ORDER</span> <span class="keyword">BY</span> english <span class="keyword">DESC</span> ) <span class="keyword">AS</span> By_RowNumber,</span><br><span class="line">    <span class="keyword">RANK</span> () <span class="keyword">OVER</span> ( <span class="keyword">ORDER</span> <span class="keyword">BY</span> english <span class="keyword">DESC</span> ) <span class="keyword">AS</span> By_rank,</span><br><span class="line">    <span class="keyword">DENSE_RANK</span> () <span class="keyword">OVER</span> ( <span class="keyword">ORDER</span> <span class="keyword">BY</span> english <span class="keyword">DESC</span> ) <span class="keyword">AS</span> By_dense_rank </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    student_scores</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">18    223    96    1    1    1</span><br><span class="line">2    112    96    2    1    1</span><br><span class="line">17    222    96    3    1    1</span><br><span class="line">15    216    93    4    4    2</span><br><span class="line">4    114    93    5    4    2</span><br><span class="line">12    213    90    6    6    3</span><br><span class="line">1    111    90    7    6    3</span><br><span class="line">5    115    89    8    8    4</span><br><span class="line">7    122    85    9    9    5</span><br><span class="line">6    121    79    10    10    6</span><br><span class="line">19    224    78    11    11    7</span><br></pre></td></tr></table></figure><h2 id="首尾值函数-开窗函数"><a href="#首尾值函数-开窗函数" class="headerlink" title="首尾值函数+开窗函数"></a>首尾值函数+开窗函数</h2><p>FIRST_VALUE()：获取窗口内第一个值</p><p>LAST_VALUE()：获取窗口内最后一个值</p><p>举个例子，获取到每个department、class中的英语分数最高分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">    departmentid,</span><br><span class="line">    classid,</span><br><span class="line">    <span class="keyword">FIRST_VALUE</span> ( english ) <span class="keyword">OVER</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> departmentid, classid <span class="keyword">ORDER</span> <span class="keyword">BY</span> english <span class="keyword">DESC</span> ) <span class="keyword">AS</span> <span class="keyword">sort</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    student_scores</span><br></pre></td></tr></table></figure><h2 id="分组-开窗函数-hive"><a href="#分组-开窗函数-hive" class="headerlink" title="分组+开窗函数(hive)"></a>分组+开窗函数(hive)</h2><p>对开窗函数的数据(有序的)之后进行分组操作。</p><p><code>NTILE(n)</code>：把有序分区中的行分发到指定数据的组中，各个组有编号，编号从1开始。n必须为int类型。</p><p><strong>处理场景：</strong></p><p>对于某一列的数据，展示百分比的内容。例如：查询前20%时间的订单信息。</p><p>即，对时间一列进行开窗排序后，使用<code>ntile(5)</code>分为5组，这样第一组的数据就是前20%！！！</p><h2 id="偏移量-开窗函数"><a href="#偏移量-开窗函数" class="headerlink" title="偏移量+开窗函数"></a>偏移量+开窗函数</h2><p><code>LAG(col,n,default_val)</code>：往前第n行数据</p><p><code>LEAD(col,n, default_val)</code>：往后第n行数据</p><p>对开窗函数处理好的数据(窗内数据)，展示本行的前/后几行数据。</p><p><strong>处理场景</strong>：</p><p>查看顾客上次的购买时间：首先对顾客分区，时间排序。然后分析函数采用<code>LAG</code>展示前一行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,orderdate,<span class="keyword">cost</span>, </span><br><span class="line">lag(orderdate,<span class="number">1</span>,<span class="string">&#x27;1900-01-01&#x27;</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate ) <span class="keyword">as</span> time1</span><br><span class="line"><span class="keyword">from</span> business;</span><br></pre></td></tr></table></figure><h1 id="什么时候该用开窗函数"><a href="#什么时候该用开窗函数" class="headerlink" title="什么时候该用开窗函数"></a>什么时候该用开窗函数</h1><p> <em>平常我们使用 hive或者 mysql时，一般聚合函数用的比较多。但对于某些偏分析的需求，group by可能很费力，子查询很多，这个时候就需要使用窗口分析函数了~</em> </p><p>例如：上述我们要求每个部英语最高分和每个班数学最高分，用group by不能同时计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">    departmentid,</span><br><span class="line">    classid,</span><br><span class="line">    <span class="keyword">FIRST_VALUE</span> ( math ) <span class="keyword">OVER</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> departmentid <span class="keyword">ORDER</span> <span class="keyword">BY</span> english <span class="keyword">DESC</span> ) <span class="keyword">AS</span> bu_high,</span><br><span class="line">    <span class="keyword">FIRST_VALUE</span> ( math ) <span class="keyword">OVER</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> classid <span class="keyword">ORDER</span> <span class="keyword">BY</span> english <span class="keyword">DESC</span> ) <span class="keyword">AS</span> class_high</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    student_scores</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开窗函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL入门</title>
      <link href="2019/11/29/PostgreSQL%E5%85%A5%E9%97%A8/"/>
      <url>2019/11/29/PostgreSQL%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>根据自身的需要下载和安装PostgreSQL。<a href="https://www.postgresql.org/download/">下载链接</a></p><p>这里我安装的是Windows PostgreSQL 12.0 Installation;</p><p>正常情况下，安装完成后，PostgreSQL服务器会自动在本机的5432端口开启。</p><a id="more"></a><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>如果想对数据库进行操作我们需要先连接到数据库，下面介绍几种常用的连接数据库的方法。</p><h3 id="psql-控制台"><a href="#psql-控制台" class="headerlink" title="psql 控制台"></a><strong>psql 控制台</strong></h3><p> 初次安装后，默认生成一个名为postgres的数据库和一个名为postgres的数据库用户。 </p><blockquote><p>首先，打开psql命令行，根据提示输入<code>Server</code>、<code>Database</code>、<code>Port</code>、<code>Username</code>、<code>口令</code>来完成登陆。</p><p>如果出现以下任一内容，证明已经登陆成功。两者的区别在于<code>#</code>和<code>&gt;</code>，<code>#</code> 提示符意味着你是数据库超级用户 。作为超级用户意味着你不受访问控制的限制 。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment">#</span></span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line">anyuser=&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="pgAdmin服务"><a href="#pgAdmin服务" class="headerlink" title="pgAdmin服务"></a>pgAdmin服务</h3><p> pgAdmin是PostgreSQL（世界上最先进的开源数据库）中最受欢迎和功能最丰富的开源管理和开发平台。 </p><blockquote><p>我们需要手动开启pgadmin服务，这里以windows系统为例，找到我们PostgreSQL的安装路径。默认安装位置为<code>C:\Program Files\PostgreSQL\12</code>。</p><p>然后根据你的安装路径来打开<code>/pgAdmin 4/bin/pgAdmin4.exe</code>。</p><p>此时pgAdmin会以网页的形式打开，如果没有打开可以手动访问<code>http://127.0.0.1:63891/browser/ </code></p></blockquote><h2 id="新增数据库"><a href="#新增数据库" class="headerlink" title="新增数据库"></a>新增数据库</h2><p>创建数据库既可以通过psql来创建，也可以通过bash中使用特定命令来创建。</p><h3 id="psql方式"><a href="#psql方式" class="headerlink" title="psql方式"></a>psql方式</h3><blockquote><p>首先，使用上述的psql连接数据库成功后，直接执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mydb;</span><br></pre></td></tr></table></figure><p>然后，执行<code>\l</code>命令查询所有数据库，确认是否创建成功:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\l</span><br></pre></td></tr></table></figure></blockquote><h3 id="bash方式"><a href="#bash方式" class="headerlink" title="bash方式"></a>bash方式</h3><blockquote><p>首先 <code>win + r</code> 输入<code>cmd</code>打开命令行</p><p>然后，输入<code>createdb -U postgres mydb</code>，-U后面要制定使用的用户</p><p>如果此时出现了<code>&#39;createdb&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。</code>不要担心，把postgreSQL安装目录下的bin文件加入环境变量即可。</p></blockquote><hr><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- psql</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> mydb;</span><br><span class="line"><span class="comment">-- 在bash中(注意有无分号)</span></span><br><span class="line">dropdb -U postgres mydb</span><br></pre></td></tr></table></figure><h1 id="psql常用命令"><a href="#psql常用命令" class="headerlink" title="psql常用命令"></a>psql常用命令</h1><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>\password</td><td>设置密码</td></tr><tr><td>\h</td><td>查看SQL命令解释</td></tr><tr><td>?</td><td>查看psql命令列表</td></tr><tr><td>\l</td><td>列出所有数据库</td></tr><tr><td>\c [database_name]</td><td>连接其他数据库</td></tr><tr><td>\d</td><td>列出当前数据库的表</td></tr><tr><td>\d [table_name]</td><td>列出某个表的数据结构</td></tr><tr><td>\du</td><td>列出所有用户</td></tr><tr><td>\e</td><td>打开文本编辑器</td></tr><tr><td>\q</td><td>离开</td></tr><tr><td>\conninfo</td><td>列出当前数据库和连接信息</td></tr></tbody></table><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>这里只列举了一些数据类型。</p><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>数字类型由2、4或8字节的整数以及4或8字节的浮点数和可选精度小数组成。</p><table><thead><tr><th>名字</th><th>存储尺寸</th><th>描述</th><th>范围</th></tr></thead><tbody><tr><td><code>smallint</code></td><td>2字节</td><td>小范围整数</td><td>-32768 to +32767</td></tr><tr><td><code>integer</code></td><td>4字节</td><td>整数的典型选择</td><td>-2147483648 to +2147483647</td></tr><tr><td><code>bigint</code></td><td>8字节</td><td>大范围整数</td><td>-9223372036854775808 to +9223372036854775807</td></tr><tr><td><code>decimal</code></td><td>可变</td><td>用户指定精度，精确</td><td>最高小数点前131072位，以及小数点后16383位</td></tr><tr><td><code>numeric</code></td><td>可变</td><td>用户指定精度，精确</td><td>最高小数点前131072位，以及小数点后16383位</td></tr><tr><td><code>real</code></td><td>4字节</td><td>可变精度，不精确</td><td>6位十进制精度</td></tr><tr><td><code>double precision</code></td><td>8字节</td><td>可变精度，不精确</td><td>15位十进制精度</td></tr><tr><td><code>smallserial</code></td><td>2字节</td><td>自动增加的小整数</td><td>1到32767</td></tr><tr><td><code>serial</code></td><td>4字节</td><td>自动增加的整数</td><td>1到2147483647</td></tr><tr><td><code>bigserial</code></td><td>8字节</td><td>自动增长的大整数</td><td>1到9223372036854775807</td></tr></tbody></table><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>类型<code>smallint</code>、<code>integer</code>和<code>bigint</code>存储各种范围的全部是数字的数，也就是没有小数部分的数字。试图存储超出范围以外的值将导致一个错误。</p><p>常用的类型是<code>integer</code>，因为它提供了在范围、存储空间和性能之间的最佳平衡。一般只有在磁盘空间紧张的时候才使用 <code>smallint</code>类型。而只有在<code>integer</code>的范围不够的时候才使用<code>bigint</code>。</p><p>SQL只声明了整数类型<code>integer</code>（或<code>int</code>）、<code>smallint</code>和<code>bigint</code>。类型<code>int2</code>、<code>int4</code>和<code>int8</code>都是扩展，也在许多其它SQL数据库系统中使用。</p><h3 id="任意精度数字"><a href="#任意精度数字" class="headerlink" title="任意精度数字"></a>任意精度数字</h3><p>类型<code>numeric</code>可以存储非常多位的数字。我们<font color='red'>特别建议将它用于货币金额和其它要求计算准确的数量。</font></p><p><code>numeric</code>值的计算在可能的情况下会得到准确的结果，例如加法、减法、乘法。</p><p>不过，<code>numeric</code>类型上的算术运算比整数类型浮点数类型要<font color='red'>慢很多</font>。</p><p><code>numeric</code>类型具有<em>precision</em>（精度）和 <em>scale</em>（刻度）两个概念：</p><ol><li>一个<code>numeric</code>的<em>precision</em>（精度）是整个数中有效位的总数  ，也就是小数点两边的位数。 </li><li><code>numeric</code>的<em>scale</em>（刻度）是小数部分的数字位数，也就是小数点右边的部分。 </li></ol><p>例如：数字 23.5141 的精度为6而刻度为4。可以认为整数的刻度为零。</p><p><code>numeric</code>列的最大精度和最大比例都是可以配置的。要声明一个类型为<code>numeric</code>的列，你可以用下面的语法：</p><p><font color='red'>精度必须为正数，比例可以为零或者正数。 </font> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NUMERIC(precision, scale)</span><br><span class="line">NUMERIC(precision) / NUMERIC</span><br></pre></td></tr></table></figure><p><font color='red'> 创建一个列时不使用精度或比例，则该列可以存储任何精度和比例的数字值，并且值的范围最多可以到实现精度的上限。  </font></p><blockquote><p><strong><em>注意</em></strong></p><p>如果一个要存储的值的比例比列声明的比例高，那么系统将尝试圆整（四舍五入）该值到指定的分数位数。</p><p> 然后，如果小数点左边的位数超过了声明的精度减去声明的比例，那么抛出一个错误。</p><p>除了普通的数字值之外，<code>numeric</code>类型允许特殊值<code>NaN</code>， 表示“不是一个数字”。</p><p>任何在 <code>NaN</code>上面的操作都生成另外一个<code>NaN</code>。 </p><p>如果在 SQL 命令里把这些值当作一个常量写，你必须在其周围放上单引号，例如<code>UPDATE table SET x = &#39;NaN&#39;</code>。</p><p>在输入时，字串<code>NaN</code>被识别为大小写无关。  </p></blockquote><hr><h2 id="序数类型"><a href="#序数类型" class="headerlink" title="序数类型"></a>序数类型</h2><p>序数类型是PostgreSQL特有的创建一个自增列的方法。</p><p><code>smallserial</code>、<code>serial</code>和<code>bigserial</code>类型不是真正的类型，它们只是为了创建唯一标识符列而存在的方便符号（类似其它一些数据库中支持的<code>AUTO_INCREMENT</code>属性）。 </p><p>创建一个叙述类型：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename (</span><br><span class="line"> colname <span class="built_in">SERIAL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>他等价于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SEQUENCE</span> tablename_colname_seq;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename (</span><br><span class="line"> colname <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">nextval</span>(<span class="string">&#x27;tablename_colname_seq&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SEQUENCE</span> tablename_colname_seq OWNED <span class="keyword">BY</span> tablename.colname;</span><br></pre></td></tr></table></figure><p>因此，我们就创建了一个整数列并且把它的缺省值安排为从一个序列发生器取值。</p><p>应用了一个<code>NOT NULL</code>约束以确保空值不会被插入。最后，该序列被标记为“属于”该列，这样当列或表被删除时该序列也会被删除。 </p><p>当我们使用<code>\t tablename</code>查看表结构中的序数类型时，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  栏位   |  类型   | 校对规则 |  可空的  |                    预设</span><br><span class="line">---------+---------+----------+----------+--------------------------------------------</span><br><span class="line"> colname | integer |          | not null | nextval(&#39;tablename_colname_seq&#39;::regclass)</span><br></pre></td></tr></table></figure><hr><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>character varying(n), varchar(n)</td><td>有限制的变长</td></tr><tr><td>character(n), char(n)</td><td>定长，空格填充</td></tr><tr><td>text</td><td>无限变长</td></tr></tbody></table><p>SQL定义了两种基本的字符类型： character varying(n), varchar(n)和character(n), char(n)。</p><p>其中*<code>n</code><em>是一个正整数。两种类型都可以存储最多</em><code>n</code>*个字符长的串。试图存储更长的串到这些类型的列里会产生一个错误， 除非超出长度的字符都是空白，这种情况下该串将被截断为最大长度（这个看上去有点怪异的例外是SQL标准要求的）。</p><p><font color='red'> 如果要存储的串比声明的长度短，类型为<code>character</code>的值将会用空白填满；而类型为<code>character varying</code>的值将只是存储短些的串。</font></p><p>另外，PostgreSQL提供<code>text</code>类型，它可以存储任何长度的串。尽管类型<code>text</code>不是SQL标准，但是许多其它 SQL 数据库系统也有它。</p><p>该如何选择这三种类型？</p><p>这三种类型之间没有性能差别，只不过是在使用填充空白的类型的时候需要更多存储尺寸，以及在存储到一个有长度约束的列时需要少量额外CPU周期来检查长度。虽然在某些其它的数据库系统里，<code>character(n)</code>有一定的性能优势，但在PostgreSQL里没有。事实上，<code>character(n)</code>通常是这三种类型之中最慢的一个，<font color='red'>因为它需要额外的存储开销。</font>在大多数情况下，应该使用<code>text</code>或者<code>character varying</code>。 </p><hr><h1 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> weather (</span><br><span class="line"> city            <span class="built_in">varchar</span>(<span class="number">80</span>),</span><br><span class="line"> temp_lo         <span class="built_in">int</span>,           <span class="comment">-- 最低温度</span></span><br><span class="line"> temp_hi         <span class="built_in">int</span>,           <span class="comment">-- 最高温度</span></span><br><span class="line"> prcp            <span class="built_in">real</span>,          <span class="comment">-- 湿度</span></span><br><span class="line"> <span class="built_in">date</span>            <span class="built_in">date</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cities (</span><br><span class="line"> <span class="keyword">name</span>            <span class="built_in">varchar</span>(<span class="number">80</span>),</span><br><span class="line"> location        point</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- varchar(80)指定了一个可以存储最长 80 个字符的任意字符串的数据类型。int是普通的整数类型。real是一种用于存储单精度浮点数的类型。</span></span><br></pre></td></tr></table></figure><h2 id="copy命令"><a href="#copy命令" class="headerlink" title="copy命令"></a>copy命令</h2><p>copy命令可以将文件数据输入到表，也可以将表的数据输出到文件。</p><p>这里只介绍了将文件的数据导入表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">COPY table_name [ ( column_name [, ...] ) ]</span><br><span class="line"> FROM &#123; &#x27;filename&#x27; | PROGRAM &#x27;command&#x27; | STDIN &#125;</span><br><span class="line"> [ [ <span class="keyword">WITH</span> ] ( <span class="keyword">option</span> [, ...] ) ]</span><br><span class="line"><span class="comment">-- 其中 option 可以是下列之一：</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">FORMAT</span> format_name</span><br><span class="line"> OIDS [ <span class="built_in">boolean</span> ]</span><br><span class="line"> FREEZE [ <span class="built_in">boolean</span> ]</span><br><span class="line"> DELIMITER <span class="string">&#x27;delimiter_character&#x27;</span></span><br><span class="line"> <span class="literal">NULL</span> <span class="string">&#x27;null_string&#x27;</span></span><br><span class="line"> HEADER [ <span class="built_in">boolean</span> ]</span><br><span class="line"> QUOTE <span class="string">&#x27;quote_character&#x27;</span></span><br><span class="line"> ESCAPE <span class="string">&#x27;escape_character&#x27;</span></span><br><span class="line"> FORCE_QUOTE &#123; ( column_name [, ...] ) | * &#125;</span><br><span class="line"> FORCE_NOT_NULL ( column_name [, ...] )</span><br><span class="line"> FORCE_NULL ( column_name [, ...] )</span><br><span class="line"> <span class="keyword">ENCODING</span> <span class="string">&#x27;encoding_name&#x27;</span></span><br></pre></td></tr></table></figure><p>常用参数解释：</p><p><em><code>filename</code></em></p><p>输入或者输出文件的路径名。一个输入文件的名称可以是一个绝对或相对路径， 但一个输出文件的名称必须是绝对路径。Windows 用户可能需要使用一个 <code>E&#39;&#39;</code>字符串并且双写路径名称中使用的任何反斜线。</p><p><em><code>FORMAT</code></em><br>选择要读取或者写入的数据格式： text、 csv（逗号分隔值）或者binary。 默认是text。</p><p><em><code>OIDS</code></em></p><p>指定为每一行复制 OID（如果为一个没有 OID 的表指定了 <code>OIDS</code>或者正在复制的是一个*<code>查询</code>*，则会出现错误）</p><p><em><code>DELIMITER</code></em></p><p>指定分隔文件每行中各列的字符。文本格式中默认是一个制表符， 而CSV格式中默认是一个逗号。这必须是一个单一 的单字节字符。使用binary格式时不允许这个选项</p><p><em><code>NULL</code></em></p><p>指定表示一个空值的字符串。文本格式中默认是 <code>\N</code>（反斜线-N），<code>CSV</code>格式中默认 是一个未加引用的空串。在你不想区分空值和空串的情况下，即使在文本 格式中你也可能更喜欢空串。使用<code>binary</code>格式时不允许这 个选项。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 简单例子</span></span><br><span class="line">copy cities from &#x27;D:/ttx.txt&#x27;</span><br><span class="line">DELIMITER &#x27;@&#x27;;</span><br></pre></td></tr></table></figure><hr><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>假设天气记录和城市为止的组合列表对我们的应用有用，但我们又不想每次需要使用它时都敲入整个查询。</p><p>我们可以在该查询上创建一个<em>视图</em>，这会给该查询一个名字，我们可以像使用一个普通表一样来使用它： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview <span class="keyword">AS</span></span><br><span class="line"> <span class="keyword">SELECT</span> city, temp_lo, temp_hi, prcp, <span class="built_in">date</span>, location</span><br><span class="line">     <span class="keyword">FROM</span> weather, cities</span><br><span class="line">     <span class="keyword">WHERE</span> city = <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myview;</span><br></pre></td></tr></table></figure><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>我们希望确保在<code>cities</code>表中有相应项之前任何人都不能在<code>weather</code>表中插入行。这叫做维持数据的<em>引用完整性</em>。 </p><p>这时使用外键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cities (</span><br><span class="line">     city     <span class="built_in">varchar</span>(<span class="number">80</span>) primary <span class="keyword">key</span>,</span><br><span class="line">     location point</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> weather (</span><br><span class="line">     city      <span class="built_in">varchar</span>(<span class="number">80</span>) <span class="keyword">references</span> cities(city),</span><br><span class="line">     temp_lo   <span class="built_in">int</span>,</span><br><span class="line">     temp_hi   <span class="built_in">int</span>,</span><br><span class="line">     prcp      <span class="built_in">real</span>,</span><br><span class="line">     <span class="built_in">date</span>      <span class="built_in">date</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这时如果直接插入weather表数据，则：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> weather <span class="keyword">VALUES</span> (<span class="string">&#x27;Berkeley&#x27;</span>, <span class="number">45</span>, <span class="number">53</span>, <span class="number">0.0</span>, <span class="string">&#x27;1994-11-28&#x27;</span>);</span><br></pre></td></tr></table></figure><p>error：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">on</span> <span class="keyword">table</span> <span class="string">&quot;weather&quot;</span> violates <span class="keyword">foreign</span> <span class="keyword">key</span> <span class="keyword">constraint</span> <span class="string">&quot;weather_city_fkey&quot;</span></span><br><span class="line">DETAIL:  <span class="keyword">Key</span> (city)=(Berkeley) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">present</span> <span class="keyword">in</span> <span class="keyword">table</span> <span class="string">&quot;cities&quot;</span>.</span><br></pre></td></tr></table></figure><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><p><a href="https://www.postgresql.org/download/"></a></p><hr><h1 id="数据库角色"><a href="#数据库角色" class="headerlink" title="数据库角色"></a>数据库角色</h1><p>PostgreSQL使用<em>角色</em>的概念管理数据库访问权限。</p><p>一个角色可以被看成是一个数据库用户或者是一个数据库用户组，这取决于角色被怎样设置。角色可以拥有数据库对象（例如，表和函数）并且能够把那些对象上的权限赋予给其他角色来控制谁能访问哪些对象。</p><p>此外，还可以把一个角色中的<em>成员资格</em>授予给另一个角色，这样允许成员角色使用被赋予给另一个角色的权限。 </p><h2 id="创建角色"><a href="#创建角色" class="headerlink" title="创建角色"></a>创建角色</h2><p>要创建一个角色，可使用CREATE ROLE SQL 命令： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROLE</span> zxj;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">ROLE</span> zxj;</span><br></pre></td></tr></table></figure><p>查看已存在的角色：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\du</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">角色名称 |                    属性                    | 成员属于</span><br><span class="line"><span class="comment">----------+--------------------------------------------+----------</span></span><br><span class="line">name     | 无法登录                                   | &#123;&#125;</span><br><span class="line">postgres | 超级用户, 建立角色, 建立 DB, 复制, 绕过RLS | &#123;&#125;</span><br><span class="line">zxj      | 无法登录                                   | &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="角色属性"><a href="#角色属性" class="headerlink" title="角色属性"></a>角色属性</h2><p>一个数据库角色可以有一些属性，它们定义角色的权限并且与客户端认证系统交互。 </p><p>常见的数据库角色属性有：</p><ol><li>*<code>login privilege</code>*：只有具有<code>LOGIN</code>属性的角色才能被用于一个数据库连接的初始角色名称。<font color='red'>想要登录还必须设置password</font></li><li>*<code>superuser status</code>*：数据库超级用户，它会绕开所有权限检查，除了登入的权利。只有超级用户posgres才有权力创建此属性的用户</li><li>*<code>database creation</code>*：创建数据库，一个角色必须被显式给予权限才能创建数据库（除了超级用户，因为它们会绕开所有权限检查）。</li><li>*<code>role creation</code>*：创建角色，一个角色必须被显式给予权限才能创建更多角色（除了超级用户，因为它们会绕开所有权限检查）。一个带有CREATEROLE权限的角色也可以修改和删除其他角色，还可以授予或回收角色中的成员关系。</li><li>*<code>initiating replication</code>*：一个角色必须被显式给予权限才能发起流复制（除了超级用户，因为它们会绕开所有权限检查）。一个被用于流复制的角色必须也具有<code>LOGIN</code>权限。</li><li>*<code>password</code>*：给用户设置密码，只有当客户端认证方法要求用户在连接数据库时提供一个口令时，一个口令才有意义。<code>password</code>和<code>md5</code>认证方法使用口令。</li></ol><p>如何创建上述角色：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- LOGIN</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROLE</span> <span class="keyword">name</span> LOGIN;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- superuser status</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROLE</span> <span class="keyword">name</span> SUPERUSER;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- database creation</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROLE</span> <span class="keyword">name</span> CREATEDB;</span><br><span class="line"></span><br><span class="line"><span class="comment">--  role creation</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROLE</span> <span class="keyword">name</span> CREATEROL;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- initiating replication</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROLE</span> <span class="keyword">name</span> <span class="keyword">REPLICATION</span> LOGIN;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- password</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROLE</span> <span class="keyword">name</span> <span class="keyword">PASSWORD</span> <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一般创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROLE</span> <span class="keyword">name</span> LOGIN CREATEDB <span class="keyword">PASSWORD</span> <span class="string">&#x27;string&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
